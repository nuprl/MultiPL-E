language: swift
name: HumanEval_135_can_arrange
results:
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp9dyvulbr/tmp9dyvulbr.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7987797c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b798748eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b798748e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b798748d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9dyvulbr                        0x000055666bbfe552 <unavailable> + 5458

    5    libc.so.6                          0x00002b7987983460 __libc_start_main +
    245

    6    tmp9dyvulbr                        0x000055666bbfe1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8zw8sm6h/tmp8zw8sm6h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da9ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da97bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da97bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da97bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw8sm6h                        0x0000560534549552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da9cb1460 __libc_start_main +
    245

    6    tmp8zw8sm6h                        0x00005605345491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ <= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmps_m96yu7/tmps_m96yu7.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b99be971c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99be668b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b99be668988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99be6677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps_m96yu7                        0x000055c0cc93461f <unavailable> + 5663

    5    libc.so.6                          0x00002b99beb5d460 __libc_start_main +
    245

    6    tmps_m96yu7                        0x000055c0cc9341a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var index = arr.count - 1\n    while index > 0 {\n        if arr[index]\
    \ < arr[index - 1] {\n            return index - 1\n        }\n        index -=\
    \ 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpln8u3o8s/tmpln8u3o8s.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ffa264c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ff9f5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ff9f5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ff9f5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpln8u3o8s                        0x000055604ed443c2 <unavailable> + 5058

    5    libc.so.6                          0x00002b4ffa450460 __libc_start_main +
    245

    6    tmpln8u3o8s                        0x000055604ed44019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ > arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmps06azgu1/tmps06azgu1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6104dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6101d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6101d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6101d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps06azgu1                        0x00005573751b7552 <unavailable> + 5458

    5    libc.so.6                          0x00002ba6106cb460 __libc_start_main +
    245

    6    tmps06azgu1                        0x00005573751b71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max_index = -1\n    for i in 0..<arr.count - 1 {\n       \
    \ if arr[i] > arr[i + 1] {\n            max_index = i\n        }\n    }\n    return\
    \ max_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdqfsz_kf/tmpdqfsz_kf.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5d9f41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5d9c38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5d9c38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5d9c377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdqfsz_kf                        0x0000561f5c841552 <unavailable> + 5458

    5    libc.so.6                          0x00002af5da12d460 __libc_start_main +
    245

    6    tmpdqfsz_kf                        0x0000561f5c8411a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if\
    \ arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp5bvt23bn/tmp5bvt23bn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e0ae30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e0ab27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e0ab27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e0ab267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5bvt23bn                        0x000056117af4e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9e0b01c460 __libc_start_main +
    245

    6    tmp5bvt23bn                        0x000056117af4e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpi0kzu4zw/tmpi0kzu4zw.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b401f74fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b401f446b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b401f446988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b401f4457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi0kzu4zw                        0x0000560c88070552 <unavailable> + 5458

    5    libc.so.6                          0x00002b401f93b460 __libc_start_main +
    245

    6    tmpi0kzu4zw                        0x0000560c880701a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if\
    \ arr[i] <= arr[i + 1] {\n            maxIndex = i + 1\n        }\n    }\n   \
    \ return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp52lmv2cn/tmp52lmv2cn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb61cafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb619a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb619a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb619a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp52lmv2cn                        0x0000563c1b620552 <unavailable> + 5458

    5    libc.so.6                          0x00002aeb61e9b460 __libc_start_main +
    245

    6    tmp52lmv2cn                        0x0000563c1b6201a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprqqu_q1z/tmprqqu_q1z.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b562a2dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5629fd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5629fd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5629fd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprqqu_q1z                        0x000055ebc8836552 <unavailable> + 5458

    5    libc.so.6                          0x00002b562a4cb460 __libc_start_main +
    245

    6    tmprqqu_q1z                        0x000055ebc88361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpno8d6t32/tmpno8d6t32.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55cbd56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55cba4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55cba4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55cba4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpno8d6t32                        0x000055ea4bd88552 <unavailable> + 5458

    5    libc.so.6                          0x00002b55cbf42460 __libc_start_main +
    245

    6    tmpno8d6t32                        0x000055ea4bd881a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmptqqcrhz3/tmptqqcrhz3.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b888ecb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b888e9a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b888e9a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b888e9a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqqcrhz3                        0x0000557741f99552 <unavailable> + 5458

    5    libc.so.6                          0x00002b888ee9c460 __libc_start_main +
    245

    6    tmptqqcrhz3                        0x0000557741f991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprqqu_q1z/tmprqqu_q1z.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b562a2dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5629fd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5629fd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5629fd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprqqu_q1z                        0x000055ebc8836552 <unavailable> + 5458

    5    libc.so.6                          0x00002b562a4cb460 __libc_start_main +
    245

    6    tmprqqu_q1z                        0x000055ebc88361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8zw8sm6h/tmp8zw8sm6h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da9ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da97bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da97bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da97bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw8sm6h                        0x0000560534549552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da9cb1460 __libc_start_main +
    245

    6    tmp8zw8sm6h                        0x00005605345491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var index = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ > arr[i + 1] {\n            index = i\n        }\n    }\n    return index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpmjdyxvu2/tmpmjdyxvu2.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dd01b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dcfeadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dcfead988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dcfeac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmjdyxvu2                        0x00005572ac1ab552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0dd03a2460 __libc_start_main +
    245

    6    tmpmjdyxvu2                        0x00005572ac1ab1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprqqu_q1z/tmprqqu_q1z.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b562a2dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5629fd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5629fd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5629fd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprqqu_q1z                        0x000055ebc8836552 <unavailable> + 5458

    5    libc.so.6                          0x00002b562a4cb460 __libc_start_main +
    245

    6    tmprqqu_q1z                        0x000055ebc88361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    for i in 0..<arr.count {\n        if arr[i] >\
    \ arr[max] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmptqj2zgl3/tmptqj2zgl3.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a94d26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a94a1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a94a1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a94a1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqj2zgl3                        0x0000556801c99552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5a94f12460 __libc_start_main +
    245

    6    tmptqj2zgl3                        0x0000556801c991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if\
    \ arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp5bvt23bn/tmp5bvt23bn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e0ae30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e0ab27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e0ab27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e0ab267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5bvt23bn                        0x000056117af4e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9e0b01c460 __libc_start_main +
    245

    6    tmp5bvt23bn                        0x000056117af4e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if\
    \ arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp5bvt23bn/tmp5bvt23bn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e0ae30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e0ab27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e0ab27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e0ab267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5bvt23bn                        0x000056117af4e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9e0b01c460 __libc_start_main +
    245

    6    tmp5bvt23bn                        0x000056117af4e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    var maxValue = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n         \
    \   maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpsrd1a376/tmpsrd1a376.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1baa48bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1baa182b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1baa182988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1baa1817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsrd1a376                        0x00005628cbc0f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b1baa677460 __libc_start_main +
    245

    6    tmpsrd1a376                        0x00005628cbc0f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > arr[i - 1] {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b371467ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3714375561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3714375286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b371437513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3714374bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3714174e83 <unavailable> + 188035

    6    tmpyi7d1pmz                        0x000055eecb60fa4a <unavailable> + 6730

    7    tmpyi7d1pmz                        0x000055eecb60f4d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b371486a460 __libc_start_main +
    245

    9    tmpyi7d1pmz                        0x000055eecb60f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ > arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmps06azgu1/tmps06azgu1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6104dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6101d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6101d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6101d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps06azgu1                        0x00005573751b7552 <unavailable> + 5458

    5    libc.so.6                          0x00002ba6106cb460 __libc_start_main +
    245

    6    tmps06azgu1                        0x00005573751b71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var index = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            index = i\n        }\n    }\n    return index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpk_ybpcvy/tmpk_ybpcvy.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab74f305c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab74effcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab74effc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab74effb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk_ybpcvy                        0x00005619ec7e0552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab74f4f1460 __libc_start_main +
    245

    6    tmpk_ybpcvy                        0x00005619ec7e01a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp9dyvulbr/tmp9dyvulbr.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7987797c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b798748eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b798748e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b798748d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9dyvulbr                        0x000055666bbfe552 <unavailable> + 5458

    5    libc.so.6                          0x00002b7987983460 __libc_start_main +
    245

    6    tmp9dyvulbr                        0x000055666bbfe1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if\
    \ arr[i] <= arr[i + 1] {\n            maxIndex = i + 1\n        }\n    }\n   \
    \ return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp52lmv2cn/tmp52lmv2cn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb61cafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb619a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb619a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb619a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp52lmv2cn                        0x0000563c1b620552 <unavailable> + 5458

    5    libc.so.6                          0x00002aeb61e9b460 __libc_start_main +
    245

    6    tmp52lmv2cn                        0x0000563c1b6201a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ > arr[i + 1] {\n            if i > max {\n                max = i\n        \
    \    }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpkuia3iiq/tmpkuia3iiq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f6310dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f62e04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f62e04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f62e037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkuia3iiq                        0x000055aa03421552 <unavailable> + 5458

    5    libc.so.6                          0x00002b6f632f9460 __libc_start_main +
    245

    6    tmpkuia3iiq                        0x000055aa034211a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var index = -1\n    for i in 0..<arr.count {\n\
    \        if arr[i] > max {\n            max = arr[i]\n            index = i\n\
    \        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmplnijl7iu/tmplnijl7iu.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b509baa9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b509b7a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b509b7a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b509b79f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnijl7iu                        0x000055858c869552 <unavailable> + 5458

    5    libc.so.6                          0x00002b509bc95460 __libc_start_main +
    245

    6    tmplnijl7iu                        0x000055858c8691a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8zw8sm6h/tmp8zw8sm6h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da9ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da97bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da97bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da97bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw8sm6h                        0x0000560534549552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da9cb1460 __libc_start_main +
    245

    6    tmp8zw8sm6h                        0x00005605345491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max_index = -1\n    var max_value = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max_value {\n            max_value = arr[i]\n       \
    \     max_index = i\n        }\n    }\n    return max_index\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp6iiu0j_r/tmp6iiu0j_r.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7d0db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7d0aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7d0aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7d0aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6iiu0j_r                        0x0000564c2e1ea552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae7d0fa2460 __libc_start_main +
    245

    6    tmp6iiu0j_r                        0x0000564c2e1ea1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max_index = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > arr[i - 1] {\n            max_index = i\n        }\n    }\n    return max_index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b65469d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65466cd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65466cd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65466cd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65466ccbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b65464cce83 <unavailable> + 188035

    6    tmplnyl8c7m                        0x000055a060984a4a <unavailable> + 6730

    7    tmplnyl8c7m                        0x000055a0609844d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b6546bc2460 __libc_start_main +
    245

    9    tmplnyl8c7m                        0x000055a0609841a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpuovj7si4/tmpuovj7si4.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5afeb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5afbadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5afbad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5afbac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuovj7si4                        0x00005607554c9312 <unavailable> + 4882

    5    libc.so.6                          0x00002ab5b00a2460 __libc_start_main +
    245

    6    tmpuovj7si4                        0x00005607554c8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > arr[i - 1] {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b371467ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3714375561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3714375286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b371437513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3714374bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3714174e83 <unavailable> + 188035

    6    tmpyi7d1pmz                        0x000055eecb60fa4a <unavailable> + 6730

    7    tmpyi7d1pmz                        0x000055eecb60f4d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b371486a460 __libc_start_main +
    245

    9    tmpyi7d1pmz                        0x000055eecb60f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > maxValue {\n            maxIndex = i\n            maxValue\
    \ = arr[i]\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpqohde42t/tmpqohde42t.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8ffd45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8ffa3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8ffa3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8ffa3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqohde42t                        0x000055808d17f552 <unavailable> + 5458

    5    libc.so.6                          0x00002af8fff31460 __libc_start_main +
    245

    6    tmpqohde42t                        0x000055808d17f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp9dyvulbr/tmp9dyvulbr.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7987797c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b798748eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b798748e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b798748d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9dyvulbr                        0x000055666bbfe552 <unavailable> + 5458

    5    libc.so.6                          0x00002b7987983460 __libc_start_main +
    245

    6    tmp9dyvulbr                        0x000055666bbfe1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max_index = -1\n    for i in 1..<arr.count {\n        if arr[i]\
    \ <= arr[i - 1] {\n            max_index = i\n        }\n    }\n    return max_index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ed5e7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ed5b74561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7ed5b74286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7ed5b7413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7ed5b73bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp8gd7uym6                        0x000055e0c62769c2 <unavailable> + 6594

    6    tmp8gd7uym6                        0x000055e0c627681c <unavailable> + 6172

    7    libc.so.6                          0x00002b7ed6069460 __libc_start_main +
    245

    8    tmp8gd7uym6                        0x000055e0c62761a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if\
    \ arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp5bvt23bn/tmp5bvt23bn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e0ae30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e0ab27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e0ab27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e0ab267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5bvt23bn                        0x000056117af4e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9e0b01c460 __libc_start_main +
    245

    6    tmp5bvt23bn                        0x000056117af4e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max_index = -1\n    for i in 0..<arr.count - 1 {\n       \
    \ if arr[i] >= arr[i + 1] {\n            continue\n        }\n        max_index\
    \ = i\n    }\n    return max_index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmp2cnphkiw/tmp2cnphkiw.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1498a3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1498733b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1498733988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14987327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2cnphkiw                        0x00005642d765f61f <unavailable> + 5663

    5    libc.so.6                          0x00002b1498c28460 __libc_start_main +
    245

    6    tmp2cnphkiw                        0x00005642d765f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmptqqcrhz3/tmptqqcrhz3.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b888ecb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b888e9a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b888e9a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b888e9a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqqcrhz3                        0x0000557741f99552 <unavailable> + 5458

    5    libc.so.6                          0x00002b888ee9c460 __libc_start_main +
    245

    6    tmptqqcrhz3                        0x0000557741f991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 1..<arr.count {\n        if arr[i]\
    \ <= arr[i - 1] {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b10888f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10885e7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b10885e7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b10885e713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b10885e6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpwiagzexm                        0x0000562d9c8a19c2 <unavailable> + 6594

    6    tmpwiagzexm                        0x0000562d9c8a181c <unavailable> + 6172

    7    libc.so.6                          0x00002b1088adc460 __libc_start_main +
    245

    8    tmpwiagzexm                        0x0000562d9c8a11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmptqqcrhz3/tmptqqcrhz3.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b888ecb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b888e9a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b888e9a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b888e9a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqqcrhz3                        0x0000557741f99552 <unavailable> + 5458

    5    libc.so.6                          0x00002b888ee9c460 __libc_start_main +
    245

    6    tmptqqcrhz3                        0x0000557741f991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    if arr.count == 0 {\n        return -1\n    }\n    var max = arr[0]\n\
    \    var maxIndex = 0\n    for i in 1..<arr.count {\n        if arr[i] > max {\n\
    \            max = arr[i]\n            maxIndex = i\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmppvv5otyi/tmppvv5otyi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fba2a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fb9f9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fb9f9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fb9f9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvv5otyi                        0x000056177687d552 <unavailable> + 5458

    5    libc.so.6                          0x00002b7fba493460 __libc_start_main +
    245

    6    tmppvv5otyi                        0x000056177687d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max_index = -1\n    for i in 0..<arr.count - 1 {\n       \
    \ if arr[i] >= arr[i + 1] {\n            max_index = i\n        }\n    }\n   \
    \ return max_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8jtmqf4b/tmp8jtmqf4b.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac19be23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac19bb1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac19bb1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac19bb197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8jtmqf4b                        0x000055ed8c734552 <unavailable> + 5458

    5    libc.so.6                          0x00002ac19c00f460 __libc_start_main +
    245

    6    tmp8jtmqf4b                        0x000055ed8c7341a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if\
    \ arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp5bvt23bn/tmp5bvt23bn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e0ae30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e0ab27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e0ab27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e0ab267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5bvt23bn                        0x000056117af4e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9e0b01c460 __libc_start_main +
    245

    6    tmp5bvt23bn                        0x000056117af4e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    let n = arr.count\n    var max_index = -1\n    for i in 0..<n-1\
    \ {\n        if arr[i] >= arr[i+1] {\n            max_index = i\n        }\n \
    \   }\n    return max_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpx1qs7yc1/tmpx1qs7yc1.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c7862ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c78325b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c78325988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c783247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx1qs7yc1                        0x000055dc02ea4552 <unavailable> + 5458

    5    libc.so.6                          0x00002b4c7881a460 __libc_start_main +
    245

    6    tmpx1qs7yc1                        0x000055dc02ea41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var arr = arr\n    arr.sort()\n    var index = -1\n    for i in\
    \ 0..<arr.count - 1 {\n        if arr[i] != arr[i + 1] {\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmp20ctu_kh/tmp20ctu_kh.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8746b33c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b874682ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b874682a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87468297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp20ctu_kh                        0x000055fc829da73f <unavailable> + 5951

    5    libc.so.6                          0x00002b8746d1f460 __libc_start_main +
    245

    6    tmp20ctu_kh                        0x000055fc829da2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8zw8sm6h/tmp8zw8sm6h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da9ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da97bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da97bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da97bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw8sm6h                        0x0000560534549552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da9cb1460 __libc_start_main +
    245

    6    tmp8zw8sm6h                        0x00005605345491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8zw8sm6h/tmp8zw8sm6h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da9ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da97bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da97bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da97bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw8sm6h                        0x0000560534549552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da9cb1460 __libc_start_main +
    245

    6    tmp8zw8sm6h                        0x00005605345491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var largest_index = -1\n    for i in 0..<arr.count - 1 {\n   \
    \     if arr[i] >= arr[i + 1] {\n            largest_index = i\n        }\n  \
    \  }\n    return largest_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwfq7pc_y/tmpwfq7pc_y.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1aa9252c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1aa8f49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1aa8f49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1aa8f487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwfq7pc_y                        0x000055e09b753552 <unavailable> + 5458

    5    libc.so.6                          0x00002b1aa943e460 __libc_start_main +
    245

    6    tmpwfq7pc_y                        0x000055e09b7531a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ > arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmps06azgu1/tmps06azgu1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6104dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6101d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6101d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6101d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps06azgu1                        0x00005573751b7552 <unavailable> + 5458

    5    libc.so.6                          0x00002ba6106cb460 __libc_start_main +
    245

    6    tmps06azgu1                        0x00005573751b71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprqqu_q1z/tmprqqu_q1z.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b562a2dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5629fd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5629fd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5629fd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprqqu_q1z                        0x000055ebc8836552 <unavailable> + 5458

    5    libc.so.6                          0x00002b562a4cb460 __libc_start_main +
    245

    6    tmprqqu_q1z                        0x000055ebc88361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max_index = -1\n    var max_value = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max_value {\n            max_value = arr[i]\n       \
    \     max_index = i\n        }\n    }\n    return max_index\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpp2yudy3b/tmpp2yudy3b.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b306a2d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3069fc7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3069fc7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3069fc67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp2yudy3b                        0x000055b03383a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b306a4bc460 __libc_start_main +
    245

    6    tmpp2yudy3b                        0x000055b03383a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    for i in 0..<arr.count {\n        if arr[i] >\
    \ arr[max] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmptqj2zgl3/tmptqj2zgl3.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a94d26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a94a1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a94a1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a94a1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqj2zgl3                        0x0000556801c99552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5a94f12460 __libc_start_main +
    245

    6    tmptqj2zgl3                        0x0000556801c991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var index = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            index = i\n        }\n    }\n    return index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpk_ybpcvy/tmpk_ybpcvy.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab74f305c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab74effcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab74effc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab74effb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk_ybpcvy                        0x00005619ec7e0552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab74f4f1460 __libc_start_main +
    245

    6    tmpk_ybpcvy                        0x00005619ec7e01a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ <= arr[maxIndex] {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002baa7e57ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa7e275561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002baa7e275286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002baa7e27513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002baa7e274bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002baa7e074e83 <unavailable> + 188035

    6    tmp4nul122y                        0x0000563bbc6cda28 <unavailable> + 6696

    7    tmp4nul122y                        0x0000563bbc6cd4d4 <unavailable> + 5332

    8    libc.so.6                          0x00002baa7e76a460 __libc_start_main +
    245

    9    tmp4nul122y                        0x0000563bbc6cd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprqqu_q1z/tmprqqu_q1z.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b562a2dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5629fd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5629fd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5629fd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprqqu_q1z                        0x000055ebc8836552 <unavailable> + 5458

    5    libc.so.6                          0x00002b562a4cb460 __libc_start_main +
    245

    6    tmprqqu_q1z                        0x000055ebc88361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmptqqcrhz3/tmptqqcrhz3.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b888ecb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b888e9a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b888e9a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b888e9a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqqcrhz3                        0x0000557741f99552 <unavailable> + 5458

    5    libc.so.6                          0x00002b888ee9c460 __libc_start_main +
    245

    6    tmptqqcrhz3                        0x0000557741f991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var result = -1\n    for i in 0..<arr.count - 1 {\n        if\
    \ arr[i] >= arr[i + 1] {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmplh1478nd/tmplh1478nd.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7210c95c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b721098cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b721098c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b721098b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplh1478nd                        0x0000555fe9811552 <unavailable> + 5458

    5    libc.so.6                          0x00002b7210e81460 __libc_start_main +
    245

    6    tmplh1478nd                        0x0000555fe98111a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8zw8sm6h/tmp8zw8sm6h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da9ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da97bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da97bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da97bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw8sm6h                        0x0000560534549552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da9cb1460 __libc_start_main +
    245

    6    tmp8zw8sm6h                        0x00005605345491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmptqqcrhz3/tmptqqcrhz3.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b888ecb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b888e9a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b888e9a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b888e9a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqqcrhz3                        0x0000557741f99552 <unavailable> + 5458

    5    libc.so.6                          0x00002b888ee9c460 __libc_start_main +
    245

    6    tmptqqcrhz3                        0x0000557741f991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8zw8sm6h/tmp8zw8sm6h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da9ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da97bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da97bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da97bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw8sm6h                        0x0000560534549552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da9cb1460 __libc_start_main +
    245

    6    tmp8zw8sm6h                        0x00005605345491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8zw8sm6h/tmp8zw8sm6h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da9ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da97bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da97bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da97bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw8sm6h                        0x0000560534549552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da9cb1460 __libc_start_main +
    245

    6    tmp8zw8sm6h                        0x00005605345491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > arr[i - 1] {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b371467ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3714375561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3714375286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b371437513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3714374bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3714174e83 <unavailable> + 188035

    6    tmpyi7d1pmz                        0x000055eecb60fa4a <unavailable> + 6730

    7    tmpyi7d1pmz                        0x000055eecb60f4d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b371486a460 __libc_start_main +
    245

    9    tmpyi7d1pmz                        0x000055eecb60f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8zw8sm6h/tmp8zw8sm6h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da9ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da97bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da97bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da97bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw8sm6h                        0x0000560534549552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da9cb1460 __libc_start_main +
    245

    6    tmp8zw8sm6h                        0x00005605345491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp9dyvulbr/tmp9dyvulbr.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7987797c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b798748eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b798748e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b798748d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9dyvulbr                        0x000055666bbfe552 <unavailable> + 5458

    5    libc.so.6                          0x00002b7987983460 __libc_start_main +
    245

    6    tmp9dyvulbr                        0x000055666bbfe1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if\
    \ arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp5bvt23bn/tmp5bvt23bn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e0ae30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e0ab27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e0ab27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e0ab267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5bvt23bn                        0x000056117af4e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9e0b01c460 __libc_start_main +
    245

    6    tmp5bvt23bn                        0x000056117af4e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > arr[i - 1] {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b371467ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3714375561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3714375286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b371437513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3714374bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3714174e83 <unavailable> + 188035

    6    tmpyi7d1pmz                        0x000055eecb60fa4a <unavailable> + 6730

    7    tmpyi7d1pmz                        0x000055eecb60f4d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b371486a460 __libc_start_main +
    245

    9    tmpyi7d1pmz                        0x000055eecb60f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprqqu_q1z/tmprqqu_q1z.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b562a2dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5629fd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5629fd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5629fd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprqqu_q1z                        0x000055ebc8836552 <unavailable> + 5458

    5    libc.so.6                          0x00002b562a4cb460 __libc_start_main +
    245

    6    tmprqqu_q1z                        0x000055ebc88361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max_index = -1\n    var max_value = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < max_value {\n            max_index = i\n        } else\
    \ {\n            max_value = arr[i]\n        }\n    }\n    return max_index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b971b744c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b971b43b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b971b43b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b971b43b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b971b43abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b971b23ae83 <unavailable> + 188035

    6    tmp1uiecijy                        0x00005640d1fca93a <unavailable> + 6458

    7    tmp1uiecijy                        0x00005640d1fca81c <unavailable> + 6172

    8    libc.so.6                          0x00002b971b930460 __libc_start_main +
    245

    9    tmp1uiecijy                        0x00005640d1fca1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    guard arr.count > 1 else { return -1 }\n    var maxIndex = 0\n\
    \    for i in 1..<arr.count {\n        if arr[i] < arr[i - 1] {\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpegclw_si/tmpegclw_si.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13fea2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13fe724b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13fe724988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13fe7237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegclw_si                        0x0000562c3ee9661f <unavailable> + 5663

    5    libc.so.6                          0x00002b13fec19460 __libc_start_main +
    245

    6    tmpegclw_si                        0x0000562c3ee961a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprqqu_q1z/tmprqqu_q1z.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b562a2dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5629fd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5629fd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5629fd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprqqu_q1z                        0x000055ebc8836552 <unavailable> + 5458

    5    libc.so.6                          0x00002b562a4cb460 __libc_start_main +
    245

    6    tmprqqu_q1z                        0x000055ebc88361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max_index = -1\n    for i in 0..<arr.count - 1 {\n       \
    \ if arr[i] >= arr[i + 1] {\n            continue\n        }\n        max_index\
    \ = i\n    }\n    return max_index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmp2cnphkiw/tmp2cnphkiw.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1498a3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1498733b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1498733988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14987327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2cnphkiw                        0x00005642d765f61f <unavailable> + 5663

    5    libc.so.6                          0x00002b1498c28460 __libc_start_main +
    245

    6    tmp2cnphkiw                        0x00005642d765f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max_index = -1\n    var max_value = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max_value {\n            max_value = arr[i]\n       \
    \     max_index = i\n        }\n    }\n    return max_index\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpp2yudy3b/tmpp2yudy3b.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b306a2d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3069fc7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3069fc7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3069fc67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp2yudy3b                        0x000055b03383a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b306a4bc460 __libc_start_main +
    245

    6    tmpp2yudy3b                        0x000055b03383a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var index = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ > arr[i + 1] {\n            index = i\n        }\n    }\n    return index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpmjdyxvu2/tmpmjdyxvu2.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dd01b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dcfeadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dcfead988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dcfeac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmjdyxvu2                        0x00005572ac1ab552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0dd03a2460 __libc_start_main +
    245

    6    tmpmjdyxvu2                        0x00005572ac1ab1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var arr = arr\n    arr.sort()\n    var max = 0\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            return i - 1\n        }\n        max\
    \ = arr[i]\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpqwmddt1z/tmpqwmddt1z.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc3a589c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc3a280b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc3a280988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc3a27f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqwmddt1z                        0x0000564550c27672 <unavailable> + 5746

    5    libc.so.6                          0x00002abc3a775460 __libc_start_main +
    245

    6    tmpqwmddt1z                        0x0000564550c272c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ <= arr[maxIndex] {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002baa7e57ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa7e275561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002baa7e275286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002baa7e27513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002baa7e274bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002baa7e074e83 <unavailable> + 188035

    6    tmp4nul122y                        0x0000563bbc6cda28 <unavailable> + 6696

    7    tmp4nul122y                        0x0000563bbc6cd4d4 <unavailable> + 5332

    8    libc.so.6                          0x00002baa7e76a460 __libc_start_main +
    245

    9    tmp4nul122y                        0x0000563bbc6cd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ < arr[i + 1] {\n            max = i + 1\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp69ihxbv4/tmp69ihxbv4.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80f26f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80f23e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80f23e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80f23e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp69ihxbv4                        0x000055c2d7069552 <unavailable> + 5458

    5    libc.so.6                          0x00002b80f28dd460 __libc_start_main +
    245

    6    tmp69ihxbv4                        0x000055c2d70691a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if\
    \ arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp5bvt23bn/tmp5bvt23bn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e0ae30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e0ab27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e0ab27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e0ab267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5bvt23bn                        0x000056117af4e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9e0b01c460 __libc_start_main +
    245

    6    tmp5bvt23bn                        0x000056117af4e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if\
    \ arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp5bvt23bn/tmp5bvt23bn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e0ae30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e0ab27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e0ab27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e0ab267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5bvt23bn                        0x000056117af4e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9e0b01c460 __libc_start_main +
    245

    6    tmp5bvt23bn                        0x000056117af4e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmptqqcrhz3/tmptqqcrhz3.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b888ecb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b888e9a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b888e9a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b888e9a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqqcrhz3                        0x0000557741f99552 <unavailable> + 5458

    5    libc.so.6                          0x00002b888ee9c460 __libc_start_main +
    245

    6    tmptqqcrhz3                        0x0000557741f991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if\
    \ arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp5bvt23bn/tmp5bvt23bn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e0ae30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e0ab27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e0ab27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e0ab267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5bvt23bn                        0x000056117af4e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9e0b01c460 __libc_start_main +
    245

    6    tmp5bvt23bn                        0x000056117af4e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp9dyvulbr/tmp9dyvulbr.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7987797c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b798748eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b798748e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b798748d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9dyvulbr                        0x000055666bbfe552 <unavailable> + 5458

    5    libc.so.6                          0x00002b7987983460 __libc_start_main +
    245

    6    tmp9dyvulbr                        0x000055666bbfe1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprqqu_q1z/tmprqqu_q1z.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b562a2dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5629fd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5629fd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5629fd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprqqu_q1z                        0x000055ebc8836552 <unavailable> + 5458

    5    libc.so.6                          0x00002b562a4cb460 __libc_start_main +
    245

    6    tmprqqu_q1z                        0x000055ebc88361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8zw8sm6h/tmp8zw8sm6h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da9ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da97bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da97bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da97bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw8sm6h                        0x0000560534549552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da9cb1460 __libc_start_main +
    245

    6    tmp8zw8sm6h                        0x00005605345491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max_index = -1\n    for i in 0..<arr.count - 1 {\n       \
    \ if arr[i] >= arr[i + 1] {\n            max_index = i\n        }\n    }\n   \
    \ return max_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8jtmqf4b/tmp8jtmqf4b.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac19be23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac19bb1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac19bb1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac19bb197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8jtmqf4b                        0x000055ed8c734552 <unavailable> + 5458

    5    libc.so.6                          0x00002ac19c00f460 __libc_start_main +
    245

    6    tmp8jtmqf4b                        0x000055ed8c7341a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var index = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            index = i\n        }\n    }\n    return index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpk_ybpcvy/tmpk_ybpcvy.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab74f305c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab74effcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab74effc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab74effb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk_ybpcvy                        0x00005619ec7e0552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab74f4f1460 __libc_start_main +
    245

    6    tmpk_ybpcvy                        0x00005619ec7e01a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8zw8sm6h/tmp8zw8sm6h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da9ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da97bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da97bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da97bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw8sm6h                        0x0000560534549552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da9cb1460 __libc_start_main +
    245

    6    tmp8zw8sm6h                        0x00005605345491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprqqu_q1z/tmprqqu_q1z.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b562a2dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5629fd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5629fd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5629fd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprqqu_q1z                        0x000055ebc8836552 <unavailable> + 5458

    5    libc.so.6                          0x00002b562a4cb460 __libc_start_main +
    245

    6    tmprqqu_q1z                        0x000055ebc88361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprqqu_q1z/tmprqqu_q1z.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b562a2dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5629fd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5629fd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5629fd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprqqu_q1z                        0x000055ebc8836552 <unavailable> + 5458

    5    libc.so.6                          0x00002b562a4cb460 __libc_start_main +
    245

    6    tmprqqu_q1z                        0x000055ebc88361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var arr = arr\n    arr.sort()\n    var index = -1\n    for i in\
    \ 0..<arr.count - 1 {\n        if arr[i] < arr[i + 1] {\n            index = i\n\
    \        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpm_yv875p/tmpm_yv875p.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50340fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5033df5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5033df5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5033df47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm_yv875p                        0x000055564bfac73f <unavailable> + 5951

    5    libc.so.6                          0x00002b50342ea460 __libc_start_main +
    245

    6    tmpm_yv875p                        0x000055564bfac2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var index = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            index = i\n        }\n    }\n    return index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpk_ybpcvy/tmpk_ybpcvy.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab74f305c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab74effcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab74effc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab74effb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk_ybpcvy                        0x00005619ec7e0552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab74f4f1460 __libc_start_main +
    245

    6    tmpk_ybpcvy                        0x00005619ec7e01a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp9dyvulbr/tmp9dyvulbr.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7987797c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b798748eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b798748e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b798748d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9dyvulbr                        0x000055666bbfe552 <unavailable> + 5458

    5    libc.so.6                          0x00002b7987983460 __libc_start_main +
    245

    6    tmp9dyvulbr                        0x000055666bbfe1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    var index = -1\n    for i in 0..<arr.count {\n\
    \        if arr[i] > max {\n            max = arr[i]\n            index = i\n\
    \        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpdxy46d2z/tmpdxy46d2z.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26c9f28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26c9c1fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26c9c1f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26c9c1e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdxy46d2z                        0x000055582f71b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26ca114460 __libc_start_main +
    245

    6    tmpdxy46d2z                        0x000055582f71b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if\
    \ arr[i] <= arr[i + 1] {\n            maxIndex = i + 1\n        }\n    }\n   \
    \ return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp52lmv2cn/tmp52lmv2cn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb61cafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb619a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb619a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb619a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp52lmv2cn                        0x0000563c1b620552 <unavailable> + 5458

    5    libc.so.6                          0x00002aeb61e9b460 __libc_start_main +
    245

    6    tmp52lmv2cn                        0x0000563c1b6201a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > maxValue {\n            maxIndex = i\n            maxValue\
    \ = arr[i]\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpqohde42t/tmpqohde42t.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8ffd45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8ffa3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8ffa3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8ffa3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqohde42t                        0x000055808d17f552 <unavailable> + 5458

    5    libc.so.6                          0x00002af8fff31460 __libc_start_main +
    245

    6    tmpqohde42t                        0x000055808d17f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ > arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmps06azgu1/tmps06azgu1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6104dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6101d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6101d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6101d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps06azgu1                        0x00005573751b7552 <unavailable> + 5458

    5    libc.so.6                          0x00002ba6106cb460 __libc_start_main +
    245

    6    tmps06azgu1                        0x00005573751b71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprqqu_q1z/tmprqqu_q1z.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b562a2dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5629fd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5629fd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5629fd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprqqu_q1z                        0x000055ebc8836552 <unavailable> + 5458

    5    libc.so.6                          0x00002b562a4cb460 __libc_start_main +
    245

    6    tmprqqu_q1z                        0x000055ebc88361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    for i in 0..<arr.count {\n        if arr[i] >\
    \ arr[max] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmptqj2zgl3/tmptqj2zgl3.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a94d26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a94a1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a94a1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a94a1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqj2zgl3                        0x0000556801c99552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5a94f12460 __libc_start_main +
    245

    6    tmptqj2zgl3                        0x0000556801c991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    var maxValue = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n         \
    \   maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpsrd1a376/tmpsrd1a376.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1baa48bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1baa182b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1baa182988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1baa1817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsrd1a376                        0x00005628cbc0f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b1baa677460 __libc_start_main +
    245

    6    tmpsrd1a376                        0x00005628cbc0f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > arr[i - 1] {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b371467ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3714375561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3714375286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b371437513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3714374bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3714174e83 <unavailable> + 188035

    6    tmpyi7d1pmz                        0x000055eecb60fa4a <unavailable> + 6730

    7    tmpyi7d1pmz                        0x000055eecb60f4d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b371486a460 __libc_start_main +
    245

    9    tmpyi7d1pmz                        0x000055eecb60f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8zw8sm6h/tmp8zw8sm6h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da9ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da97bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da97bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da97bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw8sm6h                        0x0000560534549552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da9cb1460 __libc_start_main +
    245

    6    tmp8zw8sm6h                        0x00005605345491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    for i in 0..<arr.count {\n        if arr[i] >\
    \ arr[max] {\n            max = i\n        }\n    }\n    var min = 0\n    for\
    \ i in 0..<arr.count {\n        if arr[i] < arr[min] {\n            min = i\n\
    \        }\n    }\n    if arr[max] - arr[min] == arr.count - 1 {\n        return\
    \ max\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpzjmcmxaj/tmpzjmcmxaj.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba48e474c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba48e16bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba48e16b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba48e16a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzjmcmxaj                        0x0000561871900552 <unavailable> + 5458

    5    libc.so.6                          0x00002ba48e660460 __libc_start_main +
    245

    6    tmpzjmcmxaj                        0x00005618719001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp9dyvulbr/tmp9dyvulbr.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7987797c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b798748eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b798748e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b798748d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9dyvulbr                        0x000055666bbfe552 <unavailable> + 5458

    5    libc.so.6                          0x00002b7987983460 __libc_start_main +
    245

    6    tmp9dyvulbr                        0x000055666bbfe1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for (index, element)\
    \ in arr.enumerated() {\n        if element > max {\n            max = element\n\
    \            maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdyn9g99k/tmpdyn9g99k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72c1ecfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72c1bc6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72c1bc6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72c1bc57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdyn9g99k                        0x0000563e1d505582 <unavailable> + 5506

    5    libc.so.6                          0x00002b72c20bb460 __libc_start_main +
    245

    6    tmpdyn9g99k                        0x0000563e1d5051d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpi0kzu4zw/tmpi0kzu4zw.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b401f74fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b401f446b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b401f446988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b401f4457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi0kzu4zw                        0x0000560c88070552 <unavailable> + 5458

    5    libc.so.6                          0x00002b401f93b460 __libc_start_main +
    245

    6    tmpi0kzu4zw                        0x0000560c880701a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ <= arr[i-1] {\n            max = i-1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bf6e8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bf6b83561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0bf6b83286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0bf6b8313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0bf6b82bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0bf6982e83 <unavailable> + 188035

    6    tmp2oyjsmn2                        0x00005570114cfa4a <unavailable> + 6730

    7    tmp2oyjsmn2                        0x00005570114cf4d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b0bf7078460 __libc_start_main +
    245

    9    tmp2oyjsmn2                        0x00005570114cf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8zw8sm6h/tmp8zw8sm6h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da9ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da97bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da97bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da97bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw8sm6h                        0x0000560534549552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da9cb1460 __libc_start_main +
    245

    6    tmp8zw8sm6h                        0x00005605345491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprqqu_q1z/tmprqqu_q1z.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b562a2dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5629fd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5629fd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5629fd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprqqu_q1z                        0x000055ebc8836552 <unavailable> + 5458

    5    libc.so.6                          0x00002b562a4cb460 __libc_start_main +
    245

    6    tmprqqu_q1z                        0x000055ebc88361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpi0kzu4zw/tmpi0kzu4zw.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b401f74fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b401f446b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b401f446988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b401f4457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi0kzu4zw                        0x0000560c88070552 <unavailable> + 5458

    5    libc.so.6                          0x00002b401f93b460 __libc_start_main +
    245

    6    tmpi0kzu4zw                        0x0000560c880701a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > arr[i - 1] {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b371467ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3714375561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3714375286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b371437513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3714374bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3714174e83 <unavailable> + 188035

    6    tmpyi7d1pmz                        0x000055eecb60fa4a <unavailable> + 6730

    7    tmpyi7d1pmz                        0x000055eecb60f4d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b371486a460 __libc_start_main +
    245

    9    tmpyi7d1pmz                        0x000055eecb60f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if\
    \ arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp5bvt23bn/tmp5bvt23bn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e0ae30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e0ab27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e0ab27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e0ab267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5bvt23bn                        0x000056117af4e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9e0b01c460 __libc_start_main +
    245

    6    tmp5bvt23bn                        0x000056117af4e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    var maxValue = Int.min\n    for (index,\
    \ value) in arr.enumerated() {\n        if value >= maxValue {\n            maxValue\
    \ = value\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpflfx7uwb/tmpflfx7uwb.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa90ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa605b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa605988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa6047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpflfx7uwb                        0x000055f58361b532 <unavailable> + 5426

    5    libc.so.6                          0x00002b0caaafa460 __libc_start_main +
    245

    6    tmpflfx7uwb                        0x000055f58361b189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpi0kzu4zw/tmpi0kzu4zw.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b401f74fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b401f446b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b401f446988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b401f4457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi0kzu4zw                        0x0000560c88070552 <unavailable> + 5458

    5    libc.so.6                          0x00002b401f93b460 __libc_start_main +
    245

    6    tmpi0kzu4zw                        0x0000560c880701a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ < arr[i + 1] {\n            max = i + 1\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp69ihxbv4/tmp69ihxbv4.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80f26f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80f23e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80f23e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80f23e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp69ihxbv4                        0x000055c2d7069552 <unavailable> + 5458

    5    libc.so.6                          0x00002b80f28dd460 __libc_start_main +
    245

    6    tmp69ihxbv4                        0x000055c2d70691a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if\
    \ arr[i] <= arr[i + 1] {\n            maxIndex = i + 1\n        }\n    }\n   \
    \ return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp52lmv2cn/tmp52lmv2cn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb61cafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb619a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb619a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb619a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp52lmv2cn                        0x0000563c1b620552 <unavailable> + 5458

    5    libc.so.6                          0x00002aeb61e9b460 __libc_start_main +
    245

    6    tmp52lmv2cn                        0x0000563c1b6201a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max_index = -1\n    var max_value = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max_value {\n            max_value = arr[i]\n       \
    \     max_index = i\n        }\n    }\n    return max_index\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpp2yudy3b/tmpp2yudy3b.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b306a2d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3069fc7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3069fc7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3069fc67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp2yudy3b                        0x000055b03383a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b306a4bc460 __libc_start_main +
    245

    6    tmpp2yudy3b                        0x000055b03383a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8zw8sm6h/tmp8zw8sm6h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da9ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da97bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da97bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da97bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw8sm6h                        0x0000560534549552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da9cb1460 __libc_start_main +
    245

    6    tmp8zw8sm6h                        0x00005605345491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8zw8sm6h/tmp8zw8sm6h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da9ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da97bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da97bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da97bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw8sm6h                        0x0000560534549552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da9cb1460 __libc_start_main +
    245

    6    tmp8zw8sm6h                        0x00005605345491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if\
    \ arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp5bvt23bn/tmp5bvt23bn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e0ae30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e0ab27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e0ab27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e0ab267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5bvt23bn                        0x000056117af4e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9e0b01c460 __libc_start_main +
    245

    6    tmp5bvt23bn                        0x000056117af4e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var i = arr.count - 1\n    while i > 0 {\n        if arr[i] <\
    \ arr[i - 1] {\n            return i - 1\n        }\n        i -= 1\n    }\n \
    \   return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmppfzme8nt/tmppfzme8nt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acdc9fd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acdc9ccdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acdc9ccd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acdc9ccc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppfzme8nt                        0x000055645925b3c2 <unavailable> + 5058

    5    libc.so.6                          0x00002acdca1c2460 __libc_start_main +
    245

    6    tmppfzme8nt                        0x000055645925b019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var result = -1\n    for i in 0..<arr.count-1 {\n        if arr[i]\
    \ >= arr[i+1] {\n            result = i\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkchp2h17/tmpkchp2h17.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad359d99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad359a90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad359a90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad359a8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkchp2h17                        0x0000563ff8611552 <unavailable> + 5458

    5    libc.so.6                          0x00002ad359f85460 __libc_start_main +
    245

    6    tmpkchp2h17                        0x0000563ff86111a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8zw8sm6h/tmp8zw8sm6h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da9ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da97bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da97bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da97bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw8sm6h                        0x0000560534549552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da9cb1460 __libc_start_main +
    245

    6    tmp8zw8sm6h                        0x00005605345491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var index = -1\n    for i in 0..<arr.count -\
    \ 1 {\n        if arr[i] < arr[i + 1] && max < arr[i + 1] {\n            max =\
    \ arr[i + 1]\n            index = i + 1\n        }\n    }\n    return index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkbvavlp3/tmpkbvavlp3.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b089097fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0890676b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0890676988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08906757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkbvavlp3                        0x000055893e924552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0890b6b460 __libc_start_main +
    245

    6    tmpkbvavlp3                        0x000055893e9241a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var i = arr.count - 1\n    while i > 0 {\n        if arr[i] <\
    \ arr[i - 1] {\n            return i - 1\n        }\n        i -= 1\n    }\n \
    \   return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmppfzme8nt/tmppfzme8nt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acdc9fd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acdc9ccdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acdc9ccd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acdc9ccc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppfzme8nt                        0x000055645925b3c2 <unavailable> + 5058

    5    libc.so.6                          0x00002acdca1c2460 __libc_start_main +
    245

    6    tmppfzme8nt                        0x000055645925b019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    var maxIdx = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIdx =\
    \ i\n        }\n    }\n    return maxIdx\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpylm1mpge/tmpylm1mpge.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1cd00bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1ccd02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1ccd02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1ccd017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpylm1mpge                        0x0000556e256a1552 <unavailable> + 5458

    5    libc.so.6                          0x00002ba1cd1f7460 __libc_start_main +
    245

    6    tmpylm1mpge                        0x0000556e256a11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max_index = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > arr[i - 1] {\n            max_index = i\n        }\n    }\n    return max_index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b65469d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65466cd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65466cd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65466cd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65466ccbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b65464cce83 <unavailable> + 188035

    6    tmplnyl8c7m                        0x000055a060984a4a <unavailable> + 6730

    7    tmplnyl8c7m                        0x000055a0609844d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b6546bc2460 __libc_start_main +
    245

    9    tmplnyl8c7m                        0x000055a0609841a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpi0kzu4zw/tmpi0kzu4zw.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b401f74fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b401f446b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b401f446988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b401f4457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi0kzu4zw                        0x0000560c88070552 <unavailable> + 5458

    5    libc.so.6                          0x00002b401f93b460 __libc_start_main +
    245

    6    tmpi0kzu4zw                        0x0000560c880701a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            continue\n        }\n        max = i\n    }\n \
    \   return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpscq4b_ns/tmpscq4b_ns.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9628c93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b962898ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b962898a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96289897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpscq4b_ns                        0x000055b1f891061f <unavailable> + 5663

    5    libc.so.6                          0x00002b9628e7f460 __libc_start_main +
    245

    6    tmpscq4b_ns                        0x000055b1f89101a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8zw8sm6h/tmp8zw8sm6h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da9ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da97bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da97bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da97bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw8sm6h                        0x0000560534549552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da9cb1460 __libc_start_main +
    245

    6    tmp8zw8sm6h                        0x00005605345491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp9dyvulbr/tmp9dyvulbr.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7987797c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b798748eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b798748e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b798748d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9dyvulbr                        0x000055666bbfe552 <unavailable> + 5458

    5    libc.so.6                          0x00002b7987983460 __libc_start_main +
    245

    6    tmp9dyvulbr                        0x000055666bbfe1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8zw8sm6h/tmp8zw8sm6h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da9ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da97bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da97bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da97bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw8sm6h                        0x0000560534549552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da9cb1460 __libc_start_main +
    245

    6    tmp8zw8sm6h                        0x00005605345491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmptqqcrhz3/tmptqqcrhz3.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b888ecb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b888e9a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b888e9a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b888e9a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqqcrhz3                        0x0000557741f99552 <unavailable> + 5458

    5    libc.so.6                          0x00002b888ee9c460 __libc_start_main +
    245

    6    tmptqqcrhz3                        0x0000557741f991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if\
    \ arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp5bvt23bn/tmp5bvt23bn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e0ae30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e0ab27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e0ab27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e0ab267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5bvt23bn                        0x000056117af4e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9e0b01c460 __libc_start_main +
    245

    6    tmp5bvt23bn                        0x000056117af4e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 1..<arr.count {\n        if arr[i]\
    \ <= arr[i - 1] {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b10888f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10885e7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b10885e7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b10885e713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b10885e6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpwiagzexm                        0x0000562d9c8a19c2 <unavailable> + 6594

    6    tmpwiagzexm                        0x0000562d9c8a181c <unavailable> + 6172

    7    libc.so.6                          0x00002b1088adc460 __libc_start_main +
    245

    8    tmpwiagzexm                        0x0000562d9c8a11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if\
    \ arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp5bvt23bn/tmp5bvt23bn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e0ae30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e0ab27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e0ab27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e0ab267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5bvt23bn                        0x000056117af4e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9e0b01c460 __libc_start_main +
    245

    6    tmp5bvt23bn                        0x000056117af4e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpuovj7si4/tmpuovj7si4.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5afeb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5afbadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5afbad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5afbac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuovj7si4                        0x00005607554c9312 <unavailable> + 4882

    5    libc.so.6                          0x00002ab5b00a2460 __libc_start_main +
    245

    6    tmpuovj7si4                        0x00005607554c8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var index = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            index = i\n        }\n    }\n    return index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpk_ybpcvy/tmpk_ybpcvy.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab74f305c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab74effcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab74effc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab74effb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk_ybpcvy                        0x00005619ec7e0552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab74f4f1460 __libc_start_main +
    245

    6    tmpk_ybpcvy                        0x00005619ec7e01a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8zw8sm6h/tmp8zw8sm6h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da9ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da97bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da97bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da97bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw8sm6h                        0x0000560534549552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da9cb1460 __libc_start_main +
    245

    6    tmp8zw8sm6h                        0x00005605345491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmptqqcrhz3/tmptqqcrhz3.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b888ecb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b888e9a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b888e9a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b888e9a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqqcrhz3                        0x0000557741f99552 <unavailable> + 5458

    5    libc.so.6                          0x00002b888ee9c460 __libc_start_main +
    245

    6    tmptqqcrhz3                        0x0000557741f991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    for i in 0..<arr.count {\n        if arr[i] >\
    \ arr[max] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmptqj2zgl3/tmptqj2zgl3.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a94d26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a94a1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a94a1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a94a1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqj2zgl3                        0x0000556801c99552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5a94f12460 __libc_start_main +
    245

    6    tmptqj2zgl3                        0x0000556801c991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    var index = 0\n    for i in 0..<arr.count -\
    \ 1 {\n        if arr[i] >= arr[i + 1] {\n            if index > max {\n     \
    \           max = index\n            }\n            index = 0\n        } else\
    \ {\n            index += 1\n        }\n    }\n    if index > max {\n        max\
    \ = index\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpikpk0d6g/tmpikpk0d6g.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40777dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40774d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40774d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40774d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpikpk0d6g                        0x000055e9782f7552 <unavailable> + 5458

    5    libc.so.6                          0x00002b40779c8460 __libc_start_main +
    245

    6    tmpikpk0d6g                        0x000055e9782f71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    for i in 0..<arr.count {\n        if arr[i] >\
    \ arr[max] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmptqj2zgl3/tmptqj2zgl3.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a94d26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a94a1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a94a1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a94a1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqj2zgl3                        0x0000556801c99552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5a94f12460 __libc_start_main +
    245

    6    tmptqj2zgl3                        0x0000556801c991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8zw8sm6h/tmp8zw8sm6h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da9ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da97bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da97bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da97bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw8sm6h                        0x0000560534549552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da9cb1460 __libc_start_main +
    245

    6    tmp8zw8sm6h                        0x00005605345491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if\
    \ arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp5bvt23bn/tmp5bvt23bn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e0ae30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e0ab27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e0ab27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e0ab267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5bvt23bn                        0x000056117af4e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9e0b01c460 __libc_start_main +
    245

    6    tmp5bvt23bn                        0x000056117af4e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var index = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ > arr[i + 1] {\n            index = i\n        }\n    }\n    return index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpmjdyxvu2/tmpmjdyxvu2.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dd01b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dcfeadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dcfead988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dcfeac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmjdyxvu2                        0x00005572ac1ab552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0dd03a2460 __libc_start_main +
    245

    6    tmpmjdyxvu2                        0x00005572ac1ab1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ > arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmps06azgu1/tmps06azgu1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6104dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6101d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6101d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6101d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps06azgu1                        0x00005573751b7552 <unavailable> + 5458

    5    libc.so.6                          0x00002ba6106cb460 __libc_start_main +
    245

    6    tmps06azgu1                        0x00005573751b71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8zw8sm6h/tmp8zw8sm6h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da9ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da97bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da97bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da97bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw8sm6h                        0x0000560534549552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da9cb1460 __libc_start_main +
    245

    6    tmp8zw8sm6h                        0x00005605345491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprqqu_q1z/tmprqqu_q1z.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b562a2dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5629fd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5629fd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5629fd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprqqu_q1z                        0x000055ebc8836552 <unavailable> + 5458

    5    libc.so.6                          0x00002b562a4cb460 __libc_start_main +
    245

    6    tmprqqu_q1z                        0x000055ebc88361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprqqu_q1z/tmprqqu_q1z.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b562a2dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5629fd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5629fd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5629fd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprqqu_q1z                        0x000055ebc8836552 <unavailable> + 5458

    5    libc.so.6                          0x00002b562a4cb460 __libc_start_main +
    245

    6    tmprqqu_q1z                        0x000055ebc88361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    for i in 0..<arr.count {\n        if arr[i] >\
    \ arr[max] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmptqj2zgl3/tmptqj2zgl3.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a94d26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a94a1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a94a1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a94a1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqj2zgl3                        0x0000556801c99552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5a94f12460 __libc_start_main +
    245

    6    tmptqj2zgl3                        0x0000556801c991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = arr[0]\n    var maxIndex = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpi0kzu4zw/tmpi0kzu4zw.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b401f74fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b401f446b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b401f446988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b401f4457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi0kzu4zw                        0x0000560c88070552 <unavailable> + 5458

    5    libc.so.6                          0x00002b401f93b460 __libc_start_main +
    245

    6    tmpi0kzu4zw                        0x0000560c880701a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if\
    \ arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp5bvt23bn/tmp5bvt23bn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e0ae30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e0ab27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e0ab27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e0ab267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5bvt23bn                        0x000056117af4e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9e0b01c460 __libc_start_main +
    245

    6    tmp5bvt23bn                        0x000056117af4e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ > arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmps06azgu1/tmps06azgu1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6104dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6101d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6101d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6101d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps06azgu1                        0x00005573751b7552 <unavailable> + 5458

    5    libc.so.6                          0x00002ba6106cb460 __libc_start_main +
    245

    6    tmps06azgu1                        0x00005573751b71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    for i in 0..<arr.count {\n        if arr[i] >\
    \ arr[max] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmptqj2zgl3/tmptqj2zgl3.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a94d26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a94a1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a94a1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a94a1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqj2zgl3                        0x0000556801c99552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5a94f12460 __libc_start_main +
    245

    6    tmptqj2zgl3                        0x0000556801c991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8zw8sm6h/tmp8zw8sm6h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da9ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da97bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da97bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da97bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw8sm6h                        0x0000560534549552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da9cb1460 __libc_start_main +
    245

    6    tmp8zw8sm6h                        0x00005605345491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if\
    \ arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp5bvt23bn/tmp5bvt23bn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e0ae30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e0ab27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e0ab27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e0ab267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5bvt23bn                        0x000056117af4e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9e0b01c460 __libc_start_main +
    245

    6    tmp5bvt23bn                        0x000056117af4e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if\
    \ arr[i] <= arr[i + 1] {\n            maxIndex = i + 1\n        }\n    }\n   \
    \ return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp52lmv2cn/tmp52lmv2cn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb61cafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb619a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb619a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb619a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp52lmv2cn                        0x0000563c1b620552 <unavailable> + 5458

    5    libc.so.6                          0x00002aeb61e9b460 __libc_start_main +
    245

    6    tmp52lmv2cn                        0x0000563c1b6201a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8zw8sm6h/tmp8zw8sm6h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da9ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da97bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da97bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da97bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw8sm6h                        0x0000560534549552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da9cb1460 __libc_start_main +
    245

    6    tmp8zw8sm6h                        0x00005605345491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ > arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmps06azgu1/tmps06azgu1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6104dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6101d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6101d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6101d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps06azgu1                        0x00005573751b7552 <unavailable> + 5458

    5    libc.so.6                          0x00002ba6106cb460 __libc_start_main +
    245

    6    tmps06azgu1                        0x00005573751b71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmptqqcrhz3/tmptqqcrhz3.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b888ecb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b888e9a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b888e9a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b888e9a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqqcrhz3                        0x0000557741f99552 <unavailable> + 5458

    5    libc.so.6                          0x00002b888ee9c460 __libc_start_main +
    245

    6    tmptqqcrhz3                        0x0000557741f991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ < arr[i-1] {\n            max = i-1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b98c0b41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98c0838561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b98c0838286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b98c083813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b98c0837bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b98c0637e83 <unavailable> + 188035

    6    tmpyzx5_yj7                        0x0000557dfd2aba4a <unavailable> + 6730

    7    tmpyzx5_yj7                        0x0000557dfd2ab4d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b98c0d2d460 __libc_start_main +
    245

    9    tmpyzx5_yj7                        0x0000557dfd2ab1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8zw8sm6h/tmp8zw8sm6h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da9ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da97bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da97bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da97bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw8sm6h                        0x0000560534549552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da9cb1460 __libc_start_main +
    245

    6    tmp8zw8sm6h                        0x00005605345491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max_index = -1\n    var max_value = arr[0]\n    for (index,\
    \ value) in arr.enumerated() {\n        if value > max_value {\n            max_value\
    \ = value\n            max_index = index\n        }\n    }\n    return max_index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpf89_jjfh/tmpf89_jjfh.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f0d9c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f0d6b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f0d6b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f0d6b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf89_jjfh                        0x0000564de10e3582 <unavailable> + 5506

    5    libc.so.6                          0x00002b3f0dbac460 __libc_start_main +
    245

    6    tmpf89_jjfh                        0x0000564de10e31d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659978379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8zw8sm6h/tmp8zw8sm6h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da9ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da97bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da97bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da97bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw8sm6h                        0x0000560534549552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da9cb1460 __libc_start_main +
    245

    6    tmp8zw8sm6h                        0x00005605345491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > maxValue {\n            maxIndex = i\n            maxValue\
    \ = arr[i]\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpqohde42t/tmpqohde42t.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8ffd45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8ffa3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8ffa3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8ffa3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqohde42t                        0x000055808d17f552 <unavailable> + 5458

    5    libc.so.6                          0x00002af8fff31460 __libc_start_main +
    245

    6    tmpqohde42t                        0x000055808d17f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprqqu_q1z/tmprqqu_q1z.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b562a2dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5629fd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5629fd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5629fd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprqqu_q1z                        0x000055ebc8836552 <unavailable> + 5458

    5    libc.so.6                          0x00002b562a4cb460 __libc_start_main +
    245

    6    tmprqqu_q1z                        0x000055ebc88361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp9dyvulbr/tmp9dyvulbr.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7987797c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b798748eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b798748e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b798748d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9dyvulbr                        0x000055666bbfe552 <unavailable> + 5458

    5    libc.so.6                          0x00002b7987983460 __libc_start_main +
    245

    6    tmp9dyvulbr                        0x000055666bbfe1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmptqqcrhz3/tmptqqcrhz3.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b888ecb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b888e9a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b888e9a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b888e9a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqqcrhz3                        0x0000557741f99552 <unavailable> + 5458

    5    libc.so.6                          0x00002b888ee9c460 __libc_start_main +
    245

    6    tmptqqcrhz3                        0x0000557741f991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8zw8sm6h/tmp8zw8sm6h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da9ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da97bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da97bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da97bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw8sm6h                        0x0000560534549552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da9cb1460 __libc_start_main +
    245

    6    tmp8zw8sm6h                        0x00005605345491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    for i in 0..<arr.count {\n        if arr[i] >\
    \ arr[max] {\n            max = i\n        }\n    }\n    if arr[max] == arr[max\
    \ - 1] {\n        return -1\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp9a8pql7g/tmp9a8pql7g.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f5fc85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f5f97cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f5f97c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f5f97b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9a8pql7g                        0x000055aab6d38552 <unavailable> + 5458

    5    libc.so.6                          0x00002b7f5fe71460 __libc_start_main +
    245

    6    tmp9a8pql7g                        0x000055aab6d381a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var result = -1\n    for i in 0..<arr.count - 1 {\n        if\
    \ arr[i] >= arr[i + 1] {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmplh1478nd/tmplh1478nd.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7210c95c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b721098cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b721098c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b721098b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplh1478nd                        0x0000555fe9811552 <unavailable> + 5458

    5    libc.so.6                          0x00002b7210e81460 __libc_start_main +
    245

    6    tmplh1478nd                        0x0000555fe98111a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8zw8sm6h/tmp8zw8sm6h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da9ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da97bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da97bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da97bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw8sm6h                        0x0000560534549552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da9cb1460 __libc_start_main +
    245

    6    tmp8zw8sm6h                        0x00005605345491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var i = arr.count - 1\n    while i > 0 {\n        if arr[i] <\
    \ arr[i - 1] {\n            return i - 1\n        }\n        i -= 1\n    }\n \
    \   return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmppfzme8nt/tmppfzme8nt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acdc9fd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acdc9ccdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acdc9ccd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acdc9ccc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppfzme8nt                        0x000055645925b3c2 <unavailable> + 5058

    5    libc.so.6                          0x00002acdca1c2460 __libc_start_main +
    245

    6    tmppfzme8nt                        0x000055645925b019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    var max_index = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            max_index\
    \ = i\n        }\n    }\n    return max_index\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpav3ngt3z/tmpav3ngt3z.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2407b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2404acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2404ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2404ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpav3ngt3z                        0x000055e854238552 <unavailable> + 5458

    5    libc.so.6                          0x00002ba2409a1460 __libc_start_main +
    245

    6    tmpav3ngt3z                        0x000055e8542381a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpno8d6t32/tmpno8d6t32.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55cbd56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55cba4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55cba4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55cba4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpno8d6t32                        0x000055ea4bd88552 <unavailable> + 5458

    5    libc.so.6                          0x00002b55cbf42460 __libc_start_main +
    245

    6    tmpno8d6t32                        0x000055ea4bd881a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8zw8sm6h/tmp8zw8sm6h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da9ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da97bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da97bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da97bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw8sm6h                        0x0000560534549552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da9cb1460 __libc_start_main +
    245

    6    tmp8zw8sm6h                        0x00005605345491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > arr[i - 1] {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b371467ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3714375561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3714375286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b371437513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3714374bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3714174e83 <unavailable> + 188035

    6    tmpyi7d1pmz                        0x000055eecb60fa4a <unavailable> + 6730

    7    tmpyi7d1pmz                        0x000055eecb60f4d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b371486a460 __libc_start_main +
    245

    9    tmpyi7d1pmz                        0x000055eecb60f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    for i in 0..<arr.count {\n        if arr[i] >\
    \ arr[max] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmptqj2zgl3/tmptqj2zgl3.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a94d26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a94a1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a94a1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a94a1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqj2zgl3                        0x0000556801c99552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5a94f12460 __libc_start_main +
    245

    6    tmptqj2zgl3                        0x0000556801c991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ <= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmps_m96yu7/tmps_m96yu7.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b99be971c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99be668b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b99be668988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99be6677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps_m96yu7                        0x000055c0cc93461f <unavailable> + 5663

    5    libc.so.6                          0x00002b99beb5d460 __libc_start_main +
    245

    6    tmps_m96yu7                        0x000055c0cc9341a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = arr[0]\n    var index = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpno8d6t32/tmpno8d6t32.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55cbd56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55cba4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55cba4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55cba4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpno8d6t32                        0x000055ea4bd88552 <unavailable> + 5458

    5    libc.so.6                          0x00002b55cbf42460 __libc_start_main +
    245

    6    tmpno8d6t32                        0x000055ea4bd881a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > arr[i - 1] {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b371467ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3714375561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3714375286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b371437513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3714374bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3714174e83 <unavailable> + 188035

    6    tmpyi7d1pmz                        0x000055eecb60fa4a <unavailable> + 6730

    7    tmpyi7d1pmz                        0x000055eecb60f4d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b371486a460 __libc_start_main +
    245

    9    tmpyi7d1pmz                        0x000055eecb60f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    for i in 0..<arr.count {\n        if arr[i] >\
    \ arr[max] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmptqj2zgl3/tmptqj2zgl3.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a94d26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a94a1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a94a1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a94a1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqj2zgl3                        0x0000556801c99552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5a94f12460 __libc_start_main +
    245

    6    tmptqj2zgl3                        0x0000556801c991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var largest = -1\n    for i in 0..<arr.count - 1 {\n        if\
    \ arr[i] >= arr[i + 1] {\n            largest = i\n        }\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmplet7byqe/tmplet7byqe.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2732471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2732168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2732168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27321677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplet7byqe                        0x000055d2ca847552 <unavailable> + 5458

    5    libc.so.6                          0x00002b273265d460 __libc_start_main +
    245

    6    tmplet7byqe                        0x000055d2ca8471a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var result = -1\n    var max = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] <= max {\n            result = i\n        } else {\n  \
    \          max = arr[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afc27f86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc27c7d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afc27c7d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afc27c7d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afc27c7cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afc27a7ce83 <unavailable> + 188035

    6    tmpskpqp99g                        0x0000559c41aa193a <unavailable> + 6458

    7    tmpskpqp99g                        0x0000559c41aa181c <unavailable> + 6172

    8    libc.so.6                          0x00002afc28172460 __libc_start_main +
    245

    9    tmpskpqp99g                        0x0000559c41aa11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978379
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprqqu_q1z/tmprqqu_q1z.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b562a2dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5629fd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5629fd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5629fd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprqqu_q1z                        0x000055ebc8836552 <unavailable> + 5458

    5    libc.so.6                          0x00002b562a4cb460 __libc_start_main +
    245

    6    tmprqqu_q1z                        0x000055ebc88361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max_index = -1\n    for i in 0..<arr.count - 1 {\n       \
    \ if arr[i] >= arr[i + 1] {\n            max_index = i\n        }\n    }\n   \
    \ return max_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8jtmqf4b/tmp8jtmqf4b.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac19be23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac19bb1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac19bb1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac19bb197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8jtmqf4b                        0x000055ed8c734552 <unavailable> + 5458

    5    libc.so.6                          0x00002ac19c00f460 __libc_start_main +
    245

    6    tmp8jtmqf4b                        0x000055ed8c7341a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    for i in 0..<arr.count - 1 {\n        if\
    \ arr[i] >= arr[i + 1] {\n            maxIndex = i\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp5bvt23bn/tmp5bvt23bn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e0ae30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e0ab27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e0ab27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e0ab267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5bvt23bn                        0x000056117af4e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9e0b01c460 __libc_start_main +
    245

    6    tmp5bvt23bn                        0x000056117af4e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpuovj7si4/tmpuovj7si4.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5afeb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5afbadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5afbad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5afbac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuovj7si4                        0x00005607554c9312 <unavailable> + 4882

    5    libc.so.6                          0x00002ab5b00a2460 __libc_start_main +
    245

    6    tmpuovj7si4                        0x00005607554c8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var index = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            index = i\n        }\n    }\n    return index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpk_ybpcvy/tmpk_ybpcvy.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab74f305c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab74effcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab74effc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab74effb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk_ybpcvy                        0x00005619ec7e0552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab74f4f1460 __libc_start_main +
    245

    6    tmpk_ybpcvy                        0x00005619ec7e01a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8zw8sm6h/tmp8zw8sm6h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da9ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da97bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da97bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da97bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw8sm6h                        0x0000560534549552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da9cb1460 __libc_start_main +
    245

    6    tmp8zw8sm6h                        0x00005605345491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmptqqcrhz3/tmptqqcrhz3.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b888ecb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b888e9a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b888e9a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b888e9a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqqcrhz3                        0x0000557741f99552 <unavailable> + 5458

    5    libc.so.6                          0x00002b888ee9c460 __libc_start_main +
    245

    6    tmptqqcrhz3                        0x0000557741f991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprqqu_q1z/tmprqqu_q1z.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b562a2dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5629fd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5629fd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5629fd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprqqu_q1z                        0x000055ebc8836552 <unavailable> + 5458

    5    libc.so.6                          0x00002b562a4cb460 __libc_start_main +
    245

    6    tmprqqu_q1z                        0x000055ebc88361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var result = -1\n    for i in 0..<arr.count - 1 {\n        if\
    \ arr[i] >= arr[i + 1] {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmplh1478nd/tmplh1478nd.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7210c95c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b721098cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b721098c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b721098b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplh1478nd                        0x0000555fe9811552 <unavailable> + 5458

    5    libc.so.6                          0x00002b7210e81460 __libc_start_main +
    245

    6    tmplh1478nd                        0x0000555fe98111a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    if arr.count == 0 {\n        return -1\n    }\n    var max = arr[0]\n\
    \    var maxIndex = 0\n    for i in 1..<arr.count {\n        if arr[i] > max {\n\
    \            max = arr[i]\n            maxIndex = i\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmppvv5otyi/tmppvv5otyi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fba2a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fb9f9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fb9f9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fb9f9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvv5otyi                        0x000056177687d552 <unavailable> + 5458

    5    libc.so.6                          0x00002b7fba493460 __libc_start_main +
    245

    6    tmppvv5otyi                        0x000056177687d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ > arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmps06azgu1/tmps06azgu1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6104dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6101d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6101d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6101d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps06azgu1                        0x00005573751b7552 <unavailable> + 5458

    5    libc.so.6                          0x00002ba6106cb460 __libc_start_main +
    245

    6    tmps06azgu1                        0x00005573751b71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmprqqu_q1z/tmprqqu_q1z.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b562a2dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5629fd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5629fd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5629fd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprqqu_q1z                        0x000055ebc8836552 <unavailable> + 5458

    5    libc.so.6                          0x00002b562a4cb460 __libc_start_main +
    245

    6    tmprqqu_q1z                        0x000055ebc88361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    var maxValue = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > maxValue {\n            maxIndex = i\n            maxValue\
    \ = arr[i]\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpqohde42t/tmpqohde42t.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8ffd45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8ffa3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8ffa3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8ffa3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqohde42t                        0x000055808d17f552 <unavailable> + 5458

    5    libc.so.6                          0x00002af8fff31460 __libc_start_main +
    245

    6    tmpqohde42t                        0x000055808d17f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var maxIndex = -1\n    var maxValue = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n         \
    \   maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpsrd1a376/tmpsrd1a376.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1baa48bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1baa182b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1baa182988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1baa1817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsrd1a376                        0x00005628cbc0f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b1baa677460 __libc_start_main +
    245

    6    tmpsrd1a376                        0x00005628cbc0f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = -1\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ >= arr[i + 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8zw8sm6h/tmp8zw8sm6h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5da9ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5da97bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5da97bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5da97bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zw8sm6h                        0x0000560534549552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5da9cb1460 __libc_start_main +
    245

    6    tmp8zw8sm6h                        0x00005605345491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpuovj7si4/tmpuovj7si4.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5afeb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5afbadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5afbad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5afbac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuovj7si4                        0x00005607554c9312 <unavailable> + 4882

    5    libc.so.6                          0x00002ab5b00a2460 __libc_start_main +
    245

    6    tmpuovj7si4                        0x00005607554c8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978378
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\nfunc can_arrange(arr: [Int])\
    \ -> Int {\n    var max = 0\n    var maxIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp9dyvulbr/tmp9dyvulbr.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7987797c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b798748eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b798748e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b798748d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9dyvulbr                        0x000055666bbfe552 <unavailable> + 5458

    5    libc.so.6                          0x00002b7987983460 __libc_start_main +
    245

    6    tmp9dyvulbr                        0x000055666bbfe1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978378
