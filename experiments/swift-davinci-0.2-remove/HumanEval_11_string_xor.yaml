name: HumanEval_11_string_xor
language: swift
prompt: "\n/// Input are two strings a and b consisting only of 1s and 0s.\n/// Perform\
  \ binary XOR on these inputs and return result also as a string.\nfunc string_xor(a:\
  \ String, b: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(string_xor(a: \"111000\", b: \"101010\"\
  ) == \"010010\")\nassert(string_xor(a: \"1\", b: \"1\") == \"0\")\nassert(string_xor(a:\
  \ \"0101\", b: \"0000\") == \"0101\")"
completions: ["    var result = \"\"\n    for i in 0..<a.count {\n        let a_char\
    \ = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        if a_char == b_char {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_bit = a[i]\n        let b_bit\
    \ = b[i]\n        result += String(a_bit ^ b_bit)\n    }\n    return result",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.characters.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result.append(\"0\")\n        } else\
    \ {\n            result.append(\"1\")\n        }\n    }\n    return result", " \
    \   var result = \"\"\n    for i in 0..<a.characters.count {\n        let a_char\
    \ = a[a.startIndex.advancedBy(i)]\n        let b_char = b[b.startIndex.advancedBy(i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        let a_int = Int(String(a_char))!\n        let b_int = Int(String(b_char))!\n\
    \        result += String(a_int ^ b_int)\n    }\n    return result", "    var\
    \ result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        if a_char == b_char\
    \ {\n            result.append(\"0\")\n        } else {\n            result.append(\"\
    1\")\n        }\n    }\n    return result", "    var result = \"\"\n    for i\
    \ in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n\
    \        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char\
    \ == b_char {\n            result += \"0\"\n        } else {\n            result\
    \ += \"1\"\n        }\n    }\n    return result", "    var result = \"\"\n   \
    \ for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    for i in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        if a_char == b_char\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        result += String(a_char ==\
    \ b_char ? \"0\" : \"1\")\n    }\n    return result", "    var result = \"\"\n\
    \    for i in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        result += String(Int(String(a_char))!\
    \ ^ Int(String(b_char))!)\n    }\n    return result", "    var result = \"\"\n\
    \    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    let a_bytes\
    \ = a.utf8.map { UInt8($0) }\n    let b_bytes = b.utf8.map { UInt8($0) }\n   \
    \ let result = zip(a_bytes, b_bytes).map { $0 ^ $1 }\n    return result.map {\
    \ String($0, radix: 2) }.joined()", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.characters.count\
    \ {\n        let a_char = a[a.startIndex.advancedBy(i)]\n        let b_char =\
    \ b[b.startIndex.advancedBy(i)]\n        result += String(a_char == b_char ? \"\
    0\" : \"1\")\n    }\n    return result", "    var result = \"\"\n    for i in\
    \ 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n\
    \        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char\
    \ == b_char {\n            result += \"0\"\n        } else {\n            result\
    \ += \"1\"\n        }\n    }\n    return result", "    var result = \"\"\n   \
    \ for i in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        if a_char == b_char\
    \ {\n            result.append(\"0\")\n        } else {\n            result.append(\"\
    1\")\n        }\n    }\n    return result", "    var result = \"\"\n    for i\
    \ in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        if a_char == b_char\
    \ {\n            result.append(\"0\")\n        } else {\n            result.append(\"\
    1\")\n        }\n    }\n    return result", "    var result = \"\"\n    for i\
    \ in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n\
    \        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char\
    \ == b_char {\n            result += \"0\"\n        } else {\n            result\
    \ += \"1\"\n        }\n    }\n    return result", "    var result = \"\"\n   \
    \ for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        result\
    \ += String(Int(String(a_char))! ^ Int(String(b_char))!)\n    }\n    return result",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        if a_char == b_char\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        result += String(Int(String(a_char))!\
    \ ^ Int(String(b_char))!)\n    }\n    return result", "    var result = \"\"\n\
    \    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    for (index, char) in a.enumerated() {\n        if char == b[b.index(b.startIndex,\
    \ offsetBy: index)] {\n            result += \"0\"\n        } else {\n       \
    \     result += \"1\"\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        result += String(a_char == b_char ? \"0\" : \"1\")\n    }\n    return\
    \ result", "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char\
    \ = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        if a_char == b_char {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    var result = \"\"\n    for i in 0..<a.characters.count {\n        let a_char\
    \ = a[a.startIndex.advancedBy(i)]\n        let b_char = b[b.startIndex.advancedBy(i)]\n\
    \        if a_char == b_char {\n            result.append(\"0\")\n        } else\
    \ {\n            result.append(\"1\")\n        }\n    }\n    return result", " \
    \   var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        let a_int = Int(String(a_char))!\n        let b_int = Int(String(b_char))!\n\
    \        result += String(a_int ^ b_int)\n    }\n    return result", "    var\
    \ result = \"\"\n    for i in 0..<a.count {\n        let a_bit = a[i]\n      \
    \  let b_bit = b[i]\n        result += String(a_bit ^ b_bit)\n    }\n    return\
    \ result", "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char\
    \ = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        let a_int = Int(String(a_char))!\n        let b_int =\
    \ Int(String(b_char))!\n        let xor_int = a_int ^ b_int\n        result +=\
    \ String(xor_int)\n    }\n    return result", "    var result = \"\"\n    for\
    \ i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n\
    \        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char\
    \ == b_char {\n            result += \"0\"\n        } else {\n            result\
    \ += \"1\"\n        }\n    }\n    return result", "    var result = \"\"\n   \
    \ for i in 0..<a.characters.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var a\
    \ = a\n    var b = b\n    var result = \"\"\n    while a.count > 0 || b.count\
    \ > 0 {\n        let a_bit = a.popLast() ?? \"0\"\n        let b_bit = b.popLast()\
    \ ?? \"0\"\n        result = String(Int(a_bit)! ^ Int(b_bit)!) + result\n    }\n\
    \    return result", "    var result = \"\"\n    for i in 0..<a.count {\n    \
    \    let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char =\
    \ b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.characters.count\
    \ {\n        let a_char = a[a.startIndex.advancedBy(i)]\n        let b_char =\
    \ b[b.startIndex.advancedBy(i)]\n        result += String(Int(String(a_char))!\
    \ ^ Int(String(b_char))!)\n    }\n    return result", "    var result = \"\"\n\
    \    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        if a_char == b_char\
    \ {\n            result.append(\"0\")\n        } else {\n            result.append(\"\
    1\")\n        }\n    }\n    return result", "    var result = \"\"\n    for i\
    \ in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n\
    \        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char\
    \ == b_char {\n            result += \"0\"\n        } else {\n            result\
    \ += \"1\"\n        }\n    }\n    return result", "    var result = \"\"\n   \
    \ for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        result += String(Int(String(a_char))! ^ Int(String(b_char))!)\n    }\n\
    \    return result", "    var result = \"\"\n    for (index, char) in a.enumerated()\
    \ {\n        let a_bit = char == \"1\"\n        let b_bit = b[b.index(b.startIndex,\
    \ offsetBy: index)] == \"1\"\n        result += (a_bit != b_bit) ? \"1\" : \"\
    0\"\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    let a_bytes = a.utf8.map { UInt8($0)\
    \ }\n    let b_bytes = b.utf8.map { UInt8($0) }\n    let result = zip(a_bytes,\
    \ b_bytes).map { $0 ^ $1 }\n    return result.map { String($0, radix: 2) }.joined()",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[i]\n\
    \        let b_char = b[i]\n        if a_char == b_char {\n            result\
    \ += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n\
    \    return result", "    var result = \"\"\n    for i in 0..<a.count {\n    \
    \    let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char =\
    \ b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.characters.count\
    \ {\n        let a_char = a[a.startIndex.advancedBy(i)]\n        let b_char =\
    \ b[b.startIndex.advancedBy(i)]\n        if a_char == b_char {\n            result.append(\"\
    0\")\n        } else {\n            result.append(\"1\")\n        }\n    }\n \
    \   return result", "    var result = \"\"\n    for i in 0..<a.count {\n     \
    \   let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        if a_char == b_char {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    var result = \"\"\n    for (i, j) in zip(a, b) {\n        result += String(Int(String(i))!\
    \ ^ Int(String(j))!)\n    }\n    return result", "    var result = \"\"\n    for\
    \ i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n\
    \        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char\
    \ == b_char {\n            result += \"0\"\n        } else {\n            result\
    \ += \"1\"\n        }\n    }\n    return result", "    var result = \"\"\n   \
    \ for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    for i in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        if a_char == b_char\
    \ {\n            result.append(\"0\")\n        } else {\n            result.append(\"\
    1\")\n        }\n    }\n    return result", "    var result = \"\"\n    for i\
    \ in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n\
    \        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char\
    \ == b_char {\n            result += \"0\"\n        } else {\n            result\
    \ += \"1\"\n        }\n    }\n    return result", "    var result = \"\"\n   \
    \ for i in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        result += String(Int(String(a_char))!\
    \ ^ Int(String(b_char))!)\n    }\n    return result", "    var result = \"\"\n\
    \    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    for (i, j) in zip(a, b) {\n        if i == j {\n            result.append(\"\
    0\")\n        } else {\n            result.append(\"1\")\n        }\n    }\n \
    \   return result", "    var res = \"\"\n    for i in 0..<a.count {\n        res\
    \ += String(Int(String(a[i]))! ^ Int(String(b[i]))!)\n    }\n    return res",
  "    let a_bytes = a.utf8.map { UInt8($0) }\n    let b_bytes = b.utf8.map { UInt8($0)\
    \ }\n    let result = zip(a_bytes, b_bytes).map { $0 ^ $1 }\n    return result.map\
    \ { String($0, radix: 2) }.joined()", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        result += String(Int(String(a_char))!\
    \ ^ Int(String(b_char))!)\n    }\n    return result", "    let a_bytes = a.utf8.map\
    \ { UInt8($0) }\n    let b_bytes = b.utf8.map { UInt8($0) }\n    let result =\
    \ zip(a_bytes, b_bytes).map { $0 ^ $1 }\n    return result.map { String($0, radix:\
    \ 2) }.joined()", "    var result = \"\"\n    for i in 0..<a.count {\n       \
    \ let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        if a_char == b_char {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        result.append(a_char\
    \ == b_char ? \"0\" : \"1\")\n    }\n    return result", "    var result = \"\"\
    \n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        let\
    \ a_int = Int(String(a_char))!\n        let b_int = Int(String(b_char))!\n   \
    \     let result_int = a_int ^ b_int\n        result += String(result_int)\n \
    \   }\n    return result", "    var result = \"\"\n    for i in 0..<a.count {\n\
    \        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        result += String(Int(String(a_char))!\
    \ ^ Int(String(b_char))!)\n    }\n    return result", "    var result = \"\"\n\
    \    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for (i, j) in zip(a, b) {\n        result += String(i ^ j)\n   \
    \ }\n    return result", "    var result = \"\"\n    for i in 0..<a.count {\n\
    \        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.characters.count\
    \ {\n        let a_char = a[a.startIndex.advancedBy(i)]\n        let b_char =\
    \ b[b.startIndex.advancedBy(i)]\n        let a_int = Int(String(a_char))!\n  \
    \      let b_int = Int(String(b_char))!\n        let xor_result = a_int ^ b_int\n\
    \        result.append(String(xor_result))\n    }\n    return result", "    var\
    \ result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for (i, char) in a.enumerated() {\n        if char == b[b.index(b.startIndex,\
    \ offsetBy: i)] {\n            result += \"0\"\n        } else {\n           \
    \ result += \"1\"\n        }\n    }\n    return result", "    var result = \"\"\
    \n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        result\
    \ += String(a_char == b_char ? \"0\" : \"1\")\n    }\n    return result", "  \
    \  var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        if a_char == b_char\
    \ {\n            result.append(\"0\")\n        } else {\n            result.append(\"\
    1\")\n        }\n    }\n    return result", "    let a_bytes = a.utf8.map { UInt8($0)\
    \ }\n    let b_bytes = b.utf8.map { UInt8($0) }\n    let xor_bytes = zip(a_bytes,\
    \ b_bytes).map { $0 ^ $1 }\n    let xor_string = xor_bytes.map { String($0, radix:\
    \ 2) }.joined()\n    return xor_string", "    let a_bytes = [UInt8](a.utf8)\n\
    \    let b_bytes = [UInt8](b.utf8)\n    var result = \"\"\n    for i in 0..<a_bytes.count\
    \ {\n        result += String(a_bytes[i] ^ b_bytes[i])\n    }\n    return result",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    let a_bytes\
    \ = a.utf8.map { UInt8($0) }\n    let b_bytes = b.utf8.map { UInt8($0) }\n   \
    \ let result = zip(a_bytes, b_bytes).map { $0 ^ $1 }\n    return result.map {\
    \ String($0, radix: 2) }.joined()", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    let a_bytes = a.utf8.map { UInt8($0)\
    \ }\n    let b_bytes = b.utf8.map { UInt8($0) }\n    let xored_bytes = zip(a_bytes,\
    \ b_bytes).map { $0 ^ $1 }\n    return xored_bytes.map { String($0, radix: 2)\
    \ }.joined()", "    var result = \"\"\n    for i in 0..<a.count {\n        let\
    \ a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        let a_int = Int(String(a_char))!\n        let b_int =\
    \ Int(String(b_char))!\n        let xor_result = a_int ^ b_int\n        result\
    \ += String(xor_result)\n    }\n    return result", "    var result = \"\"\n \
    \   for i in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        result += String(Int(String(a_char))!\
    \ ^ Int(String(b_char))!)\n    }\n    return result", "    var result = \"\"\n\
    \    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        if a_char == b_char\
    \ {\n            result.append(\"0\")\n        } else {\n            result.append(\"\
    1\")\n        }\n    }\n    return result", "    var result = \"\"\n    for i\
    \ in 0..<a.count {\n        let a_i = a[a.index(a.startIndex, offsetBy: i)]\n\
    \        let b_i = b[b.index(b.startIndex, offsetBy: i)]\n        if a_i == b_i\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.characters.count\
    \ {\n        let a_char = a[a.startIndex.advancedBy(i)]\n        let b_char =\
    \ b[b.startIndex.advancedBy(i)]\n        if a_char == b_char {\n            result.append(\"\
    0\")\n        } else {\n            result.append(\"1\")\n        }\n    }\n \
    \   return result", "    var result = \"\"\n    for i in 0..<a.count {\n     \
    \   let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        if a_char == b_char {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[i]\n        let b_char\
    \ = b[i]\n        if a_char == b_char {\n            result += \"0\"\n       \
    \ } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    var result = \"\"\n    for i in 0..<a.characters.count {\n        let a_char\
    \ = a[a.startIndex.advancedBy(i)]\n        let b_char = b[b.startIndex.advancedBy(i)]\n\
    \        let a_int = Int(String(a_char))!\n        let b_int = Int(String(b_char))!\n\
    \        let xor_int = a_int ^ b_int\n        result += String(xor_int)\n    }\n\
    \    return result", "    var result = \"\"\n    for i in 0..<a.count {\n    \
    \    let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char =\
    \ b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.characters.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        let a_int = Int(String(a_char))!\n\
    \        let b_int = Int(String(b_char))!\n        let xor_result = a_int ^ b_int\n\
    \        result += String(xor_result)\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[i]\n        let b_char\
    \ = b[i]\n        result += String(Int(String(a_char))! ^ Int(String(b_char))!)\n\
    \    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count {\n\
    \        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.characters.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    let a_bytes = a.utf8.map { UInt8($0)\
    \ }\n    let b_bytes = b.utf8.map { UInt8($0) }\n    let xored = zip(a_bytes,\
    \ b_bytes).map { $0 ^ $1 }\n    return xored.map { String($0, radix: 2) }.joined()",
  "    var result = \"\"\n    for i in 0..<a.characters.count {\n        let a_char\
    \ = a[a.startIndex.advancedBy(i)]\n        let b_char = b[b.startIndex.advancedBy(i)]\n\
    \        if a_char == b_char {\n            result.append(\"0\")\n        } else\
    \ {\n            result.append(\"1\")\n        }\n    }\n    return result", " \
    \   var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for (i, j) in zip(a, b) {\n        result += String(i ^ j)\n   \
    \ }\n    return result", "    var result = \"\"\n    for i in 0..<a.characters.count\
    \ {\n        let a_char = a[a.startIndex.advancedBy(i)]\n        let b_char =\
    \ b[b.startIndex.advancedBy(i)]\n        if a_char == b_char {\n            result.append(\"\
    0\")\n        } else {\n            result.append(\"1\")\n        }\n    }\n \
    \   return result", "    var result = \"\"\n    for i in 0..<a.count {\n     \
    \   let a_char = a[i]\n        let b_char = b[i]\n        let a_int = Int(String(a_char))!\n\
    \        let b_int = Int(String(b_char))!\n        let result_int = a_int ^ b_int\n\
    \        result += String(result_int)\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    let a_bytes\
    \ = a.utf8.map { UInt8($0) }\n    let b_bytes = b.utf8.map { UInt8($0) }\n   \
    \ let c_bytes = zip(a_bytes, b_bytes).map { $0 ^ $1 }\n    return String(bytes:\
    \ c_bytes, encoding: .utf8)!", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        result += String(a[i] == b[i] ? \"0\" : \"1\")\n    }\n    return\
    \ result", "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char\
    \ = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        if a_char == b_char {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    let a_bytes\
    \ = a.utf8.map { Int($0) }\n    let b_bytes = b.utf8.map { Int($0) }\n    let\
    \ result = zip(a_bytes, b_bytes).map { $0 ^ $1 }\n    return result.map { String($0,\
    \ radix: 2) }.joined()", "    var result = \"\"\n    for i in 0..<a.count {\n\
    \        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        let a_int = Int(String(a_char))!\n\
    \        let b_int = Int(String(b_char))!\n        let xor_result = a_int ^ b_int\n\
    \        result += String(xor_result)\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    let a_bytes\
    \ = a.utf8.map { UInt8($0) }\n    let b_bytes = b.utf8.map { UInt8($0) }\n   \
    \ let result = zip(a_bytes, b_bytes).map { $0 ^ $1 }\n    return result.map {\
    \ String($0, radix: 2) }.joined()", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        result += String(Int(String(a_char))!\
    \ ^ Int(String(b_char))!)\n    }\n    return result", "    var result = \"\"\n\
    \    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        result += String(Int(String(a_char))!\
    \ ^ Int(String(b_char))!)\n    }\n    return result", "    var result = \"\"\n\
    \    for i in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        result += String(a_char\
    \ == b_char ? \"0\" : \"1\")\n    }\n    return result", "    var result = \"\"\
    \n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    let a_bytes\
    \ = a.utf8.map { Int($0) }\n    let b_bytes = b.utf8.map { Int($0) }\n    let\
    \ xor_bytes = zip(a_bytes, b_bytes).map { $0 ^ $1 }\n    return xor_bytes.map\
    \ { String($0, radix: 2) }.joined()", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        result += String(Int(String(a_char))!\
    \ ^ Int(String(b_char))!)\n    }\n    return result", "    var result = \"\"\n\
    \    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        if a_char == b_char\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.characters.count\
    \ {\n        let a_char = a[a.startIndex.advancedBy(i)]\n        let b_char =\
    \ b[b.startIndex.advancedBy(i)]\n        if a_char == b_char {\n            result\
    \ += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n\
    \    return result", "    var result = \"\"\n    for i in 0..<a.count {\n    \
    \    let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char =\
    \ b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[i]\n        let b_char = b[i]\n        if a_char ==\
    \ b_char {\n            result += \"0\"\n        } else {\n            result\
    \ += \"1\"\n        }\n    }\n    return result", "    var result = \"\"\n   \
    \ for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    let a_bytes\
    \ = a.utf8.map { $0 }\n    let b_bytes = b.utf8.map { $0 }\n    let result = zip(a_bytes,\
    \ b_bytes).map { $0 ^ $1 }\n    return result.map { String($0, radix: 2) }.joined()",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        result += String(Int(String(a_char))!\
    \ ^ Int(String(b_char))!)\n    }\n    return result", "    var result = \"\"\n\
    \    for i in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        result += String(Int(String(a_char))!\
    \ ^ Int(String(b_char))!)\n    }\n    return result", "    var result = \"\"\n\
    \    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    for i in 0..<a.characters.count {\n        let a_char = a[a.startIndex.advancedBy(i)]\n\
    \        let b_char = b[b.startIndex.advancedBy(i)]\n        if a_char == b_char\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    let a_bytes\
    \ = a.utf8.map { UInt8($0) }\n    let b_bytes = b.utf8.map { UInt8($0) }\n   \
    \ let result = zip(a_bytes, b_bytes).map { $0 ^ $1 }\n    return result.map {\
    \ String($0, radix: 2) }.joined()"]
stop_tokens:
- "\n}"
