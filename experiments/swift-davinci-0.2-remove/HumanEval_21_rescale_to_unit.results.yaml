language: swift
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 0
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    var min = numbers[0]\n    var max = numbers[0]\n    for number in numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    let range =\
    \ max - min\n    return numbers.map { (number) -> Double in\n        (number -\
    \ min) / range\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rescale_to_unit(numbers:\
    \ [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9])\
    \ == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers: [2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    var result = [Double]()\n    let min = numbers.minElement()!\n    let\
    \ max = numbers.maxElement()!\n    let range = max - min\n    for number in numbers\
    \ {\n        result.append((number - min) / range)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp_vwtlt5i.swift:6:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp_vwtlt5i.swift:7:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    var result = [Double]()\n    let min = numbers.minElement()!\n    let\
    \ max = numbers.maxElement()!\n    for number in numbers {\n        result.append((number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpctx7ve_t.swift:6:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpctx7ve_t.swift:7:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { (x: Double) -> Double in\n        return (x - min) /\
    \ (max - min)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rescale_to_unit(numbers:\
    \ [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9])\
    \ == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers: [2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp2haj1ra7.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp2haj1ra7.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min_val = numbers.minElement()!\n    let max_val = numbers.maxElement()!\n\
    \    let range = max_val - min_val\n    return numbers.map { ($0 - min_val) /\
    \ range }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(rescale_to_unit(numbers:\
    \ [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9])\
    \ == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers: [2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpccczwqw8.swift:5:27: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min_val = numbers.minElement()!\n                  ~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmpccczwqw8.swift:6:27: error: value of type '[Double]' has\
    \ no member 'maxElement'\n    let max_val = numbers.maxElement()!\n          \
    \        ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 0
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    var min_value = numbers[0]\n    var max_value = numbers[0]\n    for number\
    \ in numbers {\n        if number < min_value {\n            min_value = number\n\
    \        }\n        if number > max_value {\n            max_value = number\n\
    \        }\n    }\n    let range = max_value - min_value\n    var rescaled_numbers\
    \ = [Double]()\n    for number in numbers {\n        rescaled_numbers.append((number\
    \ - min_value) / range)\n    }\n    return rescaled_numbers\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\n\
    assert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let scale = max - min\n    return numbers.map { ($0 - min) / scale }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpn5qnwa_o.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpn5qnwa_o.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    var result = [Double]()\n    let min = numbers.minElement()!\n    let\
    \ max = numbers.maxElement()!\n    for number in numbers {\n        result.append((number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpctx7ve_t.swift:6:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpctx7ve_t.swift:7:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    var result = [Double]()\n    let min = numbers.minElement()!\n    let\
    \ max = numbers.maxElement()!\n    for number in numbers {\n        result.append((number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpctx7ve_t.swift:6:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpctx7ve_t.swift:7:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min_value = numbers.minElement()!\n    let max_value = numbers.maxElement()!\n\
    \    let range = max_value - min_value\n    return numbers.map { ($0 - min_value)\
    \ / range }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(rescale_to_unit(numbers:\
    \ [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9])\
    \ == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers: [2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmppiur45ct.swift:5:29: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min_value = numbers.minElement()!\n                  \
    \  ~~~~~~~ ^~~~~~~~~~\n/tmp/tmppiur45ct.swift:6:29: error: value of type '[Double]'\
    \ has no member 'maxElement'\n    let max_value = numbers.maxElement()!\n    \
    \                ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { (n: Double) -> Double in\n        (n - min) / (max -\
    \ min)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rescale_to_unit(numbers:\
    \ [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9])\
    \ == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers: [2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpyv2chw56.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpyv2chw56.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min_number = numbers.minElement()!\n    let max_number = numbers.maxElement()!\n\
    \    let range = max_number - min_number\n    return numbers.map { ($0 - min_number)\
    \ / range }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(rescale_to_unit(numbers:\
    \ [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9])\
    \ == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers: [2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgjqtal_f.swift:5:30: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min_number = numbers.minElement()!\n                 \
    \    ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpgjqtal_f.swift:6:30: error: value of type '[Double]'\
    \ has no member 'maxElement'\n    let max_number = numbers.maxElement()!\n   \
    \                  ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min_number = numbers.minElement()!\n    let max_number = numbers.maxElement()!\n\
    \    let range = max_number - min_number\n    return numbers.map { (number) ->\
    \ Double in\n        return (number - min_number) / range\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmphjpfjgxn.swift:5:30: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min_number = numbers.minElement()!\n                 \
    \    ~~~~~~~ ^~~~~~~~~~\n/tmp/tmphjpfjgxn.swift:6:30: error: value of type '[Double]'\
    \ has no member 'maxElement'\n    let max_number = numbers.maxElement()!\n   \
    \                  ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min_number = numbers.minElement()!\n    let max_number = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min_number) / (max_number - min_number) }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp9uo3_1xd.swift:5:30: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min_number = numbers.minElement()!\n                 \
    \    ~~~~~~~ ^~~~~~~~~~\n/tmp/tmp9uo3_1xd.swift:6:30: error: value of type '[Double]'\
    \ has no member 'maxElement'\n    let max_number = numbers.maxElement()!\n   \
    \                  ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 0
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    var min = numbers[0]\n    var max = numbers[0]\n    for number in numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result =\
    \ [Double]()\n    for number in numbers {\n        result.append((number - min)\
    \ / (max - min))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min_number = numbers.minElement()!\n    let max_number = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min_number) / (max_number - min_number) }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp9uo3_1xd.swift:5:30: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min_number = numbers.minElement()!\n                 \
    \    ~~~~~~~ ^~~~~~~~~~\n/tmp/tmp9uo3_1xd.swift:6:30: error: value of type '[Double]'\
    \ has no member 'maxElement'\n    let max_number = numbers.maxElement()!\n   \
    \                  ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 0
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    var min = numbers[0]\n    var max = numbers[0]\n    for number in numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    let diff = max\
    \ - min\n    return numbers.map { ($0 - min) / diff }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    var result = [Double]()\n    let min = numbers.minElement()!\n    let\
    \ max = numbers.maxElement()!\n    for number in numbers {\n        result.append((number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpctx7ve_t.swift:6:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpctx7ve_t.swift:7:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 0
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    var min = numbers[0]\n    var max = numbers[0]\n    for number in numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result =\
    \ [Double]()\n    for number in numbers {\n        result.append((number - min)\
    \ / (max - min))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    var result = [Double]()\n    let min = numbers.minElement()!\n    let\
    \ max = numbers.maxElement()!\n    for number in numbers {\n        result.append((number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpctx7ve_t.swift:6:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpctx7ve_t.swift:7:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min_number = numbers.minElement()!\n    let max_number = numbers.maxElement()!\n\
    \    let range = max_number - min_number\n    return numbers.map { ($0 - min_number)\
    \ / range }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(rescale_to_unit(numbers:\
    \ [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9])\
    \ == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers: [2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgjqtal_f.swift:5:30: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min_number = numbers.minElement()!\n                 \
    \    ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpgjqtal_f.swift:6:30: error: value of type '[Double]'\
    \ has no member 'maxElement'\n    let max_number = numbers.maxElement()!\n   \
    \                  ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min_number = numbers.minElement()!\n    let max_number = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min_number) / (max_number - min_number) }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp9uo3_1xd.swift:5:30: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min_number = numbers.minElement()!\n                 \
    \    ~~~~~~~ ^~~~~~~~~~\n/tmp/tmp9uo3_1xd.swift:6:30: error: value of type '[Double]'\
    \ has no member 'maxElement'\n    let max_number = numbers.maxElement()!\n   \
    \                  ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min_value = numbers.minElement()!\n    let max_value = numbers.maxElement()!\n\
    \    let range = max_value - min_value\n    return numbers.map { ($0 - min_value)\
    \ / range }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(rescale_to_unit(numbers:\
    \ [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9])\
    \ == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers: [2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmppiur45ct.swift:5:29: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min_value = numbers.minElement()!\n                  \
    \  ~~~~~~~ ^~~~~~~~~~\n/tmp/tmppiur45ct.swift:6:29: error: value of type '[Double]'\
    \ has no member 'maxElement'\n    let max_value = numbers.maxElement()!\n    \
    \                ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 0
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    var min = numbers[0]\n    var max = numbers[0]\n    for number in numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result =\
    \ [Double]()\n    for number in numbers {\n        result.append((number - min)\
    \ / (max - min))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { (x: Double) -> Double in\n        (x - min) / (max -\
    \ min)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rescale_to_unit(numbers:\
    \ [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9])\
    \ == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers: [2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpnu_hhtxn.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpnu_hhtxn.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { $0.rescale(min: min, max: max) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\n\
    assert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp1e_yq0jl.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp1e_yq0jl.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n/tmp/tmp1e_yq0jl.swift:7:29:\
    \ error: value of type 'Double' has no member 'rescale'\n    return numbers.map\
    \ { $0.rescale(min: min, max: max) }\n                         ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 0
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    guard numbers.count > 1 else {\n        return numbers\n    }\n    \n\
    \    let min = numbers.min()!\n    let max = numbers.max()!\n    let range = max\
    \ - min\n    \n    return numbers.map { (n) -> Double in\n        (n - min) /\
    \ range\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rescale_to_unit(numbers:\
    \ [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9])\
    \ == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers: [2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min_number = numbers.minElement()!\n    let max_number = numbers.maxElement()!\n\
    \    let range = max_number - min_number\n    let rescaled = numbers.map { (number)\
    \ -> Double in\n        return (number - min_number) / range\n    }\n    return\
    \ rescaled\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(rescale_to_unit(numbers:\
    \ [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9])\
    \ == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers: [2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpf00dih4y.swift:5:30: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min_number = numbers.minElement()!\n                 \
    \    ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpf00dih4y.swift:6:30: error: value of type '[Double]'\
    \ has no member 'maxElement'\n    let max_number = numbers.maxElement()!\n   \
    \                  ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let diff = max - min\n    return numbers.map { ($0 - min) / diff }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpc25i9dqy.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpc25i9dqy.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    var result: [Double] = []\n    let min = numbers.minElement()!\n    let\
    \ max = numbers.maxElement()!\n    for number in numbers {\n        result.append((number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp23xeqqiq.swift:6:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp23xeqqiq.swift:7:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let diff = max - min\n    return numbers.map { ($0 - min) / diff }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpc25i9dqy.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpc25i9dqy.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    var result = [Double]()\n    let min = numbers.minElement()!\n    let\
    \ max = numbers.maxElement()!\n    for number in numbers {\n        result.append((number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpctx7ve_t.swift:6:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpctx7ve_t.swift:7:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    var result: [Double] = []\n    let min = numbers.minElement()!\n    let\
    \ max = numbers.maxElement()!\n    for number in numbers {\n        result.append((number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp23xeqqiq.swift:6:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp23xeqqiq.swift:7:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    var result = [Double]()\n    let min = numbers.minElement()!\n    let\
    \ max = numbers.maxElement()!\n    for number in numbers {\n        result.append((number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpctx7ve_t.swift:6:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpctx7ve_t.swift:7:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    var result = [Double]()\n    let min = numbers.minElement()!\n    let\
    \ max = numbers.maxElement()!\n    for number in numbers {\n        result.append((number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpctx7ve_t.swift:6:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpctx7ve_t.swift:7:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    var result = [Double]()\n    let min = numbers.minElement()!\n    let\
    \ max = numbers.maxElement()!\n    for n in numbers {\n        result.append((n\
    \ - min) / (max - min))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpu2c5owpk.swift:6:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpu2c5owpk.swift:7:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min_number = numbers.minElement()!\n    let max_number = numbers.maxElement()!\n\
    \    let range = max_number - min_number\n    return numbers.map { ($0 - min_number)\
    \ / range }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(rescale_to_unit(numbers:\
    \ [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9])\
    \ == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers: [2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgjqtal_f.swift:5:30: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min_number = numbers.minElement()!\n                 \
    \    ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpgjqtal_f.swift:6:30: error: value of type '[Double]'\
    \ has no member 'maxElement'\n    let max_number = numbers.maxElement()!\n   \
    \                  ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min_number = numbers.minElement()!\n    let max_number = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min_number) / (max_number - min_number) }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp9uo3_1xd.swift:5:30: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min_number = numbers.minElement()!\n                 \
    \    ~~~~~~~ ^~~~~~~~~~\n/tmp/tmp9uo3_1xd.swift:6:30: error: value of type '[Double]'\
    \ has no member 'maxElement'\n    let max_number = numbers.maxElement()!\n   \
    \                  ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { (number) -> Double in\n        return (number - min)\
    \ / (max - min)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rescale_to_unit(numbers:\
    \ [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9])\
    \ == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers: [2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmph_g0vn0j.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmph_g0vn0j.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min_value = numbers.minElement()!\n    let max_value = numbers.maxElement()!\n\
    \    let range = max_value - min_value\n    return numbers.map { ($0 - min_value)\
    \ / range }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(rescale_to_unit(numbers:\
    \ [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9])\
    \ == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers: [2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmppiur45ct.swift:5:29: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min_value = numbers.minElement()!\n                  \
    \  ~~~~~~~ ^~~~~~~~~~\n/tmp/tmppiur45ct.swift:6:29: error: value of type '[Double]'\
    \ has no member 'maxElement'\n    let max_value = numbers.maxElement()!\n    \
    \                ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    var result = [Double]()\n    let min = numbers.minElement()!\n    let\
    \ max = numbers.maxElement()!\n    for number in numbers {\n        result.append((number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpctx7ve_t.swift:6:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpctx7ve_t.swift:7:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min_number = numbers.minElement()!\n    let max_number = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min_number) / (max_number - min_number) }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp9uo3_1xd.swift:5:30: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min_number = numbers.minElement()!\n                 \
    \    ~~~~~~~ ^~~~~~~~~~\n/tmp/tmp9uo3_1xd.swift:6:30: error: value of type '[Double]'\
    \ has no member 'maxElement'\n    let max_number = numbers.maxElement()!\n   \
    \                  ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    var result = [Double]()\n    let min = numbers.minElement()!\n    let\
    \ max = numbers.maxElement()!\n    for number in numbers {\n        result.append((number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpctx7ve_t.swift:6:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpctx7ve_t.swift:7:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { (number) -> Double in\n \
    \       return (number - min) / range\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpyosih5wo.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpyosih5wo.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { (x: Double) -> Double in\n        return (x - min) /\
    \ (max - min)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rescale_to_unit(numbers:\
    \ [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9])\
    \ == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers: [2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp2haj1ra7.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp2haj1ra7.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    var result = [Double]()\n    let min = numbers.minElement()!\n    let\
    \ max = numbers.maxElement()!\n    for number in numbers {\n        result.append((number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpctx7ve_t.swift:6:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpctx7ve_t.swift:7:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let diff = max - min\n    return numbers.map { ($0 - min) / diff }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpc25i9dqy.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpc25i9dqy.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { (x: Double) -> Double in\n        return (x - min) /\
    \ (max - min)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rescale_to_unit(numbers:\
    \ [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9])\
    \ == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers: [2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp2haj1ra7.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp2haj1ra7.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 0
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    var min = numbers[0]\n    var max = numbers[0]\n    for number in numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    let range =\
    \ max - min\n    var result = [Double]()\n    for number in numbers {\n      \
    \  result.append((number - min) / range)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    var result = [Double]()\n    let min = numbers.minElement()!\n    let\
    \ max = numbers.maxElement()!\n    for number in numbers {\n        result.append((number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpctx7ve_t.swift:6:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpctx7ve_t.swift:7:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    var result = [Double]()\n    let min = numbers.minElement()!\n    let\
    \ max = numbers.maxElement()!\n    for number in numbers {\n        result.append((number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpctx7ve_t.swift:6:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpctx7ve_t.swift:7:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min_number = numbers.minElement()!\n    let max_number = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min_number) / (max_number - min_number) }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp9uo3_1xd.swift:5:30: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min_number = numbers.minElement()!\n                 \
    \    ~~~~~~~ ^~~~~~~~~~\n/tmp/tmp9uo3_1xd.swift:6:30: error: value of type '[Double]'\
    \ has no member 'maxElement'\n    let max_number = numbers.maxElement()!\n   \
    \                  ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 0
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    var min = numbers[0]\n    var max = numbers[0]\n    for number in numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    let range =\
    \ max - min\n    return numbers.map { (number) -> Double in\n        (number -\
    \ min) / range\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rescale_to_unit(numbers:\
    \ [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9])\
    \ == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers: [2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min_number = numbers.minElement()!\n    let max_number = numbers.maxElement()!\n\
    \    let range = max_number - min_number\n    return numbers.map { ($0 - min_number)\
    \ / range }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(rescale_to_unit(numbers:\
    \ [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9])\
    \ == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers: [2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgjqtal_f.swift:5:30: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min_number = numbers.minElement()!\n                 \
    \    ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpgjqtal_f.swift:6:30: error: value of type '[Double]'\
    \ has no member 'maxElement'\n    let max_number = numbers.maxElement()!\n   \
    \                  ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    var result = [Double]()\n    let min = numbers.minElement()!\n    let\
    \ max = numbers.maxElement()!\n    for n in numbers {\n        result.append((n\
    \ - min) / (max - min))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpu2c5owpk.swift:6:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpu2c5owpk.swift:7:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpgac9x8rs.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpgac9x8rs.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmp5ghcqcor.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp5ghcqcor.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let diff = max - min\n    return numbers.map { ($0 - min) / diff }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0,\
    \ 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpc25i9dqy.swift:5:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpc25i9dqy.swift:6:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
- exit_code: 1
  program: "\n/// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n/// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunc rescale_to_unit(numbers: [Double]) -> [Double]\
    \ {\n    var result = [Double]()\n    let min = numbers.minElement()!\n    let\
    \ max = numbers.maxElement()!\n    for number in numbers {\n        result.append((number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rescale_to_unit(numbers: [2.0, 49.9]) == [0.0, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
    \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
    \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
  status: SyntaxError
  stderr: "/tmp/tmpctx7ve_t.swift:6:23: error: value of type '[Double]' has no member\
    \ 'minElement'\n    let min = numbers.minElement()!\n              ~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpctx7ve_t.swift:7:23: error: value of type '[Double]' has no member 'maxElement'\n\
    \    let max = numbers.maxElement()!\n              ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013660
