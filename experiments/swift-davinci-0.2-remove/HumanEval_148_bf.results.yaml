language: swift
name: HumanEval_148_bf
results:
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    guard\
    \ let p1 = planets.firstIndex(of: planet1), let p2 = planets.firstIndex(of: planet2)\
    \ else {\n        return result\n    }\n    if p1 < p2 {\n        for i in p1...p2\
    \ {\n            result.append(planets[i])\n        }\n    } else {\n        for\
    \ i in p2...p1 {\n            result.append(planets[i])\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2:\
    \ \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\n\
    assert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"\
    Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\")\
    \ == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmpg2j1lan3/tmpg2j1lan3.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6909634c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b690932bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b690932b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b690932a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg2j1lan3                        0x0000564ddd81a85b <unavailable> + 6235

    5    libc.so.6                          0x00002b6909820460 __libc_start_main +
    245

    6    tmpg2j1lan3                        0x0000564ddd81a409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    guard\
    \ let p1 = planets.firstIndex(of: planet1),\n        let p2 = planets.firstIndex(of:\
    \ planet2) else {\n            return result\n    }\n    if p1 < p2 {\n      \
    \  for i in p1...p2 {\n            result.append(planets[i])\n        }\n    }\
    \ else {\n        for i in p2...p1 {\n            result.append(planets[i])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1:\
    \ \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\"\
    ) == [] as [String])"
  status: Exception
  stderr: 'tmpjv5cqjo_/tmpjv5cqjo_.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c0f4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c0c42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c0c42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c0c417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjv5cqjo_                        0x000055d78d17185b <unavailable> + 6235

    5    libc.so.6                          0x00002ba6c1137460 __libc_start_main +
    245

    6    tmpjv5cqjo_                        0x000055d78d171409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result: [String] = []\n    if\
    \ let index1 = planets.firstIndex(of: planet1), let index2 = planets.firstIndex(of:\
    \ planet2) {\n        if index1 < index2 {\n            for i in index1...index2\
    \ {\n                result.append(planets[i])\n            }\n        } else\
    \ {\n            for i in index2...index1 {\n                result.append(planets[i])\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp47artb0e/tmp47artb0e.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7333aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7330a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7330a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7330a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp47artb0e                        0x000055845f66180b <unavailable> + 6155

    5    libc.so.6                          0x00002ba733596460 __libc_start_main +
    245

    6    tmp47artb0e                        0x000055845f6613b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result: [String] = []\n    if\
    \ let index1 = planets.firstIndex(of: planet1), let index2 = planets.firstIndex(of:\
    \ planet2) {\n        if index1 < index2 {\n            result = Array(planets[index1...index2])\n\
    \        } else {\n            result = Array(planets[index2...index1])\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1:\
    \ \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\"\
    , planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\"\
    ) == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmpv96u6ryv/tmpv96u6ryv.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad214cc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2149bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad2149bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2149ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv96u6ryv                        0x000055d063a0985b <unavailable> + 6235

    5    libc.so.6                          0x00002ad214eb0460 __libc_start_main +
    245

    6    tmpv96u6ryv                        0x000055d063a09409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result: [String] = []\n    let\
    \ index1 = planets.firstIndex(of: planet1)\n    let index2 = planets.firstIndex(of:\
    \ planet2)\n    if index1 == nil || index2 == nil {\n        return result\n \
    \   }\n    if index1! < index2! {\n        result = Array(planets[index1!...index2!])\n\
    \    } else {\n        result = Array(planets[index2!...index1!])\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2:\
    \ \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\n\
    assert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"\
    Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\")\
    \ == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmpud5q6kpa/tmpud5q6kpa.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47b89edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47b86e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47b86e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47b86e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpud5q6kpa                        0x0000562fc8e3085b <unavailable> + 6235

    5    libc.so.6                          0x00002b47b8bd9460 __libc_start_main +
    245

    6    tmpud5q6kpa                        0x0000562fc8e30409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else { return [] }\n    return\
    \ p1 < p2 ? Array(planets[p1...p2]) : Array(planets[p2...p1])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"\
    Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") ==\
    \ [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\"\
    , planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpg2wl0qur/tmpg2wl0qur.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8400740c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8400437b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8400437988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84004367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg2wl0qur                        0x000055810def785b <unavailable> + 6235

    5    libc.so.6                          0x00002b840092c460 __libc_start_main +
    245

    6    tmpg2wl0qur                        0x000055810def7409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result: [String] = []\n    var\
    \ start = 0\n    var end = 0\n    for (index, planet) in planets.enumerated()\
    \ {\n        if planet == planet1 {\n            start = index\n        }\n  \
    \      if planet == planet2 {\n            end = index\n        }\n    }\n   \
    \ if start == 0 && end == 0 {\n        return result\n    }\n    if start > end\
    \ {\n        let temp = start\n        start = end\n        end = temp\n    }\n\
    \    for i in start...end {\n        result.append(planets[i])\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2:\
    \ \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\n\
    assert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"\
    Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\")\
    \ == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmpneah5t9u/tmpneah5t9u.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4286ec7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4286bbeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4286bbe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4286bbd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpneah5t9u                        0x00005558330ac9bb <unavailable> + 6587

    5    libc.so.6                          0x00002b42870b3460 __libc_start_main +
    245

    6    tmpneah5t9u                        0x00005558330ac569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result: [String] = []\n    if\
    \ let index1 = planets.firstIndex(of: planet1), let index2 = planets.firstIndex(of:\
    \ planet2) {\n        if index1 < index2 {\n            result = Array(planets[index1...index2])\n\
    \        } else {\n            result = Array(planets[index2...index1])\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1:\
    \ \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\"\
    , planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\"\
    ) == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmpv96u6ryv/tmpv96u6ryv.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad214cc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2149bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad2149bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2149ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv96u6ryv                        0x000055d063a0985b <unavailable> + 6235

    5    libc.so.6                          0x00002ad214eb0460 __libc_start_main +
    245

    6    tmpv96u6ryv                        0x000055d063a09409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let minIndex\
    \ = min(planet1Index!, planet2Index!)\n    let maxIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[minIndex...maxIndex])\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"\
    Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpuhbfih9g/tmpuhbfih9g.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b916c3c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b916c0c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b916c0c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b916c0bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuhbfih9g                        0x0000555aa9e6294b <unavailable> + 6475

    5    libc.so.6                          0x00002b916c5b5460 __libc_start_main +
    245

    6    tmpuhbfih9g                        0x0000555aa9e624f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let start = min(planet1Index!,\
    \ planet2Index!)\n    let end = max(planet1Index!, planet2Index!)\n    return\
    \ Array(planets[start...end])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1:\
    \ \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\"\
    , planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\"\
    ) == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmp1wvfne_9/tmp1wvfne_9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43e7598c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43e728fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43e728f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43e728e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1wvfne_9                        0x0000563022d1694b <unavailable> + 6475

    5    libc.so.6                          0x00002b43e7784460 __libc_start_main +
    245

    6    tmp1wvfne_9                        0x0000563022d164f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let minIndex\
    \ = min(planet1Index!, planet2Index!)\n    let maxIndex = max(planet1Index!, planet2Index!)\n\
    \    var result: [String] = []\n    for i in minIndex..<maxIndex {\n        result.append(planets[i])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1:\
    \ \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\"\
    , planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\"\
    ) == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmpxssya1od/tmpxssya1od.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab83677fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab836476b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab836476988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8364757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxssya1od                        0x000055e0879c08eb <unavailable> + 6379

    5    libc.so.6                          0x00002ab83696b460 __libc_start_main +
    245

    6    tmpxssya1od                        0x000055e0879c0499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else {\n        return []\n\
    \    }\n    let start = min(p1, p2)\n    let end = max(p1, p2)\n    return Array(planets[start...end])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpg11sxxfu/tmpg11sxxfu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a1fcdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a1cc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9a1cc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9a1cc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg11sxxfu                        0x000055829208094b <unavailable> + 6475

    5    libc.so.6                          0x00002ab9a21b9460 __libc_start_main +
    245

    6    tmpg11sxxfu                        0x00005582920804f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let start = min(planet1Index!,\
    \ planet2Index!)\n    let end = max(planet1Index!, planet2Index!)\n    return\
    \ Array(planets[start...end])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1:\
    \ \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\"\
    , planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\"\
    ) == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmp1wvfne_9/tmp1wvfne_9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43e7598c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43e728fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43e728f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43e728e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1wvfne_9                        0x0000563022d1694b <unavailable> + 6475

    5    libc.so.6                          0x00002b43e7784460 __libc_start_main +
    245

    6    tmp1wvfne_9                        0x0000563022d164f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    if let\
    \ index1 = planets.firstIndex(of: planet1), let index2 = planets.firstIndex(of:\
    \ planet2) {\n        if index1 < index2 {\n            for i in index1...index2\
    \ {\n                result.append(planets[i])\n            }\n        } else\
    \ {\n            for i in index2...index1 {\n                result.append(planets[i])\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmppxs9q9qg/tmppxs9q9qg.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab86f6dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab86f3d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab86f3d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab86f3d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxs9q9qg                        0x00005602fb68c85b <unavailable> + 6235

    5    libc.so.6                          0x00002ab86f8c8460 __libc_start_main +
    245

    6    tmppxs9q9qg                        0x00005602fb68c409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else { return [] }\n    return\
    \ planets[min(p1, p2) ... max(p1, p2)]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1:\
    \ \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\"\
    ) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpm2dnpnp0.swift:15:19: error: cannot convert return expression of\
    \ type 'ArraySlice<String>' to return type '[String]'\n    return planets[min(p1,\
    \ p2) ... max(p1, p2)]\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else { return [] }\n    let\
    \ min = min(p1, p2)\n    let max = max(p1, p2)\n    return Array(planets[min...max])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp2r0q43t_/tmp2r0q43t_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3a9323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3a901ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3a901a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3a90197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2r0q43t_                        0x0000564963f2694b <unavailable> + 6475

    5    libc.so.6                          0x00002ab3a950f460 __libc_start_main +
    245

    6    tmp2r0q43t_                        0x0000564963f264f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else { return [] }\n    let\
    \ min = min(p1, p2)\n    let max = max(p1, p2)\n    return Array(planets[min...max])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp2r0q43t_/tmp2r0q43t_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3a9323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3a901ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3a901a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3a90197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2r0q43t_                        0x0000564963f2694b <unavailable> + 6475

    5    libc.so.6                          0x00002ab3a950f460 __libc_start_main +
    245

    6    tmp2r0q43t_                        0x0000564963f264f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let index1 = planets.firstIndex(of:\
    \ planet1),\n        let index2 = planets.firstIndex(of: planet2) else {\n   \
    \         return []\n    }\n    return Array(planets[min(index1, index2) + 1 ..<\
    \ max(index1, index2)])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1:\
    \ \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\"\
    , planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\"\
    ) == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab178f87c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab178c7e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab178c7e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab178c7e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab178c7dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp9ogjtekq                        0x0000557b141b180d <unavailable> + 10253

    6    tmp9ogjtekq                        0x0000557b141b0f2b <unavailable> + 7979

    7    libc.so.6                          0x00002ab179173460 __libc_start_main +
    245

    8    tmp9ogjtekq                        0x0000557b141b0459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let p1 = planets.firstIndex(of: planet1)\n\
    \    let p2 = planets.firstIndex(of: planet2)\n    if p1 == nil || p2 == nil {\n\
    \        return []\n    }\n    let min = min(p1!, p2!)\n    let max = max(p1!,\
    \ p2!)\n    return Array(planets[min...max])\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"\
    Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmph6_u19du/tmph6_u19du.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affdcb15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affdc80cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affdc80c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affdc80b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph6_u19du                        0x000055f49bae394b <unavailable> + 6475

    5    libc.so.6                          0x00002affdcd01460 __libc_start_main +
    245

    6    tmph6_u19du                        0x000055f49bae34f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    var start\
    \ = 0\n    var end = 0\n    for (index, planet) in planets.enumerated() {\n  \
    \      if planet == planet1 {\n            start = index\n        }\n        if\
    \ planet == planet2 {\n            end = index\n        }\n    }\n    if start\
    \ > end {\n        let temp = start\n        start = end\n        end = temp\n\
    \    }\n    for i in start...end {\n        result.append(planets[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2:\
    \ \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\n\
    assert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"\
    Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\")\
    \ == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmpg_hn1kpx/tmpg_hn1kpx.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e457fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e454f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e454f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e454f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_hn1kpx                        0x0000564cefea2a1b <unavailable> + 6683

    5    libc.so.6                          0x00002b1e459e9460 __libc_start_main +
    245

    6    tmpg_hn1kpx                        0x0000564cefea25c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else {\n        return []\n\
    \    }\n    return planets[min(p1, p2) + 1 ..< max(p1, p2)].sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp1_eygpqz/tmp1_eygpqz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b450f1a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b450ee97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b450ee97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b450ee967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1_eygpqz                        0x000055a3cbedfcb8 <unavailable> + 7352

    5    libc.so.6                          0x00002b450f38c460 __libc_start_main +
    245

    6    tmp1_eygpqz                        0x000055a3cbedf499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else {\n        return []\n\
    \    }\n    let min = min(p1, p2)\n    let max = max(p1, p2)\n    return Array(planets[min...max])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpise2n1fg/tmpise2n1fg.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61533e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61530e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61530e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61530df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpise2n1fg                        0x0000564531de394b <unavailable> + 6475

    5    libc.so.6                          0x00002b61535d5460 __libc_start_main +
    245

    6    tmpise2n1fg                        0x0000564531de34f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    guard\
    \ let index1 = planets.firstIndex(of: planet1),\n        let index2 = planets.firstIndex(of:\
    \ planet2) else {\n            return result\n    }\n    if index1 > index2 {\n\
    \        for i in index2...index1 {\n            result.append(planets[i])\n \
    \       }\n    } else {\n        for i in index1...index2 {\n            result.append(planets[i])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1:\
    \ \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\"\
    ) == [] as [String])"
  status: Exception
  stderr: 'tmpd9vo07no/tmpd9vo07no.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aefb04f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefb01ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aefb01ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aefb01eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd9vo07no                        0x0000560302d7585b <unavailable> + 6235

    5    libc.so.6                          0x00002aefb06e1460 __libc_start_main +
    245

    6    tmpd9vo07no                        0x0000560302d75409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result: [String] = []\n    var\
    \ start = 0\n    var end = 0\n    for (index, planet) in planets.enumerated()\
    \ {\n        if planet == planet1 {\n            start = index\n        }\n  \
    \      if planet == planet2 {\n            end = index\n        }\n    }\n   \
    \ if start > end {\n        let temp = start\n        start = end\n        end\
    \ = temp\n    }\n    for i in start...end {\n        result.append(planets[i])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1:\
    \ \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\"\
    , planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\"\
    ) == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmpajtmwwu4/tmpajtmwwu4.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8999cd1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89999c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89999c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89999c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajtmwwu4                        0x0000560d399c89bb <unavailable> + 6587

    5    libc.so.6                          0x00002b8999ebd460 __libc_start_main +
    245

    6    tmpajtmwwu4                        0x0000560d399c8569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    guard\
    \ let index1 = planets.firstIndex(of: planet1), let index2 = planets.firstIndex(of:\
    \ planet2) else {\n        return result\n    }\n    if index1 < index2 {\n  \
    \      for i in index1...index2 {\n            result.append(planets[i])\n   \
    \     }\n    } else {\n        for i in index2...index1 {\n            result.append(planets[i])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1:\
    \ \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\"\
    ) == [] as [String])"
  status: Exception
  stderr: 'tmpn0qg_m52/tmpn0qg_m52.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe801a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe7fe9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe7fe9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe7fe9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0qg_m52                        0x000055cf0f18285b <unavailable> + 6235

    5    libc.so.6                          0x00002abe80391460 __libc_start_main +
    245

    6    tmpn0qg_m52                        0x000055cf0f182409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else { return [] }\n    return\
    \ p1 < p2 ? Array(planets[p1...p2]) : Array(planets[p2...p1])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"\
    Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") ==\
    \ [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\"\
    , planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpg2wl0qur/tmpg2wl0qur.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8400740c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8400437b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8400437988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84004367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg2wl0qur                        0x000055810def785b <unavailable> + 6235

    5    libc.so.6                          0x00002b840092c460 __libc_start_main +
    245

    6    tmpg2wl0qur                        0x000055810def7409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else { return [] }\n    let\
    \ start = min(p1, p2)\n    let end = max(p1, p2)\n    return Array(planets[start...end])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpndc3z8di/tmpndc3z8di.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b416ba48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b416b73fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b416b73f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b416b73e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpndc3z8di                        0x0000557e7012994b <unavailable> + 6475

    5    libc.so.6                          0x00002b416bc34460 __libc_start_main +
    245

    6    tmpndc3z8di                        0x0000557e701294f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Idx = planets.firstIndex(of:\
    \ planet1)\n    let planet2Idx = planets.firstIndex(of: planet2)\n    if planet1Idx\
    \ == nil || planet2Idx == nil {\n        return []\n    }\n    let startIdx =\
    \ min(planet1Idx!, planet2Idx!)\n    let endIdx = max(planet1Idx!, planet2Idx!)\n\
    \    return Array(planets[startIdx...endIdx])\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"\
    Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpzuas0l3s/tmpzuas0l3s.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeadadcbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeadaac2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeadaac2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeadaac17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzuas0l3s                        0x0000562bff2f394b <unavailable> + 6475

    5    libc.so.6                          0x00002aeadafb7460 __libc_start_main +
    245

    6    tmpzuas0l3s                        0x0000562bff2f34f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    if let\
    \ index1 = planets.firstIndex(of: planet1), let index2 = planets.firstIndex(of:\
    \ planet2) {\n        let min = min(index1, index2)\n        let max = max(index1,\
    \ index2)\n        for i in min...max {\n            result.append(planets[i])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1:\
    \ \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\"\
    ) == [] as [String])"
  status: Exception
  stderr: 'tmpmnxdkldj/tmpmnxdkldj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2afc70bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2afc402b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2afc402988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2afc4017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmnxdkldj                        0x000055f7e2f5894b <unavailable> + 6475

    5    libc.so.6                          0x00002b2afc8f7460 __libc_start_main +
    245

    6    tmpmnxdkldj                        0x000055f7e2f584f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let start = min(planet1Index!,\
    \ planet2Index!)\n    let end = max(planet1Index!, planet2Index!)\n    return\
    \ Array(planets[start...end])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1:\
    \ \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\"\
    , planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\"\
    ) == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmp1wvfne_9/tmp1wvfne_9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43e7598c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43e728fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43e728f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43e728e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1wvfne_9                        0x0000563022d1694b <unavailable> + 6475

    5    libc.so.6                          0x00002b43e7784460 __libc_start_main +
    245

    6    tmp1wvfne_9                        0x0000563022d164f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    if planet1Index!\
    \ > planet2Index! {\n        return Array(planets[planet2Index!...planet1Index!])\n\
    \    } else {\n        return Array(planets[planet1Index!...planet2Index!])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2:\
    \ \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\n\
    assert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"\
    Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\")\
    \ == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmppcttq9q9/tmppcttq9q9.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16bf25ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16bef51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16bef51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16bef507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppcttq9q9                        0x000055a6514f885b <unavailable> + 6235

    5    libc.so.6                          0x00002b16bf446460 __libc_start_main +
    245

    6    tmppcttq9q9                        0x000055a6514f8409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result: [String] = []\n    guard\
    \ let planet1Index = planets.firstIndex(of: planet1),\n        let planet2Index\
    \ = planets.firstIndex(of: planet2) else {\n            return result\n    }\n\
    \    if planet1Index < planet2Index {\n        result = Array(planets[planet1Index...planet2Index])\n\
    \    } else {\n        result = Array(planets[planet2Index...planet1Index])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1:\
    \ \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\"\
    , planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\"\
    ) == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmp0qz2p3d4/tmp0qz2p3d4.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e4ec48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e4e93fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e4e93f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e4e93e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0qz2p3d4                        0x000055ec6d83d85b <unavailable> + 6235

    5    libc.so.6                          0x00002b8e4ee34460 __libc_start_main +
    245

    6    tmp0qz2p3d4                        0x000055ec6d83d409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    guard\
    \ let p1 = planets.firstIndex(of: planet1), let p2 = planets.firstIndex(of: planet2)\
    \ else { return result }\n    let min = p1 < p2 ? p1 : p2\n    let max = p1 >\
    \ p2 ? p1 : p2\n    for i in min...max {\n        result.append(planets[i])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1:\
    \ \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\"\
    , planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\"\
    ) == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmpmpaowha3/tmpmpaowha3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab92f62bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab92f322b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab92f322988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab92f3217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmpaowha3                        0x0000564f1a87185b <unavailable> + 6235

    5    libc.so.6                          0x00002ab92f817460 __libc_start_main +
    245

    6    tmpmpaowha3                        0x0000564f1a871409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    if let\
    \ index1 = planets.firstIndex(of: planet1), let index2 = planets.firstIndex(of:\
    \ planet2) {\n        if index1 < index2 {\n            result = Array(planets[index1...index2])\n\
    \        } else {\n            result = Array(planets[index2...index1])\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1:\
    \ \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\"\
    , planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\"\
    ) == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmpjiqn05x4/tmpjiqn05x4.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b843e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b840dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b840dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b840db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjiqn05x4                        0x0000558df9bd28ab <unavailable> + 6315

    5    libc.so.6                          0x00002b2b845d1460 __libc_start_main +
    245

    6    tmpjiqn05x4                        0x0000558df9bd2459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result: [String] = []\n    var\
    \ start = 0\n    var end = 0\n    for (index, planet) in planets.enumerated()\
    \ {\n        if planet == planet1 {\n            start = index\n        }\n  \
    \      if planet == planet2 {\n            end = index\n        }\n    }\n   \
    \ if start == 0 || end == 0 {\n        return result\n    }\n    if start > end\
    \ {\n        let temp = start\n        start = end\n        end = temp\n    }\n\
    \    for i in start...end {\n        result.append(planets[i])\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2:\
    \ \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\n\
    assert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"\
    Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\")\
    \ == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmp_tdmhipd/tmp_tdmhipd.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac82ac7ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac82a975b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac82a975988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac82a9747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_tdmhipd                        0x000055b98eec99bb <unavailable> + 6587

    5    libc.so.6                          0x00002ac82ae6a460 __libc_start_main +
    245

    6    tmp_tdmhipd                        0x000055b98eec9569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var index1 = 0\n    var index2 = 0\n\
    \    var result = [String]()\n    for (index, planet) in planets.enumerated()\
    \ {\n        if planet == planet1 {\n            index1 = index\n        }\n \
    \       if planet == planet2 {\n            index2 = index\n        }\n    }\n\
    \    if index1 > index2 {\n        for i in index2...index1 {\n            result.append(planets[i])\n\
    \        }\n    } else {\n        for i in index1...index2 {\n            result.append(planets[i])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1:\
    \ \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\"\
    ) == [] as [String])"
  status: Exception
  stderr: 'tmpwwd8utre/tmpwwd8utre.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b298d9b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b298d6aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b298d6ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b298d6ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwwd8utre                        0x000055a4c25ffa1b <unavailable> + 6683

    5    libc.so.6                          0x00002b298dba3460 __libc_start_main +
    245

    6    tmpwwd8utre                        0x000055a4c25ff5c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else { return [] }\n    if\
    \ p1 > p2 { return Array(planets[p2...p1]) }\n    return Array(planets[p1...p2])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp8o4tvwto/tmp8o4tvwto.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6902c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af68ffbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af68ffbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af68ffba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o4tvwto                        0x000055f39aad685b <unavailable> + 6235

    5    libc.so.6                          0x00002af6904b0460 __libc_start_main +
    245

    6    tmp8o4tvwto                        0x000055f39aad6409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else {\n        return []\n\
    \    }\n    let start = min(p1, p2)\n    let end = max(p1, p2)\n    return Array(planets[start...end])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpg11sxxfu/tmpg11sxxfu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a1fcdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a1cc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9a1cc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9a1cc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg11sxxfu                        0x000055829208094b <unavailable> + 6475

    5    libc.so.6                          0x00002ab9a21b9460 __libc_start_main +
    245

    6    tmpg11sxxfu                        0x00005582920804f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    if let\
    \ index1 = planets.firstIndex(of: planet1), let index2 = planets.firstIndex(of:\
    \ planet2) {\n        if index1 < index2 {\n            for i in index1+1..<index2\
    \ {\n                result.append(planets[i])\n            }\n        } else\
    \ {\n            for i in index2+1..<index1 {\n                result.append(planets[i])\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002adf8f12dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf8ee24561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adf8ee24286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adf8ee2413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adf8ee23bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp8xf56ns1                        0x000055f53f8dc8d2 <unavailable> + 10450

    6    tmp8xf56ns1                        0x000055f53f8dbedb <unavailable> + 7899

    7    libc.so.6                          0x00002adf8f319460 __libc_start_main +
    245

    8    tmp8xf56ns1                        0x000055f53f8db409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let start = planets.firstIndex(of:\
    \ planet1), let end = planets.firstIndex(of: planet2) else {\n        return []\n\
    \    }\n    return Array(planets[start...end])\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"\
    Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpv7oihmu9/tmpv7oihmu9.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd99a35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd9972cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd9972c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd9972b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv7oihmu9                        0x000055bb7046085b <unavailable> + 6235

    5    libc.so.6                          0x00002afd99c21460 __libc_start_main +
    245

    6    tmpv7oihmu9                        0x000055bb70460409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let p1 = planets.firstIndex(of: planet1)\n\
    \    let p2 = planets.firstIndex(of: planet2)\n    if p1 == nil || p2 == nil {\n\
    \        return []\n    }\n    if p1! > p2! {\n        return Array(planets[p2!...p1!])\n\
    \    } else {\n        return Array(planets[p1!...p2!])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"\
    Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") ==\
    \ [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\"\
    , planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpe24_k348/tmpe24_k348.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b75465c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b7515cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b7515c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b7515b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe24_k348                        0x0000556329a1785b <unavailable> + 6235

    5    libc.so.6                          0x00002b4b75651460 __libc_start_main +
    245

    6    tmpe24_k348                        0x0000556329a17409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let p1 = planets.firstIndex(of: planet1)\n\
    \    let p2 = planets.firstIndex(of: planet2)\n    if p1 == nil || p2 == nil {\n\
    \        return []\n    }\n    if p1! < p2! {\n        return Array(planets[p1!+1...p2!-1])\n\
    \    } else {\n        return Array(planets[p2!+1...p1!-1])\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b26217c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26214b8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b26214b8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b26214b813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b26214b7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp6kb3qi8r                        0x0000564f6d2a9d9f <unavailable> + 11679

    6    tmp6kb3qi8r                        0x0000564f6d2a8edb <unavailable> + 7899

    7    libc.so.6                          0x00002b26219ad460 __libc_start_main +
    245

    8    tmp6kb3qi8r                        0x0000564f6d2a8409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let first = planets.firstIndex(of:\
    \ planet1), let second = planets.firstIndex(of: planet2) else {\n        return\
    \ []\n    }\n    return Array(planets[min(first, second) + 1 ..< max(first, second)])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b599917ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5998e75561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5998e75286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5998e7513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5998e74bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp_2xfm7es                        0x000056475fd7780d <unavailable> + 10253

    6    tmp_2xfm7es                        0x000056475fd76f2b <unavailable> + 7979

    7    libc.so.6                          0x00002b599936a460 __libc_start_main +
    245

    8    tmp_2xfm7es                        0x000056475fd76459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else { return [] }\n    return\
    \ p1 < p2 ? Array(planets[p1...p2]) : Array(planets[p2...p1])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"\
    Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") ==\
    \ [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\"\
    , planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpg2wl0qur/tmpg2wl0qur.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8400740c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8400437b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8400437988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84004367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg2wl0qur                        0x000055810def785b <unavailable> + 6235

    5    libc.so.6                          0x00002b840092c460 __libc_start_main +
    245

    6    tmpg2wl0qur                        0x000055810def7409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let index1 = planets.firstIndex(of:\
    \ planet1)\n    let index2 = planets.firstIndex(of: planet2)\n    if index1 ==\
    \ nil || index2 == nil {\n        return []\n    }\n    if index1! < index2! {\n\
    \        return Array(planets[index1!...index2!])\n    } else {\n        return\
    \ Array(planets[index2!...index1!])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"\
    Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp2gt7p3oj/tmp2gt7p3oj.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9412fa0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9412c97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9412c97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9412c967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2gt7p3oj                        0x000056353217585b <unavailable> + 6235

    5    libc.so.6                          0x00002b941318c460 __libc_start_main +
    245

    6    tmp2gt7p3oj                        0x0000563532175409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let p1 = planets.firstIndex(of: planet1)\n\
    \    let p2 = planets.firstIndex(of: planet2)\n    if p1 == nil || p2 == nil {\n\
    \        return []\n    }\n    if p1! < p2! {\n        return Array(planets[p1!+1...p2!-1])\n\
    \    } else {\n        return Array(planets[p2!+1...p1!-1])\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b26217c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26214b8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b26214b8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b26214b813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b26214b7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp6kb3qi8r                        0x0000564f6d2a9d9f <unavailable> + 11679

    6    tmp6kb3qi8r                        0x0000564f6d2a8edb <unavailable> + 7899

    7    libc.so.6                          0x00002b26219ad460 __libc_start_main +
    245

    8    tmp6kb3qi8r                        0x0000564f6d2a8409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let index1 = planets.firstIndex(of:\
    \ planet1)\n    let index2 = planets.firstIndex(of: planet2)\n    if index1 ==\
    \ nil || index2 == nil {\n        return []\n    }\n    let minIndex = min(index1!,\
    \ index2!)\n    let maxIndex = max(index1!, index2!)\n    return Array(planets[minIndex...maxIndex])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp83_vxc3a/tmp83_vxc3a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71c383bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71c3532b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71c3532988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71c35317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp83_vxc3a                        0x000055581b34b94b <unavailable> + 6475

    5    libc.so.6                          0x00002b71c3a27460 __libc_start_main +
    245

    6    tmp83_vxc3a                        0x000055581b34b4f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    if let\
    \ index1 = planets.firstIndex(of: planet1), let index2 = planets.firstIndex(of:\
    \ planet2) {\n        if index1 < index2 {\n            for i in index1...index2\
    \ {\n                result.append(planets[i])\n            }\n        } else\
    \ {\n            for i in index2...index1 {\n                result.append(planets[i])\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmppxs9q9qg/tmppxs9q9qg.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab86f6dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab86f3d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab86f3d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab86f3d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxs9q9qg                        0x00005602fb68c85b <unavailable> + 6235

    5    libc.so.6                          0x00002ab86f8c8460 __libc_start_main +
    245

    6    tmppxs9q9qg                        0x00005602fb68c409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    guard\
    \ let p1 = planets.firstIndex(of: planet1), let p2 = planets.firstIndex(of: planet2)\
    \ else { return result }\n    if p1 < p2 {\n        for i in p1...p2 {\n     \
    \       result.append(planets[i])\n        }\n    } else {\n        for i in p2...p1\
    \ {\n            result.append(planets[i])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpcxqbum4s/tmpcxqbum4s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93c80c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93c7dbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93c7dba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93c7db97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcxqbum4s                        0x000055dcedeef85b <unavailable> + 6235

    5    libc.so.6                          0x00002b93c82af460 __libc_start_main +
    245

    6    tmpcxqbum4s                        0x000055dcedeef409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    if let\
    \ p1 = planets.firstIndex(of: planet1), let p2 = planets.firstIndex(of: planet2)\
    \ {\n        if p1 < p2 {\n            for i in p1...p2 {\n                result.append(planets[i])\n\
    \            }\n        } else {\n            for i in p2...p1 {\n           \
    \     result.append(planets[i])\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp7e60rb30/tmp7e60rb30.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9bdb1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9bd815b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9bd815988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9bd8147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7e60rb30                        0x0000563f6b8e785b <unavailable> + 6235

    5    libc.so.6                          0x00002af9bdd0a460 __libc_start_main +
    245

    6    tmp7e60rb30                        0x0000563f6b8e7409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    if let\
    \ p1 = planets.firstIndex(of: planet1), let p2 = planets.firstIndex(of: planet2)\
    \ {\n        if p1 < p2 {\n            for i in p1...p2 {\n                result.append(planets[i])\n\
    \            }\n        } else {\n            for i in p2...p1 {\n           \
    \     result.append(planets[i])\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp7e60rb30/tmp7e60rb30.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9bdb1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9bd815b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9bd815988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9bd8147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7e60rb30                        0x0000563f6b8e785b <unavailable> + 6235

    5    libc.so.6                          0x00002af9bdd0a460 __libc_start_main +
    245

    6    tmp7e60rb30                        0x0000563f6b8e7409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result: [String] = []\n    guard\
    \ let index1 = planets.firstIndex(of: planet1),\n        let index2 = planets.firstIndex(of:\
    \ planet2) else {\n            return result\n    }\n    if index1 < index2 {\n\
    \        result = Array(planets[index1...index2])\n    } else {\n        result\
    \ = Array(planets[index2...index1])\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"\
    Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") ==\
    \ [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\"\
    , planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpzvwlldsw/tmpzvwlldsw.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee06ca7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee0699eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee0699e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee0699d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzvwlldsw                        0x0000558b0cad785b <unavailable> + 6235

    5    libc.so.6                          0x00002aee06e93460 __libc_start_main +
    245

    6    tmpzvwlldsw                        0x0000558b0cad7409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    guard\
    \ let planet1Index = planets.firstIndex(of: planet1),\n        let planet2Index\
    \ = planets.firstIndex(of: planet2) else {\n            return result\n    }\n\
    \    if planet1Index < planet2Index {\n        for i in planet1Index...planet2Index\
    \ {\n            result.append(planets[i])\n        }\n    } else {\n        for\
    \ i in planet2Index...planet1Index {\n            result.append(planets[i])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1:\
    \ \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\"\
    ) == [] as [String])"
  status: Exception
  stderr: 'tmpefouuzil/tmpefouuzil.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ee7720c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ee7417b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ee7417988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ee74167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpefouuzil                        0x00005559a0ab185b <unavailable> + 6235

    5    libc.so.6                          0x00002b3ee790c460 __libc_start_main +
    245

    6    tmpefouuzil                        0x00005559a0ab1409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result: [String] = []\n    if\
    \ let index1 = planets.firstIndex(of: planet1), let index2 = planets.firstIndex(of:\
    \ planet2) {\n        if index1 < index2 {\n            result = Array(planets[index1...index2])\n\
    \        } else {\n            result = Array(planets[index2...index1])\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1:\
    \ \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\"\
    , planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\"\
    ) == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmpv96u6ryv/tmpv96u6ryv.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad214cc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2149bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad2149bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2149ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv96u6ryv                        0x000055d063a0985b <unavailable> + 6235

    5    libc.so.6                          0x00002ad214eb0460 __libc_start_main +
    245

    6    tmpv96u6ryv                        0x000055d063a09409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else { return [] }\n    let\
    \ start = min(p1, p2)\n    let end = max(p1, p2)\n    return Array(planets[start...end])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpndc3z8di/tmpndc3z8di.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b416ba48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b416b73fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b416b73f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b416b73e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpndc3z8di                        0x0000557e7012994b <unavailable> + 6475

    5    libc.so.6                          0x00002b416bc34460 __libc_start_main +
    245

    6    tmpndc3z8di                        0x0000557e701294f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result: [String] = []\n    let\
    \ p1 = planets.firstIndex(of: planet1)\n    let p2 = planets.firstIndex(of: planet2)\n\
    \    if p1 == nil || p2 == nil {\n        return result\n    }\n    if p1! < p2!\
    \ {\n        for i in p1!...p2! {\n            result.append(planets[i])\n   \
    \     }\n    } else {\n        for i in p2!...p1! {\n            result.append(planets[i])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1:\
    \ \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\"\
    ) == [] as [String])"
  status: Exception
  stderr: 'tmpia1ydizg/tmpia1ydizg.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002accc4a2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accc4726b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002accc4726988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002accc47257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpia1ydizg                        0x0000557f7126980b <unavailable> + 6155

    5    libc.so.6                          0x00002accc4c1b460 __libc_start_main +
    245

    6    tmpia1ydizg                        0x0000557f712693b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let index1 = planets.firstIndex(of:\
    \ planet1), let index2 = planets.firstIndex(of: planet2) else { return [] }\n\
    \    let min = min(index1, index2)\n    let max = max(index1, index2)\n    return\
    \ Array(planets[min...max])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1:\
    \ \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\"\
    , planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\"\
    ) == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmpd9pnn7ga/tmpd9pnn7ga.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b726df8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b726dc86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b726dc86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b726dc857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd9pnn7ga                        0x000056396f59d94b <unavailable> + 6475

    5    libc.so.6                          0x00002b726e17b460 __libc_start_main +
    245

    6    tmpd9pnn7ga                        0x000056396f59d4f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else {\n        return []\n\
    \    }\n    return planets[min(p1, p2) + 1 ..< max(p1, p2)].sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp1_eygpqz/tmp1_eygpqz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b450f1a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b450ee97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b450ee97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b450ee967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1_eygpqz                        0x000055a3cbedfcb8 <unavailable> + 7352

    5    libc.so.6                          0x00002b450f38c460 __libc_start_main +
    245

    6    tmp1_eygpqz                        0x000055a3cbedf499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else { return [] }\n    let\
    \ start = min(p1, p2)\n    let end = max(p1, p2)\n    return Array(planets[start...end])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpndc3z8di/tmpndc3z8di.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b416ba48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b416b73fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b416b73f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b416b73e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpndc3z8di                        0x0000557e7012994b <unavailable> + 6475

    5    libc.so.6                          0x00002b416bc34460 __libc_start_main +
    245

    6    tmpndc3z8di                        0x0000557e701294f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let p1 = planets.firstIndex(of: planet1)\n\
    \    let p2 = planets.firstIndex(of: planet2)\n    if p1 == nil || p2 == nil {\n\
    \        return []\n    }\n    let start = min(p1!, p2!)\n    let end = max(p1!,\
    \ p2!)\n    return Array(planets[start...end])\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"\
    Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpux750mzn/tmpux750mzn.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07fef41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07fec38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07fec38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07fec377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpux750mzn                        0x000055dbd642a94b <unavailable> + 6475

    5    libc.so.6                          0x00002b07ff12d460 __libc_start_main +
    245

    6    tmpux750mzn                        0x000055dbd642a4f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else { return [] }\n    return\
    \ p1 < p2 ? Array(planets[p1...p2]) : Array(planets[p2...p1])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"\
    Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") ==\
    \ [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\"\
    , planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpg2wl0qur/tmpg2wl0qur.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8400740c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8400437b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8400437988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84004367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg2wl0qur                        0x000055810def785b <unavailable> + 6235

    5    libc.so.6                          0x00002b840092c460 __libc_start_main +
    245

    6    tmpg2wl0qur                        0x000055810def7409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result: [String] = []\n    guard\
    \ let first = planets.firstIndex(of: planet1), let second = planets.firstIndex(of:\
    \ planet2) else {\n        return result\n    }\n    if first < second {\n   \
    \     for i in first + 1...second {\n            result.append(planets[i])\n \
    \       }\n    } else {\n        for i in second + 1...first {\n            result.append(planets[i])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1:\
    \ \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\"\
    ) == [] as [String])"
  status: Exception
  stderr: 'tmpstcenjx0/tmpstcenjx0.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8d6b8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8d6885b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8d6885988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8d68847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpstcenjx0                        0x000055e4fc3a280b <unavailable> + 6155

    5    libc.so.6                          0x00002ac8d6d7a460 __libc_start_main +
    245

    6    tmpstcenjx0                        0x000055e4fc3a23b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    guard\
    \ let p1 = planets.firstIndex(of: planet1), let p2 = planets.firstIndex(of: planet2)\
    \ else {\n        return result\n    }\n    if p1 < p2 {\n        result = Array(planets[p1...p2])\n\
    \    } else {\n        result = Array(planets[p2...p1])\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp7aydgcnr/tmp7aydgcnr.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3292000c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3291cf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3291cf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3291cf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7aydgcnr                        0x0000556d7bc7e8ab <unavailable> + 6315

    5    libc.so.6                          0x00002b32921ec460 __libc_start_main +
    245

    6    tmp7aydgcnr                        0x0000556d7bc7e459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    if let\
    \ p1 = planets.firstIndex(of: planet1), let p2 = planets.firstIndex(of: planet2)\
    \ {\n        if p1 < p2 {\n            for i in p1...p2 {\n                result.append(planets[i])\n\
    \            }\n        } else {\n            for i in p2...p1 {\n           \
    \     result.append(planets[i])\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp7e60rb30/tmp7e60rb30.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9bdb1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9bd815b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9bd815988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9bd8147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7e60rb30                        0x0000563f6b8e785b <unavailable> + 6235

    5    libc.so.6                          0x00002af9bdd0a460 __libc_start_main +
    245

    6    tmp7e60rb30                        0x0000563f6b8e7409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let p1 = planets.firstIndex(of: planet1)\n\
    \    let p2 = planets.firstIndex(of: planet2)\n    if p1 == nil || p2 == nil {\n\
    \        return []\n    }\n    let min = min(p1!, p2!)\n    let max = max(p1!,\
    \ p2!)\n    return Array(planets[min...max])\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"\
    Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmph6_u19du/tmph6_u19du.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affdcb15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affdc80cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affdc80c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affdc80b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph6_u19du                        0x000055f49bae394b <unavailable> + 6475

    5    libc.so.6                          0x00002affdcd01460 __libc_start_main +
    245

    6    tmph6_u19du                        0x000055f49bae34f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1),\n        let p2 = planets.firstIndex(of: planet2) else {\n       \
    \     return []\n    }\n    return planets[min(p1, p2) + 1..<max(p1, p2)].sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp73ow8ull/tmp73ow8ull.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f9f71bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f9f412b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f9f412988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f9f4117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp73ow8ull                        0x000055d55bf2ccb8 <unavailable> + 7352

    5    libc.so.6                          0x00002b9f9f907460 __libc_start_main +
    245

    6    tmp73ow8ull                        0x000055d55bf2c499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else { return [] }\n    let\
    \ min = p1 < p2 ? p1 : p2\n    let max = p1 > p2 ? p1 : p2\n    return Array(planets[min...max])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpedh_909l/tmpedh_909l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8e79f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8e76efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8e76ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8e76ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpedh_909l                        0x0000559ba818585b <unavailable> + 6235

    5    libc.so.6                          0x00002ac8e7be4460 __libc_start_main +
    245

    6    tmpedh_909l                        0x0000559ba8185409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let index1 = planets.firstIndex(of:\
    \ planet1)\n    let index2 = planets.firstIndex(of: planet2)\n    guard let i1\
    \ = index1, let i2 = index2 else { return [] }\n    if i1 > i2 { return Array(planets[i2...i1])\
    \ }\n    return Array(planets[i1...i2])\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1:\
    \ \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\"\
    ) == [] as [String])"
  status: Exception
  stderr: 'tmpxa_6y91y/tmpxa_6y91y.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac66ee9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac66eb95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac66eb95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac66eb947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxa_6y91y                        0x000055b6f6aa485b <unavailable> + 6235

    5    libc.so.6                          0x00002ac66f08a460 __libc_start_main +
    245

    6    tmpxa_6y91y                        0x000055b6f6aa4409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result: [String] = []\n    guard\
    \ let p1 = planets.firstIndex(of: planet1), let p2 = planets.firstIndex(of: planet2)\
    \ else {\n        return result\n    }\n    var start = p1\n    var end = p2\n\
    \    if p1 > p2 {\n        start = p2\n        end = p1\n    }\n    for i in start...end\
    \ {\n        result.append(planets[i])\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmplh5lqzjy/tmplh5lqzjy.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9286934c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b928662bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b928662b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b928662a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplh5lqzjy                        0x000056097e3eb80b <unavailable> + 6155

    5    libc.so.6                          0x00002b9286b20460 __libc_start_main +
    245

    6    tmplh5lqzjy                        0x000056097e3eb3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let index1 = planets.firstIndex(of:\
    \ planet1),\n        let index2 = planets.firstIndex(of: planet2) else {\n   \
    \         return []\n    }\n    return planets[min(index1, index2) + 1 ..< max(index1,\
    \ index2)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2:\
    \ \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\n\
    assert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"\
    Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\")\
    \ == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp88vfmxn3.swift:18:19: error: cannot convert return expression of\
    \ type 'ArraySlice<String>' to return type '[String]'\n    return planets[min(index1,\
    \ index2) + 1 ..< max(index1, index2)]\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else { return [] }\n    let\
    \ min = min(p1, p2)\n    let max = max(p1, p2)\n    return Array(planets[min...max])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp2r0q43t_/tmp2r0q43t_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3a9323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3a901ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3a901a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3a90197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2r0q43t_                        0x0000564963f2694b <unavailable> + 6475

    5    libc.so.6                          0x00002ab3a950f460 __libc_start_main +
    245

    6    tmp2r0q43t_                        0x0000564963f264f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    guard\
    \ let p1 = planets.firstIndex(of: planet1), let p2 = planets.firstIndex(of: planet2)\
    \ else {\n        return result\n    }\n    let start = min(p1, p2)\n    let end\
    \ = max(p1, p2)\n    for i in start...end {\n        result.append(planets[i])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1:\
    \ \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\"\
    , planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\"\
    ) == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmpx2xo1nze/tmpx2xo1nze.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3f35c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3f32bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3f32bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3f32bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx2xo1nze                        0x0000558465a8094b <unavailable> + 6475

    5    libc.so.6                          0x00002ac3f37b1460 __libc_start_main +
    245

    6    tmpx2xo1nze                        0x0000558465a804f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let p1 = planets.firstIndex(of: planet1)\n\
    \    let p2 = planets.firstIndex(of: planet2)\n    if p1 == nil || p2 == nil {\n\
    \        return []\n    }\n    let min = min(p1!, p2!)\n    let max = max(p1!,\
    \ p2!)\n    return Array(planets[min...max])\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"\
    Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmph6_u19du/tmph6_u19du.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affdcb15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affdc80cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affdc80c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affdc80b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph6_u19du                        0x000055f49bae394b <unavailable> + 6475

    5    libc.so.6                          0x00002affdcd01460 __libc_start_main +
    245

    6    tmph6_u19du                        0x000055f49bae34f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    if let\
    \ index1 = planets.firstIndex(of: planet1), let index2 = planets.firstIndex(of:\
    \ planet2) {\n        if index1 < index2 {\n            for i in index1...index2\
    \ {\n                result.append(planets[i])\n            }\n        } else\
    \ {\n            for i in index2...index1 {\n                result.append(planets[i])\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmppxs9q9qg/tmppxs9q9qg.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab86f6dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab86f3d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab86f3d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab86f3d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxs9q9qg                        0x00005602fb68c85b <unavailable> + 6235

    5    libc.so.6                          0x00002ab86f8c8460 __libc_start_main +
    245

    6    tmppxs9q9qg                        0x00005602fb68c409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result: [String] = []\n    if\
    \ let index1 = planets.firstIndex(of: planet1), let index2 = planets.firstIndex(of:\
    \ planet2) {\n        if index1 < index2 {\n            for i in index1...index2\
    \ {\n                result.append(planets[i])\n            }\n        } else\
    \ {\n            for i in index2...index1 {\n                result.append(planets[i])\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp47artb0e/tmp47artb0e.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7333aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7330a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7330a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7330a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp47artb0e                        0x000055845f66180b <unavailable> + 6155

    5    libc.so.6                          0x00002ba733596460 __libc_start_main +
    245

    6    tmp47artb0e                        0x000055845f6613b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    guard\
    \ let p1 = planets.firstIndex(of: planet1), let p2 = planets.firstIndex(of: planet2)\
    \ else {\n        return result\n    }\n    if p1 < p2 {\n        for i in p1+1..<p2\
    \ {\n            result.append(planets[i])\n        }\n    } else {\n        for\
    \ i in p2+1..<p1 {\n            result.append(planets[i])\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2:\
    \ \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\n\
    assert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"\
    Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\")\
    \ == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3713efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3710e6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba3710e6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba3710e613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba3710e5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpoo207di3                        0x00005598cbb3d8f8 <unavailable> + 10488

    6    tmpoo207di3                        0x00005598cbb3cedb <unavailable> + 7899

    7    libc.so.6                          0x00002ba3715db460 __libc_start_main +
    245

    8    tmpoo207di3                        0x00005598cbb3c409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let index1 = planets.firstIndex(of:\
    \ planet1)\n    let index2 = planets.firstIndex(of: planet2)\n    if index1 ==\
    \ nil || index2 == nil {\n        return []\n    }\n    if index1! > index2! {\n\
    \        return Array(planets[index2!...index1!])\n    } else {\n        return\
    \ Array(planets[index1!...index2!])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"\
    Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpfg8hj55l/tmpfg8hj55l.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaefc17ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaefbe75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaefbe75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaefbe747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfg8hj55l                        0x00005634f92ed85b <unavailable> + 6235

    5    libc.so.6                          0x00002aaefc36a460 __libc_start_main +
    245

    6    tmpfg8hj55l                        0x00005634f92ed409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else { return [] }\n    let\
    \ min = min(p1, p2)\n    let max = max(p1, p2)\n    return Array(planets[min...max])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp2r0q43t_/tmp2r0q43t_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3a9323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3a901ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3a901a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3a90197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2r0q43t_                        0x0000564963f2694b <unavailable> + 6475

    5    libc.so.6                          0x00002ab3a950f460 __libc_start_main +
    245

    6    tmp2r0q43t_                        0x0000564963f264f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else { return [] }\n    return\
    \ p1 < p2 ? Array(planets[p1...p2]) : Array(planets[p2...p1])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"\
    Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") ==\
    \ [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\"\
    , planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpg2wl0qur/tmpg2wl0qur.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8400740c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8400437b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8400437988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84004367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg2wl0qur                        0x000055810def785b <unavailable> + 6235

    5    libc.so.6                          0x00002b840092c460 __libc_start_main +
    245

    6    tmpg2wl0qur                        0x000055810def7409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let start = min(planet1Index!,\
    \ planet2Index!)\n    let end = max(planet1Index!, planet2Index!)\n    return\
    \ Array(planets[start...end])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1:\
    \ \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\"\
    , planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\"\
    ) == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmp1wvfne_9/tmp1wvfne_9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43e7598c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43e728fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43e728f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43e728e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1wvfne_9                        0x0000563022d1694b <unavailable> + 6475

    5    libc.so.6                          0x00002b43e7784460 __libc_start_main +
    245

    6    tmp1wvfne_9                        0x0000563022d164f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result: [String] = []\n    guard\
    \ let start = planets.firstIndex(of: planet1), let end = planets.firstIndex(of:\
    \ planet2) else {\n        return result\n    }\n    for i in start...end {\n\
    \        result.append(planets[i])\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"\
    Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") ==\
    \ [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\"\
    , planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp2gu_bzj_/tmp2gu_bzj_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab805d26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab805a1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab805a1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab805a1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2gu_bzj_                        0x000055b9fd71280b <unavailable> + 6155

    5    libc.so.6                          0x00002ab805f12460 __libc_start_main +
    245

    6    tmp2gu_bzj_                        0x000055b9fd7123b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else { return [] }\n    let\
    \ start = min(p1, p2)\n    let end = max(p1, p2)\n    return Array(planets[start...end])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpndc3z8di/tmpndc3z8di.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b416ba48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b416b73fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b416b73f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b416b73e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpndc3z8di                        0x0000557e7012994b <unavailable> + 6475

    5    libc.so.6                          0x00002b416bc34460 __libc_start_main +
    245

    6    tmpndc3z8di                        0x0000557e701294f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else {\n        return []\n\
    \    }\n    let start = min(p1, p2)\n    let end = max(p1, p2)\n    return Array(planets[start...end])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpg11sxxfu/tmpg11sxxfu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a1fcdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a1cc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9a1cc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9a1cc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg11sxxfu                        0x000055829208094b <unavailable> + 6475

    5    libc.so.6                          0x00002ab9a21b9460 __libc_start_main +
    245

    6    tmpg11sxxfu                        0x00005582920804f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let p1 = planets.firstIndex(of: planet1)\n\
    \    let p2 = planets.firstIndex(of: planet2)\n    if p1 == nil || p2 == nil {\n\
    \        return []\n    }\n    let p1i = p1!\n    let p2i = p2!\n    if p1i >\
    \ p2i {\n        return Array(planets[p2i...p1i])\n    } else {\n        return\
    \ Array(planets[p1i...p2i])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1:\
    \ \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\"\
    ) == [] as [String])"
  status: Exception
  stderr: 'tmpldpucofk/tmpldpucofk.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69fa293c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69f9f8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69f9f8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69f9f897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpldpucofk                        0x000055d88f1d685b <unavailable> + 6235

    5    libc.so.6                          0x00002b69fa47f460 __libc_start_main +
    245

    6    tmpldpucofk                        0x000055d88f1d6409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    if let\
    \ index1 = planets.firstIndex(of: planet1), let index2 = planets.firstIndex(of:\
    \ planet2) {\n        let min = min(index1, index2)\n        let max = max(index1,\
    \ index2)\n        for i in min+1..<max {\n            result.append(planets[i])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1:\
    \ \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\"\
    ) == [] as [String])"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab419981c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab419678561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab419678286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab41967813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab419677bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpu31yybn2                        0x000055acde6028da <unavailable> + 10458

    6    tmpu31yybn2                        0x000055acde601fcb <unavailable> + 8139

    7    libc.so.6                          0x00002ab419b6d460 __libc_start_main +
    245

    8    tmpu31yybn2                        0x000055acde6014f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    guard\
    \ let p1 = planet1Index, let p2 = planet2Index else {\n        return []\n   \
    \ }\n    if p1 > p2 {\n        return Array(planets[p2...p1])\n    } else {\n\
    \        return Array(planets[p1...p2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"\
    Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpqzurp60n/tmpqzurp60n.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4878899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4878590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4878590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b487858f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqzurp60n                        0x00005593199bf85b <unavailable> + 6235

    5    libc.so.6                          0x00002b4878a85460 __libc_start_main +
    245

    6    tmpqzurp60n                        0x00005593199bf409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let index1 = planets.firstIndex(of:\
    \ planet1)\n    let index2 = planets.firstIndex(of: planet2)\n    if index1 ==\
    \ nil || index2 == nil {\n        return []\n    }\n    if index1! > index2! {\n\
    \        return Array(planets[index2!...index1!])\n    } else {\n        return\
    \ Array(planets[index1!...index2!])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"\
    Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpfg8hj55l/tmpfg8hj55l.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaefc17ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaefbe75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaefbe75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaefbe747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfg8hj55l                        0x00005634f92ed85b <unavailable> + 6235

    5    libc.so.6                          0x00002aaefc36a460 __libc_start_main +
    245

    6    tmpfg8hj55l                        0x00005634f92ed409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result: [String] = []\n    guard\
    \ let p1 = planets.firstIndex(of: planet1), let p2 = planets.firstIndex(of: planet2)\
    \ else {\n        return result\n    }\n    let start = min(p1, p2)\n    let end\
    \ = max(p1, p2)\n    for i in start...end {\n        result.append(planets[i])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1:\
    \ \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\"\
    , planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\"\
    ) == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmp2ve30sbt/tmp2ve30sbt.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ff28dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36fef84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36fef84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36fef837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ve30sbt                        0x000055ce4744b8eb <unavailable> + 6379

    5    libc.so.6                          0x00002b36ff479460 __libc_start_main +
    245

    6    tmp2ve30sbt                        0x000055ce4744b499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let start = min(planet1Index!,\
    \ planet2Index!)\n    let end = max(planet1Index!, planet2Index!)\n    return\
    \ Array(planets[start...end])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1:\
    \ \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\"\
    , planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\"\
    ) == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmp1wvfne_9/tmp1wvfne_9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43e7598c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43e728fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43e728f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43e728e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1wvfne_9                        0x0000563022d1694b <unavailable> + 6475

    5    libc.so.6                          0x00002b43e7784460 __libc_start_main +
    245

    6    tmp1wvfne_9                        0x0000563022d164f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else {\n        return []\n\
    \    }\n    let start = min(p1, p2)\n    let end = max(p1, p2)\n    return Array(planets[start...end])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpg11sxxfu/tmpg11sxxfu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a1fcdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a1cc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9a1cc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9a1cc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg11sxxfu                        0x000055829208094b <unavailable> + 6475

    5    libc.so.6                          0x00002ab9a21b9460 __libc_start_main +
    245

    6    tmpg11sxxfu                        0x00005582920804f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let p1 = planets.firstIndex(of: planet1)\n\
    \    let p2 = planets.firstIndex(of: planet2)\n    if p1 == nil || p2 == nil {\n\
    \        return []\n    }\n    let min = min(p1!, p2!)\n    let max = max(p1!,\
    \ p2!)\n    return Array(planets[min...max])\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"\
    Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmph6_u19du/tmph6_u19du.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affdcb15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affdc80cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affdc80c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affdc80b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph6_u19du                        0x000055f49bae394b <unavailable> + 6475

    5    libc.so.6                          0x00002affdcd01460 __libc_start_main +
    245

    6    tmph6_u19du                        0x000055f49bae34f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    guard\
    \ let index1 = planets.firstIndex(of: planet1),\n        let index2 = planets.firstIndex(of:\
    \ planet2) else {\n            return result\n    }\n    if index1 < index2 {\n\
    \        for i in index1...index2 {\n            result.append(planets[i])\n \
    \       }\n    } else {\n        for i in index2...index1 {\n            result.append(planets[i])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1:\
    \ \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\"\
    ) == [] as [String])"
  status: Exception
  stderr: 'tmp4cjv4p_r/tmp4cjv4p_r.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fefd3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fefa32b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fefa32988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fefa317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4cjv4p_r                        0x000055d841a9285b <unavailable> + 6235

    5    libc.so.6                          0x00002b8feff27460 __libc_start_main +
    245

    6    tmp4cjv4p_r                        0x000055d841a92409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result: [String] = []\n    guard\
    \ let p1 = planets.firstIndex(of: planet1), let p2 = planets.firstIndex(of: planet2)\
    \ else {\n        return result\n    }\n    if p1 > p2 {\n        for i in p2...p1\
    \ {\n            result.append(planets[i])\n        }\n    } else {\n        for\
    \ i in p1...p2 {\n            result.append(planets[i])\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2:\
    \ \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\n\
    assert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"\
    Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\")\
    \ == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmpts0qjmpq/tmpts0qjmpq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba407825c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba40751cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba40751c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba40751b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpts0qjmpq                        0x000055e203b1380b <unavailable> + 6155

    5    libc.so.6                          0x00002ba407a11460 __libc_start_main +
    245

    6    tmpts0qjmpq                        0x000055e203b133b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    var start\
    \ = 0\n    var end = 0\n    for (index, planet) in planets.enumerated() {\n  \
    \      if planet == planet1 {\n            start = index\n        }\n        if\
    \ planet == planet2 {\n            end = index\n        }\n    }\n    if start\
    \ > end {\n        let temp = start\n        start = end\n        end = temp\n\
    \    }\n    for i in start...end {\n        result.append(planets[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2:\
    \ \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\n\
    assert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"\
    Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\")\
    \ == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmpg_hn1kpx/tmpg_hn1kpx.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e457fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e454f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e454f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e454f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_hn1kpx                        0x0000564cefea2a1b <unavailable> + 6683

    5    libc.so.6                          0x00002b1e459e9460 __libc_start_main +
    245

    6    tmpg_hn1kpx                        0x0000564cefea25c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result: [String] = []\n    guard\
    \ let p1 = planets.firstIndex(of: planet1),\n        let p2 = planets.firstIndex(of:\
    \ planet2) else {\n            return result\n    }\n    if p1 < p2 {\n      \
    \  for i in p1...p2 {\n            result.append(planets[i])\n        }\n    }\
    \ else {\n        for i in p2...p1 {\n            result.append(planets[i])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1:\
    \ \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\"\
    ) == [] as [String])"
  status: Exception
  stderr: 'tmpolc87vwr/tmpolc87vwr.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adcf074ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adcf0445b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adcf0445988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adcf04447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpolc87vwr                        0x000055da46f8e80b <unavailable> + 6155

    5    libc.so.6                          0x00002adcf093a460 __libc_start_main +
    245

    6    tmpolc87vwr                        0x000055da46f8e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let p1 = planets.firstIndex(of: planet1)\n\
    \    let p2 = planets.firstIndex(of: planet2)\n    if p1 == nil || p2 == nil {\n\
    \        return []\n    }\n    let min = min(p1!, p2!)\n    let max = max(p1!,\
    \ p2!)\n    return Array(planets[min...max])\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"\
    Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmph6_u19du/tmph6_u19du.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affdcb15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affdc80cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affdc80c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affdc80b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph6_u19du                        0x000055f49bae394b <unavailable> + 6475

    5    libc.so.6                          0x00002affdcd01460 __libc_start_main +
    245

    6    tmph6_u19du                        0x000055f49bae34f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result: [String] = []\n    if\
    \ let index1 = planets.firstIndex(of: planet1), let index2 = planets.firstIndex(of:\
    \ planet2) {\n        if index1 < index2 {\n            result = Array(planets[index1...index2])\n\
    \        } else {\n            result = Array(planets[index2...index1])\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1:\
    \ \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\"\
    , planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\"\
    ) == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmpv96u6ryv/tmpv96u6ryv.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad214cc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2149bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad2149bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2149ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv96u6ryv                        0x000055d063a0985b <unavailable> + 6235

    5    libc.so.6                          0x00002ad214eb0460 __libc_start_main +
    245

    6    tmpv96u6ryv                        0x000055d063a09409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else {\n        return []\n\
    \    }\n    let min = min(p1, p2)\n    let max = max(p1, p2)\n    return Array(planets[min...max])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpise2n1fg/tmpise2n1fg.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61533e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61530e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61530e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61530df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpise2n1fg                        0x0000564531de394b <unavailable> + 6475

    5    libc.so.6                          0x00002b61535d5460 __libc_start_main +
    245

    6    tmpise2n1fg                        0x0000564531de34f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    if planet1Index!\
    \ < planet2Index! {\n        return Array(planets[planet1Index! + 1 ..< planet2Index!])\n\
    \    } else {\n        return Array(planets[planet2Index! + 1 ..< planet1Index!])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2:\
    \ \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\n\
    assert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"\
    Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\")\
    \ == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2a1815c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2a150c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac2a150c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac2a150c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac2a150bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpwboj_eci                        0x0000557d09d7bba5 <unavailable> + 11173

    6    tmpwboj_eci                        0x0000557d09d7ae4b <unavailable> + 7755

    7    libc.so.6                          0x00002ac2a1a01460 __libc_start_main +
    245

    8    tmpwboj_eci                        0x0000557d09d7a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let p1 = planets.firstIndex(of: planet1)\n\
    \    let p2 = planets.firstIndex(of: planet2)\n    if p1 == nil || p2 == nil {\n\
    \        return []\n    }\n    if p1! > p2! {\n        return Array(planets[p2!...p1!])\n\
    \    } else {\n        return Array(planets[p1!...p2!])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"\
    Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") ==\
    \ [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\"\
    , planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpe24_k348/tmpe24_k348.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b75465c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b7515cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b7515c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b7515b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe24_k348                        0x0000556329a1785b <unavailable> + 6235

    5    libc.so.6                          0x00002b4b75651460 __libc_start_main +
    245

    6    tmpe24_k348                        0x0000556329a17409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else { return [] }\n    return\
    \ planets[min(p1, p2) + 1 ..< max(p1, p2)]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"\
    Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpt0g8hb_1.swift:15:19: error: cannot convert return expression of\
    \ type 'ArraySlice<String>' to return type '[String]'\n    return planets[min(p1,\
    \ p2) + 1 ..< max(p1, p2)]\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    if let\
    \ index1 = planets.firstIndex(of: planet1), let index2 = planets.firstIndex(of:\
    \ planet2) {\n        if index1 < index2 {\n            for i in index1...index2\
    \ {\n                result.append(planets[i])\n            }\n        } else\
    \ {\n            for i in index2...index1 {\n                result.append(planets[i])\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmppxs9q9qg/tmppxs9q9qg.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab86f6dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab86f3d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab86f3d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab86f3d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxs9q9qg                        0x00005602fb68c85b <unavailable> + 6235

    5    libc.so.6                          0x00002ab86f8c8460 __libc_start_main +
    245

    6    tmppxs9q9qg                        0x00005602fb68c409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if let\
    \ planet1Index = planet1Index, let planet2Index = planet2Index {\n        if planet1Index\
    \ < planet2Index {\n            return Array(planets[planet1Index...planet2Index])\n\
    \        } else {\n            return Array(planets[planet2Index...planet1Index])\n\
    \        }\n    }\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1:\
    \ \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\"\
    , planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\"\
    ) == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmpa3k589yy/tmpa3k589yy.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b55038c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b54d2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b54d2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b54d2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa3k589yy                        0x000055db95ec985b <unavailable> + 6235

    5    libc.so.6                          0x00002b4b55224460 __libc_start_main +
    245

    6    tmpa3k589yy                        0x000055db95ec9409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let p1 = planets.firstIndex(of: planet1)\n\
    \    let p2 = planets.firstIndex(of: planet2)\n    if p1 == nil || p2 == nil {\n\
    \        return []\n    }\n    let min = min(p1!, p2!)\n    let max = max(p1!,\
    \ p2!)\n    return Array(planets[min...max])\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"\
    Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmph6_u19du/tmph6_u19du.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affdcb15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affdc80cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affdc80c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affdc80b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph6_u19du                        0x000055f49bae394b <unavailable> + 6475

    5    libc.so.6                          0x00002affdcd01460 __libc_start_main +
    245

    6    tmph6_u19du                        0x000055f49bae34f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else {\n        return []\n\
    \    }\n    let start = min(p1, p2)\n    let end = max(p1, p2)\n    return Array(planets[start...end])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpg11sxxfu/tmpg11sxxfu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a1fcdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a1cc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9a1cc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9a1cc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg11sxxfu                        0x000055829208094b <unavailable> + 6475

    5    libc.so.6                          0x00002ab9a21b9460 __libc_start_main +
    245

    6    tmpg11sxxfu                        0x00005582920804f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    var planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var index1 = 0\n    var index2 = 0\n\
    \    var result = [String]()\n    for i in 0..<planets.count {\n        if planets[i]\
    \ == planet1 {\n            index1 = i\n        }\n        if planets[i] == planet2\
    \ {\n            index2 = i\n        }\n    }\n    if index1 > index2 {\n    \
    \    for i in index2...index1 {\n            result.append(planets[i])\n     \
    \   }\n    } else {\n        for i in index1...index2 {\n            result.append(planets[i])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1:\
    \ \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\"\
    ) == [] as [String])"
  status: Exception
  stderr: 'tmpcy9g6yx8/tmpcy9g6yx8.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad91ab19c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad91a810b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad91a810988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad91a80f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcy9g6yx8                        0x000055ae0ca2594b <unavailable> + 6475

    5    libc.so.6                          0x00002ad91ad05460 __libc_start_main +
    245

    6    tmpcy9g6yx8                        0x000055ae0ca254f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else { return [] }\n    if\
    \ p1 > p2 { return Array(planets[p2...p1]) }\n    return Array(planets[p1...p2])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp8o4tvwto/tmp8o4tvwto.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6902c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af68ffbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af68ffbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af68ffba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o4tvwto                        0x000055f39aad685b <unavailable> + 6235

    5    libc.so.6                          0x00002af6904b0460 __libc_start_main +
    245

    6    tmp8o4tvwto                        0x000055f39aad6409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else { return [] }\n    let\
    \ min = min(p1, p2)\n    let max = max(p1, p2)\n    return Array(planets[min...max])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp2r0q43t_/tmp2r0q43t_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3a9323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3a901ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3a901a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3a90197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2r0q43t_                        0x0000564963f2694b <unavailable> + 6475

    5    libc.so.6                          0x00002ab3a950f460 __libc_start_main +
    245

    6    tmp2r0q43t_                        0x0000564963f264f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let start = min(planet1Index!,\
    \ planet2Index!)\n    let end = max(planet1Index!, planet2Index!)\n    return\
    \ Array(planets[start...end])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1:\
    \ \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\"\
    , planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\"\
    ) == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmp1wvfne_9/tmp1wvfne_9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43e7598c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43e728fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43e728f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43e728e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1wvfne_9                        0x0000563022d1694b <unavailable> + 6475

    5    libc.so.6                          0x00002b43e7784460 __libc_start_main +
    245

    6    tmp1wvfne_9                        0x0000563022d164f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else { return [] }\n    return\
    \ p1 < p2 ? Array(planets[p1...p2]) : Array(planets[p2...p1])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"\
    Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") ==\
    \ [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\"\
    , planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpg2wl0qur/tmpg2wl0qur.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8400740c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8400437b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8400437988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84004367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg2wl0qur                        0x000055810def785b <unavailable> + 6235

    5    libc.so.6                          0x00002b840092c460 __libc_start_main +
    245

    6    tmpg2wl0qur                        0x000055810def7409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result: [String] = []\n    if\
    \ let index1 = planets.firstIndex(of: planet1), let index2 = planets.firstIndex(of:\
    \ planet2) {\n        if index1 < index2 {\n            for i in index1...index2\
    \ {\n                result.append(planets[i])\n            }\n        } else\
    \ {\n            for i in index2...index1 {\n                result.append(planets[i])\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp47artb0e/tmp47artb0e.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7333aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7330a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7330a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7330a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp47artb0e                        0x000055845f66180b <unavailable> + 6155

    5    libc.so.6                          0x00002ba733596460 __libc_start_main +
    245

    6    tmp47artb0e                        0x000055845f6613b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let start = min(planet1Index!,\
    \ planet2Index!)\n    let end = max(planet1Index!, planet2Index!)\n    return\
    \ Array(planets[start...end])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1:\
    \ \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\"\
    , planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\"\
    ) == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmp1wvfne_9/tmp1wvfne_9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43e7598c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43e728fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43e728f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43e728e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1wvfne_9                        0x0000563022d1694b <unavailable> + 6475

    5    libc.so.6                          0x00002b43e7784460 __libc_start_main +
    245

    6    tmp1wvfne_9                        0x0000563022d164f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let p1 = planets.firstIndex(of: planet1)\n\
    \    let p2 = planets.firstIndex(of: planet2)\n    if p1 == nil || p2 == nil {\n\
    \        return []\n    }\n    if p1! < p2! {\n        return Array(planets[p1!+1...p2!-1])\n\
    \    } else {\n        return Array(planets[p2!+1...p1!-1])\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b26217c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26214b8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b26214b8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b26214b813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b26214b7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp6kb3qi8r                        0x0000564f6d2a9d9f <unavailable> + 11679

    6    tmp6kb3qi8r                        0x0000564f6d2a8edb <unavailable> + 7899

    7    libc.so.6                          0x00002b26219ad460 __libc_start_main +
    245

    8    tmp6kb3qi8r                        0x0000564f6d2a8409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    if let\
    \ i1 = planets.firstIndex(of: planet1), let i2 = planets.firstIndex(of: planet2)\
    \ {\n        if i1 < i2 {\n            for i in i1...i2 {\n                result.append(planets[i])\n\
    \            }\n        } else {\n            for i in i2...i1 {\n           \
    \     result.append(planets[i])\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp880kupmt/tmp880kupmt.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae64b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae64b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae64b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae64b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp880kupmt                        0x000055b978b7485b <unavailable> + 6235

    5    libc.so.6                          0x00002ae64b57d460 __libc_start_main +
    245

    6    tmp880kupmt                        0x000055b978b74409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1),\n        let p2 = planets.firstIndex(of: planet2) else {\n       \
    \     return []\n    }\n    return p1 < p2 ? Array(planets[p1...p2]) : Array(planets[p2...p1])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp09vzs9k7/tmp09vzs9k7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad693004c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad692cfbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad692cfb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad692cfa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp09vzs9k7                        0x000055f42ebdc85b <unavailable> + 6235

    5    libc.so.6                          0x00002ad6931f0460 __libc_start_main +
    245

    6    tmp09vzs9k7                        0x000055f42ebdc409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    if let\
    \ start = planets.firstIndex(of: planet1), let end = planets.firstIndex(of: planet2)\
    \ {\n        if start < end {\n            for i in start...end {\n          \
    \      result.append(planets[i])\n            }\n        } else {\n          \
    \  for i in end...start {\n                result.append(planets[i])\n       \
    \     }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"\
    Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpt92jqnwl/tmpt92jqnwl.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7307341c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7307038b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7307038988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73070377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt92jqnwl                        0x000055a97cca585b <unavailable> + 6235

    5    libc.so.6                          0x00002b730752d460 __libc_start_main +
    245

    6    tmpt92jqnwl                        0x000055a97cca5409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result: [String] = []\n    if\
    \ let index1 = planets.firstIndex(of: planet1), let index2 = planets.firstIndex(of:\
    \ planet2) {\n        if index1 < index2 {\n            for i in index1...index2\
    \ {\n                result.append(planets[i])\n            }\n        } else\
    \ {\n            for i in index2...index1 {\n                result.append(planets[i])\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp47artb0e/tmp47artb0e.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7333aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7330a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7330a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7330a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp47artb0e                        0x000055845f66180b <unavailable> + 6155

    5    libc.so.6                          0x00002ba733596460 __libc_start_main +
    245

    6    tmp47artb0e                        0x000055845f6613b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if let\
    \ planet1Index = planet1Index, let planet2Index = planet2Index {\n        let\
    \ startIndex = min(planet1Index, planet2Index)\n        let endIndex = max(planet1Index,\
    \ planet2Index)\n        return Array(planets[startIndex...endIndex])\n    }\n\
    \    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2:\
    \ \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\n\
    assert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"\
    Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\")\
    \ == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmp8n9etstg/tmp8n9etstg.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24385a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b243829fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b243829f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b243829e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8n9etstg                        0x0000560bcc66394b <unavailable> + 6475

    5    libc.so.6                          0x00002b2438794460 __libc_start_main +
    245

    6    tmp8n9etstg                        0x0000560bcc6634f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let p1 = planets.firstIndex(of: planet1)\n\
    \    let p2 = planets.firstIndex(of: planet2)\n    if p1 == nil || p2 == nil {\n\
    \        return []\n    }\n    if p1! > p2! {\n        return Array(planets[p2!...p1!])\n\
    \    } else {\n        return Array(planets[p1!...p2!])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"\
    Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") ==\
    \ [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\"\
    , planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpe24_k348/tmpe24_k348.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b75465c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b7515cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b7515c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b7515b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe24_k348                        0x0000556329a1785b <unavailable> + 6235

    5    libc.so.6                          0x00002b4b75651460 __libc_start_main +
    245

    6    tmpe24_k348                        0x0000556329a17409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    if let\
    \ i1 = planets.firstIndex(of: planet1), let i2 = planets.firstIndex(of: planet2)\
    \ {\n        if i1 < i2 {\n            for i in i1...i2 {\n                result.append(planets[i])\n\
    \            }\n        } else {\n            for i in i2...i1 {\n           \
    \     result.append(planets[i])\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp880kupmt/tmp880kupmt.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae64b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae64b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae64b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae64b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp880kupmt                        0x000055b978b7485b <unavailable> + 6235

    5    libc.so.6                          0x00002ae64b57d460 __libc_start_main +
    245

    6    tmp880kupmt                        0x000055b978b74409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result: [String] = []\n    var\
    \ start = 0\n    var end = 0\n    for (index, planet) in planets.enumerated()\
    \ {\n        if planet == planet1 {\n            start = index\n        }\n  \
    \      if planet == planet2 {\n            end = index\n        }\n    }\n   \
    \ if start == 0 && end == 0 {\n        return result\n    }\n    if start > end\
    \ {\n        let temp = start\n        start = end\n        end = temp\n    }\n\
    \    for i in start...end {\n        result.append(planets[i])\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2:\
    \ \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\n\
    assert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"\
    Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\")\
    \ == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmpneah5t9u/tmpneah5t9u.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4286ec7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4286bbeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4286bbe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4286bbd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpneah5t9u                        0x00005558330ac9bb <unavailable> + 6587

    5    libc.so.6                          0x00002b42870b3460 __libc_start_main +
    245

    6    tmpneah5t9u                        0x00005558330ac569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    guard\
    \ let p1 = planets.firstIndex(of: planet1), let p2 = planets.firstIndex(of: planet2)\
    \ else {\n        return result\n    }\n    if p1 < p2 {\n        for i in p1...p2\
    \ {\n            result.append(planets[i])\n        }\n    } else {\n        for\
    \ i in p2...p1 {\n            result.append(planets[i])\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2:\
    \ \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\n\
    assert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"\
    Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\")\
    \ == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmpg2j1lan3/tmpg2j1lan3.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6909634c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b690932bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b690932b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b690932a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg2j1lan3                        0x0000564ddd81a85b <unavailable> + 6235

    5    libc.so.6                          0x00002b6909820460 __libc_start_main +
    245

    6    tmpg2j1lan3                        0x0000564ddd81a409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else { return [] }\n    let\
    \ start = min(p1, p2)\n    let end = max(p1, p2)\n    return Array(planets[start...end])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpndc3z8di/tmpndc3z8di.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b416ba48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b416b73fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b416b73f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b416b73e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpndc3z8di                        0x0000557e7012994b <unavailable> + 6475

    5    libc.so.6                          0x00002b416bc34460 __libc_start_main +
    245

    6    tmpndc3z8di                        0x0000557e701294f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let index1 = planets.firstIndex(of:\
    \ planet1)\n    let index2 = planets.firstIndex(of: planet2)\n    if index1 ==\
    \ nil || index2 == nil {\n        return []\n    }\n    if index1! > index2! {\n\
    \        return Array(planets[index2!...index1!])\n    } else {\n        return\
    \ Array(planets[index1!...index2!])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"\
    Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpfg8hj55l/tmpfg8hj55l.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaefc17ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaefbe75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaefbe75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaefbe747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfg8hj55l                        0x00005634f92ed85b <unavailable> + 6235

    5    libc.so.6                          0x00002aaefc36a460 __libc_start_main +
    245

    6    tmpfg8hj55l                        0x00005634f92ed409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result: [String] = []\n    var\
    \ start = 0\n    var end = 0\n    for (index, planet) in planets.enumerated()\
    \ {\n        if planet == planet1 {\n            start = index\n        }\n  \
    \      if planet == planet2 {\n            end = index\n        }\n    }\n   \
    \ if start > end {\n        let temp = start\n        start = end\n        end\
    \ = temp\n    }\n    for i in start...end {\n        result.append(planets[i])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1:\
    \ \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\"\
    , planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\"\
    ) == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmpajtmwwu4/tmpajtmwwu4.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8999cd1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89999c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89999c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89999c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajtmwwu4                        0x0000560d399c89bb <unavailable> + 6587

    5    libc.so.6                          0x00002b8999ebd460 __libc_start_main +
    245

    6    tmpajtmwwu4                        0x0000560d399c8569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1),\n        let p2 = planets.firstIndex(of: planet2) else {\n       \
    \     return []\n    }\n    return planets[min(p1, p2) + 1 ..< max(p1, p2)]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpva8w053i.swift:18:19: error: cannot convert return expression of\
    \ type 'ArraySlice<String>' to return type '[String]'\n    return planets[min(p1,\
    \ p2) + 1 ..< max(p1, p2)]\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let index1 = planets.firstIndex(of:\
    \ planet1)\n    let index2 = planets.firstIndex(of: planet2)\n    if index1 ==\
    \ nil || index2 == nil {\n        return []\n    }\n    let minIndex = min(index1!,\
    \ index2!)\n    let maxIndex = max(index1!, index2!)\n    var result = [String]()\n\
    \    for i in minIndex...maxIndex {\n        result.append(planets[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2:\
    \ \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\n\
    assert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"\
    Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\")\
    \ == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmparvo_5lh/tmparvo_5lh.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b732ac6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b732a963b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b732a963988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b732a9627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmparvo_5lh                        0x00005652b52a494b <unavailable> + 6475

    5    libc.so.6                          0x00002b732ae58460 __libc_start_main +
    245

    6    tmparvo_5lh                        0x00005652b52a44f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let first = planets.firstIndex(of:\
    \ planet1), let second = planets.firstIndex(of: planet2) else { return [] }\n\
    \    return first < second ? Array(planets[first...second]) : Array(planets[second...first])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp68hjgz76/tmp68hjgz76.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b7c3d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b7c0c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b7c0c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b7c0c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp68hjgz76                        0x000055dfa67b685b <unavailable> + 6235

    5    libc.so.6                          0x00002b5b7c5bc460 __libc_start_main +
    245

    6    tmp68hjgz76                        0x000055dfa67b6409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if let\
    \ planet1Index = planet1Index, let planet2Index = planet2Index {\n        if planet1Index\
    \ < planet2Index {\n            return Array(planets[planet1Index...planet2Index])\n\
    \        } else {\n            return Array(planets[planet2Index...planet1Index])\n\
    \        }\n    }\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1:\
    \ \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\"\
    , planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\"\
    ) == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmpa3k589yy/tmpa3k589yy.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b55038c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b54d2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b54d2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b54d2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa3k589yy                        0x000055db95ec985b <unavailable> + 6235

    5    libc.so.6                          0x00002b4b55224460 __libc_start_main +
    245

    6    tmpa3k589yy                        0x000055db95ec9409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    if let\
    \ p1 = planets.firstIndex(of: planet1), let p2 = planets.firstIndex(of: planet2)\
    \ {\n        if p1 < p2 {\n            result = Array(planets[p1...p2])\n    \
    \    } else {\n            result = Array(planets[p2...p1])\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2:\
    \ \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\n\
    assert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"\
    Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\")\
    \ == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmpy8_q33g4/tmpy8_q33g4.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3628222c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3627f19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3627f19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3627f187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy8_q33g4                        0x000056436f2368ab <unavailable> + 6315

    5    libc.so.6                          0x00002b362840e460 __libc_start_main +
    245

    6    tmpy8_q33g4                        0x000056436f236459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    if let\
    \ p1 = planets.firstIndex(of: planet1), let p2 = planets.firstIndex(of: planet2)\
    \ {\n        if p1 < p2 {\n            for i in p1...p2 {\n                result.append(planets[i])\n\
    \            }\n        } else {\n            for i in p2...p1 {\n           \
    \     result.append(planets[i])\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp7e60rb30/tmp7e60rb30.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9bdb1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9bd815b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9bd815988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9bd8147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7e60rb30                        0x0000563f6b8e785b <unavailable> + 6235

    5    libc.so.6                          0x00002af9bdd0a460 __libc_start_main +
    245

    6    tmp7e60rb30                        0x0000563f6b8e7409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else {\n        return []\n\
    \    }\n    let min = min(p1, p2)\n    let max = max(p1, p2)\n    return Array(planets[min...max])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpise2n1fg/tmpise2n1fg.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61533e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61530e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61530e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61530df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpise2n1fg                        0x0000564531de394b <unavailable> + 6475

    5    libc.so.6                          0x00002b61535d5460 __libc_start_main +
    245

    6    tmpise2n1fg                        0x0000564531de34f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    var i\
    \ = 0\n    var j = 0\n    while i < planets.count {\n        if planets[i] ==\
    \ planet1 {\n            break\n        }\n        i += 1\n    }\n    while j\
    \ < planets.count {\n        if planets[j] == planet2 {\n            break\n \
    \       }\n        j += 1\n    }\n    if i == planets.count || j == planets.count\
    \ {\n        return result\n    }\n    if i < j {\n        for k in i+1..<j {\n\
    \            result.append(planets[k])\n        }\n    } else {\n        for k\
    \ in j+1..<i {\n            result.append(planets[k])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2:\
    \ \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\n\
    assert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"\
    Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\")\
    \ == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b15a1193c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15a0e8a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b15a0e8a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b15a0e8a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b15a0e89bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpuu217z12                        0x000055eca29469f3 <unavailable> + 10739

    6    tmpuu217z12                        0x000055eca2945edb <unavailable> + 7899

    7    libc.so.6                          0x00002b15a137f460 __libc_start_main +
    245

    8    tmpuu217z12                        0x000055eca2945409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    let result = planets[startIndex...endIndex]\n    return Array(result)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpy9dcjy_9/tmpy9dcjy_9.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9099de4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9099adbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9099adb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9099ada7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy9dcjy_9                        0x000055c22dca594b <unavailable> + 6475

    5    libc.so.6                          0x00002b9099fd0460 __libc_start_main +
    245

    6    tmpy9dcjy_9                        0x000055c22dca54f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else { return [] }\n    return\
    \ p1 < p2 ? Array(planets[p1...p2]) : Array(planets[p2...p1])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"\
    Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") ==\
    \ [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\"\
    , planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpg2wl0qur/tmpg2wl0qur.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8400740c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8400437b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8400437988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84004367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg2wl0qur                        0x000055810def785b <unavailable> + 6235

    5    libc.so.6                          0x00002b840092c460 __libc_start_main +
    245

    6    tmpg2wl0qur                        0x000055810def7409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let first = planets.firstIndex(of:\
    \ planet1), let second = planets.firstIndex(of: planet2) else {\n        return\
    \ []\n    }\n    let min = min(first, second)\n    let max = max(first, second)\n\
    \    return Array(planets[min...max])\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1:\
    \ \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\"\
    ) == [] as [String])"
  status: Exception
  stderr: 'tmp1rdui7rm/tmp1rdui7rm.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabe41cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabe3ec5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabe3ec5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabe3ec47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1rdui7rm                        0x00005620065d594b <unavailable> + 6475

    5    libc.so.6                          0x00002aabe43ba460 __libc_start_main +
    245

    6    tmp1rdui7rm                        0x00005620065d54f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    guard\
    \ let p1 = planet1Index, let p2 = planet2Index else {\n        return []\n   \
    \ }\n    var result = [String]()\n    if p1 < p2 {\n        for i in p1...p2 {\n\
    \            result.append(planets[i])\n        }\n    } else {\n        for i\
    \ in p2...p1 {\n            result.append(planets[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2:\
    \ \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\n\
    assert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"\
    Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\")\
    \ == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmp_n35dlxo/tmp_n35dlxo.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a9c0afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a9bda6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a9bda6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a9bda57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_n35dlxo                        0x0000559ccd6cb85b <unavailable> + 6235

    5    libc.so.6                          0x00002b8a9c29b460 __libc_start_main +
    245

    6    tmp_n35dlxo                        0x0000559ccd6cb409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    if let\
    \ index1 = planets.firstIndex(of: planet1), let index2 = planets.firstIndex(of:\
    \ planet2) {\n        if index1 < index2 {\n            for i in index1...index2\
    \ {\n                result.append(planets[i])\n            }\n        } else\
    \ {\n            for i in index2...index1 {\n                result.append(planets[i])\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmppxs9q9qg/tmppxs9q9qg.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab86f6dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab86f3d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab86f3d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab86f3d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxs9q9qg                        0x00005602fb68c85b <unavailable> + 6235

    5    libc.so.6                          0x00002ab86f8c8460 __libc_start_main +
    245

    6    tmppxs9q9qg                        0x00005602fb68c409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let p1 = planets.firstIndex(of: planet1)\n\
    \    let p2 = planets.firstIndex(of: planet2)\n    if let p1 = p1, let p2 = p2\
    \ {\n        if p1 < p2 {\n            return Array(planets[p1...p2])\n      \
    \  } else {\n            return Array(planets[p2...p1])\n        }\n    }\n  \
    \  return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2:\
    \ \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\n\
    assert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"\
    Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\")\
    \ == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmpdeb6f97t/tmpdeb6f97t.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbd6873c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbd656ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbd656a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbd65697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdeb6f97t                        0x00005587f702485b <unavailable> + 6235

    5    libc.so.6                          0x00002afbd6a5f460 __libc_start_main +
    245

    6    tmpdeb6f97t                        0x00005587f7024409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let p1 = planets.firstIndex(of: planet1)\n\
    \    let p2 = planets.firstIndex(of: planet2)\n    if p1 == nil || p2 == nil {\n\
    \        return []\n    }\n    return planets[min(p1!, p2!)...max(p1!, p2!)]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpldf_eozm.swift:19:19: error: cannot convert return expression of\
    \ type 'ArraySlice<String>' to return type '[String]'\n    return planets[min(p1!,\
    \ p2!)...max(p1!, p2!)]\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result: [String] = []\n    if\
    \ let index1 = planets.firstIndex(of: planet1), let index2 = planets.firstIndex(of:\
    \ planet2) {\n        if index1 < index2 {\n            result = Array(planets[index1...index2])\n\
    \        } else {\n            result = Array(planets[index2...index1])\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1:\
    \ \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\"\
    , planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\"\
    ) == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmpv96u6ryv/tmpv96u6ryv.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad214cc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2149bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad2149bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2149ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv96u6ryv                        0x000055d063a0985b <unavailable> + 6235

    5    libc.so.6                          0x00002ad214eb0460 __libc_start_main +
    245

    6    tmpv96u6ryv                        0x000055d063a09409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    if let\
    \ index1 = planets.firstIndex(of: planet1), let index2 = planets.firstIndex(of:\
    \ planet2) {\n        if index1 < index2 {\n            for i in index1...index2\
    \ {\n                result.append(planets[i])\n            }\n        } else\
    \ {\n            for i in index2...index1 {\n                result.append(planets[i])\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmppxs9q9qg/tmppxs9q9qg.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab86f6dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab86f3d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab86f3d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab86f3d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxs9q9qg                        0x00005602fb68c85b <unavailable> + 6235

    5    libc.so.6                          0x00002ab86f8c8460 __libc_start_main +
    245

    6    tmppxs9q9qg                        0x00005602fb68c409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    if let\
    \ p1 = planets.firstIndex(of: planet1), let p2 = planets.firstIndex(of: planet2)\
    \ {\n        if p1 < p2 {\n            for i in p1...p2 {\n                result.append(planets[i])\n\
    \            }\n        } else {\n            for i in p2...p1 {\n           \
    \     result.append(planets[i])\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp7e60rb30/tmp7e60rb30.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9bdb1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9bd815b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9bd815988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9bd8147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7e60rb30                        0x0000563f6b8e785b <unavailable> + 6235

    5    libc.so.6                          0x00002af9bdd0a460 __libc_start_main +
    245

    6    tmp7e60rb30                        0x0000563f6b8e7409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    guard\
    \ let p1 = planet1Index, let p2 = planet2Index else { return [] }\n    let start\
    \ = min(p1, p2)\n    let end = max(p1, p2)\n    return Array(planets[start...end])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpyxieqpnc/tmpyxieqpnc.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10bb624c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10bb31bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10bb31b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10bb31a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxieqpnc                        0x0000555951e7894b <unavailable> + 6475

    5    libc.so.6                          0x00002b10bb810460 __libc_start_main +
    245

    6    tmpyxieqpnc                        0x0000555951e784f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1),\n        let p2 = planets.firstIndex(of: planet2) else {\n       \
    \     return []\n    }\n    if p1 > p2 {\n        return Array(planets[p2...p1])\n\
    \    } else {\n        return Array(planets[p1...p2])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"\
    Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") ==\
    \ [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\"\
    , planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpb2_xe9rc/tmpb2_xe9rc.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65d14a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65d119ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65d119a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65d11997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb2_xe9rc                        0x00005593b273285b <unavailable> + 6235

    5    libc.so.6                          0x00002b65d168f460 __libc_start_main +
    245

    6    tmpb2_xe9rc                        0x00005593b2732409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let index1 = planets.firstIndex(of:\
    \ planet1)\n    let index2 = planets.firstIndex(of: planet2)\n    if index1 ==\
    \ nil || index2 == nil {\n        return []\n    }\n    let minIndex = min(index1!,\
    \ index2!)\n    let maxIndex = max(index1!, index2!)\n    return Array(planets[minIndex...maxIndex])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp83_vxc3a/tmp83_vxc3a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71c383bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71c3532b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71c3532988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71c35317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp83_vxc3a                        0x000055581b34b94b <unavailable> + 6475

    5    libc.so.6                          0x00002b71c3a27460 __libc_start_main +
    245

    6    tmp83_vxc3a                        0x000055581b34b4f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else {\n        return []\n\
    \    }\n    if p1 < p2 {\n        return Array(planets[p1...p2])\n    } else {\n\
    \        return Array(planets[p2...p1])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"\
    Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp21euoig0/tmp21euoig0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad52322c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad52019b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad52019988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad520187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp21euoig0                        0x00005584e410b85b <unavailable> + 6235

    5    libc.so.6                          0x00002aad5250e460 __libc_start_main +
    245

    6    tmp21euoig0                        0x00005584e410b409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    var start\
    \ = 0\n    var end = 0\n    for (index, planet) in planets.enumerated() {\n  \
    \      if planet == planet1 {\n            start = index\n        }\n        if\
    \ planet == planet2 {\n            end = index\n        }\n    }\n    if start\
    \ > end {\n        let temp = start\n        start = end\n        end = temp\n\
    \    }\n    for i in start...end {\n        result.append(planets[i])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\"\
    , planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2:\
    \ \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\n\
    assert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"\
    Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\")\
    \ == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmpg_hn1kpx/tmpg_hn1kpx.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e457fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e454f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e454f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e454f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_hn1kpx                        0x0000564cefea2a1b <unavailable> + 6683

    5    libc.so.6                          0x00002b1e459e9460 __libc_start_main +
    245

    6    tmpg_hn1kpx                        0x0000564cefea25c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result: [String] = []\n    if\
    \ let start = planets.firstIndex(of: planet1), let end = planets.firstIndex(of:\
    \ planet2) {\n        if start < end {\n            for i in start...end {\n \
    \               result.append(planets[i])\n            }\n        } else {\n \
    \           for i in end...start {\n                result.append(planets[i])\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmptnbj1ilc/tmptnbj1ilc.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf701ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf6fed4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf6fed4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf6fed37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptnbj1ilc                        0x000055eae20ec80b <unavailable> + 6155

    5    libc.so.6                          0x00002aaf703c9460 __libc_start_main +
    245

    6    tmptnbj1ilc                        0x000055eae20ec3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let index1 = planets.firstIndex(of:\
    \ planet1)\n    let index2 = planets.firstIndex(of: planet2)\n    if index1 ==\
    \ nil || index2 == nil {\n        return []\n    }\n    let start = min(index1!,\
    \ index2!)\n    let end = max(index1!, index2!)\n    return Array(planets[start...end])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp7n8x5p_c/tmp7n8x5p_c.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4eb69ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4eb66e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4eb66e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4eb66e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7n8x5p_c                        0x000055ddfe01d94b <unavailable> + 6475

    5    libc.so.6                          0x00002b4eb6bd8460 __libc_start_main +
    245

    6    tmp7n8x5p_c                        0x000055ddfe01d4f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else { return [] }\n    return\
    \ p1 < p2 ? Array(planets[p1...p2]) : Array(planets[p2...p1])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"\
    Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") ==\
    \ [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\"\
    , planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpg2wl0qur/tmpg2wl0qur.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8400740c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8400437b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8400437988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84004367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg2wl0qur                        0x000055810def785b <unavailable> + 6235

    5    libc.so.6                          0x00002b840092c460 __libc_start_main +
    245

    6    tmpg2wl0qur                        0x000055810def7409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result: [String] = []\n    var\
    \ start = 0\n    var end = 0\n    for (index, planet) in planets.enumerated()\
    \ {\n        if planet == planet1 {\n            start = index\n        }\n  \
    \      if planet == planet2 {\n            end = index\n        }\n    }\n   \
    \ if start > end {\n        let temp = start\n        start = end\n        end\
    \ = temp\n    }\n    for i in start...end {\n        result.append(planets[i])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1:\
    \ \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\"\
    , planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\"\
    ) == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmpajtmwwu4/tmpajtmwwu4.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8999cd1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89999c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89999c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89999c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajtmwwu4                        0x0000560d399c89bb <unavailable> + 6587

    5    libc.so.6                          0x00002b8999ebd460 __libc_start_main +
    245

    6    tmpajtmwwu4                        0x0000560d399c8569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result: [String] = []\n    guard\
    \ let index1 = planets.firstIndex(of: planet1),\n        let index2 = planets.firstIndex(of:\
    \ planet2) else {\n            return result\n    }\n    if index1 < index2 {\n\
    \        result = Array(planets[index1...index2])\n    } else {\n        result\
    \ = Array(planets[index2...index1])\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"\
    Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") ==\
    \ [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\"\
    , planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpzvwlldsw/tmpzvwlldsw.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee06ca7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee0699eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee0699e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee0699d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzvwlldsw                        0x0000558b0cad785b <unavailable> + 6235

    5    libc.so.6                          0x00002aee06e93460 __libc_start_main +
    245

    6    tmpzvwlldsw                        0x0000558b0cad7409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else { return [] }\n    return\
    \ p1 < p2 ? Array(planets[p1...p2]) : Array(planets[p2...p1])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"\
    Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") ==\
    \ [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\"\
    , planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpg2wl0qur/tmpg2wl0qur.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8400740c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8400437b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8400437988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84004367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg2wl0qur                        0x000055810def785b <unavailable> + 6235

    5    libc.so.6                          0x00002b840092c460 __libc_start_main +
    245

    6    tmpg2wl0qur                        0x000055810def7409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let planet1Index = planets.firstIndex(of:\
    \ planet1),\n        let planet2Index = planets.firstIndex(of: planet2) else {\n\
    \            return []\n    }\n    let startIndex = min(planet1Index, planet2Index)\n\
    \    let endIndex = max(planet1Index, planet2Index)\n    return Array(planets[startIndex...endIndex])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpwqwdg42q/tmpwqwdg42q.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8de7428c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8de711fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8de711f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8de711e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwqwdg42q                        0x0000565367f0994b <unavailable> + 6475

    5    libc.so.6                          0x00002b8de7614460 __libc_start_main +
    245

    6    tmpwqwdg42q                        0x0000565367f094f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result: [String] = []\n    let\
    \ start = planets.firstIndex(of: planet1) ?? -1\n    let end = planets.firstIndex(of:\
    \ planet2) ?? -1\n    if start == -1 || end == -1 {\n        return result\n \
    \   }\n    if start < end {\n        result = Array(planets[start...end])\n  \
    \  } else {\n        result = Array(planets[end...start])\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp6kn_4ihh/tmp6kn_4ihh.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa1523dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa14f34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa14f34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa14f337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6kn_4ihh                        0x00005586f7b8785b <unavailable> + 6235

    5    libc.so.6                          0x00002baa15429460 __libc_start_main +
    245

    6    tmp6kn_4ihh                        0x00005586f7b87409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let index1 = planets.firstIndex(of:\
    \ planet1),\n        let index2 = planets.firstIndex(of: planet2) else {\n   \
    \         return []\n    }\n    let start = min(index1, index2)\n    let end =\
    \ max(index1, index2)\n    return Array(planets[start...end])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"\
    Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") ==\
    \ [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\"\
    , planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpnk0cladw/tmpnk0cladw.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b637b151c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b637ae48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b637ae48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b637ae477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnk0cladw                        0x00005619182bb94b <unavailable> + 6475

    5    libc.so.6                          0x00002b637b33d460 __libc_start_main +
    245

    6    tmpnk0cladw                        0x00005619182bb4f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let start = min(planet1Index!,\
    \ planet2Index!)\n    let end = max(planet1Index!, planet2Index!)\n    return\
    \ Array(planets[start...end])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1:\
    \ \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\"\
    , planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\"\
    ) == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmp1wvfne_9/tmp1wvfne_9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43e7598c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43e728fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43e728f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43e728e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1wvfne_9                        0x0000563022d1694b <unavailable> + 6475

    5    libc.so.6                          0x00002b43e7784460 __libc_start_main +
    245

    6    tmp1wvfne_9                        0x0000563022d164f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let p1 = planets.firstIndex(of:\
    \ planet1), let p2 = planets.firstIndex(of: planet2) else {\n        return []\n\
    \    }\n    return planets[min(p1, p2) + 1 ..< max(p1, p2)].sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp1_eygpqz/tmp1_eygpqz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b450f1a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b450ee97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b450ee97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b450ee967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1_eygpqz                        0x000055a3cbedfcb8 <unavailable> + 7352

    5    libc.so.6                          0x00002b450f38c460 __libc_start_main +
    245

    6    tmp1_eygpqz                        0x000055a3cbedf499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result: [String] = []\n    if\
    \ let index1 = planets.firstIndex(of: planet1), let index2 = planets.firstIndex(of:\
    \ planet2) {\n        if index1 < index2 {\n            for i in index1...index2\
    \ {\n                result.append(planets[i])\n            }\n        } else\
    \ {\n            for i in index2...index1 {\n                result.append(planets[i])\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmp47artb0e/tmp47artb0e.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7333aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7330a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7330a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7330a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp47artb0e                        0x000055845f66180b <unavailable> + 6155

    5    libc.so.6                          0x00002ba733596460 __libc_start_main +
    245

    6    tmp47artb0e                        0x000055845f6613b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result: [String] = []\n    if\
    \ let start = planets.firstIndex(of: planet1), let end = planets.firstIndex(of:\
    \ planet2) {\n        if start < end {\n            for i in start...end {\n \
    \               result.append(planets[i])\n            }\n        } else {\n \
    \           for i in end...start {\n                result.append(planets[i])\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmptnbj1ilc/tmptnbj1ilc.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf701ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf6fed4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf6fed4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf6fed37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptnbj1ilc                        0x000055eae20ec80b <unavailable> + 6155

    5    libc.so.6                          0x00002aaf703c9460 __libc_start_main +
    245

    6    tmptnbj1ilc                        0x000055eae20ec3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    var result = [String]()\n    if let\
    \ index1 = planets.firstIndex(of: planet1), let index2 = planets.firstIndex(of:\
    \ planet2) {\n        if index1 < index2 {\n            for i in index1...index2\
    \ {\n                result.append(planets[i])\n            }\n        } else\
    \ {\n            for i in index2...index1 {\n                result.append(planets[i])\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmppxs9q9qg/tmppxs9q9qg.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab86f6dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab86f3d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab86f3d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab86f3d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxs9q9qg                        0x00005602fb68c85b <unavailable> + 6235

    5    libc.so.6                          0x00002ab86f8c8460 __libc_start_main +
    245

    6    tmppxs9q9qg                        0x00005602fb68c409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let index1 = planets.firstIndex(of:\
    \ planet1),\n        let index2 = planets.firstIndex(of: planet2) else {\n   \
    \         return []\n    }\n    let minIndex = min(index1, index2)\n    let maxIndex\
    \ = max(index1, index2)\n    return Array(planets[minIndex...maxIndex])\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
    ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
    ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"\
    Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\n\
    assert(bf(planet1: \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpbi62inda/tmpbi62inda.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fde7c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fde4b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fde4b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fde4b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbi62inda                        0x0000559be8feb94b <unavailable> + 6475

    5    libc.so.6                          0x00002b3fde9ac460 __libc_start_main +
    245

    6    tmpbi62inda                        0x0000559be8feb4f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011019
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let startIndex\
    \ = min(planet1Index!, planet2Index!)\n    let endIndex = max(planet1Index!, planet2Index!)\n\
    \    return Array(planets[startIndex...endIndex])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\"\
    , \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\") == [\"Venus\"\
    ])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\", planet2:\
    \ \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])\n\
    assert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
    \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
    , planet2: \"Makemake\") == [] as [String])"
  status: Exception
  stderr: 'tmpayuppd4f/tmpayuppd4f.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ec84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ec543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ec543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ec5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayuppd4f                        0x000056318e52394b <unavailable> + 6475

    5    libc.so.6                          0x00002b89eca38460 __libc_start_main +
    245

    6    tmpayuppd4f                        0x000056318e5234f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
- exit_code: -4
  program: "\n/// There are eight planets in our solar system: the closerst to the\
    \ Sun \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n/// Uranus, Neptune.\n/// Write a function that takes two planet names as\
    \ strings planet1 and planet2. \n/// The function should return a tuple containing\
    \ all planets whose orbits are \n/// located between the orbit of planet1 and\
    \ the orbit of planet2, sorted by \n/// the proximity to the sun. \n/// The function\
    \ should return an empty tuple if planet1 or planet2\n/// are not correct planet\
    \ names. \n/// Examples\nfunc bf(planet1: String, planet2: String) -> [String]\
    \ {\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n    let planet1Index = planets.firstIndex(of:\
    \ planet1)\n    let planet2Index = planets.firstIndex(of: planet2)\n    if planet1Index\
    \ == nil || planet2Index == nil {\n        return []\n    }\n    let start = min(planet1Index!,\
    \ planet2Index!)\n    let end = max(planet1Index!, planet2Index!)\n    return\
    \ Array(planets[start...end])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(bf(planet1:\
    \ \"Jupiter\", planet2: \"Neptune\") == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1:\
    \ \"Earth\", planet2: \"Mercury\") == [\"Venus\"])\nassert(bf(planet1: \"Mercury\"\
    , planet2: \"Uranus\") == [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ])\nassert(bf(planet1: \"Neptune\", planet2: \"Venus\") == [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2:\
    \ \"Earth\") == [] as [String])\nassert(bf(planet1: \"Mars\", planet2: \"Earth\"\
    ) == [] as [String])\nassert(bf(planet1: \"Jupiter\", planet2: \"Makemake\") ==\
    \ [] as [String])"
  status: Exception
  stderr: 'tmp1wvfne_9/tmp1wvfne_9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43e7598c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43e728fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43e728f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43e728e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1wvfne_9                        0x0000563022d1694b <unavailable> + 6475

    5    libc.so.6                          0x00002b43e7784460 __libc_start_main +
    245

    6    tmp1wvfne_9                        0x0000563022d164f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660011018
