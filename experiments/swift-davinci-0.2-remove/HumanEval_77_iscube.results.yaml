language: swift
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = a * a * a\n    return cube == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7x5b0nvp/tmp7x5b0nvp.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace50efcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace50bf3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace50bf3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace50bf27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7x5b0nvp                        0x000055934db11311 <unavailable> + 4881

    5    libc.so.6                          0x00002ace510e8460 __libc_start_main +
    245

    6    tmp7x5b0nvp                        0x000055934db10e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let c = Int(pow(Double(a), 1.0/3.0))\n    return c * c * c == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzpdjzeet.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ c = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) *\
    \ Int(pow(Double(a), 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9kx47lcr.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmp9kx47lcr.swift:7:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmp9kx47lcr.swift:7:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) *\
    \ Int(pow(Double(a), 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9kx47lcr.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmp9kx47lcr.swift:7:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmp9kx47lcr.swift:7:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let x = Int(pow(Double(a), 1/3))\n    return x * x * x == a\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphdnia55i.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ x = Int(pow(Double(a), 1/3))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) *\
    \ Int(pow(Double(a), 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9kx47lcr.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmp9kx47lcr.swift:7:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmp9kx47lcr.swift:7:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return a == cube * cube * cube\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptt3_22as.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cubeRoot = Int(pow(Double(a), 1.0/3.0))\n    return cubeRoot * cubeRoot\
    \ * cubeRoot == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz44ska_f.swift:7:24: error: cannot find 'pow' in scope\n    let\
    \ cubeRoot = Int(pow(Double(a), 1.0/3.0))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let x = Int(pow(Double(a), 1.0/3.0))\n    return x * x * x == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa_y8181h.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ x = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = a * a * a\n    return cube == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7x5b0nvp/tmp7x5b0nvp.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace50efcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace50bf3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace50bf3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace50bf27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7x5b0nvp                        0x000055934db11311 <unavailable> + 4881

    5    libc.so.6                          0x00002ace510e8460 __libc_start_main +
    245

    6    tmp7x5b0nvp                        0x000055934db10e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let c = Int(pow(Double(a), 1.0/3.0))\n    return c * c * c == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzpdjzeet.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ c = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return b * b * b == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmtz4xr8p.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   var i = 1\n    while i * i * i <= a {\n        if i * i * i == a {\n     \
    \       return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp0xznc1qz/tmp0xznc1qz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b388e14ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b388de41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b388de41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b388de407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xznc1qz                        0x0000558dbafa829d <unavailable> + 4765

    5    libc.so.6                          0x00002b388e336460 __libc_start_main +
    245

    6    tmp0xznc1qz                        0x0000558dbafa7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) *\
    \ Int(pow(Double(a), 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9kx47lcr.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmp9kx47lcr.swift:7:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmp9kx47lcr.swift:7:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   var i = 1\n    while i * i * i <= a {\n        if i * i * i == a {\n     \
    \       return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp0xznc1qz/tmp0xznc1qz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b388e14ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b388de41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b388de41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b388de407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xznc1qz                        0x0000558dbafa829d <unavailable> + 4765

    5    libc.so.6                          0x00002b388e336460 __libc_start_main +
    245

    6    tmp0xznc1qz                        0x0000558dbafa7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpbf7lae7v/tmpbf7lae7v.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85a37b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85a34abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85a34ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85a34aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbf7lae7v                        0x000055a857be21b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b85a39a0460 __libc_start_main +
    245

    6    tmpbf7lae7v                        0x000055a857be1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return a == cube * cube * cube\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptt3_22as.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let x = Int(pow(Double(a), 1.0/3.0))\n    return x * x * x == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa_y8181h.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ x = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return a == b * b * b\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptzz1_i87.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let root = Int(pow(Double(a), 1.0/3.0))\n    return root * root * root ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6pm583fs.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ root = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return a == b * b * b\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptzz1_i87.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let root = Int(pow(Double(a), 1.0/3.0))\n    return root * root * root ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6pm583fs.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ root = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = a * a * a\n    if cube == a {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpiorhf1r0/tmpiorhf1r0.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8865cd8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88659cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88659cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88659ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiorhf1r0                        0x000055e37eb1a311 <unavailable> + 4881

    5    libc.so.6                          0x00002b8865ec4460 __libc_start_main +
    245

    6    tmpiorhf1r0                        0x000055e37eb19e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return b * b * b == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmtz4xr8p.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpbf7lae7v/tmpbf7lae7v.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85a37b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85a34abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85a34ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85a34aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbf7lae7v                        0x000055a857be21b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b85a39a0460 __libc_start_main +
    245

    6    tmpbf7lae7v                        0x000055a857be1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Double(a)\n    let c = pow(b, 1.0/3.0)\n    let d = Int(c)\n    if\
    \ d * d * d == a {\n        return true\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnvfn2jj9.swift:8:13: error: cannot find 'pow' in scope\n    let\
    \ c = pow(b, 1.0/3.0)\n            ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let x = Int(pow(Double(a), 1.0/3.0))\n    return x * x * x == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa_y8181h.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ x = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return (a == 0) ? true : (a == 1) ? true : (a == 8) ? true : false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpl7t__uxa/tmpl7t__uxa.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec8b505c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec8b1fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec8b1fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec8b1fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl7t__uxa                        0x000055be909f929d <unavailable> + 4765

    5    libc.so.6                          0x00002aec8b6f1460 __libc_start_main +
    245

    6    tmpl7t__uxa                        0x000055be909f8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpbf7lae7v/tmpbf7lae7v.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85a37b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85a34abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85a34ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85a34aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbf7lae7v                        0x000055a857be21b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b85a39a0460 __libc_start_main +
    245

    6    tmpbf7lae7v                        0x000055a857be1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return a == cube * cube * cube\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptt3_22as.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cubeRoot = Int(pow(Double(a), 1.0/3.0))\n    return cubeRoot * cubeRoot\
    \ * cubeRoot == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz44ska_f.swift:7:24: error: cannot find 'pow' in scope\n    let\
    \ cubeRoot = Int(pow(Double(a), 1.0/3.0))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let root = Int(pow(Double(a), 1.0/3.0))\n    return root * root * root ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6pm583fs.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ root = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let root = Int(cbrt(Double(a)))\n    return root * root * root == a\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmvqtfj1s.swift:7:20: error: cannot find 'cbrt' in scope\n    let\
    \ root = Int(cbrt(Double(a)))\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return a == cube * cube * cube\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptt3_22as.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return a == b * b * b\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptzz1_i87.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = a.squareRoot()\n    return b.truncatingRemainder(dividingBy: 1) ==\
    \ 0 && b.square() == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpi9d1c1sy.swift:7:15: error: value of type 'Int' has no member 'squareRoot'\n\
    \    let b = a.squareRoot()\n            ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979686
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let x = Int(pow(Double(a), 1.0/3.0))\n    return x * x * x == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa_y8181h.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ x = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1/3))\n    return a == cube * cube * cube\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdx3pm30l.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1/3))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cubeRoot = Int(pow(Double(a), 1.0/3.0))\n    return cubeRoot * cubeRoot\
    \ * cubeRoot == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz44ska_f.swift:7:24: error: cannot find 'pow' in scope\n    let\
    \ cubeRoot = Int(pow(Double(a), 1.0/3.0))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   var i = 1\n    while i * i * i <= a {\n        if i * i * i == a {\n     \
    \       return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp0xznc1qz/tmp0xznc1qz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b388e14ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b388de41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b388de41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b388de407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xznc1qz                        0x0000558dbafa829d <unavailable> + 4765

    5    libc.so.6                          0x00002b388e336460 __libc_start_main +
    245

    6    tmp0xznc1qz                        0x0000558dbafa7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) *\
    \ Int(pow(Double(a), 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9kx47lcr.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmp9kx47lcr.swift:7:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmp9kx47lcr.swift:7:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) *\
    \ Int(pow(Double(a), 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9kx47lcr.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmp9kx47lcr.swift:7:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmp9kx47lcr.swift:7:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   var i = 1\n    while i * i * i <= a {\n        if i * i * i == a {\n     \
    \       return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp0xznc1qz/tmp0xznc1qz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b388e14ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b388de41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b388de41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b388de407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xznc1qz                        0x0000558dbafa829d <unavailable> + 4765

    5    libc.so.6                          0x00002b388e336460 __libc_start_main +
    245

    6    tmp0xznc1qz                        0x0000558dbafa7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpbf7lae7v/tmpbf7lae7v.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85a37b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85a34abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85a34ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85a34aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbf7lae7v                        0x000055a857be21b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b85a39a0460 __libc_start_main +
    245

    6    tmpbf7lae7v                        0x000055a857be1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpbf7lae7v/tmpbf7lae7v.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85a37b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85a34abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85a34ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85a34aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbf7lae7v                        0x000055a857be21b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b85a39a0460 __libc_start_main +
    245

    6    tmpbf7lae7v                        0x000055a857be1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return b * b * b == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmtz4xr8p.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return b * b * b == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmtz4xr8p.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let result = pow(Double(a), 1.0/3.0)\n    return result == Double(Int(result))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjxyfdlfp.swift:7:18: error: cannot find 'pow' in scope\n    let\
    \ result = pow(Double(a), 1.0/3.0)\n                 ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = a * a * a\n    return cube == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7x5b0nvp/tmp7x5b0nvp.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace50efcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace50bf3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace50bf3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace50bf27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7x5b0nvp                        0x000055934db11311 <unavailable> + 4881

    5    libc.so.6                          0x00002ace510e8460 __libc_start_main +
    245

    6    tmp7x5b0nvp                        0x000055934db10e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = a * a * a\n    return cube == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7x5b0nvp/tmp7x5b0nvp.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace50efcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace50bf3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace50bf3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace50bf27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7x5b0nvp                        0x000055934db11311 <unavailable> + 4881

    5    libc.so.6                          0x00002ace510e8460 __libc_start_main +
    245

    6    tmp7x5b0nvp                        0x000055934db10e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpbf7lae7v/tmpbf7lae7v.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85a37b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85a34abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85a34ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85a34aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbf7lae7v                        0x000055a857be21b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b85a39a0460 __libc_start_main +
    245

    6    tmpbf7lae7v                        0x000055a857be1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let root = Int(pow(Double(a), 1.0/3.0))\n    return root * root * root ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6pm583fs.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ root = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpbf7lae7v/tmpbf7lae7v.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85a37b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85a34abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85a34ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85a34aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbf7lae7v                        0x000055a857be21b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b85a39a0460 __libc_start_main +
    245

    6    tmpbf7lae7v                        0x000055a857be1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return b * b * b == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmtz4xr8p.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   var i = 1\n    while i * i * i <= a {\n        if i * i * i == a {\n     \
    \       return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp0xznc1qz/tmp0xznc1qz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b388e14ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b388de41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b388de41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b388de407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xznc1qz                        0x0000558dbafa829d <unavailable> + 4765

    5    libc.so.6                          0x00002b388e336460 __libc_start_main +
    245

    6    tmp0xznc1qz                        0x0000558dbafa7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return a == cube * cube * cube\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptt3_22as.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return a == b * b * b\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptzz1_i87.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   var i = 1\n    while i * i * i <= a {\n        if i * i * i == a {\n     \
    \       return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp0xznc1qz/tmp0xznc1qz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b388e14ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b388de41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b388de41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b388de407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xznc1qz                        0x0000558dbafa829d <unavailable> + 4765

    5    libc.so.6                          0x00002b388e336460 __libc_start_main +
    245

    6    tmp0xznc1qz                        0x0000558dbafa7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return b * b * b == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmtz4xr8p.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return b * b * b == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmtz4xr8p.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cubeRoot = Int(pow(Double(a), 1.0/3.0))\n    return cubeRoot * cubeRoot\
    \ * cubeRoot == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz44ska_f.swift:7:24: error: cannot find 'pow' in scope\n    let\
    \ cubeRoot = Int(pow(Double(a), 1.0/3.0))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpbf7lae7v/tmpbf7lae7v.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85a37b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85a34abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85a34ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85a34aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbf7lae7v                        0x000055a857be21b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b85a39a0460 __libc_start_main +
    245

    6    tmpbf7lae7v                        0x000055a857be1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return a == cube * cube * cube\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptt3_22as.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return b * b * b == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmtz4xr8p.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return b * b * b == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmtz4xr8p.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) *\
    \ Int(pow(Double(a), 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9kx47lcr.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmp9kx47lcr.swift:7:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmp9kx47lcr.swift:7:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return a == cube * cube * cube\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptt3_22as.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpbf7lae7v/tmpbf7lae7v.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85a37b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85a34abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85a34ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85a34aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbf7lae7v                        0x000055a857be21b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b85a39a0460 __libc_start_main +
    245

    6    tmpbf7lae7v                        0x000055a857be1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = a * a * a\n    return cube == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7x5b0nvp/tmp7x5b0nvp.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace50efcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace50bf3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace50bf3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace50bf27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7x5b0nvp                        0x000055934db11311 <unavailable> + 4881

    5    libc.so.6                          0x00002ace510e8460 __libc_start_main +
    245

    6    tmp7x5b0nvp                        0x000055934db10e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return b * b * b == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmtz4xr8p.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   var i = 1\n    while i * i * i <= a {\n        if i * i * i == a {\n     \
    \       return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp0xznc1qz/tmp0xznc1qz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b388e14ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b388de41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b388de41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b388de407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xznc1qz                        0x0000558dbafa829d <unavailable> + 4765

    5    libc.so.6                          0x00002b388e336460 __libc_start_main +
    245

    6    tmp0xznc1qz                        0x0000558dbafa7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let root = Int(pow(Double(a), 1.0/3.0))\n    return root * root * root ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6pm583fs.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ root = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return b * b * b == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmtz4xr8p.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cubeRoot = Int(pow(Double(a), 1.0/3.0))\n    return a == cubeRoot * cubeRoot\
    \ * cubeRoot\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5mxi41q9.swift:7:24: error: cannot find 'pow' in scope\n    let\
    \ cubeRoot = Int(pow(Double(a), 1.0/3.0))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return b * b * b == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmtz4xr8p.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return b * b * b == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmtz4xr8p.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cubeRoot = Int(pow(Double(a), 1.0/3.0))\n    return a == cubeRoot * cubeRoot\
    \ * cubeRoot\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5mxi41q9.swift:7:24: error: cannot find 'pow' in scope\n    let\
    \ cubeRoot = Int(pow(Double(a), 1.0/3.0))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cubeRoot = Int(pow(Double(a), 1.0/3.0))\n    return a == cubeRoot * cubeRoot\
    \ * cubeRoot\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5mxi41q9.swift:7:24: error: cannot find 'pow' in scope\n    let\
    \ cubeRoot = Int(pow(Double(a), 1.0/3.0))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return a == b * b * b\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptzz1_i87.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return b * b * b == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmtz4xr8p.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let x = Int(pow(Double(a), 1.0/3.0))\n    return x * x * x == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa_y8181h.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ x = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpbf7lae7v/tmpbf7lae7v.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85a37b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85a34abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85a34ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85a34aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbf7lae7v                        0x000055a857be21b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b85a39a0460 __libc_start_main +
    245

    6    tmpbf7lae7v                        0x000055a857be1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) *\
    \ Int(pow(Double(a), 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9kx47lcr.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmp9kx47lcr.swift:7:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmp9kx47lcr.swift:7:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let root = Double(a).squareRoot()\n    return root.truncatingRemainder(dividingBy:\
    \ 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.kQwRqH/tmpt5zi9ehh-1.o:tmpt5zi9ehh-1.o:function $s11tmpt5zi9ehh6iscube1aSbSi_tF:
    error: undefined reference to ''sqrt''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let x = Int(pow(Double(a), 1.0/3.0))\n    return x * x * x == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa_y8181h.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ x = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return a == cube * cube * cube\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptt3_22as.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return b * b * b == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmtz4xr8p.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpbf7lae7v/tmpbf7lae7v.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85a37b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85a34abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85a34ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85a34aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbf7lae7v                        0x000055a857be21b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b85a39a0460 __libc_start_main +
    245

    6    tmpbf7lae7v                        0x000055a857be1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return b * b * b == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmtz4xr8p.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = a * a * a\n    return cube == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp7x5b0nvp/tmp7x5b0nvp.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace50efcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace50bf3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace50bf3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace50bf27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7x5b0nvp                        0x000055934db11311 <unavailable> + 4881

    5    libc.so.6                          0x00002ace510e8460 __libc_start_main +
    245

    6    tmp7x5b0nvp                        0x000055934db10e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return b * b * b == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmtz4xr8p.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return a == b * b * b\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptzz1_i87.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let x = Int(pow(Double(a), 1.0/3.0))\n    return x * x * x == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa_y8181h.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ x = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) *\
    \ Int(pow(Double(a), 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9kx47lcr.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmp9kx47lcr.swift:7:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmp9kx47lcr.swift:7:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return a == cube * cube * cube\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptt3_22as.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return a == b * b * b\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptzz1_i87.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return b * b * b == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmtz4xr8p.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let root = Int(pow(Double(a), 1.0/3.0))\n    return root * root * root ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6pm583fs.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ root = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) *\
    \ Int(pow(Double(a), 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9kx47lcr.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmp9kx47lcr.swift:7:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmp9kx47lcr.swift:7:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) *\
    \ Int(pow(Double(a), 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9kx47lcr.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmp9kx47lcr.swift:7:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmp9kx47lcr.swift:7:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpbf7lae7v/tmpbf7lae7v.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85a37b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85a34abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85a34ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85a34aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbf7lae7v                        0x000055a857be21b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b85a39a0460 __libc_start_main +
    245

    6    tmpbf7lae7v                        0x000055a857be1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) *\
    \ Int(pow(Double(a), 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9kx47lcr.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmp9kx47lcr.swift:7:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmp9kx47lcr.swift:7:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return a == cube * cube * cube\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptt3_22as.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return a == cube * cube * cube\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptt3_22as.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   var i = 1\n    while i * i * i <= a {\n        if i * i * i == a {\n     \
    \       return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp0xznc1qz/tmp0xznc1qz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b388e14ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b388de41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b388de41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b388de407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xznc1qz                        0x0000558dbafa829d <unavailable> + 4765

    5    libc.so.6                          0x00002b388e336460 __libc_start_main +
    245

    6    tmp0xznc1qz                        0x0000558dbafa7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return b * b * b == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmtz4xr8p.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return b * b * b == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmtz4xr8p.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return a == cube * cube * cube\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptt3_22as.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return b * b * b == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmtz4xr8p.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let x = Int(pow(Double(a), 1.0/3.0))\n    return x * x * x == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa_y8181h.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ x = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   var b = 1\n    while b * b * b < a {\n        b += 1\n    }\n    return b\
    \ * b * b == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpmxdmoizq/tmpmxdmoizq.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e58c15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e5890cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e5890c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e5890b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmxdmoizq                        0x00005614582f929d <unavailable> + 4765

    5    libc.so.6                          0x00002b7e58e01460 __libc_start_main +
    245

    6    tmpmxdmoizq                        0x00005614582f8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcph1x8cq.swift:7:16: error: cannot find 'pow' in scope\n    return\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n               ^~~\n/tmp/tmpcph1x8cq.swift:7:47: error: cannot\
    \ find 'pow' in scope\n    return Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpcph1x8cq.swift:7:78: error: cannot find 'pow'\
    \ in scope\n    return Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) == a\n                                      \
    \                                       ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return b * b * b == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmtz4xr8p.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpbf7lae7v/tmpbf7lae7v.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85a37b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85a34abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85a34ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85a34aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbf7lae7v                        0x000055a857be21b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b85a39a0460 __libc_start_main +
    245

    6    tmpbf7lae7v                        0x000055a857be1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a < 0 {\n        return false\n    }\n    let root = Int(pow(Double(a),\
    \ 1.0/3.0))\n    return root * root * root == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfq9lsa6x.swift:10:20: error: cannot find 'pow' in scope\n    let\
    \ root = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cubeRoot = Int(pow(Double(a), 1.0/3.0))\n    return cubeRoot * cubeRoot\
    \ * cubeRoot == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz44ska_f.swift:7:24: error: cannot find 'pow' in scope\n    let\
    \ cubeRoot = Int(pow(Double(a), 1.0/3.0))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1/3))\n    return a == cube * cube * cube\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdx3pm30l.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1/3))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   var i = 1\n    while i * i * i <= a {\n        if i * i * i == a {\n     \
    \       return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp0xznc1qz/tmp0xznc1qz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b388e14ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b388de41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b388de41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b388de407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xznc1qz                        0x0000558dbafa829d <unavailable> + 4765

    5    libc.so.6                          0x00002b388e336460 __libc_start_main +
    245

    6    tmp0xznc1qz                        0x0000558dbafa7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return a == b * b * b\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptzz1_i87.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let x = Int(pow(Double(a), 1.0/3.0))\n    return x * x * x == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa_y8181h.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ x = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a == Int(pow(Double(a), 1/3))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpj2hq3cod.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1/3))\n                    ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   var i = 1\n    while i * i * i <= a {\n        if i * i * i == a {\n     \
    \       return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp0xznc1qz/tmp0xznc1qz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b388e14ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b388de41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b388de41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b388de407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xznc1qz                        0x0000558dbafa829d <unavailable> + 4765

    5    libc.so.6                          0x00002b388e336460 __libc_start_main +
    245

    6    tmp0xznc1qz                        0x0000558dbafa7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let root = Int(pow(Double(a), 1.0/3.0))\n    return root * root * root ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6pm583fs.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ root = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cubeRoot = Int(pow(Double(a), 1.0/3.0))\n    return a == cubeRoot * cubeRoot\
    \ * cubeRoot\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5mxi41q9.swift:7:24: error: cannot find 'pow' in scope\n    let\
    \ cubeRoot = Int(pow(Double(a), 1.0/3.0))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cubeRoot = Int(pow(Double(a), 1.0/3.0))\n    return a == cubeRoot * cubeRoot\
    \ * cubeRoot\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5mxi41q9.swift:7:24: error: cannot find 'pow' in scope\n    let\
    \ cubeRoot = Int(pow(Double(a), 1.0/3.0))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   var i = 1\n    while i * i * i <= a {\n        if i * i * i == a {\n     \
    \       return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp0xznc1qz/tmp0xznc1qz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b388e14ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b388de41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b388de41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b388de407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xznc1qz                        0x0000558dbafa829d <unavailable> + 4765

    5    libc.so.6                          0x00002b388e336460 __libc_start_main +
    245

    6    tmp0xznc1qz                        0x0000558dbafa7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   var i = 1\n    while i * i * i <= a {\n        if i * i * i == a {\n     \
    \       return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp0xznc1qz/tmp0xznc1qz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b388e14ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b388de41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b388de41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b388de407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xznc1qz                        0x0000558dbafa829d <unavailable> + 4765

    5    libc.so.6                          0x00002b388e336460 __libc_start_main +
    245

    6    tmp0xznc1qz                        0x0000558dbafa7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return b * b * b == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmtz4xr8p.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return b * b * b == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmtz4xr8p.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   var i = 1\n    while i * i * i <= a {\n        if i * i * i == a {\n     \
    \       return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp0xznc1qz/tmp0xznc1qz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b388e14ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b388de41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b388de41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b388de407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xznc1qz                        0x0000558dbafa829d <unavailable> + 4765

    5    libc.so.6                          0x00002b388e336460 __libc_start_main +
    245

    6    tmp0xznc1qz                        0x0000558dbafa7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return a == cube * cube * cube\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptt3_22as.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return a == b * b * b\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptzz1_i87.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return b * b * b == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmtz4xr8p.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return b * b * b == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmtz4xr8p.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return a == b * b * b\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptzz1_i87.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cubeRoot = Int(pow(Double(a), 1.0/3.0))\n    return a == cubeRoot * cubeRoot\
    \ * cubeRoot\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5mxi41q9.swift:7:24: error: cannot find 'pow' in scope\n    let\
    \ cubeRoot = Int(pow(Double(a), 1.0/3.0))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let root = Int(pow(Double(a), 1.0/3.0))\n    return a == root * root * root\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc_e6uwxo.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ root = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpbf7lae7v/tmpbf7lae7v.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85a37b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85a34abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85a34ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85a34aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbf7lae7v                        0x000055a857be21b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b85a39a0460 __libc_start_main +
    245

    6    tmpbf7lae7v                        0x000055a857be1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return b * b * b == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmtz4xr8p.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n    return a == b * b * b\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptzz1_i87.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   var i = 0\n    while i * i * i < a {\n        i += 1\n    }\n    return i\
    \ * i * i == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpatet1763/tmpatet1763.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19efe51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19efb48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19efb48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19efb477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpatet1763                        0x000055edde63429d <unavailable> + 4765

    5    libc.so.6                          0x00002b19f003d460 __libc_start_main +
    245

    6    tmpatet1763                        0x000055edde633e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cubeRoot = Int(pow(Double(a), 1.0/3.0))\n    return cubeRoot * cubeRoot\
    \ * cubeRoot == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz44ska_f.swift:7:24: error: cannot find 'pow' in scope\n    let\
    \ cubeRoot = Int(pow(Double(a), 1.0/3.0))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let x = Int(pow(Double(a), 1.0/3.0))\n    return a == x * x * x\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpri_0keiu.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ x = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_5bcfp5.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let x = Int(pow(Double(a), 1.0/3.0))\n    return x * x * x == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa_y8181h.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ x = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cube = Int(pow(Double(a), 1/3))\n    return a == cube * cube * cube\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdx3pm30l.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1/3))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let root = Int(pow(Double(a), 1.0/3.0))\n    return root * root * root ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6pm583fs.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ root = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let cubeRoot = Int(pow(Double(a), 1.0/3.0))\n    return a == cubeRoot * cubeRoot\
    \ * cubeRoot\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5mxi41q9.swift:7:24: error: cannot find 'pow' in scope\n    let\
    \ cubeRoot = Int(pow(Double(a), 1.0/3.0))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   let b = Int(pow(Double(a), 1/3))\n    return b * b * b == a\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpprcexmbk.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1/3))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979687
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   var i = 1\n    while i*i*i <= a {\n        if i*i*i == a {\n            return\
    \ true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpsbkdd73p/tmpsbkdd73p.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab835d41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab835a38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab835a38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab835a377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsbkdd73p                        0x000055c961d1129d <unavailable> + 4765

    5    libc.so.6                          0x00002ab835f2d460 __libc_start_main +
    245

    6    tmpsbkdd73p                        0x000055c961d10e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979687
