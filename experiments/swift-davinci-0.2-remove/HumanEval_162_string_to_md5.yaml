name: HumanEval_162_string_to_md5
language: swift
prompt: "\n/// Given a string 'text', return its md5 hash equivalent string.\n///\
  \ If 'text' is an empty string, return None.\nfunc string_to_md5(text: String) ->\
  \ String? {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(string_to_md5(text: \"Hello world\") ==\
  \ \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text: \"\") == nil)\n\
  assert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\
  assert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
  )"
completions: ["    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    data.withUnsafeBytes {\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &digest)\n    }\n    let hexBytes = digest.map { String(format: \"%02hhx\",\
    \ $0) }\n    return hexBytes.joined()", "    if text.isEmpty {\n        return\
    \ nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n    let\
    \ md5 = data.withUnsafeBytes { (bytes: UnsafePointer<Data>) -> [UInt8] in\n  \
    \      var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return md5.map { String(format: \"%02hhx\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n    let\
    \ hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8] in\n\
    \        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let cstr = text.cString(using:\
    \ String.Encoding.utf8)\n    let data = NSData(bytes: cstr!, length: text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let result = data.md5()\n    return result.toHexString()",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n\
    \    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLen)\n    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let md5 = data.withUnsafeBytes { (bytes: UnsafePointer<Data>) ->\
    \ [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return md5.map { String(format: \"%02x\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let cstr = text.cString(using:\
    \ String.Encoding.utf8)\n    let len = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(cstr!, len, result)\n    let hash = NSMutableString()\n    for i in\
    \ 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n   \
    \ result.deinitialize()\n    return String(format: hash as String)", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n    let\
    \ hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8] in\n\
    \        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafePointer<Data>)\
    \ -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let md5 = data.withUnsafeBytes { (bytes: UnsafePointer<Data>) ->\
    \ [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return md5.map { String(format: \"%02x\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let md5 = data.withUnsafeBytes { (bytes: UnsafePointer<Data>) ->\
    \ [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    let md5Data = Data(bytes: md5)\n    let md5Hex =  md5Data.map { String(format:\
    \ \"%02hhx\", $0) }.joined()\n    return md5Hex", "    if text.isEmpty {\n   \
    \     return nil\n    }\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \    let strLen = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n \
    \   let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLen)\n    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafePointer<Data>)\
    \ -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n    let\
    \ hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8] in\n\
    \        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let cstr = text.cString(using:\
    \ String.Encoding.utf8)\n    let len = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(cstr!, len, result)\n    let hash = NSMutableString()\n    for i in\
    \ 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n   \
    \ result.deinitialize()\n    return String(format: hash as String)", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n    let\
    \ hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8] in\n\
    \        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let utf8_text = text.cString(using:\
    \ String.Encoding.utf8)\n    let utf8_text_len = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digest_len = Int(CC_MD5_DIGEST_LENGTH)\n   \
    \ let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digest_len)\n\
    \    CC_MD5(utf8_text!, utf8_text_len, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digest_len {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)",
  "    if text.isEmpty {\n        return nil\n    }\n    let md5 = MD5(text)\n   \
    \ return md5.calculate()", "    if let data = text.dataUsingEncoding(NSUTF8StringEncoding)\
    \ {\n        let md5 = NSMutableData(length: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \    CC_MD5(data.bytes, CC_LONG(data.length), UnsafeMutablePointer<UInt8>(md5!.mutableBytes))\n\
    \        return md5!.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue:\
    \ 0))\n    }\n    return nil", "    if text.isEmpty {\n        return nil\n  \
    \  }\n    let str = text.cString(using: String.Encoding.utf8)\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n    let digestLen\
    \ = Int(CC_MD5_DIGEST_LENGTH)\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLen)\n    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let md5 = data.withUnsafeBytes { (bytes: UnsafePointer<Data>)\
    \ -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return md5.map { String(format: \"%02hhx\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let md5 = MD5(text)\n    return md5.hexString()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafePointer<Data>)\
    \ -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let cstr = text.cString(using: String.Encoding.utf8)\n\
    \    let str = UnsafePointer<Int8>(cstr)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)", "    if\
    \ text.isEmpty {\n        return nil\n    }\n    let cstr = text.cString(using:\
    \ String.Encoding.utf8)\n    let data = NSData(bytes: cstr!, length: text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let result = data.md5()\n    return result.toHexString()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafePointer<Data>)\
    \ -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafePointer<Data>) -> [UInt8]\
    \ in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let md5 = data.withUnsafeBytes { (bytes: UnsafePointer<Data>) ->\
    \ [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return md5.map { String(format: \"%02x\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)", "    if\
    \ text.isEmpty {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8]\
    \ in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = Data(text.utf8)\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8]\
    \ in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n\
    \    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLen)\n    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    data.withUnsafeBytes {\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &digest)\n    }\n    let hexBytes = digest.map { String(format: \"%02hhx\",\
    \ $0) }\n    return hexBytes.joined()", "    if text.isEmpty {\n        return\
    \ nil\n    }\n    let cstr = text.cString(using: String.Encoding.utf8)\n    let\
    \ data = NSData(bytes: cstr!, length: text.lengthOfBytes(using: String.Encoding.utf8))\n\
    \    let result = data.md5()\n    return result", "    if text.isEmpty {\n   \
    \     return nil\n    }\n    let messageData = text.data(using:.utf8)!\n    var\
    \ digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n\
    \    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLen)\n    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)", "    if\
    \ text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let text_data = text.data(using:\
    \ .utf8)!\n    let md5_data = text_data.withUnsafeBytes { (bytes: UnsafePointer<Data>)\
    \ -> [UInt8] in\n        var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(text_data.count), &md5)\n        return md5\n \
    \   }\n    return md5_data.map { String(format: \"%02hhx\", $0) }.joined()", " \
    \   if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)", "    if\
    \ text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)", "    if\
    \ text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)", "    if\
    \ text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)", "    if\
    \ text.isEmpty {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8]\
    \ in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)", "    if\
    \ text.isEmpty {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8]\
    \ in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)", "    if\
    \ text.isEmpty {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8]\
    \ in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)", "    if\
    \ text.isEmpty {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafePointer<Data>) -> [UInt8]\
    \ in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let data = Data(text.utf8)\n    let hash =\
    \ data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8] in\n     \
    \   var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n     \
    \   CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return hash\n\
    \    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()", "    if\
    \ text.isEmpty {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8]\
    \ in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)", "    if\
    \ text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let cstr = text.cString(using:\
    \ String.Encoding.utf8)\n    let data = NSData(bytes: cstr!, length: text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let result = data.md5()\n    return result", " \
    \   if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let md5 = data.withUnsafeBytes { (bytes: UnsafePointer<Data>) ->\
    \ [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return md5.map { String(format: \"%02x\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let md5 = MD5(text)\n    return md5.hexString",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)", "    if\
    \ text.isEmpty {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8]\
    \ in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)", "    if\
    \ text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let md5 = MD5(text)\n   \
    \ return md5.hexString", "    if text.isEmpty {\n        return nil\n    }\n \
    \   let cstr = text.cString(using: String.Encoding.utf8)\n    let len = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(cstr!, len, result)\n    let hash = NSMutableString()\n    for i in\
    \ 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n   \
    \ result.deinitialize()\n    return String(format: hash as String)", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafePointer<Data>) -> [UInt8]\
    \ in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafePointer<Data>) -> [UInt8]\
    \ in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n    let\
    \ md5 = data.withUnsafeBytes { (bytes: UnsafePointer<Data>) -> [UInt8] in\n  \
    \      var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return md5.map { String(format: \"%02x\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)", "    if\
    \ text.isEmpty {\n        return nil\n    }\n    let md5 = MD5(text)\n    return\
    \ md5.calculate()", "    if text.isEmpty {\n        return nil\n    }\n    let\
    \ data = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes:\
    \ UnsafeRawBufferPointer) -> [UInt8] in\n        var hash = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return hash.map { String(format: \"\
    %02x\", $0) }.joined()", "    if text.isEmpty {\n        return nil\n    }\n \
    \   let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)", "    if\
    \ text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)", "    if\
    \ text.isEmpty {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8]\
    \ in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let digest = md5(text)\n\
    \    return digest.map { String(format: \"%02hhx\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let cstr = text.cString(using: String.Encoding.utf8)\n\
    \    let data = NSData(bytes: cstr!, length: text.lengthOfBytes(using: String.Encoding.utf8))\n\
    \    let result = data.md5()\n    return String(format: result.map { String(format:\
    \ \"%02hhx\", $0) }.joined())", "    if text.isEmpty {\n        return nil\n \
    \   }\n    let str = text.cString(using: String.Encoding.utf8)\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n    let digestLen\
    \ = Int(CC_MD5_DIGEST_LENGTH)\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLen)\n    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = Data(text.utf8)\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8]\
    \ in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = Data(text.utf8)\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8]\
    \ in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafePointer<Data>)\
    \ -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n\
    \    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLen)\n    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n\
    \    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLen)\n    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let md5 = data.withUnsafeBytes { (bytes: UnsafePointer<Data>) ->\
    \ [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return md5.map { String(format: \"%02x\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n    let\
    \ hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8] in\n\
    \        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n\
    \    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLen)\n    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = Data(text.utf8)\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8]\
    \ in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n\
    \    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLen)\n    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)", "    if\
    \ text.isEmpty {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafePointer<Data>) -> [UInt8]\
    \ in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \    let strLen = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n\
    \    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLen)\n    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    return text.md5()", "   \
    \ if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)", "    if\
    \ text.isEmpty {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8]\
    \ in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let textData = text.data(using:\
    \ .utf8)!\n    let hash = MD5(textData)\n    return hash.map { String(format:\
    \ \"%02x\", $0) }.joined()", "    if text.isEmpty {\n        return nil\n    }\n\
    \    let data = text.data(using: .utf8)!\n    let md5 = data.withUnsafeBytes {\
    \ (bytes: UnsafePointer<Data>) -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return md5.map { String(format: \"%02x\"\
    , $0) }.joined()", "    if text.isEmpty {\n        return nil\n    }\n    let\
    \ data = text.data(using: .utf8)!\n    let hash = data.withUnsafeBytes { (bytes:\
    \ UnsafeRawBufferPointer) -> [UInt8] in\n        var hash = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return hash.map { String(format: \"\
    %02x\", $0) }.joined()", "    if text.isEmpty {\n        return nil\n    }\n \
    \   let utf8_text = text.cString(using: String.Encoding.utf8)\n    let utf8_text_len\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n    let digest_len\
    \ = Int(CC_MD5_DIGEST_LENGTH)\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digest_len)\n    CC_MD5(utf8_text!, utf8_text_len, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digest_len {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafePointer<Data>)\
    \ -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafePointer<Data>) -> [UInt8]\
    \ in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let md5 = MD5(text)\n   \
    \ return md5.calculate()", "    if text.isEmpty {\n        return nil\n    }\n\
    \    let str = text.cString(using: String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)", "    if\
    \ text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n\
    \    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLen)\n    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = Data(text.utf8)\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8]\
    \ in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let md5 = data.withUnsafeBytes { (bytes: UnsafePointer<Data>) ->\
    \ [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return md5.map { String(format: \"%02x\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n    let\
    \ hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8] in\n\
    \        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)", "    if\
    \ text.isEmpty {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8]\
    \ in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n\
    \    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLen)\n    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n\
    \    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLen)\n    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n\
    \    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLen)\n    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let md5Data = MD5(text)\n\
    \    let md5Hex =  md5Data.map { String(format: \"%02hhx\", $0) }.joined()\n \
    \   return md5Hex", "    if text.isEmpty {\n        return nil\n    }\n    let\
    \ messageData = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()", "    if text.isEmpty {\n        return nil\n    }\n\
    \    let str = text.cString(using: String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)", "    if\
    \ text.isEmpty {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8]\
    \ in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let length = Int(CC_MD5_DIGEST_LENGTH)\n\
    \    var digest = [UInt8](repeating: 0, count: length)\n    if let d = text.data(using:\
    \ String.Encoding.utf8) {\n        _ = d.withUnsafeBytes { (body: UnsafePointer<UInt8>)\
    \ in\n            CC_MD5(body, CC_LONG(d.count), &digest)\n        }\n    }\n\
    \    return (0..<length).reduce(\"\") {\n        $0 + String(format: \"%02x\"\
    , digest[$1])\n    }", "    if text.isEmpty {\n        return nil\n    }\n   \
    \ let data = text.data(using: String.Encoding.utf8)!\n    let hash = data.withUnsafeBytes\
    \ { (bytes: UnsafePointer<Data>) -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        CC_MD5(bytes, CC_LONG(data.count),\
    \ &hash)\n        return hash\n    }\n    return hash.map { String(format: \"\
    %02x\", $0) }.joined()", "    if text.isEmpty {\n        return nil\n    }\n \
    \   let str = text.cString(using: String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)", "    if\
    \ text.isEmpty {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8]\
    \ in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)", "    if\
    \ text.isEmpty {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafePointer<Data>) -> [UInt8]\
    \ in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let text_data = text.data(using: .utf8)!\n\
    \    let hash = text_data.withUnsafeBytes { (bytes: UnsafePointer<Data>) -> [UInt8]\
    \ in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(text_data.count), &hash)\n        return hash\n\
    \    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()", "    if\
    \ text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let text_data = text.data(using:\
    \ .utf8)!\n    let md5_data = MD5(text_data)\n    let md5_string = md5_data.map\
    \ { String(format: \"%02hhx\", $0) }.joined()\n    return md5_string", "    if\
    \ text.isEmpty {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8]\
    \ in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)", "    if\
    \ text.isEmpty {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafePointer<Data>) -> [UInt8]\
    \ in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafePointer<Data>) -> [UInt8]\
    \ in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let md5 = MD5(text)\n    return md5.hexString",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    data.withUnsafeBytes {\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &digest)\n    }\n    let hexBytes = digest.map { String(format: \"%02hhx\",\
    \ $0) }\n    return hexBytes.joined()", "    if text.isEmpty {\n        return\
    \ nil\n    }\n    let length = Int(CC_MD5_DIGEST_LENGTH)\n    var digest = [UInt8](repeating:\
    \ 0, count: length)\n    if let d = text.data(using: String.Encoding.utf8) {\n\
    \        _ = d.withUnsafeBytes { (body: UnsafePointer<UInt8>) in\n           \
    \ CC_MD5(body, CC_LONG(d.count), &digest)\n        }\n    }\n    return (0..<length).reduce(\"\
    \") {\n        $0 + String(format: \"%02x\", digest[$1])\n    }", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafePointer<Data>) -> [UInt8]\
    \ in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n    let\
    \ md5 = data.withUnsafeBytes { (bytes: UnsafePointer<Data>) -> [UInt8] in\n  \
    \      var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return md5.map { String(format: \"%02x\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \    let strLen = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n \
    \   let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLen)\n    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n\
    \    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLen)\n    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n\
    \    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLen)\n    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafePointer<Data>)\
    \ -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \    let strLen = CC_LONG(text.lengthOfBytes(using: String.Encoding.utf8))\n \
    \   let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLen)\n    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafePointer<Data>)\
    \ -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n    let\
    \ hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8] in\n\
    \        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)", "    if\
    \ text.isEmpty {\n        return nil\n    }\n    let md5Data = MD5(text)\n   \
    \ let md5Hex =  md5Data.map { String(format: \"%02hhx\", $0) }.joined()\n    return\
    \ md5Hex", "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let md5 = data.withUnsafeBytes { (bytes: UnsafePointer<Data>) ->\
    \ [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return md5.map { String(format: \"%02x\", $0) }.joined()"]
stop_tokens:
- "\n}"
