name: HumanEval_18_how_many_times
language: swift
prompt: "\n/// Find how many times a given substring can be found in the original\
  \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
  \ String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(how_many_times(string: \"\", substring:\
  \ \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") ==\
  \ 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
  \ \"john doe\", substring: \"john\") == 1)"
completions: ["    var count = 0\n    var search_range = string.startIndex..<string.endIndex\n\
    \    while let range = string.rangeOfString(substring, options: [], range: search_range)\
    \ {\n        count += 1\n        search_range = range.endIndex..<search_range.endIndex\n\
    \    }\n    return count", "    var count = 0\n    var start = 0\n    while true\
    \ {\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n        if let range = range {\n           \
    \ count++\n            start = range.startIndex.distanceTo(range.endIndex)\n \
    \       } else {\n            break\n        }\n    }\n    return count", "  \
    \  let length = string.characters.count\n    let subLength = substring.characters.count\n\
    \    var count = 0\n    var index = 0\n    while index < length {\n        let\
    \ start = string.index(string.startIndex, offsetBy: index)\n        let end =\
    \ string.index(string.startIndex, offsetBy: index + subLength)\n        let range\
    \ = start..<end\n        if string.substring(with: range) == substring {\n   \
    \         count += 1\n            index += subLength\n        } else {\n     \
    \       index += 1\n        }\n    }\n    return count", "    var count = 0\n\
    \    var range = string.startIndex..<string.endIndex\n    while let r = string.range(of:\
    \ substring, options: .caseInsensitive, range: range) {\n        count += 1\n\
    \        range = r.upperBound..<string.endIndex\n    }\n    return count", " \
    \   var count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.substringFromIndex(index).hasPrefix(substring) {\n    \
    \        count++\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n        }\n        index = index.advancedBy(1)\n    }\n    return count",
  "    var count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        let range = string.rangeOfString(substring, range: index..<string.endIndex)\n\
    \        if let range = range {\n            count++\n            index = range.endIndex\n\
    \        } else {\n            break\n        }\n    }\n    return count", " \
    \   var count = 0\n    var range = string.startIndex..<string.endIndex\n    while\
    \ let r = string.range(of: substring, options: .caseInsensitive, range: range)\
    \ {\n        count += 1\n        range = r.upperBound..<string.endIndex\n    }\n\
    \    return count", "    var count = 0\n    var index = string.startIndex\n  \
    \  while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count)\n\
    \        } else {\n            index = index.advancedBy(1)\n        }\n    }\n\
    \    return count", "    var count = 0\n    var searchRange = string.startIndex..<string.endIndex\n\
    \    while let foundRange = string.range(of: substring, options: [], range: searchRange)\
    \ {\n        searchRange = Range(uncheckedBounds: (lower: foundRange.upperBound,\
    \ upper: string.endIndex))\n        count += 1\n    }\n    return count", "  \
    \  var count = 0\n    var start = 0\n    while let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: Range(uncheckedBounds: (lower: string.index(string.startIndex,\
    \ offsetBy: start), upper: string.endIndex)), locale: nil) {\n        count +=\
    \ 1\n        start = string.distance(from: string.startIndex, to: range.upperBound)\n\
    \    }\n    return count", "    var count = 0\n    var start = 0\n    while true\
    \ {\n        let range = string.rangeOfString(substring, options: [], range: Range(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \       if let range = range {\n            count += 1\n            start = range.startIndex.distanceTo(range.endIndex)\n\
    \        } else {\n            break\n        }\n    }\n    return count", " \
    \   var count = 0\n    var index = 0\n    while index < string.count {\n     \
    \   let range = string.range(of: substring, options: .caseInsensitive, range:\
    \ index..<string.endIndex, locale: nil)\n        if let range = range {\n    \
    \        index = range.upperBound\n            count += 1\n        } else {\n\
    \            break\n        }\n    }\n    return count", "    var count = 0\n\
    \    var index = string.startIndex\n    while index < string.endIndex {\n    \
    \    if string.hasPrefix(substring, startingAt: index) {\n            count +=\
    \ 1\n            index = string.index(index, offsetBy: substring.count)\n    \
    \    } else {\n            index = string.index(after: index)\n        }\n   \
    \ }\n    return count", "    var count = 0\n    var index = string.startIndex\n\
    \    while index < string.endIndex {\n        if string.hasPrefix(substring, startingAt:\
    \ index) {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count", "    var count = 0\n    var start\
    \ = 0\n    while start < string.characters.count {\n        if let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: start..<string.endIndex, locale:\
    \ nil) {\n            count += 1\n            start = range.upperBound\n     \
    \   } else {\n            break\n        }\n    }\n    return count", "    var\
    \ count = 0\n    var start = 0\n    while true {\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \       if let range = range {\n            count++\n            start = start\
    \ + range.startIndex.distanceTo(range.endIndex)\n        } else {\n          \
    \  break\n        }\n    }\n    return count", "    var count = 0\n    var index\
    \ = string.startIndex\n    while index < string.endIndex {\n        if string.hasPrefix(substring,\
    \ startingAt: index) {\n            count += 1\n            index = string.index(index,\
    \ offsetBy: substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count", "    var count = 0\n    var start\
    \ = 0\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex) {\n        count += 1\n        start = range.upperBound\n\
    \    }\n    return count", "    var count = 0\n    var start = 0\n    var end\
    \ = substring.count\n    while end <= string.count {\n        if string[start..<end]\
    \ == substring {\n            count += 1\n        }\n        start += 1\n    \
    \    end += 1\n    }\n    return count", "    var count = 0\n    var index = string.startIndex\n\
    \    while index < string.endIndex {\n        if string.distance(from: index,\
    \ to: string.endIndex) >= substring.count {\n            let endIndex = string.index(index,\
    \ offsetBy: substring.count)\n            if string[index..<endIndex] == substring\
    \ {\n                count += 1\n                index = endIndex\n          \
    \  } else {\n                index = string.index(after: index)\n            }\n\
    \        } else {\n            break\n        }\n    }\n    return count", " \
    \   var count = 0\n    var startIndex = string.startIndex\n    while let range\
    \ = string.range(of: substring, range: startIndex..<string.endIndex) {\n     \
    \   count += 1\n        startIndex = range.upperBound\n    }\n    return count",
  "    var count = 0\n    var start = 0\n    var end = 0\n    while start < string.count\
    \ {\n        end = string.index(string.startIndex, offsetBy: start)\n        if\
    \ let range = string.range(of: substring, options: .caseInsensitive, range: end..<string.endIndex,\
    \ locale: nil) {\n            count += 1\n            start = string.distance(from:\
    \ string.startIndex, to: range.upperBound)\n        } else {\n            break\n\
    \        }\n    }\n    return count", "    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n        count += 1\n        range = r.upperBound..<string.endIndex\n\
    \    }\n    return count", "    var count = 0\n    var index = string.startIndex\n\
    \    while index < string.endIndex {\n        if string.rangeOfString(substring,\
    \ range: Range<String.Index>(start: index, end: string.endIndex)) != nil {\n \
    \           count++\n            index = index.advancedBy(1)\n        } else {\n\
    \            break\n        }\n    }\n    return count", "    var count = 0\n\
    \    var index = string.startIndex\n    while index < string.endIndex {\n    \
    \    if string.substringFromIndex(index).hasPrefix(substring) {\n            count++\n\
    \            index = index.advancedBy(substring.characters.count)\n        } else\
    \ {\n            index = index.advancedBy(1)\n        }\n    }\n    return count",
  "    var count = 0\n    var range = string.startIndex..<string.endIndex\n    while\
    \ let r = string.range(of: substring, options: [], range: range) {\n        count\
    \ += 1\n        range = r.upperBound..<string.endIndex\n    }\n    return count",
  "    var count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count", "    var count = 0\n    var index = string.startIndex\n\
    \    while index != string.endIndex {\n        if string.hasPrefix(substring,\
    \ startingAt: index) {\n            count += 1\n            index = string.index(index,\
    \ offsetBy: substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count", "    var count = 0\n    var index\
    \ = string.startIndex\n    while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n        }\n        index = index.advancedBy(1)\n    }\n    return count",
  "    var count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count", "    var count = 0\n    var index = string.startIndex\n\
    \    while index < string.endIndex {\n        if string.distance(from: index,\
    \ to: string.endIndex) >= substring.count {\n            let start = string.index(index,\
    \ offsetBy: 0)\n            let end = string.index(index, offsetBy: substring.count)\n\
    \            let range = start..<end\n            if string[range] == substring\
    \ {\n                count += 1\n                index = string.index(index, offsetBy:\
    \ substring.count)\n            } else {\n                index = string.index(after:\
    \ index)\n            }\n        } else {\n            break\n        }\n    }\n\
    \    return count", "    var count = 0\n    var search_range = string.startIndex..<string.endIndex\n\
    \    while let range = string.rangeOfString(substring, options: nil, range: search_range,\
    \ locale: nil) {\n        count += 1\n        search_range = range.endIndex..<search_range.endIndex\n\
    \    }\n    return count", "    var count = 0\n    var start = 0\n    while let\
    \ range = string.range(of: substring, options: .caseInsensitive, range: start..<string.endIndex)\
    \ {\n        count += 1\n        start = range.upperBound\n    }\n    return count",
  "    var count = 0\n    var range = string.startIndex..<string.endIndex\n    while\
    \ let r = string.range(of: substring, options: .caseInsensitive, range: range)\
    \ {\n        count += 1\n        range = r.upperBound..<string.endIndex\n    }\n\
    \    return count", "    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count", "    var count = 0\n    var\
    \ start = 0\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex) {\n        count += 1\n        start = range.upperBound\n\
    \    }\n    return count", "    var count = 0\n    var start = 0\n    while let\
    \ range = string.range(of: substring, options: .caseInsensitive, range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count", "    var count = 0\n    var\
    \ start = 0\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: Range(uncheckedBounds: (lower: string.index(string.startIndex, offsetBy:\
    \ start), upper: string.endIndex)), locale: nil) {\n        count += 1\n     \
    \   start = string.distance(from: string.startIndex, to: range.upperBound)\n \
    \   }\n    return count", "    var count = 0\n    var start = 0\n    while start\
    \ < string.count {\n        let range = string.range(of: substring, options: .literal,\
    \ range: start..<string.endIndex, locale: nil)\n        if let range = range {\n\
    \            count += 1\n            start = range.upperBound\n        } else\
    \ {\n            break\n        }\n    }\n    return count", "    var count =\
    \ 0\n    var start = 0\n    while let range = string.range(of: substring, options:\
    \ [], range: Range(uncheckedBounds: (lower: string.index(string.startIndex, offsetBy:\
    \ start), upper: string.endIndex)), locale: nil) {\n        count += 1\n     \
    \   start = string.distance(from: string.startIndex, to: range.upperBound)\n \
    \   }\n    return count", "    var count = 0\n    var start = 0\n    while let\
    \ range = string.range(of: substring, options: .caseInsensitive, range: start..<string.endIndex)\
    \ {\n        count += 1\n        start = range.upperBound\n    }\n    return count",
  "    var count = 0\n    var start = 0\n    while start < string.count {\n      \
    \  if let range = string.range(of: substring, options: .caseInsensitive, range:\
    \ start..<string.endIndex) {\n            count += 1\n            start = range.upperBound\n\
    \        } else {\n            break\n        }\n    }\n    return count", " \
    \   var count = 0\n    var start = 0\n    let length = string.count\n    let sublength\
    \ = substring.count\n    while start < length {\n        let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: start..<length, locale: nil)\n\
    \        if range != nil {\n            count += 1\n            start = range!.upperBound\n\
    \        } else {\n            break\n        }\n    }\n    return count", " \
    \   var count = 0\n    var start = 0\n    while start < string.count {\n     \
    \   if let range = string.range(of: substring, options: .literal, range: start..<string.endIndex,\
    \ locale: nil) {\n            count += 1\n            start = range.upperBound\n\
    \        } else {\n            break\n        }\n    }\n    return count", " \
    \   var count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.distance(from: index, to: string.endIndex) >= substring.count\
    \ {\n            let endIndex = string.index(index, offsetBy: substring.count)\n\
    \            if string[index..<endIndex] == substring {\n                count\
    \ += 1\n                index = endIndex\n            } else {\n             \
    \   index = string.index(after: index)\n            }\n        } else {\n    \
    \        index = string.index(after: index)\n        }\n    }\n    return count",
  "    var count = 0\n    var start = 0\n    while true {\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \       if let range = range {\n            count += 1\n            start = range.startIndex.distanceTo(range.endIndex)\n\
    \        } else {\n            break\n        }\n    }\n    return count", " \
    \   var count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.substringFromIndex(index).hasPrefix(substring) {\n    \
    \        count++\n            index = index.advancedBy(substring.characters.count)\n\
    \        } else {\n            index = index.advancedBy(1)\n        }\n    }\n\
    \    return count", "    var count = 0\n    var index = string.startIndex\n  \
    \  while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count)\n\
    \        } else {\n            index = index.advancedBy(1)\n        }\n    }\n\
    \    return count", "    var count = 0\n    var index = string.startIndex\n  \
    \  while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n        }\n        index = index.advancedBy(1)\n    }\n    return count",
  "    var count = 0\n    var start = 0\n    while true {\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \       if let range = range {\n            count += 1\n            start = range.startIndex.distanceTo(range.endIndex)\n\
    \        } else {\n            break\n        }\n    }\n    return count", " \
    \   var count = 0\n    var start = 0\n    while let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: start..<string.endIndex) {\n        count\
    \ += 1\n        start = range.upperBound\n    }\n    return count", "    var count\
    \ = 0\n    var start = 0\n    while let range = string.range(of: substring, options:\
    \ .caseInsensitive, range: Range(uncheckedBounds: (lower: string.index(string.startIndex,\
    \ offsetBy: start), upper: string.endIndex)), locale: nil) {\n        count +=\
    \ 1\n        start = string.distance(from: string.startIndex, to: range.upperBound)\n\
    \    }\n    return count", "    var count = 0\n    var start = 0\n    while let\
    \ range = string.range(of: substring, options: .caseInsensitive, range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        start = string.distance(from: string.startIndex, to:\
    \ range.upperBound)\n        count += 1\n    }\n    return count", "    var count\
    \ = 0\n    var range = string.startIndex..<string.endIndex\n    while let r =\
    \ string.range(of: substring, options: .caseInsensitive, range: range) {\n   \
    \     count += 1\n        range = r.upperBound..<string.endIndex\n    }\n    return\
    \ count", "    var count = 0\n    var start = 0\n    while start < string.count\
    \ {\n        if let range = string.range(of: substring, options: .literal, range:\
    \ start..<string.endIndex, locale: nil) {\n            count += 1\n          \
    \  start = range.upperBound\n        } else {\n            break\n        }\n\
    \    }\n    return count", "    var count = 0\n    var searchRange = string.startIndex..<string.endIndex\n\
    \    while let foundRange = string.range(of: substring, options: [], range: searchRange)\
    \ {\n        count += 1\n        searchRange = Range(uncheckedBounds: (lower:\
    \ foundRange.upperBound, upper: searchRange.upperBound))\n    }\n    return count",
  "    var count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.distance(from: index, to: string.endIndex) >= substring.count\
    \ {\n            let endIndex = string.index(index, offsetBy: substring.count)\n\
    \            if string[index..<endIndex] == substring {\n                count\
    \ += 1\n                index = endIndex\n            } else {\n             \
    \   index = string.index(after: index)\n            }\n        } else {\n    \
    \        break\n        }\n    }\n    return count", "    var count = 0\n    var\
    \ start = 0\n    while start < string.count {\n        if let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: start..<string.endIndex, locale:\
    \ nil) {\n            count += 1\n            start = range.upperBound\n     \
    \   } else {\n            break\n        }\n    }\n    return count", "    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if let range = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n            count += 1\n            index = range.upperBound\n        } else\
    \ {\n            break\n        }\n    }\n    return count", "    var count =\
    \ 0\n    var startIndex = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: startIndex..<string.endIndex) {\n        count += 1\n    \
    \    startIndex = range.upperBound\n    }\n    return count", "    let length\
    \ = string.characters.count\n    let sublength = substring.characters.count\n\
    \    var count = 0\n    for i in 0..<length {\n        if i + sublength <= length\
    \ {\n            let start = string.index(string.startIndex, offsetBy: i)\n  \
    \          let end = string.index(string.startIndex, offsetBy: i + sublength)\n\
    \            let range = start..<end\n            if string.substring(with: range)\
    \ == substring {\n                count += 1\n            }\n        }\n    }\n\
    \    return count", "    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: string.index(string.startIndex,\
    \ offsetBy: start)..<string.endIndex, locale: nil) {\n        count += 1\n   \
    \     start = string.distance(from: string.startIndex, to: range.upperBound)\n\
    \    }\n    return count", "    var count = 0\n    var start = 0\n    while true\
    \ {\n        let range = string.rangeOfString(substring, options: nil, range:\
    \ Range(start: string.startIndex.advancedBy(start), end: string.endIndex), locale:\
    \ nil)\n        if let range = range {\n            count += 1\n            start\
    \ = range.startIndex.distanceTo(range.endIndex)\n        } else {\n          \
    \  break\n        }\n    }\n    return count", "    var count = 0\n    var start\
    \ = 0\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: start..<string.endIndex) {\n        count += 1\n        start = range.upperBound\n\
    \    }\n    return count", "    var count = 0\n    var index = string.startIndex\n\
    \    while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n        }\n        index = index.advancedBy(1)\n    }\n    return count",
  "    var count = 0\n    var start = 0\n    while let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: Range(uncheckedBounds: (lower: string.index(string.startIndex,\
    \ offsetBy: start), upper: string.endIndex)), locale: nil) {\n        count +=\
    \ 1\n        start = string.distance(from: string.startIndex, to: range.upperBound)\n\
    \    }\n    return count", "    var count = 0\n    var start = 0\n    while start\
    \ < string.count {\n        let range = string.range(of: substring, options: [],\
    \ range: start..<string.endIndex, locale: nil)\n        if let range = range {\n\
    \            count += 1\n            start = range.upperBound\n        } else\
    \ {\n            break\n        }\n    }\n    return count", "    var count =\
    \ 0\n    var start = 0\n    while true {\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \       if let range = range {\n            count += 1\n            start = range.startIndex.distanceTo(range.endIndex)\n\
    \        } else {\n            break\n        }\n    }\n    return count", " \
    \   var count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count", "    var count = 0\n    var index = 0\n    while index\
    \ < string.count {\n        let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: string.index(index, offsetBy: 0)..<string.endIndex, locale: nil)\n  \
    \      if range != nil {\n            count += 1\n            index = string.distance(from:\
    \ string.startIndex, to: range!.upperBound)\n        } else {\n            break\n\
    \        }\n    }\n    return count", "    var count = 0\n    var index = string.startIndex\n\
    \    while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n        }\n        index = index.advancedBy(1)\n    }\n    return count",
  "    var count = 0\n    var index = 0\n    while index < string.count {\n      \
    \  if let range = string.range(of: substring, options: .caseInsensitive, range:\
    \ string.index(index, offsetBy: 0)..<string.endIndex, locale: nil) {\n       \
    \     count += 1\n            index = range.upperBound\n        } else {\n   \
    \         break\n        }\n    }\n    return count", "    var count = 0\n   \
    \ var search_range = string.startIndex..<string.endIndex\n    while let found_range\
    \ = string.range(of: substring, options: [], range: search_range) {\n        count\
    \ += 1\n        search_range = Range(uncheckedBounds: (lower: found_range.upperBound,\
    \ upper: string.endIndex))\n    }\n    return count", "    var count = 0\n   \
    \ var index = string.startIndex\n    while index < string.endIndex {\n       \
    \ if let range = string.range(of: substring, range: index..<string.endIndex) {\n\
    \            count += 1\n            index = range.upperBound\n        } else\
    \ {\n            break\n        }\n    }\n    return count", "    var count =\
    \ 0\n    var start_index = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start_index..<string.endIndex) {\n        count += 1\n   \
    \     start_index = range.upperBound\n    }\n    return count", "    var count\
    \ = 0\n    var start = 0\n    while true {\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \       if let range = range {\n            count++\n            start = range.startIndex.distanceTo(range.endIndex)\n\
    \        } else {\n            break\n        }\n    }\n    return count", " \
    \   var count = 0\n    var startIndex = string.startIndex\n    while let range\
    \ = string.range(of: substring, range: startIndex..<string.endIndex) {\n     \
    \   count += 1\n        startIndex = range.upperBound\n    }\n    return count",
  "    var count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.substringFromIndex(index).hasPrefix(substring) {\n    \
    \        count++\n            index = index.advancedBy(substring.characters.count)\n\
    \        } else {\n            index = index.advancedBy(1)\n        }\n    }\n\
    \    return count", "    var count = 0\n    var index = string.startIndex\n  \
    \  while index < string.endIndex {\n        if string.hasPrefix(substring, startingAt:\
    \ index) {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count", "    var count = 0\n    var range\
    \ = string.startIndex..<string.endIndex\n    while let r = string.range(of: substring,\
    \ options: .caseInsensitive, range: range) {\n        count += 1\n        range\
    \ = r.upperBound..<string.endIndex\n    }\n    return count", "    var count =\
    \ 0\n    var start = 0\n    while start < string.count {\n        if let range\
    \ = string.range(of: substring, options: .literal, range: start..<string.endIndex,\
    \ locale: nil) {\n            count += 1\n            start = range.upperBound\n\
    \        } else {\n            break\n        }\n    }\n    return count", " \
    \   var count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.substringFromIndex(index).hasPrefix(substring) {\n    \
    \        count++\n            index = index.advancedBy(substring.characters.count)\n\
    \        } else {\n            index = index.advancedBy(1)\n        }\n    }\n\
    \    return count", "    let len = string.count - substring.count + 1\n    var\
    \ count = 0\n    for i in 0..<len {\n        let start = string.index(string.startIndex,\
    \ offsetBy: i)\n        let end = string.index(string.startIndex, offsetBy: i\
    \ + substring.count)\n        if string[start..<end] == substring {\n        \
    \    count += 1\n        }\n    }\n    return count", "    var count = 0\n   \
    \ var start = 0\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: string.index(start, offsetBy: 0)..<string.endIndex, locale: nil) {\n\
    \        count += 1\n        start = range.upperBound\n    }\n    return count",
  "    var count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count", "    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n        count += 1\n        range = r.upperBound..<string.endIndex\n\
    \    }\n    return count", "    var count = 0\n    var start = 0\n    while let\
    \ range = string.range(of: substring, options: .caseInsensitive, range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count", "    var count = 0\n    var\
    \ start = 0\n    while true {\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \       if let range = range {\n            count++\n            start = range.startIndex.distanceTo(range.endIndex)\n\
    \        } else {\n            break\n        }\n    }\n    return count", " \
    \   var count = 0\n    var index = 0\n    while index < string.characters.count\
    \ {\n        let range = string.rangeOfString(substring, options: [], range: Range(start:\
    \ string.startIndex.advancedBy(index), end: string.endIndex), locale: nil)\n \
    \       if range != nil {\n            count += 1\n            index = range!.startIndex.distanceTo(range!.endIndex)\n\
    \        } else {\n            break\n        }\n    }\n    return count", " \
    \   var count = 0\n    var start = 0\n    while let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: Range(uncheckedBounds: (lower: string.index(string.startIndex,\
    \ offsetBy: start), upper: string.endIndex)), locale: nil) {\n        count +=\
    \ 1\n        start = string.distance(from: string.startIndex, to: range.upperBound)\n\
    \    }\n    return count", "    var count = 0\n    var index = string.startIndex\n\
    \    while index < string.endIndex {\n        if string.hasPrefix(substring, startingAt:\
    \ index) {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count", "    var count = 0\n    var search_range\
    \ = string.startIndex..<string.endIndex\n    while let found_range = string.range(of:\
    \ substring, options: [], range: search_range) {\n        count += 1\n       \
    \ search_range = Range(uncheckedBounds: (lower: found_range.upperBound, upper:\
    \ string.endIndex))\n    }\n    return count", "    var count = 0\n    var startIndex\
    \ = string.startIndex\n    while let range = string.range(of: substring, range:\
    \ startIndex..<string.endIndex) {\n        count += 1\n        startIndex = range.upperBound\n\
    \    }\n    return count", "    var count = 0\n    var index = string.startIndex\n\
    \    while index < string.endIndex {\n        if string.hasPrefix(substring, startingAt:\
    \ index) {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count", "    var count = 0\n    var start\
    \ = 0\n    while start < string.count {\n        let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: start..<string.endIndex, locale:\
    \ nil)\n        if let range = range {\n            count += 1\n            start\
    \ = range.upperBound\n        } else {\n            break\n        }\n    }\n\
    \    return count", "    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: [], range: range) {\n\
    \        count += 1\n        range = r.upperBound..<string.endIndex\n    }\n \
    \   return count", '    return string.components(separatedBy: substring).count
    - 1', "    var count = 0\n    var start = 0\n    while start < string.count {\n\
    \        if let range = string.range(of: substring, options: .literal, range:\
    \ start..<string.endIndex, locale: nil) {\n            count += 1\n          \
    \  start = range.upperBound\n        } else {\n            break\n        }\n\
    \    }\n    return count", "    var count = 0\n    var start = 0\n    while let\
    \ range = string.range(of: substring, options: .caseInsensitive, range: start..<string.endIndex)\
    \ {\n        count += 1\n        start = range.upperBound\n    }\n    return count",
  "    var count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.substringFromIndex(index).hasPrefix(substring) {\n    \
    \        count++\n            index = index.advancedBy(substring.characters.count)\n\
    \        } else {\n            index = index.advancedBy(1)\n        }\n    }\n\
    \    return count", "    var count = 0\n    var startIndex = string.startIndex\n\
    \    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n        count += 1\n        startIndex = range.upperBound\n    }\n    return\
    \ count", "    var count = 0\n    var start = 0\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: string.index(string.startIndex,\
    \ offsetBy: start)..<string.endIndex, locale: nil) {\n        count += 1\n   \
    \     start = string.distance(from: string.startIndex, to: range.upperBound)\n\
    \    }\n    return count", "    var count = 0\n    var index = string.startIndex\n\
    \    while index < string.endIndex {\n        if string.distance(from: index,\
    \ to: string.endIndex) >= substring.count {\n            let endIndex = string.index(index,\
    \ offsetBy: substring.count)\n            if string[index..<endIndex] == substring\
    \ {\n                count += 1\n                index = endIndex\n          \
    \  } else {\n                index = string.index(after: index)\n            }\n\
    \        } else {\n            break\n        }\n    }\n    return count", " \
    \   var count = 0\n    var range = string.startIndex..<string.endIndex\n    while\
    \ let r = string.range(of: substring, options: .caseInsensitive, range: range)\
    \ {\n        count += 1\n        range = r.upperBound..<string.endIndex\n    }\n\
    \    return count", "    var count = 0\n    var start = 0\n    let length = string.count\n\
    \    let subLength = substring.count\n    while start <= length - subLength {\n\
    \        let end = start + subLength\n        let range = string.index(string.startIndex,\
    \ offsetBy: start)..<string.index(string.startIndex, offsetBy: end)\n        if\
    \ string[range] == substring {\n            count += 1\n            start = end\n\
    \        } else {\n            start += 1\n        }\n    }\n    return count",
  "    var count = 0\n    var start = 0\n    while let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: Range(uncheckedBounds: (lower: string.index(string.startIndex,\
    \ offsetBy: start), upper: string.endIndex)), locale: nil) {\n        count +=\
    \ 1\n        start = string.distance(from: string.startIndex, to: range.upperBound)\n\
    \    }\n    return count", "    var count = 0\n    var index = string.startIndex\n\
    \    while index != string.endIndex {\n        if string.distance(from: index,\
    \ to: string.endIndex) >= substring.count {\n            if string[index..<string.index(index,\
    \ offsetBy: substring.count)] == substring {\n                count += 1\n   \
    \             index = string.index(index, offsetBy: substring.count)\n       \
    \     } else {\n                index = string.index(after: index)\n         \
    \   }\n        } else {\n            break\n        }\n    }\n    return count",
  "    var count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.substringFromIndex(index).hasPrefix(substring) {\n    \
    \        count++\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n        }\n        index = index.advancedBy(1)\n    }\n    return count",
  "    var count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count", "    var count = 0\n    var index = string.startIndex\n\
    \    while index < string.endIndex {\n        if string.hasPrefix(substring, startingAt:\
    \ index) {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count", "    var count = 0\n    var startIndex\
    \ = string.startIndex\n    while let range = string.range(of: substring, range:\
    \ startIndex..<string.endIndex) {\n        count += 1\n        startIndex = range.upperBound\n\
    \    }\n    return count", "    let length = string.characters.count\n    let\
    \ sublength = substring.characters.count\n    var count = 0\n    for i in 0..<length\
    \ {\n        if i + sublength > length {\n            break\n        }\n     \
    \   if string[i..<i+sublength] == substring {\n            count += 1\n      \
    \  }\n    }\n    return count", "    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: [], range: range) {\n\
    \        count += 1\n        range = r.upperBound..<string.endIndex\n    }\n \
    \   return count", "    var count = 0\n    var start = 0\n    while start < string.count\
    \ {\n        let range = string.range(of: substring, options: .literal, range:\
    \ start..<string.endIndex, locale: nil)\n        if let range = range {\n    \
    \        count += 1\n            start = range.upperBound\n        } else {\n\
    \            break\n        }\n    }\n    return count", "    var count = 0\n\
    \    var start = 0\n    while let range = string.range(of: substring, options:\
    \ [], range: Range(uncheckedBounds: (lower: string.index(string.startIndex, offsetBy:\
    \ start), upper: string.endIndex)), locale: nil) {\n        count += 1\n     \
    \   start = string.distance(from: string.startIndex, to: range.upperBound)\n \
    \   }\n    return count", "    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n        count += 1\n        range = r.upperBound..<string.endIndex\n\
    \    }\n    return count", "    var count = 0\n    var start_index = string.startIndex\n\
    \    while let range = string.range(of: substring, range: start_index..<string.endIndex)\
    \ {\n        count += 1\n        start_index = range.upperBound\n    }\n    return\
    \ count", "    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n        count += 1\n        range = r.upperBound..<string.endIndex\n\
    \    }\n    return count", "    var count = 0\n    var position = string.startIndex\n\
    \    while let range = string.range(of: substring, range: position..<string.endIndex)\
    \ {\n        count += 1\n        position = range.upperBound\n    }\n    return\
    \ count", "    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n        count += 1\n        range = r.upperBound..<string.endIndex\n\
    \    }\n    return count", "    var count = 0\n    var start = 0\n    while start\
    \ < string.count {\n        let range = string.range(of: substring, options: .literal,\
    \ range: start..<string.endIndex, locale: nil)\n        if let range = range {\n\
    \            count += 1\n            start = range.upperBound\n        } else\
    \ {\n            break\n        }\n    }\n    return count", "    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.substringFromIndex(index).hasPrefix(substring) {\n        \
    \    count++\n            index = index.advancedBy(substring.characters.count)\n\
    \        } else {\n            index = index.advancedBy(1)\n        }\n    }\n\
    \    return count", "    var count = 0\n    var index = string.startIndex\n  \
    \  while index < string.endIndex {\n        if string.hasPrefix(substring, startingAt:\
    \ index) {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count", "    var count = 0\n    var index\
    \ = string.startIndex\n    while index < string.endIndex {\n        let range\
    \ = string.rangeOfString(substring, range: index..<string.endIndex)\n        if\
    \ let range = range {\n            count++\n            index = range.endIndex\n\
    \        } else {\n            break\n        }\n    }\n    return count", " \
    \   let length = string.characters.count\n    let sublength = substring.characters.count\n\
    \    var count = 0\n    for i in 0...length-sublength {\n        let start = string.index(string.startIndex,\
    \ offsetBy: i)\n        let end = string.index(string.startIndex, offsetBy: i+sublength)\n\
    \        let range = start..<end\n        if string.substring(with: range) ==\
    \ substring {\n            count += 1\n        }\n    }\n    return count", " \
    \   var count = 0\n    var start = 0\n    while true {\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \       if let range = range {\n            count++\n            start = range.startIndex.distanceTo(range.endIndex)\n\
    \        } else {\n            break\n        }\n    }\n    return count", " \
    \   var count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.rangeOfString(substring, range: Range<String.Index>(start:\
    \ index, end: string.endIndex)) != nil {\n            count++\n            index\
    \ = advance(index, 1)\n        } else {\n            break\n        }\n    }\n\
    \    return count", "    var count = 0\n    var start = 0\n    while true {\n\
    \        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n        if let range = range {\n           \
    \ count += 1\n            start = range.startIndex.distanceTo(range.endIndex)\n\
    \        } else {\n            break\n        }\n    }\n    return count", " \
    \   var count = 0\n    var range = string.startIndex..<string.endIndex\n    while\
    \ let r = string.range(of: substring, options: .caseInsensitive, range: range)\
    \ {\n        count += 1\n        range = r.upperBound..<string.endIndex\n    }\n\
    \    return count", "    var count = 0\n    var start = 0\n    while true {\n\
    \        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n        if let range = range {\n           \
    \ count++\n            start = range.startIndex.distanceTo(range.endIndex)\n \
    \       } else {\n            break\n        }\n    }\n    return count", "  \
    \  var count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.substringFromIndex(index).hasPrefix(substring) {\n    \
    \        count++\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n        }\n        index = index.advancedBy(1)\n    }\n    return count",
  "    var count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count", "    var count = 0\n    var start = 0\n    while let\
    \ range = string.range(of: substring, options: .caseInsensitive, range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count", "    var count = 0\n    var\
    \ startIndex = string.startIndex\n    while let range = string.range(of: substring,\
    \ range: startIndex..<string.endIndex) {\n        count += 1\n        startIndex\
    \ = range.upperBound\n    }\n    return count", "    var count = 0\n    var start\
    \ = 0\n    while start < string.count {\n        if let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: start..<string.endIndex, locale:\
    \ nil) {\n            count += 1\n            start = range.upperBound\n     \
    \   } else {\n            break\n        }\n    }\n    return count", "    var\
    \ count = 0\n    var start = 0\n    while start < string.characters.count {\n\
    \        let range = string.rangeOfString(substring, options: .LiteralSearch,\
    \ range: Range(start: string.startIndex.advancedBy(start), end: string.endIndex),\
    \ locale: nil)\n        if let range = range {\n            count += 1\n     \
    \       start = range.startIndex.distanceTo(range.endIndex)\n        } else {\n\
    \            break\n        }\n    }\n    return count", "    var count = 0\n\
    \    var index = string.startIndex\n    while index < string.endIndex {\n    \
    \    if string.rangeOfString(substring, options: nil, range: Range<String.Index>(start:\
    \ index, end: string.endIndex), locale: nil) != nil {\n            count++\n \
    \           index = advance(index, 1)\n        } else {\n            break\n \
    \       }\n    }\n    return count", "    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: [], range: range) {\n\
    \        count += 1\n        range = r.upperBound..<string.endIndex\n    }\n \
    \   return count", "    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: [], range: range) {\n\
    \        count += 1\n        range = r.upperBound..<string.endIndex\n    }\n \
    \   return count", "    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count", "    var count = 0\n    var\
    \ index = string.startIndex\n    while index < string.endIndex {\n        if string.hasPrefix(substring,\
    \ startingAt: index) {\n            count += 1\n            index = string.index(index,\
    \ offsetBy: substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count", "    var count = 0\n    var start\
    \ = 0\n    while true {\n        let range = string.rangeOfString(substring, options:\
    \ NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start: string.startIndex.advancedBy(start),\
    \ end: string.endIndex), locale: nil)\n        if let range = range {\n      \
    \      count++\n            start = start + range.startIndex.distanceTo(range.endIndex)\n\
    \        } else {\n            break\n        }\n    }\n    return count", " \
    \   var count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.substringFromIndex(index).hasPrefix(substring) {\n    \
    \        count++\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n        }\n        index = index.advancedBy(1)\n    }\n    return count",
  "    var count = 0\n    var startIndex = string.startIndex\n    while let range\
    \ = string.range(of: substring, range: startIndex..<string.endIndex) {\n     \
    \   count += 1\n        startIndex = range.upperBound\n    }\n    return count",
  "    var count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.distance(from: index, to: string.endIndex) >= substring.count\
    \ {\n            let endIndex = string.index(index, offsetBy: substring.count)\n\
    \            if string[index..<endIndex] == substring {\n                count\
    \ += 1\n                index = endIndex\n            } else {\n             \
    \   index = string.index(after: index)\n            }\n        } else {\n    \
    \        break\n        }\n    }\n    return count", "    var count = 0\n    var\
    \ range = string.startIndex..<string.endIndex\n    while let r = string.range(of:\
    \ substring, options: .caseInsensitive, range: range) {\n        count += 1\n\
    \        range = r.upperBound..<string.endIndex\n    }\n    return count", " \
    \   var count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count", "    var count = 0\n    var index = string.startIndex\n\
    \    while index < string.endIndex {\n        if string.hasPrefix(substring, startingAt:\
    \ index) {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count", "    var count = 0\n    var index\
    \ = string.startIndex\n    while index != string.endIndex {\n        if string.hasPrefix(substring,\
    \ startingAt: index) {\n            count += 1\n            index = string.index(index,\
    \ offsetBy: substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count", "    var count = 0\n    var range\
    \ = string.startIndex..<string.endIndex\n    while let r = string.range(of: substring,\
    \ options: .caseInsensitive, range: range) {\n        count += 1\n        range\
    \ = r.upperBound..<string.endIndex\n    }\n    return count", "    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.substringFromIndex(index).hasPrefix(substring) {\n        \
    \    count++\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n        }\n        index = index.advancedBy(1)\n    }\n    return count",
  "    var count = 0\n    var start = 0\n    while let range = string.range(of: substring,\
    \ options: [], range: Range(uncheckedBounds: (lower: string.index(string.startIndex,\
    \ offsetBy: start), upper: string.endIndex)), locale: nil) {\n        count +=\
    \ 1\n        start = string.distance(from: string.startIndex, to: range.upperBound)\n\
    \    }\n    return count", "    var count = 0\n    var index = string.startIndex\n\
    \    while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n        }\n        index = index.advancedBy(1)\n    }\n    return count",
  "    var count = 0\n    var index = 0\n    while index < string.count {\n      \
    \  if let range = string.range(of: substring, options: .caseInsensitive, range:\
    \ string.index(index, offsetBy: 0)..<string.endIndex, locale: nil) {\n       \
    \     count += 1\n            index = range.upperBound\n        } else {\n   \
    \         break\n        }\n    }\n    return count", "    var count = 0\n   \
    \ var index = string.startIndex\n    while index < string.endIndex {\n       \
    \ if string.hasPrefix(substring, startingAt: index) {\n            count += 1\n\
    \            index = string.index(index, offsetBy: substring.count)\n        }\
    \ else {\n            index = string.index(after: index)\n        }\n    }\n \
    \   return count", "    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: .caseInsensitive, range:\
    \ range) {\n        count += 1\n        range = r.upperBound..<string.endIndex\n\
    \    }\n    return count", "    var count = 0\n    var start = 0\n    while let\
    \ range = string.range(of: substring, options: .caseInsensitive, range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count", "    var count = 0\n    var\
    \ index = string.startIndex\n    while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n        }\n        index = index.advancedBy(1)\n    }\n    return count",
  "    var count = 0\n    var start = 0\n    while start < string.count {\n      \
    \  let range = string.range(of: substring, options: .caseInsensitive, range: start..<string.endIndex,\
    \ locale: nil)\n        if let range = range {\n            count += 1\n     \
    \       start = range.upperBound\n        } else {\n            break\n      \
    \  }\n    }\n    return count", "    var count = 0\n    var start = 0\n    while\
    \ true {\n        let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: Range<String.Index>(start: string.startIndex.advancedBy(start), end:\
    \ string.endIndex), locale: nil)\n        if let range = range {\n           \
    \ count++\n            start = range.startIndex.distanceTo(range.endIndex)\n \
    \       } else {\n            break\n        }\n    }\n    return count", "  \
    \  var count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count", "    var count = 0\n    var start = 0\n    while let\
    \ range = string.range(of: substring, options: .caseInsensitive, range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count", "    var count = 0\n    var\
    \ start = 0\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: string.index(string.startIndex, offsetBy: start)..<string.endIndex, locale:\
    \ nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count", "    var count = 0\n    var\
    \ startIndex = string.startIndex\n    while let range = string.range(of: substring,\
    \ range: startIndex..<string.endIndex) {\n        count += 1\n        startIndex\
    \ = range.upperBound\n    }\n    return count", "    var count = 0\n    var start\
    \ = 0\n    while true {\n        let range = string.rangeOfString(substring, options:\
    \ NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start: string.startIndex.advancedBy(start),\
    \ end: string.endIndex), locale: nil)\n        if let range = range {\n      \
    \      count++\n            start = range.startIndex.distanceTo(range.endIndex)\n\
    \        } else {\n            break\n        }\n    }\n    return count", " \
    \   var count = 0\n    var start = 0\n    while true {\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \       if let range = range {\n            count++\n            start = range.startIndex.distanceTo(range.endIndex)\n\
    \        } else {\n            break\n        }\n    }\n    return count", " \
    \   var count = 0\n    var start = 0\n    while start < string.characters.count\
    \ {\n        let range = string.rangeOfString(substring, options: [], range: Range(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \       if let range = range {\n            count += 1\n            start = range.startIndex.distanceTo(range.endIndex)\n\
    \        } else {\n            break\n        }\n    }\n    return count", " \
    \   var count = 0\n    var start = 0\n    while let range = string.range(of: substring,\
    \ options: [], range: Range(uncheckedBounds: (lower: string.index(string.startIndex,\
    \ offsetBy: start), upper: string.endIndex)), locale: nil) {\n        count +=\
    \ 1\n        start = string.distance(from: string.startIndex, to: range.upperBound)\n\
    \    }\n    return count", "    var count = 0\n    var last_found = -1\n    while\
    \ true {\n        let range = string.range(of: substring, options: .literal, range:\
    \ (last_found < 0 ? string.startIndex : string.index(string.startIndex, offsetBy:\
    \ last_found))..<string.endIndex, locale: nil)\n        if let range = range {\n\
    \            count += 1\n            last_found = string.distance(from: string.startIndex,\
    \ to: range.lowerBound) + 1\n        } else {\n            break\n        }\n\
    \    }\n    return count", "    var count = 0\n    var start = 0\n    while start\
    \ < string.count {\n        let range = string.range(of: substring, options: [],\
    \ range: start..<string.endIndex, locale: nil)\n        if let range = range {\n\
    \            count += 1\n            start = range.upperBound\n        } else\
    \ {\n            break\n        }\n    }\n    return count", "    var count =\
    \ 0\n    var start = 0\n    while start < string.count {\n        let range =\
    \ string.range(of: substring, options: .caseInsensitive, range: start..<string.endIndex,\
    \ locale: nil)\n        if let range = range {\n            count += 1\n     \
    \       start = range.upperBound\n        } else {\n            break\n      \
    \  }\n    }\n    return count", "    var count = 0\n    var start = 0\n    while\
    \ let range = string.range(of: substring, options: .caseInsensitive, range: string.startIndex..<string.endIndex,\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n        string = string.substring(from: range.upperBound)\n\
    \    }\n    return count", "    var count = 0\n    var start = 0\n    while let\
    \ range = string.range(of: substring, options: .caseInsensitive, range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count", "    var count = 0\n    var\
    \ start = 0\n    while let range = string.range(of: substring, options: .literal,\
    \ range: start..<string.endIndex, locale: nil) {\n        count += 1\n       \
    \ start = range.upperBound\n    }\n    return count", "    var count = 0\n   \
    \ var range = string.startIndex..<string.endIndex\n    while let r = string.range(of:\
    \ substring, options: [], range: range) {\n        count += 1\n        range =\
    \ r.upperBound..<string.endIndex\n    }\n    return count", "    var count = 0\n\
    \    var start = 0\n    while let range = string.range(of: substring, options:\
    \ .caseInsensitive, range: string.index(start, offsetBy: 0)..<string.endIndex,\
    \ locale: nil) {\n        count += 1\n        start = range.upperBound\n    }\n\
    \    return count", "    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count", "    var count = 0\n    var\
    \ start = 0\n    while true {\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \       if let range = range {\n            count += 1\n            start = range.startIndex.distanceTo(range.endIndex)\n\
    \        } else {\n            break\n        }\n    }\n    return count", " \
    \   var count = 0\n    var index = 0\n    while index < string.characters.count\
    \ {\n        if let range = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n            count += 1\n            index = range.upperBound\n        } else\
    \ {\n            break\n        }\n    }\n    return count", "    var count =\
    \ 0\n    var startIndex = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: startIndex..<string.endIndex) {\n        count += 1\n    \
    \    startIndex = range.upperBound\n    }\n    return count", "    var count =\
    \ 0\n    var start = 0\n    while let range = string.range(of: substring, options:\
    \ .caseInsensitive, range: Range(uncheckedBounds: (lower: string.index(string.startIndex,\
    \ offsetBy: start), upper: string.endIndex)), locale: nil) {\n        count +=\
    \ 1\n        start = string.distance(from: string.startIndex, to: range.upperBound)\n\
    \    }\n    return count", "    var count = 0\n    var index = string.startIndex\n\
    \    while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n        }\n        index = index.advancedBy(1)\n    }\n    return count",
  "    var count = 0\n    var start = 0\n    while let range = string.range(of: substring,\
    \ options: [], range: start..<string.endIndex) {\n        count += 1\n       \
    \ start = range.upperBound\n    }\n    return count", "    var count = 0\n   \
    \ var start = 0\n    while true {\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \       if let range = range {\n            count++\n            start = range.startIndex.distanceTo(range.endIndex)\n\
    \        } else {\n            break\n        }\n    }\n    return count", " \
    \   var count = 0\n    var start = 0\n    while start < string.count {\n     \
    \   if let range = string.range(of: substring, options: .caseInsensitive, range:\
    \ start..<string.endIndex) {\n            count += 1\n            start = range.upperBound\n\
    \        } else {\n            break\n        }\n    }\n    return count", " \
    \   var count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.substringFromIndex(index).hasPrefix(substring) {\n    \
    \        count++\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n        }\n        index = index.advancedBy(1)\n    }\n    return count",
  "    var count = 0\n    var start = 0\n    while true {\n        let range = string.rangeOfString(substring,\
    \ options: NSStringCompareOptions.LiteralSearch, range: Range<String.Index>(start:\
    \ string.startIndex.advancedBy(start), end: string.endIndex), locale: nil)\n \
    \       if let range = range {\n            count += 1\n            start = range.startIndex.distanceTo(range.endIndex)\n\
    \        } else {\n            break\n        }\n    }\n    return count", " \
    \   var count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.substringFromIndex(index).hasPrefix(substring) {\n    \
    \        count++\n            index = index.advancedBy(substring.characters.count)\n\
    \        } else {\n            index = index.advancedBy(1)\n        }\n    }\n\
    \    return count", "    var count = 0\n    var index = string.startIndex\n  \
    \  while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count)\n\
    \        } else {\n            index = index.advancedBy(1)\n        }\n    }\n\
    \    return count", "    var count = 0\n    var range = string.startIndex..<string.endIndex\n\
    \    while let r = string.range(of: substring, options: [], range: range) {\n\
    \        count += 1\n        range = r.upperBound..<string.endIndex\n    }\n \
    \   return count", "    var count = 0\n    var start = 0\n    while let range\
    \ = string.range(of: substring, options: .caseInsensitive, range: Range(uncheckedBounds:\
    \ (lower: string.index(string.startIndex, offsetBy: start), upper: string.endIndex)),\
    \ locale: nil) {\n        count += 1\n        start = string.distance(from: string.startIndex,\
    \ to: range.upperBound)\n    }\n    return count", "    var count = 0\n    var\
    \ start = 0\n    while let range = string.range(of: substring, options: [], range:\
    \ Range(uncheckedBounds: (start, string.endIndex)), locale: nil) {\n        count\
    \ += 1\n        start = range.upperBound\n    }\n    return count", "    var count\
    \ = 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.rangeOfString(substring, range: index..<string.endIndex) !=\
    \ nil {\n            count++\n            index = advance(index, 1)\n        }\
    \ else {\n            break\n        }\n    }\n    return count", "    var count\
    \ = 0\n    var searchRange = string.startIndex..<string.endIndex\n    while let\
    \ foundRange = string.range(of: substring, options: [], range: searchRange) {\n\
    \        count += 1\n        searchRange = Range(uncheckedBounds: (lower: foundRange.upperBound,\
    \ upper: searchRange.upperBound))\n    }\n    return count", "    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        let range = string.rangeOfString(substring, range: index..<string.endIndex)\n\
    \        if let range = range {\n            count++\n            index = range.endIndex\n\
    \        } else {\n            break\n        }\n    }\n    return count", " \
    \   var count = 0\n    var range = string.startIndex..<string.endIndex\n    while\
    \ let r = string.range(of: substring, options: [], range: range) {\n        count\
    \ += 1\n        range = r.upperBound..<string.endIndex\n    }\n    return count",
  "    var count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.substringFromIndex(index).hasPrefix(substring) {\n    \
    \        count++\n            index = index.advancedBy(substring.characters.count)\n\
    \        } else {\n            index = index.advancedBy(1)\n        }\n    }\n\
    \    return count", "    var count = 0\n    var index = string.startIndex\n  \
    \  while index < string.endIndex {\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n            count++\n            index = index.advancedBy(substring.characters.count)\n\
    \        } else {\n            index = index.advancedBy(1)\n        }\n    }\n\
    \    return count", "    var count = 0\n    var startIndex = string.startIndex\n\
    \    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n        count += 1\n        startIndex = range.upperBound\n    }\n    return\
    \ count", "    var count = 0\n    var index = string.startIndex\n    while index\
    \ < string.endIndex {\n        if string.hasPrefix(substring, startingAt: index)\
    \ {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count"]
stop_tokens:
- "\n}"
