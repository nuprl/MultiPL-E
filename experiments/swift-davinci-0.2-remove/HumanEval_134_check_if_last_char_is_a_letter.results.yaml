language: swift
name: HumanEval_134_check_if_last_char_is_a_letter
results:
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last!.isLetter\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmpgqwqwz08/tmpgqwqwz08.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84bf76bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84bf462b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84bf462988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84bf4617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgqwqwz08                        0x0000563babf4441d <unavailable> + 5149

    5    libc.so.6                          0x00002b84bf957460 __libc_start_main +
    245

    6    tmpgqwqwz08                        0x0000563babf440a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    return lastChar?.isLetter ?? false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmpsdl6u4nc/tmpsdl6u4nc.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeae486bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeae4562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeae4562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeae45617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsdl6u4nc                        0x0000559e1197437d <unavailable> + 4989

    5    libc.so.6                          0x00002aeae4a57460 __libc_start_main +
    245

    6    tmpsdl6u4nc                        0x0000559e11974009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIsLetter = CharacterSet.letters.contains(lastChar.unicodeScalars.first!)\n\
    \    let lastCharIsNotPartOfAWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsNotPartOfAWord\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqoyxurmk.swift:9:28: error: cannot find 'CharacterSet' in scope\n\
    \    let lastCharIsLetter = CharacterSet.letters.contains(lastChar.unicodeScalars.first!)\n\
    \                           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978426
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    if lastChar.isLetter && !lastChar.isNumber\
    \ {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmp_0hcz03w/tmp_0hcz03w.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33e9695c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33e938cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33e938c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33e938b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0hcz03w                        0x00005590f7fdc46d <unavailable> + 5229

    5    libc.so.6                          0x00002b33e9881460 __libc_start_main +
    245

    6    tmp_0hcz03w                        0x00005590f7fdc0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let txt = txt.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let lastChar = txt.last!\n    if lastChar.isLetter {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpblc5w4pe.swift:8:19: error: value of type 'String' has no member\
    \ 'trimmingCharacters'\n    let txt = txt.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \              ~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpblc5w4pe.swift:8:43: error: cannot\
    \ infer contextual base in reference to member 'whitespacesAndNewlines'\n    let\
    \ txt = txt.trimmingCharacters(in: .whitespacesAndNewlines)\n                \
    \                         ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIndex = txt.index(before:\
    \ txt.endIndex)\n    let lastCharIsLetter = lastChar!.isLetter\n    let lastCharIsPartOfAWord\
    \ = txt[lastCharIndex].isLetter\n    return lastCharIsLetter && !lastCharIsPartOfAWord\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmprn9px7s0/tmprn9px7s0.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48b4966c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48b465db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48b465d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48b465c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprn9px7s0                        0x0000555c5fe545cb <unavailable> + 5579

    5    libc.so.6                          0x00002b48b4b52460 __libc_start_main +
    245

    6    tmprn9px7s0                        0x0000555c5fe541b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIsLetter = lastChar.isLetter\n\
    \    let lastCharIsPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsPartOfWord\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmpiadzx49q/tmpiadzx49q.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b275192ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2751625b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2751625988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27516247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiadzx49q                        0x00005596aa4a66bb <unavailable> + 5819

    5    libc.so.6                          0x00002b2751b1a460 __libc_start_main +
    245

    6    tmpiadzx49q                        0x00005596aa4a62a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsNotPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsNotPartOfWord\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmp0h0ynknk/tmp0h0ynknk.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b930ac78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b930a96fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b930a96f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b930a96e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0h0ynknk                        0x00005561eab0a62b <unavailable> + 5675

    5    libc.so.6                          0x00002b930ae64460 __libc_start_main +
    245

    6    tmp0h0ynknk                        0x00005561eab0a219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIndex = txt.index(before:\
    \ txt.endIndex)\n    let lastCharIsLetter = lastChar.isLetter\n    let lastCharIsNotPartOfWord\
    \ = txt[lastCharIndex] == \" \"\n    return lastCharIsLetter && lastCharIsNotPartOfWord\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmp7u2cvpc7/tmp7u2cvpc7.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba53994ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba539645b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba539645988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5396447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7u2cvpc7                        0x000055821f4cb6bb <unavailable> + 5819

    5    libc.so.6                          0x00002ba539b3a460 __libc_start_main +
    245

    6    tmp7u2cvpc7                        0x000055821f4cb2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp84aumgns/tmp84aumgns.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b755e1c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b755deb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b755deb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b755deb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84aumgns                        0x000055d5aa9b82fb <unavailable> + 4859

    5    libc.so.6                          0x00002b755e3ad460 __libc_start_main +
    245

    6    tmp84aumgns                        0x000055d5aa9b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsNotPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsNotPartOfWord\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmp0h0ynknk/tmp0h0ynknk.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b930ac78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b930a96fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b930a96f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b930a96e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0h0ynknk                        0x00005561eab0a62b <unavailable> + 5675

    5    libc.so.6                          0x00002b930ae64460 __libc_start_main +
    245

    6    tmp0h0ynknk                        0x00005561eab0a219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsNotPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsNotPartOfWord\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmp0h0ynknk/tmp0h0ynknk.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b930ac78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b930a96fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b930a96f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b930a96e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0h0ynknk                        0x00005561eab0a62b <unavailable> + 5675

    5    libc.so.6                          0x00002b930ae64460 __libc_start_main +
    245

    6    tmp0h0ynknk                        0x00005561eab0a219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmpl6aooro6/tmpl6aooro6.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9959b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9956afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9956af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9956ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl6aooro6                        0x000055f024ef425d <unavailable> + 4701

    5    libc.so.6                          0x00002ab995ba4460 __libc_start_main +
    245

    6    tmpl6aooro6                        0x000055f024ef3ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if let lastChar = lastChar {\n    \
    \    if lastChar.isLetter {\n            let index = txt.index(before: txt.endIndex)\n\
    \            let previousChar = txt[index]\n            if previousChar.isLetter\
    \ {\n                return false\n            } else {\n                return\
    \ true\n            }\n        } else {\n            return false\n        }\n\
    \    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp5uy0i5yz/tmp5uy0i5yz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ef1252c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ef0f49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ef0f49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ef0f487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5uy0i5yz                        0x000056463206553b <unavailable> + 5435

    5    libc.so.6                          0x00002b2ef143e460 __libc_start_main +
    245

    6    tmp5uy0i5yz                        0x0000564632065129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    return lastChar?.isLetter ?? false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmpsdl6u4nc/tmpsdl6u4nc.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeae486bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeae4562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeae4562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeae45617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsdl6u4nc                        0x0000559e1197437d <unavailable> + 4989

    5    libc.so.6                          0x00002aeae4a57460 __libc_start_main +
    245

    6    tmpsdl6u4nc                        0x0000559e11974009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIsLetter = lastChar.isLetter\n\
    \    let lastCharIsNotPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsNotPartOfWord\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmpeqi_085s/tmpeqi_085s.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab48d6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab48a64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab48a64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab48a637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeqi_085s                        0x000055a0eea5b6bb <unavailable> + 5819

    5    libc.so.6                          0x00002aab48f59460 __libc_start_main +
    245

    6    tmpeqi_085s                        0x000055a0eea5b2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIsLetter = lastChar.isLetter\n\
    \    let lastCharIsSpace = lastChar.isWhitespace\n    let lastCharIsPunctuation\
    \ = lastChar.isPunctuation\n    return lastCharIsLetter && !lastCharIsSpace &&\
    \ !lastCharIsPunctuation\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmpe2bajtov/tmpe2bajtov.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae17c526c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae17c21db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae17c21d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae17c21c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2bajtov                        0x00005597c35e34cd <unavailable> + 5325

    5    libc.so.6                          0x00002ae17c712460 __libc_start_main +
    245

    6    tmpe2bajtov                        0x00005597c35e3159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if let lastChar = lastChar {\n    \
    \    if lastChar.isLetter {\n            let index = txt.index(before: txt.endIndex)\n\
    \            if txt[index].isLetter {\n                return false\n        \
    \    }\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmpu9ox3bo3/tmpu9ox3bo3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad560736c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad56042db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad56042d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad56042c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu9ox3bo3                        0x0000561b9055f53b <unavailable> + 5435

    5    libc.so.6                          0x00002ad560922460 __libc_start_main +
    245

    6    tmpu9ox3bo3                        0x0000561b9055f129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last != nil && txt.last!.isLetter && txt.last! != \"\
    \ \"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmpgfuxbhn8/tmpgfuxbhn8.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba5c972c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba5c669b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba5c669988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba5c6687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgfuxbhn8                        0x00005603c32b150d <unavailable> + 5389

    5    libc.so.6                          0x00002aba5cb5e460 __libc_start_main +
    245

    6    tmpgfuxbhn8                        0x00005603c32b1199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsNotPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsNotPartOfWord\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmp0h0ynknk/tmp0h0ynknk.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b930ac78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b930a96fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b930a96f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b930a96e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0h0ynknk                        0x00005561eab0a62b <unavailable> + 5675

    5    libc.so.6                          0x00002b930ae64460 __libc_start_main +
    245

    6    tmp0h0ynknk                        0x00005561eab0a219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsPartOfWord\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmp26m_nj1f/tmp26m_nj1f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37f855bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37f8252b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37f8252988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37f82517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp26m_nj1f                        0x000055d1a4be562b <unavailable> + 5675

    5    libc.so.6                          0x00002b37f8747460 __libc_start_main +
    245

    6    tmp26m_nj1f                        0x000055d1a4be5219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIsLetter = CharacterSet.letters.contains(lastChar.unicodeScalars.first!)\n\
    \    let lastCharIsNotPartOfAWord = !txt.contains(\"\\(lastChar) \")\n    return\
    \ lastCharIsLetter && lastCharIsNotPartOfAWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyaanency.swift:9:28: error: cannot find 'CharacterSet' in scope\n\
    \    let lastCharIsLetter = CharacterSet.letters.contains(lastChar.unicodeScalars.first!)\n\
    \                           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsPartOfWord\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmp26m_nj1f/tmp26m_nj1f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37f855bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37f8252b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37f8252988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37f82517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp26m_nj1f                        0x000055d1a4be562b <unavailable> + 5675

    5    libc.so.6                          0x00002b37f8747460 __libc_start_main +
    245

    6    tmp26m_nj1f                        0x000055d1a4be5219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIsLetter = lastChar.isLetter\n\
    \    let lastCharIsPartOfAWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && !lastCharIsPartOfAWord\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmpbhhswt8z/tmpbhhswt8z.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb5a2d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb59fcfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb59fcf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb59fce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbhhswt8z                        0x000055a42c3f561d <unavailable> + 5661

    5    libc.so.6                          0x00002afb5a4c4460 __libc_start_main +
    245

    6    tmpbhhswt8z                        0x000055a42c3f52a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let last_char = txt.last!\n    let last_char_is_a_letter = last_char.isLetter\n\
    \    let last_char_is_a_part_of_a_word = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return last_char_is_a_letter && last_char_is_a_part_of_a_word\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmpxazibbhz/tmpxazibbhz.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d0de61c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d0db58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d0db58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d0db577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxazibbhz                        0x00005584b7aeb6bb <unavailable> + 5819

    5    libc.so.6                          0x00002b9d0e04d460 __libc_start_main +
    245

    6    tmpxazibbhz                        0x00005584b7aeb2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = CharacterSet.letters.contains(lastChar!.unicodeScalars.first!)\n\
    \    let lastCharIsNotPartOfWord = !txt.contains(\" \" + String(lastChar!))\n\
    \    return lastCharIsLetter && lastCharIsNotPartOfWord\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn6fua4i8.swift:9:28: error: cannot find 'CharacterSet' in scope\n\
    \    let lastCharIsLetter = CharacterSet.letters.contains(lastChar!.unicodeScalars.first!)\n\
    \                           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIsLetter = lastChar.isLetter\n\
    \    let lastCharIsPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsPartOfWord\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmpiadzx49q/tmpiadzx49q.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b275192ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2751625b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2751625988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27516247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiadzx49q                        0x00005596aa4a66bb <unavailable> + 5819

    5    libc.so.6                          0x00002b2751b1a460 __libc_start_main +
    245

    6    tmpiadzx49q                        0x00005596aa4a62a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp84aumgns/tmp84aumgns.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b755e1c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b755deb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b755deb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b755deb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84aumgns                        0x000055d5aa9b82fb <unavailable> + 4859

    5    libc.so.6                          0x00002b755e3ad460 __libc_start_main +
    245

    6    tmp84aumgns                        0x000055d5aa9b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsPartOfWord\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmp26m_nj1f/tmp26m_nj1f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37f855bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37f8252b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37f8252988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37f82517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp26m_nj1f                        0x000055d1a4be562b <unavailable> + 5675

    5    libc.so.6                          0x00002b37f8747460 __libc_start_main +
    245

    6    tmp26m_nj1f                        0x000055d1a4be5219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsNotPartOfAWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsNotPartOfAWord\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmp8mkbla2m/tmp8mkbla2m.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b4d008c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b4ccffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b4ccff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b4ccfe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8mkbla2m                        0x00005636ffb2862b <unavailable> + 5675

    5    libc.so.6                          0x00002b3b4d1f4460 __libc_start_main +
    245

    6    tmp8mkbla2m                        0x00005636ffb28219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsNotPartOfAWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsNotPartOfAWord\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmp8mkbla2m/tmp8mkbla2m.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b4d008c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b4ccffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b4ccff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b4ccfe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8mkbla2m                        0x00005636ffb2862b <unavailable> + 5675

    5    libc.so.6                          0x00002b3b4d1f4460 __libc_start_main +
    245

    6    tmp8mkbla2m                        0x00005636ffb28219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIsLetter = lastChar.isLetter\n\
    \    let lastCharIsPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsPartOfWord\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmpiadzx49q/tmpiadzx49q.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b275192ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2751625b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2751625988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27516247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiadzx49q                        0x00005596aa4a66bb <unavailable> + 5819

    5    libc.so.6                          0x00002b2751b1a460 __libc_start_main +
    245

    6    tmpiadzx49q                        0x00005596aa4a62a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsPartOfAWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsPartOfAWord\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmpdzu3dl_k/tmpdzu3dl_k.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e66e29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e66b20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e66b20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e66b1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdzu3dl_k                        0x000055fb033fe62b <unavailable> + 5675

    5    libc.so.6                          0x00002b9e67015460 __libc_start_main +
    245

    6    tmpdzu3dl_k                        0x000055fb033fe219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let firstChar = txt.first!\n    let\
    \ isLetter = CharacterSet.letters.contains(lastChar.unicodeScalars.first!)\n \
    \   let isSpace = CharacterSet.whitespaces.contains(firstChar.unicodeScalars.first!)\n\
    \    return isLetter && isSpace\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpo6efmy84.swift:10:20: error: cannot find 'CharacterSet' in scope\n\
    \    let isLetter = CharacterSet.letters.contains(lastChar.unicodeScalars.first!)\n\
    \                   ^~~~~~~~~~~~\n/tmp/tmpo6efmy84.swift:11:19: error: cannot\
    \ find 'CharacterSet' in scope\n    let isSpace = CharacterSet.whitespaces.contains(firstChar.unicodeScalars.first!)\n\
    \                  ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let isLetter = CharacterSet.letters.contains(lastChar.unicodeScalars.first!)\n\
    \    let isWord = txt.lastIndex(of: \" \") == txt.index(before: txt.endIndex)\n\
    \    return isLetter && isWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5e942avm.swift:9:20: error: cannot find 'CharacterSet' in scope\n\
    \    let isLetter = CharacterSet.letters.contains(lastChar.unicodeScalars.first!)\n\
    \                   ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIsLetter = lastChar.isLetter\n\
    \    let lastCharIsNotPartOfAWord = !txt.contains(\" \\(lastChar)\")\n    return\
    \ lastCharIsLetter && lastCharIsNotPartOfAWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b76218e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76215da561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b76215da286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b76215da13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b76215d9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b7621734e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b762173985c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b7621606920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b76212c1b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b76212c0b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b76212c1ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b76212a742d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b76212a5840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b76212a5e70 StringProtocol.contains(_:)
    + 64

    14   tmplz99dr98                        0x000055c3f58820dd <unavailable> + 8413

    15   tmplz99dr98                        0x000055c3f5881746 <unavailable> + 5958

    16   libc.so.6                          0x00002b7621acf460 __libc_start_main +
    245

    17   tmplz99dr98                        0x000055c3f5881449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIsLetter = lastChar.isLetter\n\
    \    let lastCharIsNotPartOfWord = !txt.contains(\" \\(lastChar)\")\n    return\
    \ lastCharIsLetter && lastCharIsNotPartOfWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f754e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f751de561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7f751de286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7f751de13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7f751ddbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b7f75338e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b7f7533d85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b7f7520a920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b7f74ec5b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b7f74ec4b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b7f74ec5ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b7f74eab42d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b7f74ea9840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b7f74ea9e70 StringProtocol.contains(_:)
    + 64

    14   tmplmonqvrz                        0x000055e837aa40dd <unavailable> + 8413

    15   tmplmonqvrz                        0x000055e837aa3746 <unavailable> + 5958

    16   libc.so.6                          0x00002b7f756d3460 __libc_start_main +
    245

    17   tmplmonqvrz                        0x000055e837aa3449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp84aumgns/tmp84aumgns.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b755e1c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b755deb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b755deb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b755deb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84aumgns                        0x000055d5aa9b82fb <unavailable> + 4859

    5    libc.so.6                          0x00002b755e3ad460 __libc_start_main +
    245

    6    tmp84aumgns                        0x000055d5aa9b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIsLetter = lastChar.isLetter\n\
    \    let lastCharIsNotPartOfWord = !txt.contains(\"\\(lastChar) \")\n    return\
    \ lastCharIsLetter && lastCharIsNotPartOfWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp6y_d8x70/tmp6y_d8x70.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cfa568c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cfa25fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cfa25f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cfa25e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6y_d8x70                        0x0000558817b537bd <unavailable> + 6077

    5    libc.so.6                          0x00002b7cfa754460 __libc_start_main +
    245

    6    tmp6y_d8x70                        0x0000558817b53449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last == \" \"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmpbvg5xi0n/tmpbvg5xi0n.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac528effc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac528bf6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac528bf6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac528bf57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbvg5xi0n                        0x000055e1751554cb <unavailable> + 5323

    5    libc.so.6                          0x00002ac5290eb460 __libc_start_main +
    245

    6    tmpbvg5xi0n                        0x000055e1751550b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar?.isLetter == true {\n \
    \       return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmprcgy5vrr/tmprcgy5vrr.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13add08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13ad9ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13ad9ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13ad9fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprcgy5vrr                        0x000056011597f37d <unavailable> + 4989

    5    libc.so.6                          0x00002b13adef4460 __libc_start_main +
    245

    6    tmprcgy5vrr                        0x000056011597f009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIsLetter = lastChar.isLetter\n\
    \    let lastCharIsNotPartOfWord = !txt.hasSuffix(\" \")\n    return lastCharIsLetter\
    \ && lastCharIsNotPartOfWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmph56w4y_u/tmph56w4y_u.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1ac229c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1abf20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1abf20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1abf1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph56w4y_u                        0x000055e55084b46d <unavailable> + 5229

    5    libc.so.6                          0x00002ad1ac415460 __libc_start_main +
    245

    6    tmph56w4y_u                        0x000055e55084b0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIsLetter = lastChar.isLetter\n\
    \    let lastCharIsNotPartOfWord = !txt.contains(\" \\(lastChar)\")\n    return\
    \ lastCharIsLetter && lastCharIsNotPartOfWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f754e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f751de561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7f751de286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7f751de13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7f751ddbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b7f75338e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b7f7533d85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b7f7520a920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b7f74ec5b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b7f74ec4b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b7f74ec5ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b7f74eab42d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b7f74ea9840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b7f74ea9e70 StringProtocol.contains(_:)
    + 64

    14   tmplmonqvrz                        0x000055e837aa40dd <unavailable> + 8413

    15   tmplmonqvrz                        0x000055e837aa3746 <unavailable> + 5958

    16   libc.so.6                          0x00002b7f756d3460 __libc_start_main +
    245

    17   tmplmonqvrz                        0x000055e837aa3449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsPartOfWord = lastChar?.isPartOfWord ?? false\n \
    \   return lastCharIsLetter && !lastCharIsPartOfWord\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp292zkrzu.swift:10:42: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isPartOfWord'\n    let lastCharIsPartOfWord = lastChar?.isPartOfWord\
    \ ?? false\n                               ~~~~~~~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsPartOfWord\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmp26m_nj1f/tmp26m_nj1f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37f855bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37f8252b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37f8252988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37f82517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp26m_nj1f                        0x000055d1a4be562b <unavailable> + 5675

    5    libc.so.6                          0x00002b37f8747460 __libc_start_main +
    245

    6    tmp26m_nj1f                        0x000055d1a4be5219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = CharacterSet.letters.contains(lastChar!.unicodeScalars.first!)\n\
    \    let lastCharIsNotPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsNotPartOfWord\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppzllnn0g.swift:9:28: error: cannot find 'CharacterSet' in scope\n\
    \    let lastCharIsLetter = CharacterSet.letters.contains(lastChar!.unicodeScalars.first!)\n\
    \                           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let txtArr = txt.components(separatedBy: \" \")\n    let lastWord\
    \ = txtArr[txtArr.count - 1]\n    let lastChar = lastWord[lastWord.index(before:\
    \ lastWord.endIndex)]\n    return lastChar.isLetter\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpco1bg03f.swift:8:22: error: value of type 'String' has no member\
    \ 'components'\n    let txtArr = txt.components(separatedBy: \" \")\n        \
    \         ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let isLetter = lastChar.isLetter\n\
    \    let isWord = txt.last!.isWord\n    return isLetter && !isWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmwcxjczo.swift:10:28: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isWord'\n    let isWord = txt.last!.isWord\n   \
    \              ~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    if lastChar.isLetter && !lastChar.isNumber\
    \ {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmp_0hcz03w/tmp_0hcz03w.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33e9695c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33e938cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33e938c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33e938b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0hcz03w                        0x00005590f7fdc46d <unavailable> + 5229

    5    libc.so.6                          0x00002b33e9881460 __libc_start_main +
    245

    6    tmp_0hcz03w                        0x00005590f7fdc0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIsLetter = lastChar.isLetter\n\
    \    let lastCharIsNotPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsNotPartOfWord\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmpeqi_085s/tmpeqi_085s.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab48d6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab48a64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab48a64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab48a637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeqi_085s                        0x000055a0eea5b6bb <unavailable> + 5819

    5    libc.so.6                          0x00002aab48f59460 __libc_start_main +
    245

    6    tmpeqi_085s                        0x000055a0eea5b2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last ?? \" \"\n    let isLetter = lastChar.isLetter\n\
    \    let isSpace = lastChar.isWhitespace\n    return isLetter && isSpace\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmpvjjn1wvb/tmpvjjn1wvb.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3710d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba370dcfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba370dcf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba370dce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvjjn1wvb                        0x000055d30a3e051b <unavailable> + 5403

    5    libc.so.6                          0x00002ba3712c4460 __libc_start_main +
    245

    6    tmpvjjn1wvb                        0x000055d30a3e0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar != nil {\n        if lastChar!.isLetter\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmpxiid97lh/tmpxiid97lh.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab10ece3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab10e9dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab10e9da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab10e9d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxiid97lh                        0x00005567c055b41d <unavailable> + 5149

    5    libc.so.6                          0x00002ab10eecf460 __libc_start_main +
    245

    6    tmpxiid97lh                        0x00005567c055b0a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsPartOfWord\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmp26m_nj1f/tmp26m_nj1f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37f855bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37f8252b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37f8252988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37f82517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp26m_nj1f                        0x000055d1a4be562b <unavailable> + 5675

    5    libc.so.6                          0x00002b37f8747460 __libc_start_main +
    245

    6    tmp26m_nj1f                        0x000055d1a4be5219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsNotPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsNotPartOfWord\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmp0h0ynknk/tmp0h0ynknk.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b930ac78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b930a96fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b930a96f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b930a96e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0h0ynknk                        0x00005561eab0a62b <unavailable> + 5675

    5    libc.so.6                          0x00002b930ae64460 __libc_start_main +
    245

    6    tmp0h0ynknk                        0x00005561eab0a219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsPartOfWord = txt.hasSuffix(\" \")\n    return lastCharIsLetter\
    \ && !lastCharIsPartOfWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmpbswuo4yg/tmpbswuo4yg.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba65ba0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba65b704b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba65b704988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba65b7037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbswuo4yg                        0x00005598174f93dd <unavailable> + 5085

    5    libc.so.6                          0x00002ba65bbf9460 __libc_start_main +
    245

    6    tmpbswuo4yg                        0x00005598174f9069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsPartOfWord\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmp26m_nj1f/tmp26m_nj1f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37f855bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37f8252b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37f8252988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37f82517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp26m_nj1f                        0x000055d1a4be562b <unavailable> + 5675

    5    libc.so.6                          0x00002b37f8747460 __libc_start_main +
    245

    6    tmp26m_nj1f                        0x000055d1a4be5219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIsLetter = lastChar.isLetter\n\
    \    let lastCharIsNotPartOfAWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsNotPartOfAWord\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmp41vvo_k5/tmp41vvo_k5.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf7f760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf7f457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf7f457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf7f4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp41vvo_k5                        0x000055ed40f056bb <unavailable> + 5819

    5    libc.so.6                          0x00002aaf7f94c460 __libc_start_main +
    245

    6    tmp41vvo_k5                        0x000055ed40f052a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIsLetter = lastChar.isLetter\n\
    \    let lastCharIsPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsPartOfWord\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmpiadzx49q/tmpiadzx49q.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b275192ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2751625b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2751625988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27516247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiadzx49q                        0x00005596aa4a66bb <unavailable> + 5819

    5    libc.so.6                          0x00002b2751b1a460 __libc_start_main +
    245

    6    tmpiadzx49q                        0x00005596aa4a62a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp84aumgns/tmp84aumgns.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b755e1c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b755deb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b755deb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b755deb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84aumgns                        0x000055d5aa9b82fb <unavailable> + 4859

    5    libc.so.6                          0x00002b755e3ad460 __libc_start_main +
    245

    6    tmp84aumgns                        0x000055d5aa9b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIsLetter = lastChar.isLetter\n\
    \    let lastCharIsSpace = lastChar.isWhitespace\n    return lastCharIsLetter\
    \ && lastCharIsSpace\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp2i2qh2kl/tmp2i2qh2kl.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7df166c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7dee5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7dee5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7dee5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2i2qh2kl                        0x000055696dc9250b <unavailable> + 5387

    5    libc.so.6                          0x00002ab7df352460 __libc_start_main +
    245

    6    tmp2i2qh2kl                        0x000055696dc920f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsPartOfWord\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmp26m_nj1f/tmp26m_nj1f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37f855bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37f8252b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37f8252988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37f82517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp26m_nj1f                        0x000055d1a4be562b <unavailable> + 5675

    5    libc.so.6                          0x00002b37f8747460 __libc_start_main +
    245

    6    tmp26m_nj1f                        0x000055d1a4be5219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsNotPartOfAWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsNotPartOfAWord\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmp8mkbla2m/tmp8mkbla2m.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b4d008c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b4ccffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b4ccff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b4ccfe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8mkbla2m                        0x00005636ffb2862b <unavailable> + 5675

    5    libc.so.6                          0x00002b3b4d1f4460 __libc_start_main +
    245

    6    tmp8mkbla2m                        0x00005636ffb28219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last! >= \"a\" && txt.last! <= \"z\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpadqj6uef/tmpadqj6uef.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ad4a3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ad4731b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ad4731988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ad47307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpadqj6uef                        0x00005639fa20357d <unavailable> + 5501

    5    libc.so.6                          0x00002b8ad4c26460 __libc_start_main +
    245

    6    tmpadqj6uef                        0x00005639fa203209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsNotPartOfAWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsNotPartOfAWord\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmp8mkbla2m/tmp8mkbla2m.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b4d008c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b4ccffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b4ccff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b4ccfe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8mkbla2m                        0x00005636ffb2862b <unavailable> + 5675

    5    libc.so.6                          0x00002b3b4d1f4460 __libc_start_main +
    245

    6    tmp8mkbla2m                        0x00005636ffb28219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsNotPartOfWord = lastChar == \" \"\n    return lastCharIsLetter\
    \ && lastCharIsNotPartOfWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmpzngxmk68/tmpzngxmk68.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55c5cf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55c59ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55c59eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55c59ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzngxmk68                        0x00005575ff08e51b <unavailable> + 5403

    5    libc.so.6                          0x00002b55c5ee0460 __libc_start_main +
    245

    6    tmpzngxmk68                        0x00005575ff08e109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsNotPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsNotPartOfWord\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmp0h0ynknk/tmp0h0ynknk.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b930ac78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b930a96fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b930a96f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b930a96e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0h0ynknk                        0x00005561eab0a62b <unavailable> + 5675

    5    libc.so.6                          0x00002b930ae64460 __libc_start_main +
    245

    6    tmp0h0ynknk                        0x00005561eab0a219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsNotPartOfAWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsNotPartOfAWord\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmp8mkbla2m/tmp8mkbla2m.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b4d008c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b4ccffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b4ccff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b4ccfe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8mkbla2m                        0x00005636ffb2862b <unavailable> + 5675

    5    libc.so.6                          0x00002b3b4d1f4460 __libc_start_main +
    245

    6    tmp8mkbla2m                        0x00005636ffb28219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp84aumgns/tmp84aumgns.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b755e1c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b755deb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b755deb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b755deb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84aumgns                        0x000055d5aa9b82fb <unavailable> + 4859

    5    libc.so.6                          0x00002b755e3ad460 __libc_start_main +
    245

    6    tmp84aumgns                        0x000055d5aa9b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsNotPartOfAWord = txt.lastIndex(of: \" \") ?? txt.startIndex\
    \ == txt.endIndex.advanced(by: -1)\n    return lastCharIsLetter && lastCharIsNotPartOfAWord\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzy1z7zvp.swift:10:93: error: value of type 'String.Index' has no\
    \ member 'advanced'\n    let lastCharIsNotPartOfAWord = txt.lastIndex(of: \" \"\
    ) ?? txt.startIndex == txt.endIndex.advanced(by: -1)\n                       \
    \                                                        ~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar != nil {\n        let lastCharString\
    \ = String(lastChar!)\n        if lastCharString.isLetter && !lastCharString.isWord\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9w9p332i.swift:11:27: error: value of type 'String' has no member\
    \ 'isLetter'\n        if lastCharString.isLetter && !lastCharString.isWord {\n\
    \           ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmp9w9p332i.swift:11:55: error: value\
    \ of type 'String' has no member 'isWord'\n        if lastCharString.isLetter\
    \ && !lastCharString.isWord {\n                                       ~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if let lastChar = lastChar {\n    \
    \    return lastChar.isLetter\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmp0i382o6s/tmp0i382o6s.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ea078bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ea0482b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ea0482988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ea04817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0i382o6s                        0x000055561a3f437d <unavailable> + 4989

    5    libc.so.6                          0x00002b9ea0977460 __libc_start_main +
    245

    6    tmp0i382o6s                        0x000055561a3f4009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIsLetter = lastChar.isLetter\n\
    \    let lastCharIsNotInWord = !txt.last!.isLetter\n    return lastCharIsLetter\
    \ && lastCharIsNotInWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp4ttwjgqo/tmp4ttwjgqo.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e3ed5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e3ea54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e3ea54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e3ea537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ttwjgqo                        0x0000556c139194bb <unavailable> + 5307

    5    libc.so.6                          0x00002b9e3ef49460 __libc_start_main +
    245

    6    tmp4ttwjgqo                        0x0000556c139190a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    if txt.last == \" \" {\n        return false\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmprrslear9/tmprrslear9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6769393c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b676908ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b676908a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67690897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprrslear9                        0x0000561727a7e42d <unavailable> + 5165

    5    libc.so.6                          0x00002b676957f460 __libc_start_main +
    245

    6    tmprrslear9                        0x0000561727a7e0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsNotPartOfAWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsNotPartOfAWord\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmp8mkbla2m/tmp8mkbla2m.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b4d008c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b4ccffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b4ccff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b4ccfe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8mkbla2m                        0x00005636ffb2862b <unavailable> + 5675

    5    libc.so.6                          0x00002b3b4d1f4460 __libc_start_main +
    245

    6    tmp8mkbla2m                        0x00005636ffb28219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar!.isLetter\n\
    \    let lastCharIsNotPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsNotPartOfWord\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmpgln4c2z2/tmpgln4c2z2.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54629bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54626b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54626b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54626b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgln4c2z2                        0x000055664dfdd6bb <unavailable> + 5819

    5    libc.so.6                          0x00002b5462ba6460 __libc_start_main +
    245

    6    tmpgln4c2z2                        0x000055664dfdd2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp84aumgns/tmp84aumgns.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b755e1c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b755deb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b755deb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b755deb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84aumgns                        0x000055d5aa9b82fb <unavailable> + 4859

    5    libc.so.6                          0x00002b755e3ad460 __libc_start_main +
    245

    6    tmp84aumgns                        0x000055d5aa9b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsPartOfWord = txt.lastWord.contains(lastChar!)\n\
    \    return lastCharIsLetter && !lastCharIsPartOfWord\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpia1y_aiu.swift:10:36: error: value of type 'String' has no member\
    \ 'lastWord'\n    let lastCharIsPartOfWord = txt.lastWord.contains(lastChar!)\n\
    \                               ~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    return lastChar.isLetter && !lastChar.isLetter\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmp3gxcrp5m/tmp3gxcrp5m.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b86d31c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b86a28b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b86a28988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b86a277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3gxcrp5m                        0x000055804e8464bb <unavailable> + 5307

    5    libc.so.6                          0x00002b2b86f1d460 __libc_start_main +
    245

    6    tmp3gxcrp5m                        0x000055804e8460a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1659978428
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp84aumgns/tmp84aumgns.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b755e1c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b755deb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b755deb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b755deb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84aumgns                        0x000055d5aa9b82fb <unavailable> + 4859

    5    libc.so.6                          0x00002b755e3ad460 __libc_start_main +
    245

    6    tmp84aumgns                        0x000055d5aa9b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp84aumgns/tmp84aumgns.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b755e1c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b755deb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b755deb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b755deb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84aumgns                        0x000055d5aa9b82fb <unavailable> + 4859

    5    libc.so.6                          0x00002b755e3ad460 __libc_start_main +
    245

    6    tmp84aumgns                        0x000055d5aa9b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsSpace = lastChar == \" \"\n    return lastCharIsLetter\
    \ && lastCharIsSpace\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp6yhjzows/tmp6yhjzows.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64664b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64661acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64661ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64661ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6yhjzows                        0x00005636e55fe51b <unavailable> + 5403

    5    libc.so.6                          0x00002b64666a1460 __libc_start_main +
    245

    6    tmp6yhjzows                        0x00005636e55fe109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659978428
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp84aumgns/tmp84aumgns.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b755e1c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b755deb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b755deb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b755deb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84aumgns                        0x000055d5aa9b82fb <unavailable> + 4859

    5    libc.so.6                          0x00002b755e3ad460 __libc_start_main +
    245

    6    tmp84aumgns                        0x000055d5aa9b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIsLetter = lastChar.isLetter\n\
    \    let lastCharIsPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsPartOfWord\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmpiadzx49q/tmpiadzx49q.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b275192ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2751625b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2751625988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27516247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiadzx49q                        0x00005596aa4a66bb <unavailable> + 5819

    5    libc.so.6                          0x00002b2751b1a460 __libc_start_main +
    245

    6    tmpiadzx49q                        0x00005596aa4a62a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsNotPartOfWord = !txt.contains(\" \\(lastChar ??\
    \ \"\")\")\n    return lastCharIsLetter && lastCharIsNotPartOfWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkmg2ez00.swift:10:62: error: binary operator '??' cannot be applied\
    \ to operands of type 'String.Element?' (aka 'Optional<Character>') and 'String'\n\
    \    let lastCharIsNotPartOfWord = !txt.contains(\" \\(lastChar ?? \"\")\")\n\
    \                                                    ~~~~~~~~ ^  ~~\n"
  stdout: ''
  timestamp: 1659978428
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last! >= \"a\" && txt.last! <= \"z\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpadqj6uef/tmpadqj6uef.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ad4a3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ad4731b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ad4731988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ad47307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpadqj6uef                        0x00005639fa20357d <unavailable> + 5501

    5    libc.so.6                          0x00002b8ad4c26460 __libc_start_main +
    245

    6    tmpadqj6uef                        0x00005639fa203209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if let lastChar = lastChar {\n    \
    \    if lastChar.isLetter {\n            let index = txt.index(before: txt.endIndex)\n\
    \            let lastCharIndex = txt.index(after: index)\n            let lastChar\
    \ = txt[lastCharIndex]\n            if lastChar.isLetter {\n                return\
    \ false\n            }\n            return true\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'Swift/StringIndexValidation.swift:120: Fatal error: String index is out
    of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b3148e9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3148b96561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3148b96286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3148b9613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3148b95bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b3148cc9ec2 <unavailable> + 2694850

    6    libswiftCore.so                    0x00002b3148c82660 String.subscript.getter
    + 34

    7    tmphkhgakes                        0x0000555beffb7ce1 <unavailable> + 7393

    8    tmphkhgakes                        0x0000555beffb7476 <unavailable> + 5238

    9    libc.so.6                          0x00002b314908b460 __libc_start_main +
    245

    10   tmphkhgakes                        0x0000555beffb7179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1659978428
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIsLetter = lastChar.isLetter\n\
    \    let lastCharIsPartOfAWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && !lastCharIsPartOfAWord\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmpbhhswt8z/tmpbhhswt8z.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb5a2d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb59fcfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb59fcf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb59fce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbhhswt8z                        0x000055a42c3f561d <unavailable> + 5661

    5    libc.so.6                          0x00002afb5a4c4460 __libc_start_main +
    245

    6    tmpbhhswt8z                        0x000055a42c3f52a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    if txt.last == \" \" {\n        return false\n    }\n    return\
    \ txt.last!.isLetter\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmph_xxc18z/tmph_xxc18z.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c1ca55c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c1c74cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c1c74c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c1c74b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph_xxc18z                        0x0000563f2f88850d <unavailable> + 5389

    5    libc.so.6                          0x00002b2c1cc41460 __libc_start_main +
    245

    6    tmph_xxc18z                        0x0000563f2f888199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659978428
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    if let lastChar = txt.last {\n        return lastChar.isLetter\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp35yy_f03/tmp35yy_f03.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e617f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e614eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e614ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e614ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35yy_f03                        0x0000562187b4037d <unavailable> + 4989

    5    libc.so.6                          0x00002b0e619e3460 __libc_start_main +
    245

    6    tmp35yy_f03                        0x0000562187b40009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978428
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp84aumgns/tmp84aumgns.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b755e1c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b755deb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b755deb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b755deb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84aumgns                        0x000055d5aa9b82fb <unavailable> + 4859

    5    libc.so.6                          0x00002b755e3ad460 __libc_start_main +
    245

    6    tmp84aumgns                        0x000055d5aa9b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsPartOfWord\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmp26m_nj1f/tmp26m_nj1f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37f855bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37f8252b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37f8252988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37f82517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp26m_nj1f                        0x000055d1a4be562b <unavailable> + 5675

    5    libc.so.6                          0x00002b37f8747460 __libc_start_main +
    245

    6    tmp26m_nj1f                        0x000055d1a4be5219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp84aumgns/tmp84aumgns.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b755e1c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b755deb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b755deb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b755deb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84aumgns                        0x000055d5aa9b82fb <unavailable> + 4859

    5    libc.so.6                          0x00002b755e3ad460 __libc_start_main +
    245

    6    tmp84aumgns                        0x000055d5aa9b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIsLetter = lastChar.isLetter\n\
    \    let lastCharIsNotPartOfWord = !txt.contains(\" \\(lastChar)\")\n    return\
    \ lastCharIsLetter && lastCharIsNotPartOfWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f754e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f751de561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7f751de286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7f751de13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7f751ddbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b7f75338e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b7f7533d85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b7f7520a920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b7f74ec5b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b7f74ec4b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b7f74ec5ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b7f74eab42d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b7f74ea9840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b7f74ea9e70 StringProtocol.contains(_:)
    + 64

    14   tmplmonqvrz                        0x000055e837aa40dd <unavailable> + 8413

    15   tmplmonqvrz                        0x000055e837aa3746 <unavailable> + 5958

    16   libc.so.6                          0x00002b7f756d3460 __libc_start_main +
    245

    17   tmplmonqvrz                        0x000055e837aa3449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp84aumgns/tmp84aumgns.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b755e1c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b755deb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b755deb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b755deb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84aumgns                        0x000055d5aa9b82fb <unavailable> + 4859

    5    libc.so.6                          0x00002b755e3ad460 __libc_start_main +
    245

    6    tmp84aumgns                        0x000055d5aa9b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar != nil {\n        if lastChar!.isLetter\
    \ {\n            if txt.lastIndex(of: \" \") == txt.index(before: txt.endIndex)\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmpej70zwv4/tmpej70zwv4.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17def9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17dec95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17dec95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17dec947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpej70zwv4                        0x000055e5219036bb <unavailable> + 5819

    5    libc.so.6                          0x00002b17df18a460 __libc_start_main +
    245

    6    tmpej70zwv4                        0x000055e5219032a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659978428
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsNotPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsNotPartOfWord\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmp0h0ynknk/tmp0h0ynknk.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b930ac78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b930a96fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b930a96f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b930a96e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0h0ynknk                        0x00005561eab0a62b <unavailable> + 5675

    5    libc.so.6                          0x00002b930ae64460 __libc_start_main +
    245

    6    tmp0h0ynknk                        0x00005561eab0a219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let firstChar = txt.first\n    let\
    \ txtArr = txt.components(separatedBy: \" \")\n    let lastWord = txtArr.last\n\
    \    let lastWordLastChar = lastWord?.last\n    if lastChar == lastWordLastChar\
    \ {\n        return false\n    } else if lastChar == firstChar {\n        return\
    \ false\n    } else {\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpj1bs2hvc.swift:10:22: error: value of type 'String' has no member\
    \ 'components'\n    let txtArr = txt.components(separatedBy: \" \")\n        \
    \         ~~~ ^~~~~~~~~~\n/tmp/tmpj1bs2hvc.swift:12:38: error: type of expression\
    \ is ambiguous without more context\n    let lastWordLastChar = lastWord?.last\n\
    \                           ~~~~~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1659978428
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsNotPartOfAWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsNotPartOfAWord\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmp8mkbla2m/tmp8mkbla2m.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b4d008c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b4ccffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b4ccff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b4ccfe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8mkbla2m                        0x00005636ffb2862b <unavailable> + 5675

    5    libc.so.6                          0x00002b3b4d1f4460 __libc_start_main +
    245

    6    tmp8mkbla2m                        0x00005636ffb28219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsPartOfAWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsPartOfAWord\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmpdzu3dl_k/tmpdzu3dl_k.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e66e29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e66b20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e66b20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e66b1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdzu3dl_k                        0x000055fb033fe62b <unavailable> + 5675

    5    libc.so.6                          0x00002b9e67015460 __libc_start_main +
    245

    6    tmpdzu3dl_k                        0x000055fb033fe219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar?.isLetter == true {\n \
    \       return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmprcgy5vrr/tmprcgy5vrr.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13add08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13ad9ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13ad9ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13ad9fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprcgy5vrr                        0x000056011597f37d <unavailable> + 4989

    5    libc.so.6                          0x00002b13adef4460 __libc_start_main +
    245

    6    tmprcgy5vrr                        0x000056011597f009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let last_char = txt.last!\n    let last_char_is_a_letter = last_char.isLetter\n\
    \    let last_char_is_not_a_letter = last_char.isNumber\n    let last_char_is_not_a_letter_or_a_number\
    \ = last_char.isSymbol\n    let last_char_is_not_a_letter_or_a_number_or_a_symbol\
    \ = last_char.isPunctuation\n    let last_char_is_not_a_letter_or_a_number_or_a_symbol_or_a_punctuation\
    \ = last_char.isCurrencySymbol\n    let last_char_is_not_a_letter_or_a_number_or_a_symbol_or_a_punctuation_or_a_currency_symbol\
    \ = last_char.isWhitespace\n    let last_char_is_not_a_letter_or_a_number_or_a_symbol_or_a_punctuation_or_a_currency_symbol_or_a_whitespace\
    \ = last_char.isNewline\n    let last_char_is_not_a_letter_or_a_number_or_a_symbol_or_a_punctuation_or_a_currency_symbol_or_a_whitespace_or_a_newline\
    \ = last_char.isIllegal\n    let last_char_is_not_a_letter_or_a_number_or_a_symbol_or_a_punctuation_or_a_currency_symbol_or_a_whitespace_or_a_newline_or_illegal\
    \ = last_char.isControl\n    let last_char_is_not_a_letter_or_a_number_or_a_symbol_or_a_punctuation_or_a_currency_symbol_or_a_whitespace_or_a_newline_or_illegal_or_control\
    \ = last_char.isFormat\n    let last_char_is_not_a_letter_or_a_number_or_a_symbol\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5s58bi0_.swift:16:138: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isIllegal'\n    let last_char_is_not_a_letter_or_a_number_or_a_symbol_or_a_punctuation_or_a_currency_symbol_or_a_whitespace_or_a_newline\
    \ = last_char.isIllegal\n                                                    \
    \                                                                           ~~~~~~~~~\
    \ ^~~~~~~~~\n/tmp/tmp5s58bi0_.swift:17:149: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'isControl'\n    let last_char_is_not_a_letter_or_a_number_or_a_symbol_or_a_punctuation_or_a_currency_symbol_or_a_whitespace_or_a_newline_or_illegal\
    \ = last_char.isControl\n                                                    \
    \                                                                            \
    \          ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmp5s58bi0_.swift:18:160: error: value of\
    \ type 'String.Element' (aka 'Character') has no member 'isFormat'\n    let last_char_is_not_a_letter_or_a_number_or_a_symbol_or_a_punctuation_or_a_currency_symbol_or_a_whitespace_or_a_newline_or_illegal_or_control\
    \ = last_char.isFormat\n                                                     \
    \                                                                            \
    \                    ~~~~~~~~~ ^~~~~~~~\n/tmp/tmp5s58bi0_.swift:19:9: error: type\
    \ annotation missing in pattern\n    let last_char_is_not_a_letter_or_a_number_or_a_symbol\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659978428
- exit_code: 1
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIndex = txt.index(before:\
    \ txt.endIndex)\n    let lastCharIsLetter = CharacterSet.letters.contains(lastChar.unicodeScalars.first!)\n\
    \    let lastCharIsNotPartOfWord = txt[lastCharIndex] == \" \"\n    return lastCharIsLetter\
    \ && lastCharIsNotPartOfWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8konu7ck.swift:10:28: error: cannot find 'CharacterSet' in scope\n\
    \    let lastCharIsLetter = CharacterSet.letters.contains(lastChar.unicodeScalars.first!)\n\
    \                           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978428
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsNotPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsNotPartOfWord\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmp0h0ynknk/tmp0h0ynknk.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b930ac78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b930a96fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b930a96f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b930a96e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0h0ynknk                        0x00005561eab0a62b <unavailable> + 5675

    5    libc.so.6                          0x00002b930ae64460 __libc_start_main +
    245

    6    tmp0h0ynknk                        0x00005561eab0a219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar != nil {\n        if lastChar!.isLetter\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmpxiid97lh/tmpxiid97lh.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab10ece3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab10e9dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab10e9da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab10e9d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxiid97lh                        0x00005567c055b41d <unavailable> + 5149

    5    libc.so.6                          0x00002ab10eecf460 __libc_start_main +
    245

    6    tmpxiid97lh                        0x00005567c055b0a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    if lastChar.isLetter && lastChar.isWholeNumber\
    \ == false {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzo3v10u5/tmpzo3v10u5.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58a8031c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58a7d28b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58a7d28988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58a7d277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzo3v10u5                        0x000055955119247d <unavailable> + 5245

    5    libc.so.6                          0x00002b58a821d460 __libc_start_main +
    245

    6    tmpzo3v10u5                        0x0000559551192109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659978428
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last == \" \"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmpbvg5xi0n/tmpbvg5xi0n.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac528effc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac528bf6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac528bf6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac528bf57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbvg5xi0n                        0x000055e1751554cb <unavailable> + 5323

    5    libc.so.6                          0x00002ac5290eb460 __libc_start_main +
    245

    6    tmpbvg5xi0n                        0x000055e1751550b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = CharacterSet.letters.contains(lastChar!.unicodeScalars.first!)\n\
    \    let lastCharIsNotPartOfAWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsNotPartOfAWord\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxhow5tt3.swift:9:28: error: cannot find 'CharacterSet' in scope\n\
    \    let lastCharIsLetter = CharacterSet.letters.contains(lastChar!.unicodeScalars.first!)\n\
    \                           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978428
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIsLetter = lastChar.isLetter\n\
    \    let lastCharIsPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsPartOfWord\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmpiadzx49q/tmpiadzx49q.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b275192ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2751625b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2751625988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27516247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiadzx49q                        0x00005596aa4a66bb <unavailable> + 5819

    5    libc.so.6                          0x00002b2751b1a460 __libc_start_main +
    245

    6    tmpiadzx49q                        0x00005596aa4a62a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIsLetter = lastChar.isLetter\n\
    \    let lastCharIsNotPartOfWord = !txt.contains(\" \\(lastChar)\")\n    return\
    \ lastCharIsLetter && lastCharIsNotPartOfWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f754e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f751de561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7f751de286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7f751de13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7f751ddbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b7f75338e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b7f7533d85c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b7f7520a920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b7f74ec5b82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b7f74ec4b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b7f74ec5ced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b7f74eab42d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b7f74ea9840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b7f74ea9e70 StringProtocol.contains(_:)
    + 64

    14   tmplmonqvrz                        0x000055e837aa40dd <unavailable> + 8413

    15   tmplmonqvrz                        0x000055e837aa3746 <unavailable> + 5958

    16   libc.so.6                          0x00002b7f756d3460 __libc_start_main +
    245

    17   tmplmonqvrz                        0x000055e837aa3449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsNotPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsNotPartOfWord\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmp0h0ynknk/tmp0h0ynknk.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b930ac78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b930a96fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b930a96f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b930a96e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0h0ynknk                        0x00005561eab0a62b <unavailable> + 5675

    5    libc.so.6                          0x00002b930ae64460 __libc_start_main +
    245

    6    tmp0h0ynknk                        0x00005561eab0a219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIsLetter = CharacterSet.letters.contains(lastChar.unicodeScalars.first!)\n\
    \    let lastCharIsNotPartOfAWord = !txt.contains(\" \\(lastChar)\")\n    return\
    \ lastCharIsLetter && lastCharIsNotPartOfAWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsbhbwshj.swift:9:28: error: cannot find 'CharacterSet' in scope\n\
    \    let lastCharIsLetter = CharacterSet.letters.contains(lastChar.unicodeScalars.first!)\n\
    \                           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978428
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIsLetter = lastChar.isLetter\n\
    \    let lastCharIsPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsPartOfWord\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmpiadzx49q/tmpiadzx49q.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b275192ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2751625b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2751625988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27516247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiadzx49q                        0x00005596aa4a66bb <unavailable> + 5819

    5    libc.so.6                          0x00002b2751b1a460 __libc_start_main +
    245

    6    tmpiadzx49q                        0x00005596aa4a62a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIsLetter = CharacterSet.letters.contains(lastChar.unicodeScalars.first!)\n\
    \    let lastCharIsNotPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsNotPartOfWord\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpoetstm1o.swift:9:28: error: cannot find 'CharacterSet' in scope\n\
    \    let lastCharIsLetter = CharacterSet.letters.contains(lastChar.unicodeScalars.first!)\n\
    \                           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978428
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar != nil {\n        if lastChar!.isLetter\
    \ {\n            let index = txt.index(before: txt.endIndex)\n            let\
    \ prevChar = txt[index]\n            if !prevChar.isLetter {\n               \
    \ return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmpt3kyyy4d/tmpt3kyyy4d.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acfd340ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acfd3105b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acfd3105988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acfd31047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt3kyyy4d                        0x000056317306c5cb <unavailable> + 5579

    5    libc.so.6                          0x00002acfd35fa460 __libc_start_main +
    245

    6    tmpt3kyyy4d                        0x000056317306c1b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659978428
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    let lastCharIsLetter = lastChar?.isLetter\
    \ ?? false\n    let lastCharIsPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsPartOfWord\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmp26m_nj1f/tmp26m_nj1f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37f855bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37f8252b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37f8252988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37f82517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp26m_nj1f                        0x000055d1a4be562b <unavailable> + 5675

    5    libc.so.6                          0x00002b37f8747460 __libc_start_main +
    245

    6    tmp26m_nj1f                        0x000055d1a4be5219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIsLetter = lastChar.isLetter\n\
    \    let lastCharIsSpace = lastChar.isWhitespace\n    return lastCharIsLetter\
    \ && lastCharIsSpace\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp2i2qh2kl/tmp2i2qh2kl.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7df166c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7dee5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7dee5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7dee5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2i2qh2kl                        0x000055696dc9250b <unavailable> + 5387

    5    libc.so.6                          0x00002ab7df352460 __libc_start_main +
    245

    6    tmp2i2qh2kl                        0x000055696dc920f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIsLetter = lastChar.isLetter\n\
    \    let lastCharIsNotPartOfAWord = !txt.last!.isLetter\n    return lastCharIsLetter\
    \ && lastCharIsNotPartOfAWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmpoc9gt5xd/tmpoc9gt5xd.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ee83cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ee80c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ee80c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ee80c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoc9gt5xd                        0x000055b6e8c084bb <unavailable> + 5307

    5    libc.so.6                          0x00002b9ee85ba460 __libc_start_main +
    245

    6    tmpoc9gt5xd                        0x000055b6e8c080a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1659978428
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi\
    \ e\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin\
    \ pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pi e \") == false)"
  status: Exception
  stderr: 'tmp_9rypfpt/tmp_9rypfpt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb27723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb274197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9rypfpt                        0x000055bd9deab42d <unavailable> + 5165

    5    libc.so.6                          0x00002aeb2790f460 __libc_start_main +
    245

    6    tmp_9rypfpt                        0x000055bd9deab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIsLetter = CharacterSet.letters.contains(lastChar.unicodeScalars.first!)\n\
    \    let lastCharIsNotPartOfAWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsNotPartOfAWord\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqoyxurmk.swift:9:28: error: cannot find 'CharacterSet' in scope\n\
    \    let lastCharIsLetter = CharacterSet.letters.contains(lastChar.unicodeScalars.first!)\n\
    \                           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978426
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    let lastChar = txt.last!\n    let lastCharIsLetter = lastChar.isLetter\n\
    \    let lastCharIsPartOfWord = txt.lastIndex(of: \" \") == txt.index(before:\
    \ txt.endIndex)\n    return lastCharIsLetter && lastCharIsPartOfWord\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_if_last_char_is_a_letter(txt: \"apple\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"A\") == true)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie 1\") ==\
    \ false)\nassert(check_if_last_char_is_a_letter(txt: \"\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee e \") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple\
    \ pie\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"apple pi e \"\
    ) == false)"
  status: Exception
  stderr: 'tmpiadzx49q/tmpiadzx49q.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b275192ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2751625b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2751625988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27516247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiadzx49q                        0x00005596aa4a66bb <unavailable> + 5819

    5    libc.so.6                          0x00002b2751b1a460 __libc_start_main +
    245

    6    tmpiadzx49q                        0x00005596aa4a62a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\nfunc check_if_last_char_is_a_letter(txt: String) ->\
    \ Bool {\n    return txt.last?.isLetter ?? false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_if_last_char_is_a_letter(txt: \"apple\") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pi e\") == true)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"eeeee\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"A\") == true)\n\
    assert(check_if_last_char_is_a_letter(txt: \"Pumpkin pie \") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"Pumpkin pie 1\") == false)\nassert(check_if_last_char_is_a_letter(txt: \"\"\
    ) == false)\nassert(check_if_last_char_is_a_letter(txt: \"eeeee e \") == false)\n\
    assert(check_if_last_char_is_a_letter(txt: \"apple pie\") == false)\nassert(check_if_last_char_is_a_letter(txt:\
    \ \"apple pi e \") == false)"
  status: Exception
  stderr: 'tmpzlbhia9g/tmpzlbhia9g.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3821a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b382176eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b382176e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b382176d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlbhia9g                        0x000055a61636e37d <unavailable> + 4989

    5    libc.so.6                          0x00002b3821c63460 __libc_start_main +
    245

    6    tmpzlbhia9g                        0x000055a61636e009 <unavailable> + 4105

    '
  stdout: ''
  timestamp: 1659978427
