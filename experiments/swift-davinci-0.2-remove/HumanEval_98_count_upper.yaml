name: HumanEval_98_count_upper
language: swift
prompt: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
  /// For example:\nfunc count_upper(s: String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
  \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
  \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\")\
  \ == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
completions: ["    return s.enumerated().reduce(0) { (acc, x) in\n        return acc\
    \ + (x.offset % 2 == 0 && x.element.isUppercase ? 1 : 0)\n    }", "    return\
    \ s.enumerated().reduce(0) {\n        $0 + ($1.offset % 2 == 0 && $1.element.isUppercase\
    \ ? 1 : 0)\n    }", "    return s.enumerated().reduce(0) { (acc, x) in\n     \
    \   let (i, c) = x\n        return acc + (i % 2 == 0 && c.isUppercase ? 1 : 0)\n\
    \    }", '    return s.enumerated().filter { $0.offset % 2 == 0 && $0.element.isUppercase
    }.count', '    return s.enumerated().filter { $0.offset % 2 == 0 && $0.element.isUppercase
    }.count', "    var count = 0\n    for (i, c) in s.enumerated() {\n        if i\
    \ % 2 == 0 && c.isUppercase {\n            count += 1\n        }\n    }\n    return\
    \ count", "    return s.enumerated().reduce(0) {\n        $0 + ($1.offset % 2\
    \ == 0 && $1.element.isUppercase ? 1 : 0)\n    }", "    return s.enumerated().reduce(0)\
    \ {\n        $0 + ($1.offset % 2 == 0 && $1.element.isUppercase ? 1 : 0)\n   \
    \ }", "    var count = 0\n    for (i, c) in s.enumerated() {\n        if i % 2\
    \ == 0 && c.isUppercase {\n            count += 1\n        }\n    }\n    return\
    \ count", "    var count = 0\n    for (index, char) in s.enumerated() {\n    \
    \    if index % 2 == 0 && char.isUppercase {\n            count += 1\n       \
    \ }\n    }\n    return count", '    return s.enumerated().filter { $0.offset %
    2 == 0 && $0.element.isUppercase }.count', "    return s.enumerated().reduce(0)\
    \ {\n        $0 + ($1.offset % 2 == 0 && \"AEIOU\".contains($1.element) ? 1 :\
    \ 0)\n    }", "    return s.enumerated().reduce(0) { (acc, x) in\n        if x.offset\
    \ % 2 == 0 && \"AEIOU\".contains(x.element) {\n            return acc + 1\n  \
    \      }\n        return acc\n    }", "    return s.enumerated().reduce(0) { (acc,\
    \ pair) in\n        let (index, char) = pair\n        return acc + (index % 2\
    \ == 0 && char.isUppercase ? 1 : 0)\n    }", "    return s.enumerated().reduce(0)\
    \ { (acc, x) in\n        let (i, c) = x\n        if i % 2 == 0 && c.isUppercase\
    \ {\n            return acc + 1\n        }\n        return acc\n    }", "    return\
    \ s.enumerated().reduce(0) {\n        $0 + ($1.offset % 2 == 0 && $1.element.isUppercase\
    \ ? 1 : 0)\n    }", "    var count = 0\n    for (i, c) in s.enumerated() {\n \
    \       if i % 2 == 0 && c.isUppercase {\n            count += 1\n        }\n\
    \    }\n    return count", "    var count = 0\n    for (i, c) in s.characters.enumerated()\
    \ {\n        if i % 2 == 0 && is_upper(c) {\n            count += 1\n        }\n\
    \    }\n    return count", "    var count = 0\n    for (i, c) in s.enumerated()\
    \ {\n        if i % 2 == 0 && c.isUppercase {\n            count += 1\n      \
    \  }\n    }\n    return count", "    var count = 0\n    for (i, c) in s.enumerated()\
    \ {\n        if i % 2 == 0 && c.isUppercase {\n            count += 1\n      \
    \  }\n    }\n    return count", '    return s.enumerated().filter { $0.offset
    % 2 == 0 && $0.element.isUppercase }.count', '    return s.enumerated().reduce(0)
    { $0 + ($1.offset % 2 == 0 && "AEIOU".contains($1.element) ? 1 : 0) }', '    return
    s.enumerated().filter({ $0.offset % 2 == 0 && $0.element.isUppercase }).count',
  "    return s.enumerated().reduce(0) { (acc, x) in\n        let (i, c) = x\n   \
    \     return acc + (i % 2 == 0 && c.isUppercase ? 1 : 0)\n    }", "    return\
    \ s.enumerated().reduce(0) {\n        $0 + ($1.offset % 2 == 0 && \"AEIOU\".contains($1.element)\
    \ ? 1 : 0)\n    }", "    var count = 0\n    for (i, c) in s.enumerated() {\n \
    \       if i % 2 == 0 && c.isUppercase {\n            count += 1\n        }\n\
    \    }\n    return count", "    var count = 0\n    for (i, c) in s.enumerated()\
    \ {\n        if i % 2 == 0 && c.isUppercase {\n            count += 1\n      \
    \  }\n    }\n    return count", "    var count = 0\n    for (index, char) in s.enumerated()\
    \ {\n        if index % 2 == 0 && char.isUppercase {\n            count += 1\n\
    \        }\n    }\n    return count", "    return s.enumerated().reduce(0) {\n\
    \        $0 + ($1.offset % 2 == 0 && \"AEIOU\".contains($1.element) ? 1 : 0)\n\
    \    }", '    return s.enumerated().filter { $0.offset % 2 == 0 && $0.element.isUppercase
    }.count', "    return s.enumerated().reduce(0) { (acc, pair) in\n        let (index,\
    \ char) = pair\n        return acc + (index % 2 == 0 && char.isUppercase ? 1 :\
    \ 0)\n    }", "    var count = 0\n    for (i, c) in s.enumerated() {\n       \
    \ if i % 2 == 0 && is_upper_vowel(c) {\n            count += 1\n        }\n  \
    \  }\n    return count", "    var count = 0\n    for (i, c) in s.enumerated()\
    \ {\n        if i % 2 == 0 && c.isUppercase {\n            count += 1\n      \
    \  }\n    }\n    return count", "    return s.enumerated().reduce(0) { (count,\
    \ pair) in\n        let (index, char) = pair\n        return index % 2 == 0 &&\
    \ char.isUppercase ? count + 1 : count\n    }", '    return s.enumerated().filter
    { $0.offset % 2 == 0 && "AEIOU".contains($0.element) }.count', "    return s.enumerated().reduce(0)\
    \ { (result, tuple) in\n        let (index, char) = tuple\n        return result\
    \ + (index % 2 == 0 && char.isUppercase ? 1 : 0)\n    }", "    return s.enumerated().reduce(0)\
    \ { (acc, x) in\n        let (i, c) = x\n        return acc + (i % 2 == 0 && c.isUppercase\
    \ ? 1 : 0)\n    }", "    return s.enumerated().reduce(0) {\n        $0 + ($1.offset\
    \ % 2 == 0 && \"AEIOU\".contains($1.element) ? 1 : 0)\n    }", "    var count\
    \ = 0\n    for (i, c) in s.enumerated() {\n        if i % 2 == 0 && c.isUppercase\
    \ {\n            count += 1\n        }\n    }\n    return count", "    return\
    \ s.enumerated().reduce(0) { (result, tuple) in\n        let (index, char) = tuple\n\
    \        if index % 2 == 0 && char.isUppercase {\n            return result +\
    \ 1\n        }\n        return result\n    }", "    var count = 0\n    for (i,\
    \ c) in s.enumerated() {\n        if i % 2 == 0 && c.isUppercase {\n         \
    \   count += 1\n        }\n    }\n    return count", "    var count = 0\n    for\
    \ (i, c) in s.enumerated() {\n        if i % 2 == 0 && c.isUppercase {\n     \
    \       count += 1\n        }\n    }\n    return count", "    var count = 0\n\
    \    for (i, c) in s.characters.enumerated() {\n        if i % 2 == 0 && is_upper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count", "    return\
    \ s.enumerated().reduce(0) {\n        $0 + ($1.offset % 2 == 0 && \"AEIOU\".contains($1.element)\
    \ ? 1 : 0)\n    }", "    return s.enumerated().reduce(0) { (count, pair) in\n\
    \        let (index, char) = pair\n        return index % 2 == 0 && char.isUppercase\
    \ ? count + 1 : count\n    }", "    return s.enumerated().reduce(0) { (acc, x)\
    \ in\n        return acc + (x.offset % 2 == 0 && \"AEIOU\".contains(x.element)\
    \ ? 1 : 0)\n    }", "    return s.enumerated().reduce(0) { (result, pair) in\n\
    \        let (index, char) = pair\n        return result + (index % 2 == 0 &&\
    \ char.isUppercase ? 1 : 0)\n    }", '    return s.enumerated().filter { $0.offset
    % 2 == 0 && $0.element.isUppercase }.count', "    return s.enumerated().reduce(0)\
    \ { (count, tuple) in\n        let (index, char) = tuple\n        return count\
    \ + (index % 2 == 0 && char.isUppercase ? 1 : 0)\n    }", "    return s.enumerated().reduce(0)\
    \ { (acc, x) in\n        let (i, c) = x\n        return acc + (i % 2 == 0 && c.isUppercase\
    \ ? 1 : 0)\n    }", "    return s.enumerated().reduce(0) { (acc, x) in\n     \
    \   let (i, c) = x\n        return acc + (i % 2 == 0 && c.isUppercase ? 1 : 0)\n\
    \    }", "    return s.enumerated().reduce(0) {\n        $0 + ($1.offset % 2 ==\
    \ 0 && \"AEIOU\".contains($1.element) ? 1 : 0)\n    }", '    return s.enumerated().filter
    { $0.offset % 2 == 0 && "AEIOU".contains($0.element) }.count', "    return s.enumerated().reduce(0)\
    \ { (acc, x) in\n        if x.offset % 2 == 0 && is_upper_vowel(c: x.element)\
    \ {\n            return acc + 1\n        }\n        return acc\n    }", "    var\
    \ count = 0\n    for (i, c) in s.enumerated() {\n        if i % 2 == 0 && c.isUppercase\
    \ {\n            count += 1\n        }\n    }\n    return count", "    return\
    \ s.enumerated().reduce(0) { (acc, pair) in\n        let (index, char) = pair\n\
    \        if index % 2 == 0 && char.isUppercase {\n            return acc + 1\n\
    \        }\n        return acc\n    }", '    return s.enumerated().filter { $0.offset
    % 2 == 0 && $0.element.isUppercase }.count', "    return s.enumerated().reduce(0)\
    \ { (acc, c) in\n        return acc + (c.offset % 2 == 0 && c.element.isUppercase\
    \ ? 1 : 0)\n    }", '    return s.enumerated().filter { $0.offset % 2 == 0 &&
    $0.element.isUppercase }.count', "    return s.enumerated().reduce(0) { (acc,\
    \ x) in\n        let (i, c) = x\n        return acc + (i % 2 == 0 && c.isUppercase\
    \ ? 1 : 0)\n    }", "    return s.enumerated().reduce(0) { (result, next) in\n\
    \        return result + (next.offset % 2 == 0 && next.element.isUppercase ? 1\
    \ : 0)\n    }", "    var count = 0\n    for (i, c) in s.enumerated() {\n     \
    \   if i % 2 == 0 && c.isUppercase {\n            count += 1\n        }\n    }\n\
    \    return count", "    return s.enumerated().reduce(0) {\n        $0 + ($1.offset\
    \ % 2 == 0 && $1.element.isUppercase ? 1 : 0)\n    }", "    return s.enumerated().reduce(0)\
    \ {\n        $0 + ($1.offset % 2 == 0 && \"AEIOU\".contains($1.element) ? 1 :\
    \ 0)\n    }", "    var count = 0\n    for (i, c) in s.characters.enumerated()\
    \ {\n        if i % 2 == 0 && c.isUppercase {\n            count += 1\n      \
    \  }\n    }\n    return count", '    return s.enumerated().filter { $0.offset
    % 2 == 0 && "AEIOU".contains($0.element) }.count', "    var count = 0\n    for\
    \ (i, c) in s.enumerated() {\n        if i % 2 == 0 && c.isUppercase {\n     \
    \       count += 1\n        }\n    }\n    return count", "    var count = 0\n\
    \    for (i, c) in s.enumerated() {\n        if i % 2 == 0 && c.isUppercase {\n\
    \            count += 1\n        }\n    }\n    return count", "    return s.enumerated().reduce(0)\
    \ { (result, tuple) in\n        let (index, char) = tuple\n        return result\
    \ + (index % 2 == 0 && char.isUppercase ? 1 : 0)\n    }", "    var count = 0\n\
    \    for (i, c) in s.enumerated() {\n        if i % 2 == 0 && c.isUppercase {\n\
    \            count += 1\n        }\n    }\n    return count", "    return s.enumerated().reduce(0)\
    \ { (acc, x) in\n        if x.offset % 2 == 0 && x.element.isUppercase {\n   \
    \         return acc + 1\n        }\n        return acc\n    }", "    return s.enumerated().reduce(0)\
    \ {\n        $0 + ($1.offset % 2 == 0 && \"AEIOU\".contains($1.element) ? 1 :\
    \ 0)\n    }", "    var count = 0\n    for (i, c) in s.enumerated() {\n       \
    \ if i % 2 == 0 && c.isUppercase {\n            count += 1\n        }\n    }\n\
    \    return count", "    var count = 0\n    for (i, c) in s.enumerated() {\n \
    \       if i % 2 == 0 && c.isUppercase {\n            count += 1\n        }\n\
    \    }\n    return count", "    return s.enumerated().reduce(0) { (acc, pair)\
    \ in\n        let (i, c) = pair\n        return acc + (i % 2 == 0 && c.isUppercase\
    \ ? 1 : 0)\n    }", "    return s.enumerated().reduce(0) { (count, tuple) in\n\
    \        let (index, char) = tuple\n        if index % 2 == 0 && char.isUppercase\
    \ {\n            return count + 1\n        }\n        return count\n    }", " \
    \   return s.enumerated().reduce(0) {\n        $0 + ($1.offset % 2 == 0 && $1.element.isUppercase\
    \ ? 1 : 0)\n    }", "    var count = 0\n    for (i, c) in s.enumerated() {\n \
    \       if i % 2 == 0 && c.isUppercase {\n            count += 1\n        }\n\
    \    }\n    return count", "    var count = 0\n    for (i, c) in s.enumerated()\
    \ {\n        if i % 2 == 0 && c.isUppercase {\n            count += 1\n      \
    \  }\n    }\n    return count", '    return s.enumerated().filter { $0.offset
    % 2 == 0 && $0.element.isUppercase }.count', "    var count = 0\n    for (i, c)\
    \ in s.enumerated() {\n        if i % 2 == 0 && c.isUppercase {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for (i, c)\
    \ in s.enumerated() {\n        if i % 2 == 0 && c.isUppercase {\n            count\
    \ += 1\n        }\n    }\n    return count", "    return s.enumerated().reduce(0)\
    \ { (acc, x) in\n        if x.offset % 2 == 0 && x.element.isUppercase {\n   \
    \         return acc + 1\n        }\n        return acc\n    }", "    var count\
    \ = 0\n    for (i, c) in s.enumerated() {\n        if i % 2 == 0 && c.isUppercase\
    \ {\n            count += 1\n        }\n    }\n    return count", '    return
    s.enumerated().filter { $0.offset % 2 == 0 && "AEIOU".contains($0.element) }.count',
  '    return s.enumerated().filter { $0.offset % 2 == 0 && "AEIOU".contains($0.element)
    }.count', "    var count = 0\n    for (i, c) in s.enumerated() {\n        if i\
    \ % 2 == 0 && c.isUppercase {\n            count += 1\n        }\n    }\n    return\
    \ count", "    return s.enumerated().reduce(0) { (acc, pair) in\n        let (index,\
    \ char) = pair\n        if index % 2 == 0 && char.isUppercase {\n            return\
    \ acc + 1\n        }\n        return acc\n    }", "    var count = 0\n    for\
    \ (index, char) in s.enumerated() {\n        if index % 2 == 0 && char.isUppercase\
    \ {\n            count += 1\n        }\n    }\n    return count", "    return\
    \ s.enumerated().reduce(0) { (result, tuple) in\n        let (index, char) = tuple\n\
    \        return result + (index % 2 == 0 && char.isUppercase ? 1 : 0)\n    }",
  "    return s.enumerated().reduce(0) {\n        $0 + ($1.offset % 2 == 0 && \"AEIOU\"\
    .contains($1.element) ? 1 : 0)\n    }", "    return s.enumerated().reduce(0) {\n\
    \        $0 + ($1.offset % 2 == 0 && \"AEIOU\".contains($1.element) ? 1 : 0)\n\
    \    }", "    var count = 0\n    for (i, c) in s.characters.enumerated() {\n \
    \       if i % 2 == 0 && is_upper(c) {\n            count += 1\n        }\n  \
    \  }\n    return count", "    return s.enumerated().reduce(0) { (acc, x) in\n\
    \        return x.offset % 2 == 0 && \"AEIOU\".contains(x.element) ? acc + 1 :\
    \ acc\n    }", '    return s.enumerated().filter { $0.offset % 2 == 0 && $0.element.isUppercase
    }.count', "    var count = 0\n    for (i, c) in s.enumerated() {\n        if i\
    \ % 2 == 0 && c.isUppercase {\n            count += 1\n        }\n    }\n    return\
    \ count", '    return s.enumerated().filter { $0.offset % 2 == 0 && $0.element.isUppercase
    }.count', "    var count = 0\n    for (i, c) in s.enumerated() {\n        if i\
    \ % 2 == 0 && c.isUppercase {\n            count += 1\n        }\n    }\n    return\
    \ count", "    var count = 0\n    for (i, c) in s.enumerated() {\n        if i\
    \ % 2 == 0 && c.isUppercase {\n            count += 1\n        }\n    }\n    return\
    \ count", '    return s.enumerated().filter({ $0.offset % 2 == 0 && "AEIOU".contains($0.element)
    }).count', "    return s.enumerated().reduce(0) { (acc, x) in\n        let (i,\
    \ c) = x\n        return acc + (i % 2 == 0 && c.isUppercase ? 1 : 0)\n    }",
  "    var count = 0\n    for (i, c) in s.enumerated() {\n        if i % 2 == 0 &&\
    \ c.isUppercase {\n            count += 1\n        }\n    }\n    return count",
  "    return s.enumerated().reduce(0) {\n        $0 + ($1.offset % 2 == 0 && \"AEIOU\"\
    .contains($1.element) ? 1 : 0)\n    }", '    return s.enumerated().filter { $0.offset
    % 2 == 0 && "AEIOU".contains($0.element) }.count', "    return s.enumerated().reduce(0)\
    \ { (acc, x) in\n        let (i, c) = x\n        return acc + (i % 2 == 0 && c.isUppercase\
    \ ? 1 : 0)\n    }", "    var count = 0\n    for (i, c) in s.enumerated() {\n \
    \       if i % 2 == 0 && c.isUppercase {\n            count += 1\n        }\n\
    \    }\n    return count", "    return s.enumerated().reduce(0) {\n        $0\
    \ + ($1.offset % 2 == 0 && \"AEIOU\".contains($1.element) ? 1 : 0)\n    }", " \
    \   return s.enumerated().reduce(0) {\n        $0 + ($1.offset % 2 == 0 && $1.element.isUppercase\
    \ ? 1 : 0)\n    }", "    var count = 0\n    for (i, c) in s.enumerated() {\n \
    \       if i % 2 == 0 && c.isUppercase {\n            count += 1\n        }\n\
    \    }\n    return count", "    return s.enumerated().reduce(0) { (acc, x) in\n\
    \        let (i, c) = x\n        return acc + (i % 2 == 0 && c.isUppercase ? 1\
    \ : 0)\n    }", "    var count = 0\n    for (i, c) in s.enumerated() {\n     \
    \   if i % 2 == 0 && c.isUppercase {\n            count += 1\n        }\n    }\n\
    \    return count", "    return s.enumerated().reduce(0) { (result, next) in\n\
    \        return next.offset % 2 == 0 && next.element.isUppercase ? result + 1\
    \ : result\n    }", "    var count = 0\n    for (i, c) in s.enumerated() {\n \
    \       if i % 2 == 0 && c.isUppercase {\n            count += 1\n        }\n\
    \    }\n    return count", "    var count = 0\n    for (i, c) in s.enumerated()\
    \ {\n        if i % 2 == 0 && c.isUppercase {\n            count += 1\n      \
    \  }\n    }\n    return count", '    return s.enumerated().filter { $0.offset
    % 2 == 0 && "AEIOU".contains($0.element) }.count', "    var count = 0\n    for\
    \ (i, c) in s.enumerated() {\n        if i % 2 == 0 && c.isUppercase {\n     \
    \       count += 1\n        }\n    }\n    return count", "    var count = 0\n\
    \    for (index, char) in s.enumerated() {\n        if index % 2 == 0 && char.isUppercase\
    \ {\n            count += 1\n        }\n    }\n    return count", "    return\
    \ s.enumerated().reduce(0) { (acc, x) in\n        let (i, c) = x\n        return\
    \ acc + (i % 2 == 0 && c.isUppercase ? 1 : 0)\n    }", "    var count = 0\n  \
    \  for (i, c) in s.enumerated() {\n        if i % 2 == 0 && c.isUppercase {\n\
    \            count += 1\n        }\n    }\n    return count", "    return s.enumerated().reduce(0)\
    \ { (acc, x) in\n        if x.offset % 2 == 0 && \"AEIOU\".contains(x.element)\
    \ {\n            return acc + 1\n        }\n        return acc\n    }", "    var\
    \ count = 0\n    for (i, c) in s.enumerated() {\n        if i % 2 == 0 && c.isUppercase\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for (i, c) in s.enumerated() {\n        if i % 2 == 0 && c.isUppercase\
    \ {\n            count += 1\n        }\n    }\n    return count", "    return\
    \ s.enumerated().reduce(0) {\n        $0 + ($1.offset % 2 == 0 && \"AEIOU\".contains($1.element)\
    \ ? 1 : 0)\n    }", "    var count = 0\n    for (i, c) in s.enumerated() {\n \
    \       if i % 2 == 0 && c.isUppercase {\n            count += 1\n        }\n\
    \    }\n    return count", "    return s.enumerated().reduce(0) { (acc, x) in\n\
    \        let (i, c) = x\n        return acc + (i % 2 == 0 && c.isUppercase ? 1\
    \ : 0)\n    }", "    return s.enumerated().reduce(0) { (acc, x) in\n        let\
    \ (i, c) = x\n        if i % 2 == 0 && c.isUppercase {\n            return acc\
    \ + 1\n        }\n        return acc\n    }", "    var count = 0\n    for (i,\
    \ c) in s.enumerated() {\n        if i % 2 == 0 && c.isUppercase {\n         \
    \   count += 1\n        }\n    }\n    return count", "    return s.enumerated().reduce(0)\
    \ { (acc, x) in\n        return acc + (x.offset % 2 == 0 && \"AEIOU\".contains(x.element)\
    \ ? 1 : 0)\n    }", "    return s.enumerated().reduce(0) { (result, arg1) -> Int\
    \ in\n        let (index, char) = arg1\n        return result + (index % 2 ==\
    \ 0 && char.isUppercase ? 1 : 0)\n    }", "    return s.enumerated().reduce(0)\
    \ { (acc, x) in\n        return acc + (x.offset % 2 == 0 && x.element.isUppercase\
    \ ? 1 : 0)\n    }", "    return s.enumerated().reduce(0) {\n        $0 + ($1.offset\
    \ % 2 == 0 && \"AEIOU\".contains($1.element) ? 1 : 0)\n    }", "    return s.enumerated().reduce(0)\
    \ { (acc, x) in\n        let (i, c) = x\n        return acc + (i % 2 == 0 && c.isUppercase\
    \ ? 1 : 0)\n    }", "    return s.enumerated().reduce(0) { (acc, x) in\n     \
    \   let (i, c) = x\n        return acc + (i % 2 == 0 && c.isUppercase ? 1 : 0)\n\
    \    }", "    var count = 0\n    for (i, c) in s.enumerated() {\n        if i\
    \ % 2 == 0 && c.isUppercase {\n            count += 1\n        }\n    }\n    return\
    \ count", "    var count = 0\n    for (i, c) in s.enumerated() {\n        if i\
    \ % 2 == 0 && is_upper_vowel(c) {\n            count += 1\n        }\n    }\n\
    \    return count", "    return s.enumerated().reduce(0) { (acc, x) in\n     \
    \   let (i, c) = x\n        return acc + (i % 2 == 0 && c.isUppercase ? 1 : 0)\n\
    \    }", "    var count = 0\n    for (i, c) in s.characters.enumerated() {\n \
    \       if i % 2 == 0 && \"AEIOU\".characters.contains(c) {\n            count\
    \ += 1\n        }\n    }\n    return count", "    return s.enumerated().reduce(0)\
    \ {\n        $0 + ($1.offset % 2 == 0 && \"AEIOU\".contains($1.element) ? 1 :\
    \ 0)\n    }", '    return s.enumerated().filter { $0.offset % 2 == 0 && $0.element.isUppercase
    }.count', "    return s.enumerated().reduce(0) {\n        $0 + ($1.offset % 2\
    \ == 0 && $1.element.isUppercase ? 1 : 0)\n    }", '    return 0', "    var count\
    \ = 0\n    for (i, c) in s.enumerated() {\n        if i % 2 == 0 && c.isUppercase\
    \ {\n            count += 1\n        }\n    }\n    return count", "    return\
    \ s.enumerated().reduce(0) {\n        $0 + ($1.offset % 2 == 0 && \"AEIOU\".contains($1.element)\
    \ ? 1 : 0)\n    }", "    var count = 0\n    for (i, c) in s.characters.enumerated()\
    \ {\n        if i % 2 == 0 && c.isUppercase {\n            count += 1\n      \
    \  }\n    }\n    return count", "    var count = 0\n    for (i, c) in s.enumerated()\
    \ {\n        if i % 2 == 0 && \"AEIOU\".contains(c) {\n            count += 1\n\
    \        }\n    }\n    return count", "    return s.enumerated().reduce(0) {\n\
    \        $0 + ($1.offset % 2 == 0 && \"AEIOU\".contains($1.element) ? 1 : 0)\n\
    \    }", "    var count = 0\n    for (i, c) in s.enumerated() {\n        if i\
    \ % 2 == 0 && c.isUppercase {\n            count += 1\n        }\n    }\n    return\
    \ count", "    return s.enumerated().reduce(0) { (acc, x) in\n        return x.offset\
    \ % 2 == 0 && \"AEIOU\".contains(x.element) ? acc + 1 : acc\n    }", "    var\
    \ count = 0\n    for (i, c) in s.enumerated() {\n        if i % 2 == 0 && c.isUppercase\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for (i, c) in s.enumerated() {\n        if i % 2 == 0 && c.isUppercase\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for (i, c) in s.enumerated() {\n        if i % 2 == 0 && c.isUppercase\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for (i, c) in s.characters.enumerated() {\n        if i % 2 == 0 &&\
    \ is_upper(c) {\n            count += 1\n        }\n    }\n    return count",
  "    var count = 0\n    for (i, c) in s.enumerated() {\n        if i % 2 == 0 &&\
    \ c.isUppercase {\n            count += 1\n        }\n    }\n    return count",
  "    return s.enumerated().reduce(0) {\n        $0 + ($1.offset % 2 == 0 && \"AEIOU\"\
    .contains($1.element) ? 1 : 0)\n    }", "    var count = 0\n    for (i, c) in\
    \ s.enumerated() {\n        if i % 2 == 0 && c.isUppercase {\n            count\
    \ += 1\n        }\n    }\n    return count", "    return s.enumerated().reduce(0)\
    \ { (acc, x) in\n        let (i, c) = x\n        return acc + (i % 2 == 0 && c.isUppercase\
    \ ? 1 : 0)\n    }", "    var count = 0\n    for (i, c) in s.enumerated() {\n \
    \       if i % 2 == 0 && c.isUppercase {\n            count += 1\n        }\n\
    \    }\n    return count", "    return s.enumerated().reduce(0) {\n        $0\
    \ + ($1.offset % 2 == 0 && \"AEIOU\".contains($1.element) ? 1 : 0)\n    }", " \
    \   var count = 0\n    for (i, c) in s.enumerated() {\n        if i % 2 == 0 &&\
    \ c.isUppercase {\n            count += 1\n        }\n    }\n    return count",
  "    var count = 0\n    for (i, c) in s.enumerated() {\n        if i % 2 == 0 &&\
    \ c.isUppercase {\n            count += 1\n        }\n    }\n    return count",
  "    return s.enumerated().reduce(0) { (count, next) in\n        return count +\
    \ (next.offset % 2 == 0 && \"AEIOU\".contains(next.element) ? 1 : 0)\n    }",
  "    return s.enumerated().reduce(0) {\n        return $1.offset % 2 == 0 && \"\
    AEIOU\".contains($1.element) ? $0 + 1 : $0\n    }", "    return s.enumerated().reduce(0)\
    \ { (acc, pair) in\n        let (index, char) = pair\n        return acc + (index\
    \ % 2 == 0 && char.isUppercase ? 1 : 0)\n    }", "    var count = 0\n    for (i,\
    \ c) in s.enumerated() {\n        if i % 2 == 0 && c.isUppercase {\n         \
    \   count += 1\n        }\n    }\n    return count", "    var count = 0\n    for\
    \ (i, c) in s.characters.enumerated() {\n        if i % 2 == 0 && is_upper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count", "    return\
    \ s.enumerated().reduce(0) { (acc, pair) in\n        let (index, char) = pair\n\
    \        if index % 2 == 0 && char.isUppercase {\n            return acc + 1\n\
    \        }\n        return acc\n    }", '    return s.enumerated().filter { $0.offset
    % 2 == 0 && $0.element.isUppercase }.count', "    return s.enumerated().reduce(0)\
    \ { (acc, x) in\n        if x.offset % 2 == 0 && is_upper_vowel(c: x.element)\
    \ {\n            return acc + 1\n        }\n        return acc\n    }", "    return\
    \ s.enumerated().reduce(0) { (acc, x) in\n        if x.offset % 2 == 0 && x.element.isUppercase\
    \ {\n            return acc + 1\n        }\n        return acc\n    }", "    return\
    \ s.enumerated().reduce(0) { (acc, c) in\n        return acc + (c.offset % 2 ==\
    \ 0 && c.element.isUppercase ? 1 : 0)\n    }", '    return s.enumerated().filter
    { $0.offset % 2 == 0 && $0.element.isUppercase }.count', "    var count = 0\n\
    \    for (i, c) in s.enumerated() {\n        if i % 2 == 0 && c.isUppercase {\n\
    \            count += 1\n        }\n    }\n    return count", "    return s.enumerated().reduce(0)\
    \ {\n        $0 + ($1.offset % 2 == 0 && \"AEIOU\".contains($1.element) ? 1 :\
    \ 0)\n    }", "    return s.enumerated().reduce(0) {\n        $0 + ($1.offset\
    \ % 2 == 0 && \"AEIOU\".contains($1.element) ? 1 : 0)\n    }", '    return s.enumerated().filter
    { $0.offset % 2 == 0 && $0.element.isUppercase }.count', "    return s.enumerated().reduce(0)\
    \ { (acc, pair) in\n        let (index, char) = pair\n        return acc + (index\
    \ % 2 == 0 && char.isUppercase ? 1 : 0)\n    }", "    return s.enumerated().reduce(0)\
    \ {\n        $0 + ($1.offset % 2 == 0 && \"AEIOU\".contains($1.element) ? 1 :\
    \ 0)\n    }", "    return s.enumerated().reduce(0) { (result, element) in\n  \
    \      let (index, char) = element\n        return result + (index % 2 == 0 &&\
    \ char.isUppercase ? 1 : 0)\n    }", "    return s.enumerated().reduce(0) {\n\
    \        $0 + ($1.offset % 2 == 0 && $1.element.isUppercase ? 1 : 0)\n    }",
  "    var count = 0\n    for (i, c) in s.enumerated() {\n        if i % 2 == 0 &&\
    \ c.isUppercase {\n            count += 1\n        }\n    }\n    return count",
  "    return s.enumerated().reduce(0) {\n        $0 + ($1.offset % 2 == 0 && $1.element.isUppercase\
    \ ? 1 : 0)\n    }", "    var count = 0\n    for (i, c) in s.enumerated() {\n \
    \       if i % 2 == 0 && c.isUppercase {\n            count += 1\n        }\n\
    \    }\n    return count", "    var count = 0\n    for (i, c) in s.enumerated()\
    \ {\n        if i % 2 == 0 && c.isUppercase {\n            count += 1\n      \
    \  }\n    }\n    return count", '    return 0', '    return s.enumerated().filter
    { $0.offset % 2 == 0 && $0.element.isUppercase }.count', "    return s.enumerated().reduce(0)\
    \ {\n        $0 + ($1.offset % 2 == 0 && $1.element.isUppercase ? 1 : 0)\n   \
    \ }", '    return s.enumerated().filter { $0.offset % 2 == 0 && $0.element.isUppercase
    }.count', '    return s.enumerated().filter { $0.offset % 2 == 0 && $0.element.isUppercase
    }.count', "    return s.enumerated().reduce(0) { (acc, x) in\n        let (i,\
    \ c) = x\n        return acc + (i % 2 == 0 && c.isUppercase ? 1 : 0)\n    }",
  "    var count = 0\n    for (i, c) in s.enumerated() {\n        if i % 2 == 0 &&\
    \ c.isUppercase {\n            count += 1\n        }\n    }\n    return count",
  "    return s.enumerated().reduce(0) {\n        $0 + ($1.offset % 2 == 0 && $1.element.isUppercase\
    \ ? 1 : 0)\n    }", "    return s.enumerated().reduce(0) { (acc, x) in\n     \
    \   if x.offset % 2 == 0 && is_upper_vowel(c: x.element) {\n            return\
    \ acc + 1\n        }\n        return acc\n    }", "    var count = 0\n    for\
    \ (i, c) in s.enumerated() {\n        if i % 2 == 0 && c.isUppercase {\n     \
    \       count += 1\n        }\n    }\n    return count", "    var count = 0\n\
    \    for (i, c) in s.enumerated() {\n        if i % 2 == 0 && c.isUppercase {\n\
    \            count += 1\n        }\n    }\n    return count", '    return s.enumerated().filter
    { $0.offset % 2 == 0 && $0.element.isUppercase }.count', "    var count = 0\n\
    \    for (i, c) in s.enumerated() {\n        if i % 2 == 0 && is_upper_vowel(c)\
    \ {\n            count += 1\n        }\n    }\n    return count", "    return\
    \ s.enumerated().reduce(0) { (result, tuple) in\n        let (index, char) = tuple\n\
    \        return result + (index % 2 == 0 && char.isUppercase ? 1 : 0)\n    }",
  "    return s.enumerated().reduce(0) { (count, pair) in\n        return pair.offset\
    \ % 2 == 0 && pair.element.isUppercase ? count + 1 : count\n    }", "    return\
    \ s.enumerated().reduce(0) { (acc, x) in\n        let (i, c) = x\n        return\
    \ acc + (i % 2 == 0 && c.isUppercase ? 1 : 0)\n    }", "    var count = 0\n  \
    \  for (i, c) in s.enumerated() {\n        if i % 2 == 0 && c.isUppercase {\n\
    \            count += 1\n        }\n    }\n    return count"]
stop_tokens:
- "\n}"
