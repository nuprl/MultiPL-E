language: swift
name: HumanEval_113_odd_count
results:
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map {\n        String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpfk3derql/tmpfk3derql.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab32bfbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab32bcb4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab32bcb4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab32bcb37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfk3derql                        0x00005591827a48f6 <unavailable> + 6390

    5    libc.so.6                          0x00002ab32c1a9460 __libc_start_main +
    245

    6    tmpfk3derql                        0x00005591827a44c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd()\
    \ }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    assert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm_qysv9.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd() }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { $0.filter { Int(String($0))! %\
    \ 2 != 0 }.count.description }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpb3100bfq/tmpb3100bfq.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8feba99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8feb790b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8feb790988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8feb78f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb3100bfq                        0x000055aa19d0f8c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b8febc85460 __libc_start_main +
    245

    6    tmpb3100bfq                        0x000055aa19d0f499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd()\
    \ }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    assert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm_qysv9.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd() }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd()\
    \ }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    assert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm_qysv9.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd() }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map {\n        $0.filter { Int(String($0))!\
    \ % 2 != 0 }.count.description\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the\
    \ number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\",\
    \ \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpy4u7hst7/tmpy4u7hst7.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d6c0dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d6bdd1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d6bdd1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d6bdd07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy4u7hst7                        0x0000561a5ac118c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b4d6c2c6460 __libc_start_main +
    245

    6    tmpy4u7hst7                        0x0000561a5ac11499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map {\n        $0.filter { $0.isOdd\
    \ }.count.description\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdo778phh.swift:8:24: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n        $0.filter { $0.isOdd }.count.description\n\
    \                    ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map {\n        $0.filter { Int(String($0))!\
    \ % 2 != 0 }.count.description\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the\
    \ number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\",\
    \ \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpy4u7hst7/tmpy4u7hst7.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d6c0dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d6bdd1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d6bdd1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d6bdd07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy4u7hst7                        0x0000561a5ac118c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b4d6c2c6460 __libc_start_main +
    245

    6    tmpy4u7hst7                        0x0000561a5ac11499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map {\n        $0.filter { $0.isOdd\
    \ }.count.description\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdo778phh.swift:8:24: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n        $0.filter { $0.isOdd }.count.description\n\
    \                    ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { $0.filter { Int(String($0))! %\
    \ 2 != 0 }.count.description }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpb3100bfq/tmpb3100bfq.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8feba99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8feb790b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8feb790988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8feb78f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb3100bfq                        0x000055aa19d0f8c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b8febc85460 __libc_start_main +
    245

    6    tmpb3100bfq                        0x000055aa19d0f499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map {\n        $0.filter { $0.wholeNumberValue!\
    \ % 2 == 1 }.count.description\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the\
    \ number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\",\
    \ \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpdvvjt6yx/tmpdvvjt6yx.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d0efac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d0bf1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d0bf1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d0bf07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdvvjt6yx                        0x000056403901a816 <unavailable> + 6166

    5    libc.so.6                          0x00002b22d10e6460 __libc_start_main +
    245

    6    tmpdvvjt6yx                        0x000056403901a3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map {\n        $0.filter { Int(String($0))!\
    \ % 2 == 1 }.count\n    }.map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n\
    \ the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmp_oa_4e37/tmp_oa_4e37.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a15994c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a1568bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a1568b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a1568a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_oa_4e37                        0x000055c65ef348f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b4a15b80460 __libc_start_main +
    245

    6    tmp_oa_4e37                        0x000055c65ef344c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { $0.filter { Int(String($0))! %\
    \ 2 != 0 }.count.description }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpb3100bfq/tmpb3100bfq.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8feba99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8feb790b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8feb790988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8feb78f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb3100bfq                        0x000055aa19d0f8c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b8febc85460 __libc_start_main +
    245

    6    tmpb3100bfq                        0x000055aa19d0f499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isNumber\
    \ && $0.isOdd }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpn2uwlhoh.swift:7:59: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isNumber && $0.isOdd }.count) }\n                                       \
    \                ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd }.count)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"])\
    \ == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmppff5vqn3.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map {\n        $0.filter {\n       \
    \     Int(String($0))! % 2 == 1\n        }.count.description\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmv62ge0d/tmpmv62ge0d.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8d25e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8d22dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8d22da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8d22d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmv62ge0d                        0x000055b0fb2dd8c6 <unavailable> + 6342

    5    libc.so.6                          0x00002ae8d27cf460 __libc_start_main +
    245

    6    tmpmv62ge0d                        0x000055b0fb2dd499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { $0.filter { $0.isOdd }.count.description\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"])\
    \ == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyb744mo4.swift:7:37: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { $0.filter { $0.isOdd\
    \ }.count.description }\n                                 ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd }.count)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"])\
    \ == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmppff5vqn3.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd }.count)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"])\
    \ == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmppff5vqn3.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd }.count)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"])\
    \ == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmppff5vqn3.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map {\n        $0.filter { Int(String($0))!\
    \ % 2 == 1 }.count.description\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the\
    \ number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\",\
    \ \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmphr3nabqo/tmphr3nabqo.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec0617cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec05e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec05e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec05e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphr3nabqo                        0x0000555b133b48c6 <unavailable> + 6342

    5    libc.so.6                          0x00002aec06368460 __libc_start_main +
    245

    6    tmphr3nabqo                        0x0000555b133b4499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { $0.filter { Int(String($0))! %\
    \ 2 != 0 }.count.description }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpb3100bfq/tmpb3100bfq.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8feba99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8feb790b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8feb790988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8feb78f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb3100bfq                        0x000055aa19d0f8c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b8febc85460 __libc_start_main +
    245

    6    tmpb3100bfq                        0x000055aa19d0f499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map {\n        $0.filter {\n       \
    \     Int($0)! % 2 == 1\n        }.count.description\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2ol2bz_v.swift:9:17: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'String'\n            Int($0)! %\
    \ 2 == 1\n                ^\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { $0.filter { Int(String($0))! %\
    \ 2 != 0 }.count.description }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpb3100bfq/tmpb3100bfq.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8feba99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8feb790b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8feb790988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8feb78f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb3100bfq                        0x000055aa19d0f8c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b8febc85460 __libc_start_main +
    245

    6    tmpb3100bfq                        0x000055aa19d0f499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd }.count)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"])\
    \ == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmppff5vqn3.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { $0.filter { $0.wholeNumberValue!\
    \ % 2 == 1 }.count.description }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmp086pnwcg/tmp086pnwcg.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96bf7d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96bf4cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96bf4ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96bf4c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp086pnwcg                        0x000055b1a1e83816 <unavailable> + 6166

    5    libc.so.6                          0x00002b96bf9bf460 __libc_start_main +
    245

    6    tmp086pnwcg                        0x000055b1a1e833e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { $0.filter { Int($0)! % 2 != 0\
    \ }.count.description }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpifm1v4ka.swift:7:38: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'String'\n    return lst.map { $0.filter\
    \ { Int($0)! % 2 != 0 }.count.description }\n                                \
    \     ^\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd }.count)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"])\
    \ == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmppff5vqn3.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { $0.filter { Int(String($0))! %\
    \ 2 != 0 }.count.description }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpb3100bfq/tmpb3100bfq.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8feba99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8feb790b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8feb790988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8feb78f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb3100bfq                        0x000055aa19d0f8c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b8febc85460 __libc_start_main +
    245

    6    tmpb3100bfq                        0x000055aa19d0f499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd }.count)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"])\
    \ == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmppff5vqn3.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd()\
    \ }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    assert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm_qysv9.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd() }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map {\n        $0.filter { Int(String($0))!\
    \ % 2 == 1 }.count.description\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the\
    \ number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\",\
    \ \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmphr3nabqo/tmphr3nabqo.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec0617cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec05e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec05e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec05e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphr3nabqo                        0x0000555b133b48c6 <unavailable> + 6342

    5    libc.so.6                          0x00002aec06368460 __libc_start_main +
    245

    6    tmphr3nabqo                        0x0000555b133b4499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd()\
    \ }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    assert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm_qysv9.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd() }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { $0.filter { Int(String($0))! %\
    \ 2 != 0 }.count.description }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpb3100bfq/tmpb3100bfq.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8feba99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8feb790b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8feb790988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8feb78f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb3100bfq                        0x000055aa19d0f8c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b8febc85460 __libc_start_main +
    245

    6    tmpb3100bfq                        0x000055aa19d0f499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map {\n        $0.filter { Int(String($0))!\
    \ % 2 == 1 }.count.description\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the\
    \ number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\",\
    \ \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmphr3nabqo/tmphr3nabqo.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec0617cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec05e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec05e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec05e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphr3nabqo                        0x0000555b133b48c6 <unavailable> + 6342

    5    libc.so.6                          0x00002aec06368460 __libc_start_main +
    245

    6    tmphr3nabqo                        0x0000555b133b4499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map {\n        $0.filter { Int(String($0))!\
    \ % 2 == 1 }.count.description\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the\
    \ number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\",\
    \ \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmphr3nabqo/tmphr3nabqo.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec0617cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec05e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec05e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec05e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphr3nabqo                        0x0000555b133b48c6 <unavailable> + 6342

    5    libc.so.6                          0x00002aec06368460 __libc_start_main +
    245

    6    tmphr3nabqo                        0x0000555b133b4499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map {\n        $0.filter {\n       \
    \     $0.wholeNumberValue?.isMultiple(of: 2) == false\n        }.count.description\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpfc9ggurg/tmpfc9ggurg.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9222b9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9222893b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9222893988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92228927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfc9ggurg                        0x000055d6d6d9a886 <unavailable> + 6278

    5    libc.so.6                          0x00002b9222d88460 __libc_start_main +
    245

    6    tmpfc9ggurg                        0x000055d6d6d9a459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map {\n        $0.filter {\n       \
    \     $0.wholeNumberValue?.isMultiple(of: 2) == false\n        }.count.description\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpfc9ggurg/tmpfc9ggurg.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9222b9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9222893b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9222893988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92228927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfc9ggurg                        0x000055d6d6d9a886 <unavailable> + 6278

    5    libc.so.6                          0x00002b9222d88460 __libc_start_main +
    245

    6    tmpfc9ggurg                        0x000055d6d6d9a459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map {\n        $0.filter {\n       \
    \     Int(String($0))! % 2 == 1\n        }.count.description\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmv62ge0d/tmpmv62ge0d.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8d25e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8d22dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8d22da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8d22d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmv62ge0d                        0x000055b0fb2dd8c6 <unavailable> + 6342

    5    libc.so.6                          0x00002ae8d27cf460 __libc_start_main +
    245

    6    tmpmv62ge0d                        0x000055b0fb2dd499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd()\
    \ }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    assert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm_qysv9.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd() }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map {\n        $0.filter { $0.isOdd()\
    \ }.count.description\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpuflhv35n.swift:8:24: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n        $0.filter { $0.isOdd() }.count.description\n\
    \                    ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd()\
    \ }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    assert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm_qysv9.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd() }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map {\n        $0.filter { $0.wholeNumberValue!\
    \ % 2 == 1 }.count.description\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the\
    \ number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\",\
    \ \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpdvvjt6yx/tmpdvvjt6yx.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d0efac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d0bf1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d0bf1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d0bf07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdvvjt6yx                        0x000056403901a816 <unavailable> + 6166

    5    libc.so.6                          0x00002b22d10e6460 __libc_start_main +
    245

    6    tmpdvvjt6yx                        0x000056403901a3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd }.count)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"])\
    \ == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmppff5vqn3.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd }.count)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"])\
    \ == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmppff5vqn3.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd()\
    \ }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    assert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm_qysv9.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd() }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd()\
    \ }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    assert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm_qysv9.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd() }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { $0.filter { Int($0.description)!\
    \ % 2 != 0 }.count.description }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmlgp7qms/tmpmlgp7qms.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30d51d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30d4eccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30d4ecc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30d4ecb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmlgp7qms                        0x0000560cfd29b8c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b30d53c1460 __libc_start_main +
    245

    6    tmpmlgp7qms                        0x0000560cfd29b499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { $0.filter { $0.wholeNumberValue!\
    \ % 2 == 1 }.count.description }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmp086pnwcg/tmp086pnwcg.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96bf7d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96bf4cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96bf4ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96bf4c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp086pnwcg                        0x000055b1a1e83816 <unavailable> + 6166

    5    libc.so.6                          0x00002b96bf9bf460 __libc_start_main +
    245

    6    tmp086pnwcg                        0x000055b1a1e833e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map {\n        $0.filter { $0.wholeNumberValue!\
    \ % 2 == 1 }.count.description\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the\
    \ number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\",\
    \ \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpdvvjt6yx/tmpdvvjt6yx.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d0efac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d0bf1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d0bf1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d0bf07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdvvjt6yx                        0x000056403901a816 <unavailable> + 6166

    5    libc.so.6                          0x00002b22d10e6460 __libc_start_main +
    245

    6    tmpdvvjt6yx                        0x000056403901a3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd }.count)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"])\
    \ == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmppff5vqn3.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd()\
    \ }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    assert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm_qysv9.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd() }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map {\n        $0.filter { Int(String($0))!\
    \ % 2 == 1 }.count.description\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the\
    \ number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\",\
    \ \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmphr3nabqo/tmphr3nabqo.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec0617cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec05e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec05e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec05e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphr3nabqo                        0x0000555b133b48c6 <unavailable> + 6342

    5    libc.so.6                          0x00002aec06368460 __libc_start_main +
    245

    6    tmphr3nabqo                        0x0000555b133b4499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd }.count)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"])\
    \ == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmppff5vqn3.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { $0.filter { Int(String($0))! %\
    \ 2 != 0 }.count.description }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpb3100bfq/tmpb3100bfq.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8feba99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8feb790b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8feb790988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8feb78f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb3100bfq                        0x000055aa19d0f8c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b8febc85460 __libc_start_main +
    245

    6    tmpb3100bfq                        0x000055aa19d0f499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd }.count)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"])\
    \ == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmppff5vqn3.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { (str) -> String in\n        return\
    \ String(str.filter { (char) -> Bool in\n            return Int(String(char))!\
    \ % 2 == 1\n        }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the\
    \ number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\",\
    \ \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpo6cn51la/tmpo6cn51la.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad64420fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad643f06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad643f06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad643f057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo6cn51la                        0x0000556f6bc048f6 <unavailable> + 6390

    5    libc.so.6                          0x00002ad6443fb460 __libc_start_main +
    245

    6    tmpo6cn51la                        0x0000556f6bc044c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map {\n        $0.filter { Int(String($0))!\
    \ % 2 != 0 }.count.description\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the\
    \ number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\",\
    \ \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpy4u7hst7/tmpy4u7hst7.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d6c0dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d6bdd1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d6bdd1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d6bdd07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy4u7hst7                        0x0000561a5ac118c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b4d6c2c6460 __libc_start_main +
    245

    6    tmpy4u7hst7                        0x0000561a5ac11499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map {\n        $0.filter { Int(String($0))!\
    \ % 2 == 1 }.count\n    }.map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n\
    \ the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmp_oa_4e37/tmp_oa_4e37.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a15994c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a1568bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a1568b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a1568a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_oa_4e37                        0x000055c65ef348f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b4a15b80460 __libc_start_main +
    245

    6    tmp_oa_4e37                        0x000055c65ef344c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd()\
    \ }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    assert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm_qysv9.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd() }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { $0.filter { $0.wholeNumberValue!\
    \ % 2 == 1 }.count.description }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmp086pnwcg/tmp086pnwcg.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96bf7d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96bf4cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96bf4ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96bf4c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp086pnwcg                        0x000055b1a1e83816 <unavailable> + 6166

    5    libc.so.6                          0x00002b96bf9bf460 __libc_start_main +
    245

    6    tmp086pnwcg                        0x000055b1a1e833e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd()\
    \ }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    assert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm_qysv9.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd() }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { $0.filter { Int(String($0))! %\
    \ 2 != 0 }.count.description }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpb3100bfq/tmpb3100bfq.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8feba99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8feb790b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8feb790988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8feb78f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb3100bfq                        0x000055aa19d0f8c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b8febc85460 __libc_start_main +
    245

    6    tmpb3100bfq                        0x000055aa19d0f499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { $0.filter { Int(String($0))! %\
    \ 2 != 0 }.count.description }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpb3100bfq/tmpb3100bfq.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8feba99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8feb790b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8feb790988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8feb78f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb3100bfq                        0x000055aa19d0f8c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b8febc85460 __libc_start_main +
    245

    6    tmpb3100bfq                        0x000055aa19d0f499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map {\n        $0.filter { Int(String($0))!\
    \ % 2 == 1 }.count.description\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the\
    \ number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\",\
    \ \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmphr3nabqo/tmphr3nabqo.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec0617cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec05e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec05e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec05e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphr3nabqo                        0x0000555b133b48c6 <unavailable> + 6342

    5    libc.so.6                          0x00002aec06368460 __libc_start_main +
    245

    6    tmphr3nabqo                        0x0000555b133b4499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd }.count)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"])\
    \ == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmppff5vqn3.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter{ $0.isOdd }.count)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"])\
    \ == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpd7p3if9p.swift:7:43: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter{ $0.isOdd\
    \ }.count) }\n                                       ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { $0.filter { Int(String($0))! %\
    \ 2 != 0 }.count.description }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpb3100bfq/tmpb3100bfq.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8feba99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8feb790b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8feb790988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8feb78f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb3100bfq                        0x000055aa19d0f8c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b8febc85460 __libc_start_main +
    245

    6    tmpb3100bfq                        0x000055aa19d0f499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd }.count)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"])\
    \ == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmppff5vqn3.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { $0.filter { Int(String($0))! %\
    \ 2 != 0 }.count.description }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpb3100bfq/tmpb3100bfq.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8feba99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8feb790b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8feb790988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8feb78f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb3100bfq                        0x000055aa19d0f8c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b8febc85460 __libc_start_main +
    245

    6    tmpb3100bfq                        0x000055aa19d0f499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { $0.filter { $0.wholeNumberValue!\
    \ % 2 == 1 }.count.description }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmp086pnwcg/tmp086pnwcg.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96bf7d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96bf4cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96bf4ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96bf4c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp086pnwcg                        0x000055b1a1e83816 <unavailable> + 6166

    5    libc.so.6                          0x00002b96bf9bf460 __libc_start_main +
    245

    6    tmp086pnwcg                        0x000055b1a1e833e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { $0.filter { $0.wholeNumberValue!\
    \ % 2 == 1 }.count.description }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmp086pnwcg/tmp086pnwcg.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96bf7d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96bf4cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96bf4ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96bf4c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp086pnwcg                        0x000055b1a1e83816 <unavailable> + 6166

    5    libc.so.6                          0x00002b96bf9bf460 __libc_start_main +
    245

    6    tmp086pnwcg                        0x000055b1a1e833e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { $0.filter { Int(String($0))! %\
    \ 2 != 0 }.count.description }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpb3100bfq/tmpb3100bfq.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8feba99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8feb790b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8feb790988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8feb78f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb3100bfq                        0x000055aa19d0f8c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b8febc85460 __libc_start_main +
    245

    6    tmpb3100bfq                        0x000055aa19d0f499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map {\n        $0.filter { $0 % 2 ==\
    \ 1 }.count.description\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2hhkc017.swift:8:21: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        $0.filter { $0 %\
    \ 2 == 1 }.count.description\n                    ^\n"
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { $0.filter { $0.isOdd }.count.description\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"])\
    \ == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyb744mo4.swift:7:37: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { $0.filter { $0.isOdd\
    \ }.count.description }\n                                 ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { $0.filter { Int(String($0))! %\
    \ 2 != 0 }.count.description }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpb3100bfq/tmpb3100bfq.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8feba99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8feb790b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8feb790988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8feb78f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb3100bfq                        0x000055aa19d0f8c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b8febc85460 __libc_start_main +
    245

    6    tmpb3100bfq                        0x000055aa19d0f499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd }.count)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"])\
    \ == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmppff5vqn3.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map {\n        String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpfk3derql/tmpfk3derql.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab32bfbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab32bcb4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab32bcb4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab32bcb37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfk3derql                        0x00005591827a48f6 <unavailable> + 6390

    5    libc.so.6                          0x00002ab32c1a9460 __libc_start_main +
    245

    6    tmpfk3derql                        0x00005591827a44c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map {\n        $0.filter { Int(String($0))!\
    \ % 2 == 1 }.count.description\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the\
    \ number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\",\
    \ \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmphr3nabqo/tmphr3nabqo.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec0617cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec05e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec05e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec05e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphr3nabqo                        0x0000555b133b48c6 <unavailable> + 6342

    5    libc.so.6                          0x00002aec06368460 __libc_start_main +
    245

    6    tmphr3nabqo                        0x0000555b133b4499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd }.count)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"])\
    \ == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmppff5vqn3.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd }.count)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"])\
    \ == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmppff5vqn3.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { $0.filter { $0.isOdd }.count.description\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"])\
    \ == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyb744mo4.swift:7:37: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { $0.filter { $0.isOdd\
    \ }.count.description }\n                                 ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { $0.filter { $0.isOdd() }.count.description\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"])\
    \ == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpztz73ert.swift:7:37: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { $0.filter { $0.isOdd()\
    \ }.count.description }\n                                 ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd }.count)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"])\
    \ == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmppff5vqn3.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.wholeNumberValue!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmph7sovw8f/tmph7sovw8f.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfc2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfc2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfc2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sovw8f                        0x000055b945ee7846 <unavailable> + 6214

    5    libc.so.6                          0x00002b6cfc7ab460 __libc_start_main +
    245

    6    tmph7sovw8f                        0x000055b945ee7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd }.count)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"])\
    \ == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmppff5vqn3.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { $0.filter { $0.isOdd }.count.description\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"])\
    \ == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyb744mo4.swift:7:37: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { $0.filter { $0.isOdd\
    \ }.count.description }\n                                 ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { $0.filter { Int(String($0))! %\
    \ 2 != 0 }.count.description }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpb3100bfq/tmpb3100bfq.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8feba99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8feb790b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8feb790988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8feb78f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb3100bfq                        0x000055aa19d0f8c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b8febc85460 __libc_start_main +
    245

    6    tmpb3100bfq                        0x000055aa19d0f499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd }.count)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"])\
    \ == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmppff5vqn3.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: 1
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { $0.isOdd }.count)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"])\
    \ == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmppff5vqn3.swift:7:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isOdd'\n    return lst.map { String($0.filter {\
    \ $0.isOdd }.count) }\n                                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979635
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { $0.filter { $0.wholeNumberValue!\
    \ % 2 == 1 }.count.description }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmp086pnwcg/tmp086pnwcg.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96bf7d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96bf4cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96bf4ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96bf4c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp086pnwcg                        0x000055b1a1e83816 <unavailable> + 6166

    5    libc.so.6                          0x00002b96bf9bf460 __libc_start_main +
    245

    6    tmp086pnwcg                        0x000055b1a1e833e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
- exit_code: -4
  program: "\n/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n    return lst.map { String($0.filter { Int(String($0))!\
    \ % 2 != 0 }.count) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: Exception
  stderr: 'tmpmownfjml/tmpmownfjml.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ddca80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ddc777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ddc777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ddc7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmownfjml                        0x000055c621afd8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b2ddcc6c460 __libc_start_main +
    245

    6    tmpmownfjml                        0x000055c621afd4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979636
