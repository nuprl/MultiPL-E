language: swift
name: HumanEval_76_is_simple_power
results:
- exit_code: -1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i <= x {\n        if\
    \ i == x {\n            result = true\n        }\n        i *= n\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978923
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while pow(Double(n), Double(i)) <= Double(x) {\n\
    \        if pow(Double(n), Double(i)) == Double(x) {\n            return true\n\
    \        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuj19ulyc.swift:8:11: error: cannot find 'pow' in scope\n    while\
    \ pow(Double(n), Double(i)) <= Double(x) {\n          ^~~\n/tmp/tmpuj19ulyc.swift:9:12:\
    \ error: cannot find 'pow' in scope\n        if pow(Double(n), Double(i)) == Double(x)\
    \ {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i < x {\n        i *= n\n    }\n    return\
    \ i == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var power = n\n    while power < x {\n        power *= n\n    }\n\
    \    return power == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpgybn1nuy/tmpgybn1nuy.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b0341ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b03111b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b03111988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b031107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgybn1nuy                        0x000055562deb1626 <unavailable> + 5670

    5    libc.so.6                          0x00002b4b03606460 __libc_start_main +
    245

    6    tmpgybn1nuy                        0x000055562deb0e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i < x {\n        if\
    \ pow(Double(n), Double(i)) == Double(x) {\n            result = true\n      \
    \  }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmptaci_lik.swift:10:12: error: cannot find 'pow' in scope\n     \
    \   if pow(Double(n), Double(i)) == Double(x) {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    var result = 1\n    while result < x {\n        result\
    \ = n * i\n        i += 1\n    }\n    return result == x\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpp5dlaetr/tmpp5dlaetr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57897e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57894ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57894dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57894dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp5dlaetr                        0x000055c205b80417 <unavailable> + 5143

    5    libc.so.6                          0x00002b57899d2460 __libc_start_main +
    245

    6    tmpp5dlaetr                        0x000055c205b7fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while pow(Double(n), Double(i)) <= Double(x) {\n\
    \        if pow(Double(n), Double(i)) == Double(x) {\n            return true\n\
    \        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuj19ulyc.swift:8:11: error: cannot find 'pow' in scope\n    while\
    \ pow(Double(n), Double(i)) <= Double(x) {\n          ^~~\n/tmp/tmpuj19ulyc.swift:9:12:\
    \ error: cannot find 'pow' in scope\n        if pow(Double(n), Double(i)) == Double(x)\
    \ {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: -1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i <= x {\n        if\
    \ i == x {\n            result = true\n        }\n        i *= n\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978923
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var power = 1\n    while power < x {\n        power *= n\n    }\n\
    \    return power == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 0\n    var result = 0\n    while result < x {\n        result\
    \ = Int(pow(Double(n), Double(i)))\n        if result == x {\n            return\
    \ true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpas50rlb_.swift:10:22: error: cannot find 'pow' in scope\n     \
    \   result = Int(pow(Double(n), Double(i)))\n                     ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i < x {\n        if\
    \ pow(Double(n), Double(i)) == Double(x) {\n            result = true\n      \
    \  }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmptaci_lik.swift:10:12: error: cannot find 'pow' in scope\n     \
    \   if pow(Double(n), Double(i)) == Double(x) {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i < x {\n        if\
    \ pow(Double(n), Double(i)) == Double(x) {\n            result = true\n      \
    \  }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmptaci_lik.swift:10:12: error: cannot find 'pow' in scope\n     \
    \   if pow(Double(n), Double(i)) == Double(x) {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: -1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i <= x {\n        if\
    \ i == x {\n            result = true\n        }\n        i *= n\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978923
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i < x {\n        i *= n\n    }\n    return\
    \ i == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var power = 1\n    while power < x {\n        power *= n\n    }\n\
    \    return power == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    return pow(Double(n), Double(x).log(n)) == Double(x)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp2w6sfi0c.swift:7:12: error: cannot find 'pow' in scope\n    return\
    \ pow(Double(n), Double(x).log(n)) == Double(x)\n           ^~~\n/tmp/tmp2w6sfi0c.swift:7:37:\
    \ error: value of type 'Double' has no member 'log'\n    return pow(Double(n),\
    \ Double(x).log(n)) == Double(x)\n                          ~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    return pow(Double(n), Double(Int(log(Double(x)) / log(Double(n)))))\
    \ == Double(x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpr5rhtk7l.swift:7:12: error: cannot find 'pow' in scope\n    return\
    \ pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))) == Double(x)\n\
    \           ^~~\n/tmp/tmpr5rhtk7l.swift:7:38: error: cannot find 'log' in scope\n\
    \    return pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))) == Double(x)\n\
    \                                     ^~~\n/tmp/tmpr5rhtk7l.swift:7:55: error:\
    \ cannot find 'log' in scope\n    return pow(Double(n), Double(Int(log(Double(x))\
    \ / log(Double(n))))) == Double(x)\n                                         \
    \             ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if x == 1 {\n        return true\n    }\n    var i = 1\n    while\
    \ i <= x {\n        if i == x {\n            return true\n        }\n        i\
    \ *= n\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    if x == 1 {\n        result = true\n   \
    \ } else {\n        var i = 2\n        while i < x {\n            if pow(Double(n),\
    \ Double(i)) == Double(x) {\n                result = true\n                break\n\
    \            }\n            i += 1\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmzvsdq03.swift:13:16: error: cannot find 'pow' in scope\n     \
    \       if pow(Double(n), Double(i)) == Double(x) {\n               ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if x == 1 {\n        return true\n    }\n    var result = n\n  \
    \  while result < x {\n        result *= n\n    }\n    return result == x\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    return x == Int(pow(Double(n), Double(log(Double(x)) / log(Double(n)))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5uz64cx7.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ x == Int(pow(Double(n), Double(log(Double(x)) / log(Double(n)))))\n        \
    \            ^~~\n/tmp/tmp5uz64cx7.swift:7:43: error: cannot find 'log' in scope\n\
    \    return x == Int(pow(Double(n), Double(log(Double(x)) / log(Double(n)))))\n\
    \                                          ^~~\n/tmp/tmp5uz64cx7.swift:7:60: error:\
    \ cannot find 'log' in scope\n    return x == Int(pow(Double(n), Double(log(Double(x))\
    \ / log(Double(n)))))\n                                                      \
    \     ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    return (x % n == 0) && (x / n % n == 0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmptzjq02zn/tmptzjq02zn.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b63827f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63824eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b63824ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63824ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptzjq02zn                        0x0000560889d5b4a7 <unavailable> + 5287

    5    libc.so.6                          0x00002b63829e3460 __libc_start_main +
    245

    6    tmptzjq02zn                        0x0000560889d5aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 0\n    while i < x {\n        if n ** i == x {\n       \
    \     return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpsqvdw5qd.swift:9:14: error: cannot find operator '**' in scope\n\
    \        if n ** i == x {\n             ^~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    for i in 1...x {\n        if pow(Double(n),\
    \ Double(i)) == Double(x) {\n            result = true\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp42sjoq50.swift:9:12: error: cannot find 'pow' in scope\n      \
    \  if pow(Double(n), Double(i)) == Double(x) {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    return (x > 0 && x % n == 0 && x / n % n == 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmphpfl8jqk/tmphpfl8jqk.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6f8425c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6f811cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6f811c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6f811b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphpfl8jqk                        0x000055ebc74984a7 <unavailable> + 5287

    5    libc.so.6                          0x00002ab6f8611460 __libc_start_main +
    245

    6    tmphpfl8jqk                        0x000055ebc7497ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var power = 1\n    while power < x {\n        power *= n\n    }\n\
    \    return power == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while pow(Double(n), Double(i)) <= Double(x) {\n\
    \        if pow(Double(n), Double(i)) == Double(x) {\n            return true\n\
    \        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuj19ulyc.swift:8:11: error: cannot find 'pow' in scope\n    while\
    \ pow(Double(n), Double(i)) <= Double(x) {\n          ^~~\n/tmp/tmpuj19ulyc.swift:9:12:\
    \ error: cannot find 'pow' in scope\n        if pow(Double(n), Double(i)) == Double(x)\
    \ {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: -1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i <= x {\n        if\
    \ i == x {\n            result = true\n        }\n        i *= n\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978923
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var power = 1\n    while power < x {\n        power *= n\n    }\n\
    \    return power == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqlawcc4c.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n   \
    \                 ^~~\n/tmp/tmpqlawcc4c.swift:7:47: error: cannot find 'log' in\
    \ scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n\
    \                                              ^~~\n/tmp/tmpqlawcc4c.swift:7:64:\
    \ error: cannot find 'log' in scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x))\
    \ / log(Double(n))))))\n                                                     \
    \          ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var num = x\n    var power = n\n    while num % power == 0 {\n \
    \       num /= power\n        if num == 1 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp9vjohrxc/tmp9vjohrxc.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf2ae0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf2ab01b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf2ab01988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf2ab007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9vjohrxc                        0x000055cd0ed476b6 <unavailable> + 5814

    5    libc.so.6                          0x00002acf2aff6460 __libc_start_main +
    245

    6    tmp9vjohrxc                        0x000055cd0ed46ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i < x {\n        i *= n\n    }\n    return\
    \ i == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqlawcc4c.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n   \
    \                 ^~~\n/tmp/tmpqlawcc4c.swift:7:47: error: cannot find 'log' in\
    \ scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n\
    \                                              ^~~\n/tmp/tmpqlawcc4c.swift:7:64:\
    \ error: cannot find 'log' in scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x))\
    \ / log(Double(n))))))\n                                                     \
    \          ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    for i in 1...x {\n        if pow(Double(n), Double(i)) == Double(x)\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpo8ty6895.swift:8:12: error: cannot find 'pow' in scope\n      \
    \  if pow(Double(n), Double(i)) == Double(x) {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i < x {\n        if\
    \ Int(pow(Double(n), Double(i))) == x {\n            result = true\n        }\n\
    \        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpoqct0o1e.swift:10:16: error: cannot find 'pow' in scope\n     \
    \   if Int(pow(Double(n), Double(i))) == x {\n               ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqlawcc4c.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n   \
    \                 ^~~\n/tmp/tmpqlawcc4c.swift:7:47: error: cannot find 'log' in\
    \ scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n\
    \                                              ^~~\n/tmp/tmpqlawcc4c.swift:7:64:\
    \ error: cannot find 'log' in scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x))\
    \ / log(Double(n))))))\n                                                     \
    \          ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i <= x {\n        if i == x {\n           \
    \ return true\n        }\n        i *= n\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var power = 1\n    while power < x {\n        power *= n\n    }\n\
    \    return power == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var x = x\n    var n = n\n    var i = 1\n    while x > 1 {\n   \
    \     if x % n != 0 {\n            return false\n        }\n        x /= n\n \
    \       i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var power = n\n    while power < x {\n        power *= n\n    }\n\
    \    return power == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpgybn1nuy/tmpgybn1nuy.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b0341ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b03111b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b03111988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b031107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgybn1nuy                        0x000055562deb1626 <unavailable> + 5670

    5    libc.so.6                          0x00002b4b03606460 __libc_start_main +
    245

    6    tmpgybn1nuy                        0x000055562deb0e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqlawcc4c.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n   \
    \                 ^~~\n/tmp/tmpqlawcc4c.swift:7:47: error: cannot find 'log' in\
    \ scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n\
    \                                              ^~~\n/tmp/tmpqlawcc4c.swift:7:64:\
    \ error: cannot find 'log' in scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x))\
    \ / log(Double(n))))))\n                                                     \
    \          ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i < x {\n        if\
    \ pow(Double(n), Double(i)) == Double(x) {\n            result = true\n      \
    \  }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmptaci_lik.swift:10:12: error: cannot find 'pow' in scope\n     \
    \   if pow(Double(n), Double(i)) == Double(x) {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if x == 1 {\n        return true\n    }\n    var i = 2\n    while\
    \ i <= x {\n        if i == x {\n            return true\n        }\n        i\
    \ *= n\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpnd85a110/tmpnd85a110.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b163b02ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b163ad25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b163ad25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b163ad247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnd85a110                        0x00005582aac79323 <unavailable> + 4899

    5    libc.so.6                          0x00002b163b21a460 __libc_start_main +
    245

    6    tmpnd85a110                        0x00005582aac78e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978918
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i < x {\n        if i == x {\n            return\
    \ true\n        }\n        i *= n\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpqqwo7e_n/tmpqqwo7e_n.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d96370c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d96067b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d96067988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d960667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqqwo7e_n                        0x0000561a0af931b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b7d9655c460 __libc_start_main +
    245

    6    tmpqqwo7e_n                        0x0000561a0af92e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i < x {\n        i *= n\n    }\n    return\
    \ i == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if x == 1 {\n        return true\n    }\n    var i = 1\n    while\
    \ pow(Double(n), Double(i)) <= Double(x) {\n        if pow(Double(n), Double(i))\
    \ == Double(x) {\n            return true\n        }\n        i += 1\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpkvfcahra.swift:11:11: error: cannot find 'pow' in scope\n    while\
    \ pow(Double(n), Double(i)) <= Double(x) {\n          ^~~\n/tmp/tmpkvfcahra.swift:12:12:\
    \ error: cannot find 'pow' in scope\n        if pow(Double(n), Double(i)) == Double(x)\
    \ {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if x == 1 { return true }\n    var i = 1\n    while i < x {\n  \
    \      i *= n\n        if i == x { return true }\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while pow(Double(n), Double(i)) <= Double(x) {\n\
    \        if pow(Double(n), Double(i)) == Double(x) {\n            return true\n\
    \        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuj19ulyc.swift:8:11: error: cannot find 'pow' in scope\n    while\
    \ pow(Double(n), Double(i)) <= Double(x) {\n          ^~~\n/tmp/tmpuj19ulyc.swift:9:12:\
    \ error: cannot find 'pow' in scope\n        if pow(Double(n), Double(i)) == Double(x)\
    \ {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i < x {\n        i\
    \ *= n\n        if i == x {\n            result = true\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpz86m0ivn/tmpz86m0ivn.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e4ae65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e4ab5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e4ab5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e4ab5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz86m0ivn                        0x0000557f4fd26596 <unavailable> + 5526

    5    libc.so.6                          0x00002b2e4b051460 __libc_start_main +
    245

    6    tmpz86m0ivn                        0x0000557f4fd25e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i < x {\n        if\
    \ Int(pow(Double(n), Double(i))) == x {\n            result = true\n        }\n\
    \        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpoqct0o1e.swift:10:16: error: cannot find 'pow' in scope\n     \
    \   if Int(pow(Double(n), Double(i))) == x {\n               ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var power = 1\n    while power < x {\n        power *= n\n    }\n\
    \    return power == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 0\n    while i < x {\n        if Int(pow(Double(n), Double(i)))\
    \ == x {\n            return true\n        }\n        i += 1\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpn4c1c57u.swift:9:16: error: cannot find 'pow' in scope\n      \
    \  if Int(pow(Double(n), Double(i))) == x {\n               ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i < x {\n        if\
    \ pow(Double(n), Double(i)) == Double(x) {\n            result = true\n      \
    \  }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmptaci_lik.swift:10:12: error: cannot find 'pow' in scope\n     \
    \   if pow(Double(n), Double(i)) == Double(x) {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while pow(Double(n), Double(i)) <= Double(x) {\n\
    \        if pow(Double(n), Double(i)) == Double(x) {\n            return true\n\
    \        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuj19ulyc.swift:8:11: error: cannot find 'pow' in scope\n    while\
    \ pow(Double(n), Double(i)) <= Double(x) {\n          ^~~\n/tmp/tmpuj19ulyc.swift:9:12:\
    \ error: cannot find 'pow' in scope\n        if pow(Double(n), Double(i)) == Double(x)\
    \ {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if x == 1 {\n        return true\n    }\n    var result = n\n  \
    \  while result < x {\n        result *= n\n    }\n    return result == x\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while pow(Double(n), Double(i)) <= Double(x) {\n\
    \        if pow(Double(n), Double(i)) == Double(x) {\n            return true\n\
    \        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuj19ulyc.swift:8:11: error: cannot find 'pow' in scope\n    while\
    \ pow(Double(n), Double(i)) <= Double(x) {\n          ^~~\n/tmp/tmpuj19ulyc.swift:9:12:\
    \ error: cannot find 'pow' in scope\n        if pow(Double(n), Double(i)) == Double(x)\
    \ {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i <= x {\n        if i == x {\n           \
    \ return true\n        }\n        i *= n\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while pow(Double(n), Double(i)) <= Double(x) {\n\
    \        if pow(Double(n), Double(i)) == Double(x) {\n            return true\n\
    \        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuj19ulyc.swift:8:11: error: cannot find 'pow' in scope\n    while\
    \ pow(Double(n), Double(i)) <= Double(x) {\n          ^~~\n/tmp/tmpuj19ulyc.swift:9:12:\
    \ error: cannot find 'pow' in scope\n        if pow(Double(n), Double(i)) == Double(x)\
    \ {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while pow(Double(n), Double(i)) <= Double(x) {\n\
    \        if pow(Double(n), Double(i)) == Double(x) {\n            return true\n\
    \        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuj19ulyc.swift:8:11: error: cannot find 'pow' in scope\n    while\
    \ pow(Double(n), Double(i)) <= Double(x) {\n          ^~~\n/tmp/tmpuj19ulyc.swift:9:12:\
    \ error: cannot find 'pow' in scope\n        if pow(Double(n), Double(i)) == Double(x)\
    \ {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i < x {\n        if i == x {\n            return\
    \ true\n        }\n        i *= n\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpqqwo7e_n/tmpqqwo7e_n.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d96370c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d96067b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d96067988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d960667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqqwo7e_n                        0x0000561a0af931b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b7d9655c460 __libc_start_main +
    245

    6    tmpqqwo7e_n                        0x0000561a0af92e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while pow(Double(n), Double(i)) <= Double(x) {\n\
    \        if pow(Double(n), Double(i)) == Double(x) {\n            return true\n\
    \        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuj19ulyc.swift:8:11: error: cannot find 'pow' in scope\n    while\
    \ pow(Double(n), Double(i)) <= Double(x) {\n          ^~~\n/tmp/tmpuj19ulyc.swift:9:12:\
    \ error: cannot find 'pow' in scope\n        if pow(Double(n), Double(i)) == Double(x)\
    \ {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i < x {\n        i *= n\n    }\n    return\
    \ i == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    for i in 1...x {\n        if Int(pow(Double(n),\
    \ Double(i))) == x {\n            result = true\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpvpd_od_v.swift:9:16: error: cannot find 'pow' in scope\n      \
    \  if Int(pow(Double(n), Double(i))) == x {\n               ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i < x {\n        if\
    \ n * i == x {\n            result = true\n        }\n        i += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp8dut3yr_/tmp8dut3yr_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b028c60fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b028c306b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b028c306988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b028c3057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8dut3yr_                        0x00005564cf41e417 <unavailable> + 5143

    5    libc.so.6                          0x00002b028c7fb460 __libc_start_main +
    245

    6    tmp8dut3yr_                        0x00005564cf41de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    return x == Int(pow(Double(n), Double(log(Double(x)) / log(Double(n)))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5uz64cx7.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ x == Int(pow(Double(n), Double(log(Double(x)) / log(Double(n)))))\n        \
    \            ^~~\n/tmp/tmp5uz64cx7.swift:7:43: error: cannot find 'log' in scope\n\
    \    return x == Int(pow(Double(n), Double(log(Double(x)) / log(Double(n)))))\n\
    \                                          ^~~\n/tmp/tmp5uz64cx7.swift:7:60: error:\
    \ cannot find 'log' in scope\n    return x == Int(pow(Double(n), Double(log(Double(x))\
    \ / log(Double(n)))))\n                                                      \
    \     ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i < x {\n        if\
    \ pow(Double(n), Double(i)) == Double(x) {\n            result = true\n      \
    \  }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmptaci_lik.swift:10:12: error: cannot find 'pow' in scope\n     \
    \   if pow(Double(n), Double(i)) == Double(x) {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while pow(Double(n), Double(i)) <= Double(x) {\n\
    \        if pow(Double(n), Double(i)) == Double(x) {\n            return true\n\
    \        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuj19ulyc.swift:8:11: error: cannot find 'pow' in scope\n    while\
    \ pow(Double(n), Double(i)) <= Double(x) {\n          ^~~\n/tmp/tmpuj19ulyc.swift:9:12:\
    \ error: cannot find 'pow' in scope\n        if pow(Double(n), Double(i)) == Double(x)\
    \ {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var y = 1\n    while y < x {\n        y *= n\n    }\n    return\
    \ y == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978919
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i < x {\n        i *= n\n    }\n    return\
    \ i == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if x == 1 {\n        return true\n    }\n    var i = 2\n    while\
    \ i < x {\n        if i == x {\n            return true\n        }\n        i\
    \ *= n\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpunt_1nwv/tmpunt_1nwv.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fc0cacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fc09a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fc09a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fc09a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpunt_1nwv                        0x000055c3939a81b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b9fc0e98460 __libc_start_main +
    245

    6    tmpunt_1nwv                        0x000055c3939a7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978919
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if x == 1 {\n        return true\n    }\n    var i = 2\n    while\
    \ i < x {\n        if i == x {\n            return true\n        }\n        i\
    \ *= n\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpunt_1nwv/tmpunt_1nwv.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fc0cacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fc09a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fc09a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fc09a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpunt_1nwv                        0x000055c3939a81b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b9fc0e98460 __libc_start_main +
    245

    6    tmpunt_1nwv                        0x000055c3939a7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978919
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i < x {\n        i *= n\n    }\n    return\
    \ i == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i < x {\n        i *= n\n    }\n    return\
    \ i == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if x == 1 { return true }\n    var i = 2\n    while i < x {\n  \
    \      if i == x { return true }\n        i *= n\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpr5bs4oov/tmpr5bs4oov.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0216f45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0216c3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0216c3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0216c3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr5bs4oov                        0x0000560f6905e1b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b0217131460 __libc_start_main +
    245

    6    tmpr5bs4oov                        0x0000560f6905de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if x == 1 {\n        return true\n    }\n    var i = 2\n    while\
    \ i < x {\n        if Int(pow(Double(n), Double(i))) == x {\n            return\
    \ true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmptmo91_rz.swift:12:16: error: cannot find 'pow' in scope\n     \
    \   if Int(pow(Double(n), Double(i))) == x {\n               ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i < x {\n        if\
    \ i == x {\n            result = true\n        }\n        i *= n\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpjhzrfbbw/tmpjhzrfbbw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68e1c57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68e194eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68e194e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68e194d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjhzrfbbw                        0x0000560fba0151b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b68e1e43460 __libc_start_main +
    245

    6    tmpjhzrfbbw                        0x0000560fba014e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while pow(Double(n), Double(i)) <= Double(x) {\n\
    \        if pow(Double(n), Double(i)) == Double(x) {\n            return true\n\
    \        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuj19ulyc.swift:8:11: error: cannot find 'pow' in scope\n    while\
    \ pow(Double(n), Double(i)) <= Double(x) {\n          ^~~\n/tmp/tmpuj19ulyc.swift:9:12:\
    \ error: cannot find 'pow' in scope\n        if pow(Double(n), Double(i)) == Double(x)\
    \ {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    return pow(Double(n), Double(x.log(n))) == Double(x)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7w00r3ad.swift:7:12: error: cannot find 'pow' in scope\n    return\
    \ pow(Double(n), Double(x.log(n))) == Double(x)\n           ^~~\n/tmp/tmp7w00r3ad.swift:7:36:\
    \ error: value of type 'Int' has no member 'log'\n    return pow(Double(n), Double(x.log(n)))\
    \ == Double(x)\n                                 ~ ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while pow(Double(n), Double(i)) <= Double(x) {\n\
    \        if pow(Double(n), Double(i)) == Double(x) {\n            return true\n\
    \        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuj19ulyc.swift:8:11: error: cannot find 'pow' in scope\n    while\
    \ pow(Double(n), Double(i)) <= Double(x) {\n          ^~~\n/tmp/tmpuj19ulyc.swift:9:12:\
    \ error: cannot find 'pow' in scope\n        if pow(Double(n), Double(i)) == Double(x)\
    \ {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i < x {\n        i *= n\n    }\n    return\
    \ i == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i < x {\n        if\
    \ n.power(i) == x {\n            result = true\n        }\n        i += 1\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmps8g8wzy8.swift:10:14: error: value of type 'Int' has no member\
    \ 'power'\n        if n.power(i) == x {\n           ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqlawcc4c.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n   \
    \                 ^~~\n/tmp/tmpqlawcc4c.swift:7:47: error: cannot find 'log' in\
    \ scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n\
    \                                              ^~~\n/tmp/tmpqlawcc4c.swift:7:64:\
    \ error: cannot find 'log' in scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x))\
    \ / log(Double(n))))))\n                                                     \
    \          ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i <= x {\n        if i == x {\n           \
    \ return true\n        }\n        i *= n\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while pow(Double(n), Double(i)) <= Double(x) {\n\
    \        if pow(Double(n), Double(i)) == Double(x) {\n            return true\n\
    \        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuj19ulyc.swift:8:11: error: cannot find 'pow' in scope\n    while\
    \ pow(Double(n), Double(i)) <= Double(x) {\n          ^~~\n/tmp/tmpuj19ulyc.swift:9:12:\
    \ error: cannot find 'pow' in scope\n        if pow(Double(n), Double(i)) == Double(x)\
    \ {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i < x {\n        i *= n\n    }\n    return\
    \ i == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if x == 1 {\n        return true\n    }\n    var power = n\n   \
    \ while power < x {\n        power *= n\n    }\n    return power == x\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i < x {\n        if\
    \ pow(Double(n), Double(i)) == Double(x) {\n            result = true\n      \
    \  }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmptaci_lik.swift:10:12: error: cannot find 'pow' in scope\n     \
    \   if pow(Double(n), Double(i)) == Double(x) {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqlawcc4c.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n   \
    \                 ^~~\n/tmp/tmpqlawcc4c.swift:7:47: error: cannot find 'log' in\
    \ scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n\
    \                                              ^~~\n/tmp/tmpqlawcc4c.swift:7:64:\
    \ error: cannot find 'log' in scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x))\
    \ / log(Double(n))))))\n                                                     \
    \          ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqlawcc4c.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n   \
    \                 ^~~\n/tmp/tmpqlawcc4c.swift:7:47: error: cannot find 'log' in\
    \ scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n\
    \                                              ^~~\n/tmp/tmpqlawcc4c.swift:7:64:\
    \ error: cannot find 'log' in scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x))\
    \ / log(Double(n))))))\n                                                     \
    \          ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqlawcc4c.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n   \
    \                 ^~~\n/tmp/tmpqlawcc4c.swift:7:47: error: cannot find 'log' in\
    \ scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n\
    \                                              ^~~\n/tmp/tmpqlawcc4c.swift:7:64:\
    \ error: cannot find 'log' in scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x))\
    \ / log(Double(n))))))\n                                                     \
    \          ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i < x {\n        i *= n\n    }\n    return\
    \ i == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if x == 1 {\n        return true\n    }\n    var i = 2\n    while\
    \ i < x {\n        if i == x {\n            return true\n        }\n        i\
    \ *= n\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpunt_1nwv/tmpunt_1nwv.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fc0cacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fc09a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fc09a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fc09a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpunt_1nwv                        0x000055c3939a81b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b9fc0e98460 __libc_start_main +
    245

    6    tmpunt_1nwv                        0x000055c3939a7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978919
- exit_code: -1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var num = x\n    while num % n == 0 {\n        num /= n\n    }\n\
    \    return num == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978924
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if x == 1 {\n        return true\n    }\n    var i = 2\n    while\
    \ i <= x {\n        if i == x {\n            return true\n        }\n        i\
    \ *= n\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpnd85a110/tmpnd85a110.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b163b02ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b163ad25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b163ad25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b163ad247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnd85a110                        0x00005582aac79323 <unavailable> + 4899

    5    libc.so.6                          0x00002b163b21a460 __libc_start_main +
    245

    6    tmpnd85a110                        0x00005582aac78e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    return pow(Double(n), Double(Int(log(Double(x)) / log(Double(n)))))\
    \ == Double(x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpr5rhtk7l.swift:7:12: error: cannot find 'pow' in scope\n    return\
    \ pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))) == Double(x)\n\
    \           ^~~\n/tmp/tmpr5rhtk7l.swift:7:38: error: cannot find 'log' in scope\n\
    \    return pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))) == Double(x)\n\
    \                                     ^~~\n/tmp/tmpr5rhtk7l.swift:7:55: error:\
    \ cannot find 'log' in scope\n    return pow(Double(n), Double(Int(log(Double(x))\
    \ / log(Double(n))))) == Double(x)\n                                         \
    \             ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    let result = pow(Double(n), Double(x))\n    return result == Double(x)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp4oouk9wp.swift:7:18: error: cannot find 'pow' in scope\n    let\
    \ result = pow(Double(n), Double(x))\n                 ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    let power = pow(Double(n), Double(x))\n    return power == Double(x)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpkyf31so8.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ power = pow(Double(n), Double(x))\n                ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if x == 1 { return true }\n    var i = 2\n    while i < x {\n  \
    \      if i == x { return true }\n        i *= n\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpr5bs4oov/tmpr5bs4oov.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0216f45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0216c3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0216c3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0216c3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr5bs4oov                        0x0000560f6905e1b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b0217131460 __libc_start_main +
    245

    6    tmpr5bs4oov                        0x0000560f6905de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978919
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var num = n\n    while num < x {\n        num *= n\n    }\n    return\
    \ num == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpj1z5w237/tmpj1z5w237.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86a014ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b869fe41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b869fe41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b869fe407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1z5w237                        0x000056157b65d626 <unavailable> + 5670

    5    libc.so.6                          0x00002b86a0336460 __libc_start_main +
    245

    6    tmpj1z5w237                        0x000056157b65ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978919
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if x == 1 {\n        return true\n    }\n    var i = 2\n    while\
    \ i < x {\n        if i == x {\n            return true\n        }\n        i\
    \ *= n\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpunt_1nwv/tmpunt_1nwv.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fc0cacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fc09a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fc09a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fc09a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpunt_1nwv                        0x000055c3939a81b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b9fc0e98460 __libc_start_main +
    245

    6    tmpunt_1nwv                        0x000055c3939a7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978919
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if x == 1 {\n        return true\n    }\n    var i = 1\n    while\
    \ i < x {\n        i *= n\n        if i == x {\n            return true\n    \
    \    }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978919
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    guard x > 0 && n > 0 else { return false }\n    var power = n\n\
    \    while power < x {\n        power *= n\n    }\n    return power == x\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpa2gzsoc9/tmpa2gzsoc9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c28babc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c288a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c288a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c288a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa2gzsoc9                        0x000055b6d7fcc626 <unavailable> + 5670

    5    libc.so.6                          0x00002b2c28d97460 __libc_start_main +
    245

    6    tmpa2gzsoc9                        0x000055b6d7fcbe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978919
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if x == 1 {\n        return true\n    }\n    var power = n\n   \
    \ while power < x {\n        power *= n\n    }\n    return power == x\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978919
- exit_code: -1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var num = x\n    while num % n == 0 {\n        num /= n\n    }\n\
    \    return num == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    return pow(Double(n), Double(Int(log(Double(x)) / log(Double(n)))))\
    \ == Double(x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpr5rhtk7l.swift:7:12: error: cannot find 'pow' in scope\n    return\
    \ pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))) == Double(x)\n\
    \           ^~~\n/tmp/tmpr5rhtk7l.swift:7:38: error: cannot find 'log' in scope\n\
    \    return pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))) == Double(x)\n\
    \                                     ^~~\n/tmp/tmpr5rhtk7l.swift:7:55: error:\
    \ cannot find 'log' in scope\n    return pow(Double(n), Double(Int(log(Double(x))\
    \ / log(Double(n))))) == Double(x)\n                                         \
    \             ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i < x {\n        if\
    \ i == x {\n            result = true\n        }\n        i *= n\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpjhzrfbbw/tmpjhzrfbbw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68e1c57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68e194eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68e194e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68e194d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjhzrfbbw                        0x0000560fba0151b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b68e1e43460 __libc_start_main +
    245

    6    tmpjhzrfbbw                        0x0000560fba014e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    return pow(Double(n), Double(Int(log(Double(x)) / log(Double(n)))))\
    \ == Double(x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpr5rhtk7l.swift:7:12: error: cannot find 'pow' in scope\n    return\
    \ pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))) == Double(x)\n\
    \           ^~~\n/tmp/tmpr5rhtk7l.swift:7:38: error: cannot find 'log' in scope\n\
    \    return pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))) == Double(x)\n\
    \                                     ^~~\n/tmp/tmpr5rhtk7l.swift:7:55: error:\
    \ cannot find 'log' in scope\n    return pow(Double(n), Double(Int(log(Double(x))\
    \ / log(Double(n))))) == Double(x)\n                                         \
    \             ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    var result = 1\n    while result <= x {\n       \
    \ result = Int(pow(Double(n), Double(i)))\n        if result == x {\n        \
    \    return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwwa_5b76.swift:10:22: error: cannot find 'pow' in scope\n     \
    \   result = Int(pow(Double(n), Double(i)))\n                     ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i < x {\n        i *= n\n    }\n    return\
    \ i == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i < x {\n        i *= n\n    }\n    return\
    \ i == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i <= x {\n        if i == x {\n           \
    \ return true\n        }\n        i *= n\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i < x {\n        i *= n\n    }\n    return\
    \ i == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var power = 1\n    while power < x {\n        power *= n\n    }\n\
    \    return power == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while pow(Double(n), Double(i)) <= Double(x) {\n\
    \        if pow(Double(n), Double(i)) == Double(x) {\n            return true\n\
    \        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuj19ulyc.swift:8:11: error: cannot find 'pow' in scope\n    while\
    \ pow(Double(n), Double(i)) <= Double(x) {\n          ^~~\n/tmp/tmpuj19ulyc.swift:9:12:\
    \ error: cannot find 'pow' in scope\n        if pow(Double(n), Double(i)) == Double(x)\
    \ {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while pow(Double(n), Double(i)) <= Double(x) {\n\
    \        if pow(Double(n), Double(i)) == Double(x) {\n            return true\n\
    \        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuj19ulyc.swift:8:11: error: cannot find 'pow' in scope\n    while\
    \ pow(Double(n), Double(i)) <= Double(x) {\n          ^~~\n/tmp/tmpuj19ulyc.swift:9:12:\
    \ error: cannot find 'pow' in scope\n        if pow(Double(n), Double(i)) == Double(x)\
    \ {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqlawcc4c.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n   \
    \                 ^~~\n/tmp/tmpqlawcc4c.swift:7:47: error: cannot find 'log' in\
    \ scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n\
    \                                              ^~~\n/tmp/tmpqlawcc4c.swift:7:64:\
    \ error: cannot find 'log' in scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x))\
    \ / log(Double(n))))))\n                                                     \
    \          ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    return pow(Double(n), Double(Int(log(Double(x)) / log(Double(n)))))\
    \ == Double(x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpr5rhtk7l.swift:7:12: error: cannot find 'pow' in scope\n    return\
    \ pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))) == Double(x)\n\
    \           ^~~\n/tmp/tmpr5rhtk7l.swift:7:38: error: cannot find 'log' in scope\n\
    \    return pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))) == Double(x)\n\
    \                                     ^~~\n/tmp/tmpr5rhtk7l.swift:7:55: error:\
    \ cannot find 'log' in scope\n    return pow(Double(n), Double(Int(log(Double(x))\
    \ / log(Double(n))))) == Double(x)\n                                         \
    \             ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while pow(Double(n), Double(i)) <= Double(x) {\n\
    \        if pow(Double(n), Double(i)) == Double(x) {\n            return true\n\
    \        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuj19ulyc.swift:8:11: error: cannot find 'pow' in scope\n    while\
    \ pow(Double(n), Double(i)) <= Double(x) {\n          ^~~\n/tmp/tmpuj19ulyc.swift:9:12:\
    \ error: cannot find 'pow' in scope\n        if pow(Double(n), Double(i)) == Double(x)\
    \ {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var num = n\n    while num < x {\n        num *= n\n    }\n    return\
    \ num == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpj1z5w237/tmpj1z5w237.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86a014ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b869fe41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b869fe41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b869fe407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1z5w237                        0x000056157b65d626 <unavailable> + 5670

    5    libc.so.6                          0x00002b86a0336460 __libc_start_main +
    245

    6    tmpj1z5w237                        0x000056157b65ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if x == 0 {\n        return false\n    }\n    var i = 1\n    while\
    \ pow(Double(n), Double(i)) <= Double(x) {\n        if pow(Double(n), Double(i))\
    \ == Double(x) {\n            return true\n        }\n        i += 1\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7sbinhmy.swift:11:11: error: cannot find 'pow' in scope\n    while\
    \ pow(Double(n), Double(i)) <= Double(x) {\n          ^~~\n/tmp/tmp7sbinhmy.swift:12:12:\
    \ error: cannot find 'pow' in scope\n        if pow(Double(n), Double(i)) == Double(x)\
    \ {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    return x == Int(pow(Double(n), Double(log(Double(x)) / log(Double(n)))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5uz64cx7.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ x == Int(pow(Double(n), Double(log(Double(x)) / log(Double(n)))))\n        \
    \            ^~~\n/tmp/tmp5uz64cx7.swift:7:43: error: cannot find 'log' in scope\n\
    \    return x == Int(pow(Double(n), Double(log(Double(x)) / log(Double(n)))))\n\
    \                                          ^~~\n/tmp/tmp5uz64cx7.swift:7:60: error:\
    \ cannot find 'log' in scope\n    return x == Int(pow(Double(n), Double(log(Double(x))\
    \ / log(Double(n)))))\n                                                      \
    \     ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: -1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 0\n    var result = 1\n    while result < x {\n        result\
    \ = n * n\n        i += 1\n    }\n    return result == x\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978924
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i < x {\n        i *= n\n    }\n    return\
    \ i == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if x == 1 {\n        return true\n    }\n    var i = 2\n    while\
    \ i < x {\n        if i == x {\n            return true\n        }\n        i\
    \ *= n\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpunt_1nwv/tmpunt_1nwv.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fc0cacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fc09a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fc09a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fc09a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpunt_1nwv                        0x000055c3939a81b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b9fc0e98460 __libc_start_main +
    245

    6    tmpunt_1nwv                        0x000055c3939a7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978919
- exit_code: -1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i <= x {\n        if\
    \ i == x {\n            result = true\n        }\n        i *= n\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978923
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    return x == Int(pow(Double(n), Double(log(Double(x)) / log(Double(n)))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5uz64cx7.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ x == Int(pow(Double(n), Double(log(Double(x)) / log(Double(n)))))\n        \
    \            ^~~\n/tmp/tmp5uz64cx7.swift:7:43: error: cannot find 'log' in scope\n\
    \    return x == Int(pow(Double(n), Double(log(Double(x)) / log(Double(n)))))\n\
    \                                          ^~~\n/tmp/tmp5uz64cx7.swift:7:60: error:\
    \ cannot find 'log' in scope\n    return x == Int(pow(Double(n), Double(log(Double(x))\
    \ / log(Double(n)))))\n                                                      \
    \     ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i < x {\n        i *= n\n    }\n    return\
    \ i == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: -1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i <= x {\n        if\
    \ i == x {\n            result = true\n        }\n        i *= n\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978923
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i < x {\n        if i == x {\n            return\
    \ true\n        }\n        i *= n\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpqqwo7e_n/tmpqqwo7e_n.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d96370c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d96067b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d96067988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d960667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqqwo7e_n                        0x0000561a0af931b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b7d9655c460 __libc_start_main +
    245

    6    tmpqqwo7e_n                        0x0000561a0af92e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while pow(Double(n), Double(i)) <= Double(x) {\n\
    \        if pow(Double(n), Double(i)) == Double(x) {\n            return true\n\
    \        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuj19ulyc.swift:8:11: error: cannot find 'pow' in scope\n    while\
    \ pow(Double(n), Double(i)) <= Double(x) {\n          ^~~\n/tmp/tmpuj19ulyc.swift:9:12:\
    \ error: cannot find 'pow' in scope\n        if pow(Double(n), Double(i)) == Double(x)\
    \ {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i <= x {\n        if i == x {\n           \
    \ return true\n        }\n        i *= n\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if x == 1 {\n        return true\n    }\n    var i = 2\n    while\
    \ i < x {\n        if i == x {\n            return true\n        }\n        i\
    \ *= n\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpunt_1nwv/tmpunt_1nwv.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fc0cacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fc09a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fc09a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fc09a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpunt_1nwv                        0x000055c3939a81b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b9fc0e98460 __libc_start_main +
    245

    6    tmpunt_1nwv                        0x000055c3939a7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978919
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i < x {\n        i *= n\n    }\n    return\
    \ i == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i < x {\n        if\
    \ pow(Double(n), Double(i)) == Double(x) {\n            result = true\n      \
    \  }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmptaci_lik.swift:10:12: error: cannot find 'pow' in scope\n     \
    \   if pow(Double(n), Double(i)) == Double(x) {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var num = x\n    var div = n\n    while num % div == 0 {\n     \
    \   num /= div\n        if num == 1 {\n            return true\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpcvahc8pq/tmpcvahc8pq.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eb106bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3eb0d62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3eb0d62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3eb0d617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcvahc8pq                        0x000055dd776616b6 <unavailable> + 5814

    5    libc.so.6                          0x00002b3eb1257460 __libc_start_main +
    245

    6    tmpcvahc8pq                        0x000055dd77660ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978919
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    var result = 1\n    while result < x {\n        result\
    \ = n * i\n        i += 1\n    }\n    return result == x\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpp5dlaetr/tmpp5dlaetr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57897e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57894ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57894dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57894dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp5dlaetr                        0x000055c205b80417 <unavailable> + 5143

    5    libc.so.6                          0x00002b57899d2460 __libc_start_main +
    245

    6    tmpp5dlaetr                        0x000055c205b7fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i < x {\n        if\
    \ Int(pow(Double(n), Double(i))) == x {\n            result = true\n        }\n\
    \        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpoqct0o1e.swift:10:16: error: cannot find 'pow' in scope\n     \
    \   if Int(pow(Double(n), Double(i))) == x {\n               ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    for i in 1...x {\n        if pow(Double(n),\
    \ Double(i)) == Double(x) {\n            result = true\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp42sjoq50.swift:9:12: error: cannot find 'pow' in scope\n      \
    \  if pow(Double(n), Double(i)) == Double(x) {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqlawcc4c.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n   \
    \                 ^~~\n/tmp/tmpqlawcc4c.swift:7:47: error: cannot find 'log' in\
    \ scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n\
    \                                              ^~~\n/tmp/tmpqlawcc4c.swift:7:64:\
    \ error: cannot find 'log' in scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x))\
    \ / log(Double(n))))))\n                                                     \
    \          ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    let result = pow(Double(n), Double(x))\n    if result == Double(x)\
    \ {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp367z9f6n.swift:7:18: error: cannot find 'pow' in scope\n    let\
    \ result = pow(Double(n), Double(x))\n                 ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i <= x {\n        if i == x {\n           \
    \ return true\n        }\n        i *= n\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqlawcc4c.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n   \
    \                 ^~~\n/tmp/tmpqlawcc4c.swift:7:47: error: cannot find 'log' in\
    \ scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n\
    \                                              ^~~\n/tmp/tmpqlawcc4c.swift:7:64:\
    \ error: cannot find 'log' in scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x))\
    \ / log(Double(n))))))\n                                                     \
    \          ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    guard x > 0 && n > 0 else { return false }\n    var result = 1\n\
    \    var i = 1\n    while result < x {\n        result = n * i\n        i += 1\n\
    \    }\n    return result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpb5jux62l/tmpb5jux62l.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69a00a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b699fd9bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b699fd9b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b699fd9a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb5jux62l                        0x0000558ab2916417 <unavailable> + 5143

    5    libc.so.6                          0x00002b69a0290460 __libc_start_main +
    245

    6    tmpb5jux62l                        0x0000558ab2915e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978919
- exit_code: -1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i <= x {\n        if\
    \ i == x {\n            result = true\n        }\n        i *= n\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978923
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if x == 1 {\n        return true\n    }\n    var i = 2\n    while\
    \ i < x {\n        if i == x {\n            return true\n        }\n        i\
    \ *= n\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpunt_1nwv/tmpunt_1nwv.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fc0cacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fc09a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fc09a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fc09a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpunt_1nwv                        0x000055c3939a81b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b9fc0e98460 __libc_start_main +
    245

    6    tmpunt_1nwv                        0x000055c3939a7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    let root = Int(pow(Double(x), 1.0/Double(n)))\n    return root *\
    \ root == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpkkk6c0pg.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ root = Int(pow(Double(x), 1.0/Double(n)))\n                   ^~~\n/tmp/tmpkkk6c0pg.swift:8:24:\
    \ error: binary operator '==' cannot be applied to operands of type 'Duration'\
    \ and 'Int'\n    return root * root == x\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmpkkk6c0pg.swift:8:24:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Duration, Duration), (Int, Int)\n    return root * root == x\n            \
    \           ^\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i < x {\n        if\
    \ n * i == x {\n            result = true\n        }\n        i += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp8dut3yr_/tmp8dut3yr_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b028c60fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b028c306b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b028c306988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b028c3057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8dut3yr_                        0x00005564cf41e417 <unavailable> + 5143

    5    libc.so.6                          0x00002b028c7fb460 __libc_start_main +
    245

    6    tmp8dut3yr_                        0x00005564cf41de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqlawcc4c.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n   \
    \                 ^~~\n/tmp/tmpqlawcc4c.swift:7:47: error: cannot find 'log' in\
    \ scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n\
    \                                              ^~~\n/tmp/tmpqlawcc4c.swift:7:64:\
    \ error: cannot find 'log' in scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x))\
    \ / log(Double(n))))))\n                                                     \
    \          ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if n == 1 {\n        return x == 1\n    }\n    var i = 2\n    while\
    \ i < x {\n        if i == x {\n            return true\n        }\n        i\
    \ *= n\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmps74ejp0i/tmps74ejp0i.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a271dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a26ed2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a26ed2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a26ed17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps74ejp0i                        0x000055de085471b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b7a273c7460 __libc_start_main +
    245

    6    tmps74ejp0i                        0x000055de08546e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    return x == pow(n, Int(log(Double(x)) / log(Double(n))))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuoabkbt4.swift:7:17: error: cannot find 'pow' in scope\n    return\
    \ x == pow(n, Int(log(Double(x)) / log(Double(n))))\n                ^~~\n/tmp/tmpuoabkbt4.swift:7:28:\
    \ error: cannot find 'log' in scope\n    return x == pow(n, Int(log(Double(x))\
    \ / log(Double(n))))\n                           ^~~\n/tmp/tmpuoabkbt4.swift:7:45:\
    \ error: cannot find 'log' in scope\n    return x == pow(n, Int(log(Double(x))\
    \ / log(Double(n))))\n                                            ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqlawcc4c.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n   \
    \                 ^~~\n/tmp/tmpqlawcc4c.swift:7:47: error: cannot find 'log' in\
    \ scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n\
    \                                              ^~~\n/tmp/tmpqlawcc4c.swift:7:64:\
    \ error: cannot find 'log' in scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x))\
    \ / log(Double(n))))))\n                                                     \
    \          ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if x == 1 {\n        return true\n    }\n    var i = 2\n    while\
    \ i < x {\n        if i == x {\n            return true\n        }\n        i\
    \ *= n\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpunt_1nwv/tmpunt_1nwv.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fc0cacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fc09a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fc09a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fc09a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpunt_1nwv                        0x000055c3939a81b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b9fc0e98460 __libc_start_main +
    245

    6    tmpunt_1nwv                        0x000055c3939a7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978919
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i < x {\n        i *= n\n    }\n    return\
    \ i == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i <= x {\n        if i == x {\n           \
    \ return true\n        }\n        i *= n\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if x == 0 {\n        return false\n    }\n    var i = 1\n    var\
    \ result = n\n    while result < x {\n        result *= n\n        i += 1\n  \
    \  }\n    return result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp_o72a7yz/tmp_o72a7yz.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1a686ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1a6561b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1a6561988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1a65607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_o72a7yz                        0x000055be89c64626 <unavailable> + 5670

    5    libc.so.6                          0x00002ad1a6a56460 __libc_start_main +
    245

    6    tmp_o72a7yz                        0x000055be89c63e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978919
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i < x {\n        if i == x {\n            return\
    \ true\n        }\n        i *= n\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpqqwo7e_n/tmpqqwo7e_n.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d96370c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d96067b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d96067988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d960667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqqwo7e_n                        0x0000561a0af931b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b7d9655c460 __libc_start_main +
    245

    6    tmpqqwo7e_n                        0x0000561a0af92e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if x == 1 {\n        return true\n    }\n    var result = n\n  \
    \  while result < x {\n        result *= n\n    }\n    return result == x\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: -1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if x == 0 {\n        return false\n    }\n    var x = x\n    var\
    \ n = n\n    while x % n == 0 {\n        x /= n\n    }\n    return x == 1\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    for i in 1...x {\n        if pow(Double(n),\
    \ Double(i)) == Double(x) {\n            result = true\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp42sjoq50.swift:9:12: error: cannot find 'pow' in scope\n      \
    \  if pow(Double(n), Double(i)) == Double(x) {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: -1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var y = x\n    while y % n == 0 {\n        y /= n\n    }\n    return\
    \ y == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i < x {\n        if\
    \ pow(Double(n), Double(i)) == Double(x) {\n            result = true\n      \
    \  }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmptaci_lik.swift:10:12: error: cannot find 'pow' in scope\n     \
    \   if pow(Double(n), Double(i)) == Double(x) {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: -1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var power = 1\n    while power <= x {\n\
    \        if power == x {\n            result = true\n        }\n        power\
    \ *= n\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i < x {\n        if\
    \ pow(Double(n), Double(i)) == Double(x) {\n            result = true\n      \
    \  }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmptaci_lik.swift:10:12: error: cannot find 'pow' in scope\n     \
    \   if pow(Double(n), Double(i)) == Double(x) {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: -1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var power = 1\n    while power <= x {\n\
    \        if power == x {\n            result = true\n        }\n        power\
    \ *= n\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    let power = pow(Double(n), Double(x))\n    return power.truncatingRemainder(dividingBy:\
    \ 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpth7vvl33.swift:7:17: error: cannot find 'pow' in scope\n    let\
    \ power = pow(Double(n), Double(x))\n                ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i < x {\n        if i == x {\n            return\
    \ true\n        }\n        i *= n\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpqqwo7e_n/tmpqqwo7e_n.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d96370c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d96067b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d96067988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d960667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqqwo7e_n                        0x0000561a0af931b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b7d9655c460 __libc_start_main +
    245

    6    tmpqqwo7e_n                        0x0000561a0af92e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i < x {\n        i *= n\n    }\n    return\
    \ i == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while pow(Double(n), Double(i)) <= Double(x) {\n\
    \        if pow(Double(n), Double(i)) == Double(x) {\n            return true\n\
    \        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuj19ulyc.swift:8:11: error: cannot find 'pow' in scope\n    while\
    \ pow(Double(n), Double(i)) <= Double(x) {\n          ^~~\n/tmp/tmpuj19ulyc.swift:9:12:\
    \ error: cannot find 'pow' in scope\n        if pow(Double(n), Double(i)) == Double(x)\
    \ {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var power = 1\n    while power < x {\n        power *= n\n    }\n\
    \    return power == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if x == 1 {\n        return true\n    }\n    var i = 1\n    while\
    \ pow(Double(n), Double(i)) <= Double(x) {\n        if pow(Double(n), Double(i))\
    \ == Double(x) {\n            return true\n        }\n        i += 1\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpkvfcahra.swift:11:11: error: cannot find 'pow' in scope\n    while\
    \ pow(Double(n), Double(i)) <= Double(x) {\n          ^~~\n/tmp/tmpkvfcahra.swift:12:12:\
    \ error: cannot find 'pow' in scope\n        if pow(Double(n), Double(i)) == Double(x)\
    \ {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    let root = Int(pow(Double(x), 1.0/Double(n)))\n    return root *\
    \ root == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpkkk6c0pg.swift:7:20: error: cannot find 'pow' in scope\n    let\
    \ root = Int(pow(Double(x), 1.0/Double(n)))\n                   ^~~\n/tmp/tmpkkk6c0pg.swift:8:24:\
    \ error: binary operator '==' cannot be applied to operands of type 'Duration'\
    \ and 'Int'\n    return root * root == x\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmpkkk6c0pg.swift:8:24:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Duration, Duration), (Int, Int)\n    return root * root == x\n            \
    \           ^\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i < x {\n        if\
    \ pow(Double(n), Double(i)) == Double(x) {\n            result = true\n      \
    \  }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmptaci_lik.swift:10:12: error: cannot find 'pow' in scope\n     \
    \   if pow(Double(n), Double(i)) == Double(x) {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i < x {\n        i *= n\n    }\n    return\
    \ i == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if x == 0 { return false }\n    if n == 0 { return false }\n   \
    \ if n == 1 { return true }\n    if x == 1 { return true }\n    if x == n { return\
    \ true }\n    var i = 1\n    var result = n\n    while result < x {\n        result\
    \ *= n\n        i += 1\n    }\n    if result == x {\n        return true\n   \
    \ }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978919
- exit_code: -1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i <= x {\n        if\
    \ i == x {\n            result = true\n        }\n        i *= n\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978923
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    return pow(Double(n), Double(x).log(n)) == Double(x)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp2w6sfi0c.swift:7:12: error: cannot find 'pow' in scope\n    return\
    \ pow(Double(n), Double(x).log(n)) == Double(x)\n           ^~~\n/tmp/tmp2w6sfi0c.swift:7:37:\
    \ error: value of type 'Double' has no member 'log'\n    return pow(Double(n),\
    \ Double(x).log(n)) == Double(x)\n                          ~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i < x {\n        if\
    \ i == x {\n            result = true\n        }\n        i *= n\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpjhzrfbbw/tmpjhzrfbbw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68e1c57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68e194eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68e194e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68e194d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjhzrfbbw                        0x0000560fba0151b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b68e1e43460 __libc_start_main +
    245

    6    tmpjhzrfbbw                        0x0000560fba014e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while pow(Double(n), Double(i)) <= Double(x) {\n\
    \        if pow(Double(n), Double(i)) == Double(x) {\n            return true\n\
    \        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuj19ulyc.swift:8:11: error: cannot find 'pow' in scope\n    while\
    \ pow(Double(n), Double(i)) <= Double(x) {\n          ^~~\n/tmp/tmpuj19ulyc.swift:9:12:\
    \ error: cannot find 'pow' in scope\n        if pow(Double(n), Double(i)) == Double(x)\
    \ {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i < x {\n        if\
    \ i == x {\n            result = true\n        }\n        i *= n\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpjhzrfbbw/tmpjhzrfbbw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68e1c57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68e194eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68e194e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68e194d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjhzrfbbw                        0x0000560fba0151b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b68e1e43460 __libc_start_main +
    245

    6    tmpjhzrfbbw                        0x0000560fba014e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978919
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i < x {\n        i *= n\n    }\n    return\
    \ i == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if x == 1 {\n        return true\n    }\n    var result = n\n  \
    \  while result < x {\n        result *= n\n    }\n    return result == x\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var power = n\n    while power < x {\n        power *= n\n    }\n\
    \    return power == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpgybn1nuy/tmpgybn1nuy.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b0341ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b03111b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b03111988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b031107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgybn1nuy                        0x000055562deb1626 <unavailable> + 5670

    5    libc.so.6                          0x00002b4b03606460 __libc_start_main +
    245

    6    tmpgybn1nuy                        0x000055562deb0e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 0\n    while pow(Double(n), Double(i)) < Double(x) {\n \
    \       i += 1\n    }\n    return pow(Double(n), Double(i)) == Double(x)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1gd33aqk.swift:8:11: error: cannot find 'pow' in scope\n    while\
    \ pow(Double(n), Double(i)) < Double(x) {\n          ^~~\n/tmp/tmp1gd33aqk.swift:11:12:\
    \ error: cannot find 'pow' in scope\n    return pow(Double(n), Double(i)) == Double(x)\n\
    \           ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    var result = 1\n    while result < x {\n        result\
    \ = n * i\n        i += 1\n    }\n    return result == x\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpp5dlaetr/tmpp5dlaetr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57897e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57894ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57894dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57894dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp5dlaetr                        0x000055c205b80417 <unavailable> + 5143

    5    libc.so.6                          0x00002b57899d2460 __libc_start_main +
    245

    6    tmpp5dlaetr                        0x000055c205b7fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978918
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var power = 1\n    while power < x {\n        power *= n\n    }\n\
    \    return power == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqlawcc4c.swift:7:21: error: cannot find 'pow' in scope\n    return\
    \ x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n   \
    \                 ^~~\n/tmp/tmpqlawcc4c.swift:7:47: error: cannot find 'log' in\
    \ scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n\
    \                                              ^~~\n/tmp/tmpqlawcc4c.swift:7:64:\
    \ error: cannot find 'log' in scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x))\
    \ / log(Double(n))))))\n                                                     \
    \          ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if x == 1 {\n        return true\n    }\n    var i = 2\n    while\
    \ i < x {\n        if i == x {\n            return true\n        }\n        i\
    \ *= n\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpunt_1nwv/tmpunt_1nwv.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fc0cacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fc09a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fc09a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fc09a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpunt_1nwv                        0x000055c3939a81b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b9fc0e98460 __libc_start_main +
    245

    6    tmpunt_1nwv                        0x000055c3939a7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    return pow(Double(n), Double(Int(log(Double(x)) / log(Double(n)))))\
    \ == Double(x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpr5rhtk7l.swift:7:12: error: cannot find 'pow' in scope\n    return\
    \ pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))) == Double(x)\n\
    \           ^~~\n/tmp/tmpr5rhtk7l.swift:7:38: error: cannot find 'log' in scope\n\
    \    return pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))) == Double(x)\n\
    \                                     ^~~\n/tmp/tmpr5rhtk7l.swift:7:55: error:\
    \ cannot find 'log' in scope\n    return pow(Double(n), Double(Int(log(Double(x))\
    \ / log(Double(n))))) == Double(x)\n                                         \
    \             ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var x = x\n    var n = n\n    if x == 1 {\n        return true\n\
    \    }\n    while x % n == 0 {\n        x /= n\n    }\n    return x == 1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978919
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i < x {\n        i *= n\n    }\n    return\
    \ i == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = 1\n    var i = 1\n    while result < x {\n        result\
    \ = n * i\n        i += 1\n    }\n    return result == x\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp987ijv3l/tmp987ijv3l.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b142ef86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b142ec7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b142ec7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b142ec7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp987ijv3l                        0x000055adaf158417 <unavailable> + 5143

    5    libc.so.6                          0x00002b142f172460 __libc_start_main +
    245

    6    tmp987ijv3l                        0x000055adaf157e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i < x {\n        if\
    \ pow(Double(n), Double(i)) == Double(x) {\n            result = true\n      \
    \  }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmptaci_lik.swift:10:12: error: cannot find 'pow' in scope\n     \
    \   if pow(Double(n), Double(i)) == Double(x) {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i < x {\n        if i == x {\n            return\
    \ true\n        }\n        i *= n\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpqqwo7e_n/tmpqqwo7e_n.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d96370c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d96067b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d96067988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d960667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqqwo7e_n                        0x0000561a0af931b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b7d9655c460 __libc_start_main +
    245

    6    tmpqqwo7e_n                        0x0000561a0af92e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 0\n    while pow(Double(n), Double(i)) < Double(x) {\n \
    \       i += 1\n    }\n    return pow(Double(n), Double(i)) == Double(x)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1gd33aqk.swift:8:11: error: cannot find 'pow' in scope\n    while\
    \ pow(Double(n), Double(i)) < Double(x) {\n          ^~~\n/tmp/tmp1gd33aqk.swift:11:12:\
    \ error: cannot find 'pow' in scope\n    return pow(Double(n), Double(i)) == Double(x)\n\
    \           ^~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    for i in 1...x {\n        if n.power(i)\
    \ == x {\n            result = true\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpvgsyg94l.swift:9:14: error: value of type 'Int' has no member 'power'\n\
    \        if n.power(i) == x {\n           ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659978919
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i < x {\n        if\
    \ pow(Double(n), Double(i)) == Double(x) {\n            result = true\n      \
    \  }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmptaci_lik.swift:10:12: error: cannot find 'pow' in scope\n     \
    \   if pow(Double(n), Double(i)) == Double(x) {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var power = n\n    while power < x {\n        power *= n\n    }\n\
    \    return power == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpgybn1nuy/tmpgybn1nuy.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b0341ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b03111b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b03111988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b031107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgybn1nuy                        0x000055562deb1626 <unavailable> + 5670

    5    libc.so.6                          0x00002b4b03606460 __libc_start_main +
    245

    6    tmpgybn1nuy                        0x000055562deb0e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978918
- exit_code: -1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var result = false\n    var i = 1\n    while i <= x {\n        if\
    \ i == x {\n            result = true\n        }\n        i *= n\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978923
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    if x == 1 {\n        return true\n    }\n    var i = 2\n    while\
    \ i < x {\n        if i == x {\n            return true\n        }\n        i\
    \ *= n\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpunt_1nwv/tmpunt_1nwv.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fc0cacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fc09a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fc09a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fc09a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpunt_1nwv                        0x000055c3939a81b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b9fc0e98460 __libc_start_main +
    245

    6    tmpunt_1nwv                        0x000055c3939a7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978919
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\nfunc is_simple_power(x: Int, n: Int) ->\
    \ Bool {\n    var i = 1\n    while i < x {\n        i *= n\n    }\n    return\
    \ i == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978918
