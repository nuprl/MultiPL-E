name: HumanEval_10_make_palindrome
language: swift
prompt: "\n/// Find the shortest palindrome that begins with a supplied string.\n\
  /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
  \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
  \ prefix that comes before the palindromic suffix.\nfunc make_palindrome(string:\
  \ String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(make_palindrome(string: \"\") == \"\")\n\
  assert(make_palindrome(string: \"x\") == \"x\")\nassert(make_palindrome(string:\
  \ \"xyz\") == \"xyzyx\")\nassert(make_palindrome(string: \"xyx\") == \"xyx\")\n\
  assert(make_palindrome(string: \"jerry\") == \"jerryrrej\")"
completions: ["    let string_length = string.characters.count\n    let string_characters\
    \ = Array(string.characters)\n    let reversed_string = String(string_characters.reverse())\n\
    \    let reversed_string_length = reversed_string.characters.count\n    let reversed_string_characters\
    \ = Array(reversed_string.characters)\n    var longest_palindrome_length = 0\n\
    \    var longest_palindrome_index = 0\n    var current_palindrome_length = 0\n\
    \    var current_palindrome_index = 0\n    var i = 0\n    var j = 0\n    while\
    \ i < string_length {\n        j = 0\n        while j < reversed_string_length\
    \ {\n            if string_characters[i] == reversed_string_characters[j] {\n\
    \                current_palindrome_length += 1\n                current_palindrome_index\
    \ = i\n                i += 1\n                j += 1\n            } else {\n\
    \                if current_palindrome_length > longest_palindrome_length {\n\
    \                    longest_palindrome_length = current_palindrome_length\n \
    \                   longest_palindrome_index = current_palindrome_index\n    \
    \            }\n                current_palindrome_length = 0\n              \
    \  current_palindrome_index = 0\n                i = i - current_palindrome_length\
    \ + 1\n                break\n            }\n        }\n    }\n    if current_palindrome_length\
    \ > longest_palindrome_length {\n        longest_palindrome_length = current_palindrome_length\n\
    \        longest_palindrome_index = current_palindrome_index\n    }\n    let prefix\
    \ = String(string_characters[0..<longest_palindrome_index])\n    let reversed_prefix\
    \ = String(prefix.characters.reverse())\n    return string + reversed_prefix",
  "    let string_length = string.characters.count\n    let string_array = Array(string.characters)\n\
    \    var palindrome_length = 0\n    var palindrome_start = 0\n    var palindrome_end\
    \ = 0\n    var i = 0\n    while i < string_length {\n        var j = 0\n     \
    \   while i - j >= 0 && i + j < string_length && string_array[i - j] == string_array[i\
    \ + j] {\n            j += 1\n        }\n        if j * 2 - 1 > palindrome_length\
    \ {\n            palindrome_length = j * 2 - 1\n            palindrome_start =\
    \ i - j + 1\n            palindrome_end = i + j - 1\n        }\n        j = 0\n\
    \        while i - j >= 0 && i + j + 1 < string_length && string_array[i - j]\
    \ == string_array[i + j + 1] {\n            j += 1\n        }\n        if j *\
    \ 2 > palindrome_length {\n            palindrome_length = j * 2\n           \
    \ palindrome_start = i - j + 1\n            palindrome_end = i + j\n        }\n\
    \        i += 1\n    }\n    var result = \"\"\n    for i in 0..<palindrome_start\
    \ {\n        result.append(string_array[i])\n    }\n    for i in (0..<string_length\
    \ - palindrome_end - 1).reversed() {\n        result.append(string_array[i])\n\
    \    }\n    for i in palindrome_start..<palindrome_end + 1 {\n        result.append(string_array[i])\n\
    \    }\n    return result", "    let reversed = String(string.characters.reverse())\n\
    \    let concatenated = string + \"#\" + reversed\n    let z = z_function(concatenated)\n\
    \    let z_max = z.maxElement()!\n    let z_max_index = z.indexOf(z_max)!\n  \
    \  let prefix = String(string.characters.prefix(string.characters.count - z_max_index))\n\
    \    return prefix + string", "    let reversed = String(string.characters.reverse())\n\
    \    let concatenated = string + \"#\" + reversed\n    let lps = longest_palindromic_substring(string:\
    \ concatenated)\n    let prefix = String(string.characters.dropLast(lps.characters.count))\n\
    \    let reversed_prefix = String(prefix.characters.reverse())\n    return prefix\
    \ + reversed_prefix", "    let string_length = string.characters.count\n    let\
    \ reversed_string = String(string.characters.reverse())\n    let reversed_string_length\
    \ = reversed_string.characters.count\n    var lps = [Int](count: reversed_string_length,\
    \ repeatedValue: 0)\n    var i = 1\n    var j = 0\n    while i < reversed_string_length\
    \ {\n        if reversed_string[i] == reversed_string[j] {\n            lps[i]\
    \ = j + 1\n            i += 1\n            j += 1\n        } else if j > 0 {\n\
    \            j = lps[j - 1]\n        } else {\n            lps[i] = 0\n      \
    \      i += 1\n        }\n    }\n    let prefix_length = string_length - lps[reversed_string_length\
    \ - 1]\n    let prefix = String(string.characters.prefix(prefix_length))\n   \
    \ let reversed_prefix = String(prefix.characters.reverse())\n    return string\
    \ + reversed_prefix", "    let reversed = String(string.characters.reverse())\n\
    \    let combined = string + \"#\" + reversed\n    let lps = longest_prefix_suffix(combined)\n\
    \    let prefix = String(string.characters.prefix(string.characters.count - lps))\n\
    \    return prefix + string", "    let str = string.characters.map { String($0)\
    \ }\n    let reversed = str.reverse()\n    let reversed_string = reversed.joinWithSeparator(\"\
    \")\n    let concatenated = string + reversed_string\n    let concatenated_length\
    \ = concatenated.characters.count\n    let concatenated_str = concatenated.characters.map\
    \ { String($0) }\n    let concatenated_suffix_array = suffix_array(concatenated_str)\n\
    \    let concatenated_lcp_array = lcp_array(concatenated_str, suffix_array: concatenated_suffix_array)\n\
    \    var max_lcp_index = 0\n    var max_lcp = 0\n    for i in 0..<concatenated_lcp_array.count\
    \ {\n        let lcp = concatenated_lcp_array[i]\n        if lcp > max_lcp {\n\
    \            max_lcp = lcp\n            max_lcp_index = i\n        }\n    }\n\
    \    let palindrome_suffix_index = concatenated_suffix_array[max_lcp_index]\n\
    \    let palindrome_suffix = concatenated.substringFromIndex(concatenated.startIndex.advancedBy(palindrome_suffix_index))\n\
    \    let prefix = string.substringToIndex(string.startIndex.advancedBy(string.characters.count\
    \ - palindrome_suffix.characters.count))\n    let reversed_prefix = prefix.characters.reverse().map\
    \ { String($0) }.joinWithSeparator(\"\")\n    return string + reversed_prefix",
  "    let reversed = String(string.characters.reverse())\n    let combined = string\
    \ + \"#\" + reversed\n    let lps = longest_prefix_suffix(combined)\n    let prefix\
    \ = String(string.characters.prefix(string.characters.count - lps.last!))\n  \
    \  return prefix + string", "    let reversed = String(string.characters.reverse())\n\
    \    let combined = string + \"#\" + reversed\n    let lps = longest_palindromic_substring(combined)\n\
    \    let prefix = String(string.characters.prefix(string.characters.count - lps.characters.count))\n\
    \    let reversed_prefix = String(prefix.characters.reverse())\n    return string\
    \ + reversed_prefix", "    let string_length = string.characters.count\n    let\
    \ string_chars = Array(string.characters)\n    let reversed_string = String(string_chars.reverse())\n\
    \    let reversed_string_chars = Array(reversed_string.characters)\n    \n   \
    \ var longest_palindrome_suffix_length = 0\n    var longest_palindrome_suffix_index\
    \ = 0\n    \n    for i in 0..<string_length {\n        let suffix_length = string_length\
    \ - i\n        let suffix = String(string_chars[i..<string_length])\n        let\
    \ reversed_suffix = String(reversed_string_chars[0..<suffix_length])\n       \
    \ \n        if suffix == reversed_suffix {\n            longest_palindrome_suffix_length\
    \ = suffix_length\n            longest_palindrome_suffix_index = i\n        }\n\
    \    }\n    \n    let prefix = String(string_chars[0..<longest_palindrome_suffix_index])\n\
    \    let reversed_prefix = String(reversed_string_chars[longest_palindrome_suffix_length..<string_length])\n\
    \    \n    return string + reversed_prefix", "    let string_length = string.characters.count\n\
    \    let string_array = Array(string.characters)\n    let reversed_string_array\
    \ = Array(string.characters.reversed())\n    \n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_index = 0\n    \n    for i in 0..<string_length\
    \ {\n        var j = 0\n        while j < string_length - i && string_array[i\
    \ + j] == reversed_string_array[j] {\n            j += 1\n        }\n        if\
    \ j > longest_palindrome_length {\n            longest_palindrome_length = j\n\
    \            longest_palindrome_index = i\n        }\n    }\n    \n    var result\
    \ = string\n    for i in 0..<string_length - longest_palindrome_length {\n   \
    \     result.append(reversed_string_array[i])\n    }\n    \n    return result",
  "    let reversed = String(string.characters.reverse())\n    let combined = string\
    \ + \"#\" + reversed\n    let z = z_function(combined)\n    let z_max = z.maxElement()!\n\
    \    let z_max_index = z.indexOf(z_max)!\n    let prefix = string[string.startIndex..<string.startIndex.advancedBy(z_max_index)]\n\
    \    let suffix = reversed[reversed.startIndex..<reversed.startIndex.advancedBy(z_max)]\n\
    \    return string + String(prefix.characters.reverse()) + suffix", "    let reversed\
    \ = String(string.characters.reverse())\n    let combined = string + \"#\" + reversed\n\
    \    let lps = longest_prefix_suffix(combined)\n    let prefix = String(string.characters.prefix(string.characters.count\
    \ - lps))\n    return prefix + string", "    let string_length = string.characters.count\n\
    \    let reversed_string = String(string.characters.reverse())\n    let string_with_reversed_prefix\
    \ = string + \"#\" + reversed_string\n    let string_with_reversed_prefix_length\
    \ = string_with_reversed_prefix.characters.count\n    var longest_prefix_suffix\
    \ = [Int](count: string_with_reversed_prefix_length, repeatedValue: 0)\n    var\
    \ longest_prefix_suffix_length = 0\n    for i in 1..<string_with_reversed_prefix_length\
    \ {\n        var j = longest_prefix_suffix[i - 1]\n        while j > 0 && string_with_reversed_prefix[i]\
    \ != string_with_reversed_prefix[j] {\n            j = longest_prefix_suffix[j\
    \ - 1]\n        }\n        if string_with_reversed_prefix[i] == string_with_reversed_prefix[j]\
    \ {\n            j += 1\n        }\n        longest_prefix_suffix[i] = j\n   \
    \     if j > longest_prefix_suffix_length {\n            longest_prefix_suffix_length\
    \ = j\n        }\n    }\n    let prefix_length = string_length - longest_prefix_suffix_length\n\
    \    let prefix = reversed_string[0..<prefix_length]\n    return string + prefix",
  "    let string_length = string.characters.count\n    let string_array = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n\
    \    var longest_palindrome_end = 0\n    var is_palindrome = Array(count: string_length,\
    \ repeatedValue: Array(count: string_length, repeatedValue: false))\n    for i\
    \ in 0..<string_length {\n        is_palindrome[i][i] = true\n    }\n    for i\
    \ in 0..<string_length - 1 {\n        if string_array[i] == string_array[i + 1]\
    \ {\n            is_palindrome[i][i + 1] = true\n            longest_palindrome_length\
    \ = 2\n            longest_palindrome_start = i\n            longest_palindrome_end\
    \ = i + 1\n        }\n    }\n    for i in 2..<string_length {\n        for j in\
    \ 0..<string_length - i {\n            if string_array[j] == string_array[j +\
    \ i] && is_palindrome[j + 1][j + i - 1] {\n                is_palindrome[j][j\
    \ + i] = true\n                longest_palindrome_length = i + 1\n           \
    \     longest_palindrome_start = j\n                longest_palindrome_end = j\
    \ + i\n            }\n        }\n    }\n    var result = \"\"\n    for i in 0..<longest_palindrome_start\
    \ {\n        result.append(string_array[i])\n    }\n    for i in (longest_palindrome_end\
    \ + 1).stride(to: string_length, by: 1) {\n        result.append(string_array[i])\n\
    \    }\n    for i in (longest_palindrome_start - 1).stride(to: -1, by: -1) {\n\
    \        result.append(string_array[i])\n    }\n    return result", "    let string_length\
    \ = string.characters.count\n    let string_characters = Array(string.characters)\n\
    \    let reversed_string = String(string_characters.reverse())\n    let reversed_string_length\
    \ = reversed_string.characters.count\n    let reversed_string_characters = Array(reversed_string.characters)\n\
    \    let reversed_string_characters_length = reversed_string_characters.count\n\
    \    var longest_prefix_length = 0\n    var longest_prefix_index = 0\n    var\
    \ longest_suffix_length = 0\n    var longest_suffix_index = 0\n    var longest_prefix_suffix_length\
    \ = 0\n    var longest_prefix_suffix_index = 0\n    var longest_suffix_prefix_length\
    \ = 0\n    var longest_suffix_prefix_index = 0\n    var longest_prefix_suffix_length_index\
    \ = 0\n    var longest_suffix_prefix_length_index = 0\n    var longest_prefix_suffix_length_index_length\
    \ = 0\n    var longest_suffix_prefix_length_index_length = 0\n    var longest_prefix_suffix_length_index_length_index\
    \ = 0\n    var longest_suffix_prefix_length_index_length_index = 0\n    var longest_prefix_suffix_length_index_length_index_length\
    \ = 0\n    var longest_suffix_prefix_length_index_length_index_length = 0\n  \
    \  var longest_prefix_suffix_length_index_length_index_length_index = 0\n    var\
    \ longest_suffix_prefix_length_index_length_index_length_index = 0\n    var longest_prefix_suffix_length_index_length_index_length_index_length\
    \ = 0\n    var longest_suffix_prefix_length_index_length_index_length_index_length\
    \ = 0\n    var longest_prefix_suffix_length_index_length_index_length_index_length_index\
    \ = 0\n    var longest_suffix_prefix_length_index_length_index_length_index_length_index\
    \ = 0\n    var longest_prefix_suffix_length_index_length_index_length_index_",
  "    let reversed = String(string.characters.reverse())\n    let longest_common_postfix\
    \ = longest_common_substring(string, reversed)\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(string.characters.count\
    \ - longest_common_postfix.characters.count))\n    return prefix + reversed",
  "    let string_length = string.characters.count\n    let string_characters = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n\
    \    var longest_palindrome_end = 0\n    var palindrome_length = 0\n    var palindrome_start\
    \ = 0\n    var palindrome_end = 0\n    var i = 0\n    while i < string_length\
    \ {\n        // Find the longest palindrome that starts at i.\n        palindrome_length\
    \ = 1\n        palindrome_start = i\n        palindrome_end = i\n        while\
    \ palindrome_start > 0 && palindrome_end < string_length - 1 && string_characters[palindrome_start\
    \ - 1] == string_characters[palindrome_end + 1] {\n            palindrome_length\
    \ += 2\n            palindrome_start -= 1\n            palindrome_end += 1\n \
    \       }\n        if palindrome_length > longest_palindrome_length {\n      \
    \      longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = palindrome_start\n            longest_palindrome_end = palindrome_end\n  \
    \      }\n        // Find the longest palindrome that starts at i and i + 1.\n\
    \        if i < string_length - 1 && string_characters[i] == string_characters[i\
    \ + 1] {\n            palindrome_length = 2\n            palindrome_start = i\n\
    \            palindrome_end = i + 1\n            while palindrome_start > 0 &&\
    \ palindrome_end < string_length - 1 && string_characters[palindrome_start - 1]\
    \ == string_characters[palindrome_end + 1] {\n                palindrome_length\
    \ += 2\n                palindrome_start -= 1\n                palindrome_end\
    \ += 1\n            }\n            if palindrome_length > longest_palindrome_length\
    \ {\n                longest_palindrome_length = palindrome_length\n         \
    \       longest_palindrome_start = palindrome_start\n                longest_palindrome_end\
    \ = palind", "    if string.isEmpty {\n        return \"\"\n    }\n    let reversed\
    \ = String(string.reversed())\n    let string_length = string.count\n    let reversed_length\
    \ = reversed.count\n    let max_length = string_length + reversed_length\n   \
    \ let string_with_reversed = string + \"#\" + reversed\n    let z_function = z_function_naive(string:\
    \ string_with_reversed)\n    var max_palindrome_length = 0\n    var max_palindrome_index\
    \ = 0\n    for index in 0..<max_length {\n        if z_function[index] == string_length\
    \ {\n            max_palindrome_length = string_length\n            max_palindrome_index\
    \ = index\n            break\n        }\n    }\n    if max_palindrome_length ==\
    \ 0 {\n        for index in 0..<max_length {\n            if z_function[index]\
    \ > max_palindrome_length {\n                max_palindrome_length = z_function[index]\n\
    \                max_palindrome_index = index\n            }\n        }\n    }\n\
    \    let prefix = String(string[..<string.index(string.startIndex, offsetBy: string_length\
    \ - max_palindrome_length)])\n    let reversed_prefix = String(prefix.reversed())\n\
    \    return string + reversed_prefix", "    let reversed = String(string.characters.reverse())\n\
    \    let combined = string + \"#\" + reversed\n    let lps = longest_prefix_suffix(combined)\n\
    \    let prefix = string.substringToIndex(string.startIndex.advancedBy(lps))\n\
    \    let suffix = String(prefix.characters.reverse())\n    return string + suffix",
  "    let reversed = String(string.characters.reverse())\n    let combined = string\
    \ + \"#\" + reversed\n    let lps = longest_prefix_suffix(combined)\n    let prefix\
    \ = string.substringToIndex(string.startIndex.advancedBy(lps))\n    let suffix\
    \ = String(prefix.characters.reverse())\n    return string + suffix", "    let\
    \ reversed = String(string.characters.reverse())\n    let concatenated = string\
    \ + \"#\" + reversed\n    let lps = longest_prefix_suffix(string: concatenated)\n\
    \    let prefix = string.substringToIndex(string.startIndex.advancedBy(lps.count))\n\
    \    let suffix = String(prefix.characters.reverse())\n    return string + suffix",
  "    let reversed = string.characters.reverse()\n    let reversed_string = String(reversed)\n\
    \    let string_length = string.characters.count\n    let reversed_string_length\
    \ = reversed_string.characters.count\n    var longest_palindrome_length = 0\n\
    \    var longest_palindrome_index = 0\n    var table = [[Int]](count: string_length,\
    \ repeatedValue: [Int](count: reversed_string_length, repeatedValue: 0))\n   \
    \ for i in 0..<string_length {\n        for j in 0..<reversed_string_length {\n\
    \            if string[i] == reversed_string[j] {\n                if i == 0 ||\
    \ j == 0 {\n                    table[i][j] = 1\n                } else {\n  \
    \                  table[i][j] = table[i - 1][j - 1] + 1\n                }\n\
    \                if table[i][j] > longest_palindrome_length {\n              \
    \      longest_palindrome_length = table[i][j]\n                    longest_palindrome_index\
    \ = i\n                }\n            }\n        }\n    }\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(longest_palindrome_index\
    \ + 1))\n    let reversed_prefix = prefix.characters.reverse()\n    let reversed_prefix_string\
    \ = String(reversed_prefix)\n    return prefix + reversed_prefix_string", "  \
    \  let string_length = string.characters.count\n    let string_array = Array(string.characters)\n\
    \    var palindrome_length = 0\n    var palindrome_index = 0\n    var palindrome_array\
    \ = [Character]()\n    var i = 0\n    while i < string_length {\n        var j\
    \ = 0\n        while i - j >= 0 && i + j < string_length && string_array[i - j]\
    \ == string_array[i + j] {\n            j += 1\n        }\n        j -= 1\n  \
    \      if j > palindrome_length {\n            palindrome_length = j\n       \
    \     palindrome_index = i\n        }\n        i += 1\n    }\n    i = 0\n    while\
    \ i < string_length {\n        var j = 0\n        while i - j >= 0 && i + j +\
    \ 1 < string_length && string_array[i - j] == string_array[i + j + 1] {\n    \
    \        j += 1\n        }\n        j -= 1\n        if j > palindrome_length {\n\
    \            palindrome_length = j\n            palindrome_index = i\n       \
    \ }\n        i += 1\n    }\n    i = 0\n    while i < palindrome_index - palindrome_length\
    \ {\n        palindrome_array.append(string_array[palindrome_index - palindrome_length\
    \ - i - 1])\n        i += 1\n    }\n    i = 0\n    while i < string_length {\n\
    \        palindrome_array.append(string_array[i])\n        i += 1\n    }\n   \
    \ i = 0\n    while i < palindrome_index - palindrome_length {\n        palindrome_array.append(string_array[palindrome_index\
    \ - palindrome_length - i - 1])\n        i += 1\n    }\n    return String(palindrome_array)",
  "    let string_length = string.count\n    let string_array = Array(string)\n  \
    \  var string_reversed = string_array.reversed()\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_position = 0\n    var current_palindrome_length\
    \ = 0\n    var current_palindrome_position = 0\n    var current_palindrome_position_reversed\
    \ = 0\n    var current_palindrome_length_reversed = 0\n    var i = 0\n    var\
    \ j = 0\n    while i < string_length {\n        j = 0\n        while j < string_length\
    \ - i {\n            if string_array[i + j] == string_reversed[j] {\n        \
    \        current_palindrome_length += 1\n                current_palindrome_position\
    \ = i\n            } else {\n                break\n            }\n          \
    \  j += 1\n        }\n        if current_palindrome_length > longest_palindrome_length\
    \ {\n            longest_palindrome_length = current_palindrome_length\n     \
    \       longest_palindrome_position = current_palindrome_position\n        }\n\
    \        current_palindrome_length = 0\n        i += 1\n    }\n    i = 0\n   \
    \ while i < string_length {\n        j = 0\n        while j < string_length -\
    \ i {\n            if string_array[i + j] == string_reversed[string_length - 1\
    \ - i - j] {\n                current_palindrome_length_reversed += 1\n      \
    \          current_palindrome_position_reversed = i\n            } else {\n  \
    \              break\n            }\n            j += 1\n        }\n        if\
    \ current_palindrome_length_reversed > longest_palindrome_length {\n         \
    \   longest_palindrome_length = current_palindrome_length_reversed\n         \
    \   longest_palindrome_position = current_palindrome_position_reversed\n     \
    \   }\n        current_palindrome_length_reversed = 0\n        i += 1\n    }\n\
    \    let prefix = string_array[0..<longest_palindrome_position].", "    let string_length\
    \ = string.characters.count\n    let string_chars = Array(string.characters)\n\
    \    var suffix_length = 0\n    var suffix_is_palindrome = false\n    while !suffix_is_palindrome\
    \ {\n        suffix_length += 1\n        suffix_is_palindrome = true\n       \
    \ for i in 0..<suffix_length/2 {\n            if string_chars[string_length -\
    \ suffix_length + i] != string_chars[string_length - i - 1] {\n              \
    \  suffix_is_palindrome = false\n                break\n            }\n      \
    \  }\n    }\n    var prefix_length = string_length - suffix_length\n    var prefix_chars\
    \ = [Character](repeating: \" \", count: prefix_length)\n    for i in 0..<prefix_length\
    \ {\n        prefix_chars[i] = string_chars[i]\n    }\n    return String(string_chars\
    \ + prefix_chars.reversed())", "    let reversed = String(string.characters.reverse())\n\
    \    let combined = string + \"#\" + reversed\n    let lps = longest_prefix_suffix(string:\
    \ combined)\n    let prefix = String(string.characters.prefix(string.characters.count\
    \ - lps.last!))\n    return prefix + string", "    let reversed = String(string.characters.reverse())\n\
    \    let combined = string + \"#\" + reversed\n    let lps = longest_prefix_suffix(combined)\n\
    \    let prefix = string.substringToIndex(string.startIndex.advancedBy(lps))\n\
    \    let suffix = reversed.substringFromIndex(reversed.startIndex.advancedBy(lps))\n\
    \    return prefix + suffix", "    let string_length = string.characters.count\n\
    \    let string_characters = Array(string.characters)\n    var palindrome_suffix_length\
    \ = 0\n    for i in 0..<string_length {\n        if is_palindrome(string: string_characters,\
    \ start: 0, end: string_length - i - 1) {\n            palindrome_suffix_length\
    \ = string_length - i\n            break\n        }\n    }\n    var result = string\n\
    \    for i in 0..<string_length - palindrome_suffix_length {\n        result.append(string_characters[i])\n\
    \    }\n    return result", "    let string_length = string.characters.count\n\
    \    let string_characters = Array(string.characters)\n    var prefix_length =\
    \ 0\n    var suffix_length = 0\n    var suffix_start = 0\n    var suffix_end =\
    \ 0\n    var prefix_start = 0\n    var prefix_end = 0\n    var palindrome_length\
    \ = 0\n    var palindrome_start = 0\n    var palindrome_end = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var m = 0\n    var n = 0\n    var p = 0\n \
    \   var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n  \
    \  var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n   \
    \ var aa = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n    var ae = 0\n\
    \    var af = 0\n    var ag = 0\n    var ah = 0\n    var ai = 0\n    var aj =\
    \ 0\n    var ak = 0\n    var al = 0\n    var am = 0\n    var an = 0\n    var ao\
    \ = 0\n    var ap = 0\n    var aq = 0\n    var ar = 0\n    var as = 0\n    var\
    \ at = 0\n    var au = 0\n    var av = 0\n    var aw = 0\n    var ax = 0\n   \
    \ var ay = 0\n    var az = 0\n    var ba = 0\n    var bb = 0\n    var bc = 0\n\
    \    var bd = 0\n    var be = 0\n    var bf = 0\n    var bg = 0\n    var bh =\
    \ 0\n    var bi = 0\n    var bj = 0\n    var bk = 0\n    var bl = 0\n    var bm\
    \ = 0\n    var bn = 0\n    var bo = 0\n    var bp = 0\n    var bq = 0\n    var\
    \ br = 0\n    var bs = 0\n    var bt = 0\n    var bu = 0\n    var bv = 0\n   ",
  "    let string_length = string.characters.count\n    let string_chars = Array(string.characters)\n\
    \    let reversed_string = String(string_chars.reverse())\n    let reversed_string_length\
    \ = reversed_string.characters.count\n    let reversed_string_chars = Array(reversed_string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n\
    \    var i = 0\n    while i < string_length {\n        var j = 0\n        while\
    \ j < reversed_string_length {\n            var k = 0\n            while k < string_length\
    \ - i && k < reversed_string_length - j && string_chars[i + k] == reversed_string_chars[j\
    \ + k] {\n                k += 1\n            }\n            if k > longest_palindrome_length\
    \ {\n                longest_palindrome_length = k\n                longest_palindrome_start\
    \ = i\n            }\n            j += 1\n        }\n        i += 1\n    }\n \
    \   return string + String(string_chars[0..<longest_palindrome_start].reverse())",
  "    let string_length = string.count\n    let string_chars = Array(string)\n  \
    \  var suffix_length = 0\n    var suffix_start = 0\n    var prefix_length = 0\n\
    \    var prefix_start = 0\n    var palindrome_length = 0\n    var palindrome_start\
    \ = 0\n    var palindrome_end = 0\n    var i = 0\n    var j = 0\n    var k = 0\n\
    \    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n \
    \   var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n  \
    \  var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n   \
    \ var aa = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n    var ae = 0\n\
    \    var af = 0\n    var ag = 0\n    var ah = 0\n    var ai = 0\n    var aj =\
    \ 0\n    var ak = 0\n    var al = 0\n    var am = 0\n    var an = 0\n    var ao\
    \ = 0\n    var ap = 0\n    var aq = 0\n    var ar = 0\n    var as = 0\n    var\
    \ at = 0\n    var au = 0\n    var av = 0\n    var aw = 0\n    var ax = 0\n   \
    \ var ay = 0\n    var az = 0\n    var ba = 0\n    var bb = 0\n    var bc = 0\n\
    \    var bd = 0\n    var be = 0\n    var bf = 0\n    var bg = 0\n    var bh =\
    \ 0\n    var bi = 0\n    var bj = 0\n    var bk = 0\n    var bl = 0\n    var bm\
    \ = 0\n    var bn = 0\n    var bo = 0\n    var bp = 0\n    var bq = 0\n    var\
    \ br = 0\n    var bs = 0\n    var bt = 0\n    var bu = 0\n    var bv = 0\n   \
    \ var bw = 0\n    var bx", "    let string_length = string.characters.count\n\
    \    let reversed_string = String(string.characters.reverse())\n    let string_with_reversed_prefix\
    \ = string + \"#\" + reversed_string\n    let string_with_reversed_prefix_length\
    \ = string_with_reversed_prefix.characters.count\n    var longest_prefix_suffix\
    \ = [Int](count: string_with_reversed_prefix_length, repeatedValue: 0)\n    var\
    \ longest_prefix_suffix_length = 0\n    for i in 1..<string_with_reversed_prefix_length\
    \ {\n        var j = longest_prefix_suffix[i - 1]\n        while j > 0 && string_with_reversed_prefix[i]\
    \ != string_with_reversed_prefix[j] {\n            j = longest_prefix_suffix[j\
    \ - 1]\n        }\n        if string_with_reversed_prefix[i] == string_with_reversed_prefix[j]\
    \ {\n            j += 1\n        }\n        longest_prefix_suffix[i] = j\n   \
    \     if j > longest_prefix_suffix_length {\n            longest_prefix_suffix_length\
    \ = j\n        }\n    }\n    let prefix_length = string_length - longest_prefix_suffix_length\n\
    \    let prefix = reversed_string[0..<prefix_length]\n    return string + prefix",
  "    let string_length = string.characters.count\n    let string_array = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_end = 0\n \
    \   var longest_palindrome_start = 0\n    var longest_palindrome_end_index = 0\n\
    \    var longest_palindrome_start_index = 0\n    var longest_palindrome_length_array\
    \ = [Int](count: string_length, repeatedValue: 0)\n    for i in 0..<string_length\
    \ {\n        longest_palindrome_length_array[i] = 0\n    }\n    for i in 0..<string_length\
    \ {\n        let mirror_index = 2 * string_length - i - 1\n        if i > longest_palindrome_end\
    \ {\n            longest_palindrome_length_array[i] = 0\n        } else {\n  \
    \          longest_palindrome_length_array[i] = min(longest_palindrome_end - i,\
    \ longest_palindrome_length_array[mirror_index])\n        }\n        while i -\
    \ 1 - longest_palindrome_length_array[i] >= 0 && i + 1 + longest_palindrome_length_array[i]\
    \ < string_length && string_array[i - 1 - longest_palindrome_length_array[i]]\
    \ == string_array[i + 1 + longest_palindrome_length_array[i]] {\n            longest_palindrome_length_array[i]\
    \ += 1\n        }\n        if i + longest_palindrome_length_array[i] > longest_palindrome_end\
    \ {\n            longest_palindrome_end = i + longest_palindrome_length_array[i]\n\
    \            longest_palindrome_start = i - longest_palindrome_length_array[i]\n\
    \        }\n        if longest_palindrome_length_array[i] > longest_palindrome_length\
    \ {\n            longest_palindrome_length = longest_palindrome_length_array[i]\n\
    \            longest_palindrome_end_index = i\n            longest_palindrome_start_index\
    \ = i - longest", "    let string_length = string.characters.count\n    let string_chars\
    \ = Array(string.characters)\n    let reversed_string = String(string_chars.reverse())\n\
    \    let reversed_string_chars = Array(reversed_string.characters)\n    \n   \
    \ let lps = longest_palindromic_suffix(string: string)\n    let lps_length = lps.characters.count\n\
    \    \n    let prefix = String(string_chars[0..<(string_length - lps_length)])\n\
    \    let prefix_chars = Array(prefix.characters)\n    let reversed_prefix = String(prefix_chars.reverse())\n\
    \    \n    return prefix + reversed_prefix + lps", "    let reversed = string.characters.reverse()\n\
    \    let combined = string + \"#\" + String(reversed)\n    let z = z_function(combined)\n\
    \    let z_max = z.maxElement()!\n    let end_index = z.indexOf(z_max)!\n    let\
    \ prefix = string.substringToIndex(string.startIndex.advancedBy(end_index))\n\
    \    let suffix = String(prefix.characters.reverse())\n    return string + suffix",
  "    let reversed = String(string.characters.reverse())\n    let concatenated =\
    \ string + \"#\" + reversed\n    let lps = longest_prefix_suffix(string: concatenated)\n\
    \    let prefix = string.substringToIndex(string.startIndex.advancedBy(lps.count))\n\
    \    let suffix = String(prefix.characters.reverse())\n    return string + suffix",
  "    let string_length = string.characters.count\n    let string_array = Array(string.characters)\n\
    \    var suffix_length = 0\n    var suffix_palindrome_length = 0\n    var suffix_palindrome_start\
    \ = 0\n    var suffix_palindrome_end = 0\n    var prefix_length = 0\n    var prefix_palindrome_length\
    \ = 0\n    var prefix_palindrome_start = 0\n    var prefix_palindrome_end = 0\n\
    \    var palindrome_length = 0\n    var palindrome_start = 0\n    var palindrome_end\
    \ = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m =\
    \ 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n\
    \    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n \
    \   var x = 0\n    var y = 0\n    var z = 0\n    var aa = 0\n    var ab = 0\n\
    \    var ac = 0\n    var ad = 0\n    var ae = 0\n    var af = 0\n    var ag =\
    \ 0\n    var ah = 0\n    var ai = 0\n    var aj = 0\n    var ak = 0\n    var al\
    \ = 0\n    var am = 0\n    var an = 0\n    var ao = 0\n    var ap = 0\n    var\
    \ aq = 0\n    var ar = 0\n    var as = 0\n    var at = 0\n    var au = 0\n   \
    \ var av = 0\n    var aw = 0\n    var ax = 0\n    var ay = 0\n    var az = 0\n\
    \    var ba = 0\n    var bb = 0\n    var bc = 0\n    var bd = 0\n    var be =\
    \ 0\n    var bf = 0\n    var bg = 0\n    var bh = 0\n    var bi = 0\n    var bj\
    \ = 0\n    var bk = 0\n    var bl = 0\n    var bm = 0\n    var bn = 0\n    var\
    \ bo", "    let string_length = string.characters.count\n    let string_array\
    \ = Array(string.characters)\n    var string_array_reversed = string_array.reverse()\n\
    \    var string_array_reversed_length = string_array_reversed.count\n    var string_array_reversed_index\
    \ = 0\n    var string_array_index = 0\n    var string_array_index_max = 0\n  \
    \  var string_array_index_max_length = 0\n    var string_array_index_max_length_max\
    \ = 0\n    var string_array_index_max_length_max_index = 0\n    var string_array_index_max_length_max_index_max\
    \ = 0\n    var string_array_index_max_length_max_index_max_length = 0\n    var\
    \ string_array_index_max_length_max_index_max_length_max = 0\n    var string_array_index_max_length_max_index_max_length_max_index\
    \ = 0\n    var string_array_index_max_length_max_index_max_length_max_index_max\
    \ = 0\n    var string_array_index_max_length_max_index_max_length_max_index_max_length\
    \ = 0\n    var string_array_index_max_length_max_index_max_length_max_index_max_length_max\
    \ = 0\n    var string_array_index_max_length_max_index_max_length_max_index_max_length_max_index\
    \ = 0\n    var string_array_index_max_length_max_index_max_length_max_index_max_length_max_index_max\
    \ = 0\n    var string_array_index_max_length_max_index_max_length_max_index_max_length_max_index_max_length\
    \ = 0\n    var string_array_index_max_length_max_index_max_length_max_index_max_length_max_index_max_length_max\
    \ = 0\n    var string_array_index_max_length_max_index_max_length_max_index_max_length_max_index",
  "    let string_length = string.characters.count\n    let string_array = Array(string.characters)\n\
    \    var i = 0\n    var j = string_length - 1\n    while i < j {\n        if string_array[i]\
    \ != string_array[j] {\n            break\n        }\n        i += 1\n       \
    \ j -= 1\n    }\n    if i >= j {\n        return string\n    }\n    var prefix\
    \ = string.substring(to: string.index(string.startIndex, offsetBy: i))\n    var\
    \ suffix = string.substring(from: string.index(string.startIndex, offsetBy: j\
    \ + 1))\n    return prefix + String(suffix.characters.reversed()) + suffix", " \
    \   let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    if string_length == 1 {\n        return string\n\
    \    }\n    let string_array = Array(string.characters)\n    let reversed_string_array\
    \ = Array(string.characters.reversed())\n    var longest_palindrome_length = 0\n\
    \    var longest_palindrome_index = 0\n    var current_palindrome_length = 0\n\
    \    var current_palindrome_index = 0\n    for i in 0..<string_length {\n    \
    \    if string_array[i] == reversed_string_array[i] {\n            current_palindrome_length\
    \ += 1\n            if current_palindrome_length > longest_palindrome_length {\n\
    \                longest_palindrome_length = current_palindrome_length\n     \
    \           longest_palindrome_index = current_palindrome_index\n            }\n\
    \        } else {\n            current_palindrome_length = 0\n            current_palindrome_index\
    \ = i + 1\n        }\n    }\n    let prefix = string.substring(to: string.index(string.startIndex,\
    \ offsetBy: longest_palindrome_index))\n    let reversed_prefix = String(prefix.characters.reversed())\n\
    \    return string + reversed_prefix", "    let reversed = string.reversed()\n\
    \    let string_length = string.count\n    let reversed_length = reversed.count\n\
    \    let string_chars = Array(string)\n    let reversed_chars = Array(reversed)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_end = 0\n \
    \   var dp = Array(repeating: Array(repeating: 0, count: reversed_length + 1),\
    \ count: string_length + 1)\n    for i in 1...string_length {\n        for j in\
    \ 1...reversed_length {\n            if string_chars[i - 1] == reversed_chars[j\
    \ - 1] {\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                if\
    \ dp[i][j] > longest_palindrome_length {\n                    longest_palindrome_length\
    \ = dp[i][j]\n                    longest_palindrome_end = i\n               \
    \ }\n            }\n        }\n    }\n    return string + String(string_chars[0..<(string_length\
    \ - longest_palindrome_end)].reversed())", "    let string_length = string.characters.count\n\
    \    let string_array = Array(string.characters)\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_start = 0\n    var i = 0\n    while i < string_length\
    \ {\n        var j = i\n        var k = i\n        while k < string_length - 1\
    \ && string_array[k + 1] == string_array[k] {\n            k += 1\n        }\n\
    \        i = k + 1\n        while k < string_length - 1 && j > 0 && string_array[k\
    \ + 1] == string_array[j - 1] {\n            k += 1\n            j -= 1\n    \
    \    }\n        let new_palindrome_length = k - j + 1\n        if new_palindrome_length\
    \ > longest_palindrome_length {\n            longest_palindrome_length = new_palindrome_length\n\
    \            longest_palindrome_start = j\n        }\n    }\n    let prefix =\
    \ String(string_array[0..<longest_palindrome_start])\n    let suffix = String(string_array[longest_palindrome_start..<longest_palindrome_start\
    \ + longest_palindrome_length])\n    return prefix + String(suffix.characters.reversed())\
    \ + suffix", "    let reversed = String(string.characters.reverse())\n    let\
    \ combined = string + \"#\" + reversed\n    let lps = longest_prefix_suffix(combined)\n\
    \    let prefix = String(string.characters.prefix(string.characters.count - lps.last!))\n\
    \    return prefix + string", "    let string_length = string.characters.count\n\
    \    let string_chars = Array(string.characters)\n    var suffix_length = 0\n\
    \    var suffix_start = 0\n    var prefix_start = 0\n    var prefix_length = 0\n\
    \    var palindrome_length = 0\n    var palindrome_start = 0\n    var palindrome_end\
    \ = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m =\
    \ 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n\
    \    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n \
    \   var x = 0\n    var y = 0\n    var z = 0\n    var aa = 0\n    var ab = 0\n\
    \    var ac = 0\n    var ad = 0\n    var ae = 0\n    var af = 0\n    var ag =\
    \ 0\n    var ah = 0\n    var ai = 0\n    var aj = 0\n    var ak = 0\n    var al\
    \ = 0\n    var am = 0\n    var an = 0\n    var ao = 0\n    var ap = 0\n    var\
    \ aq = 0\n    var ar = 0\n    var as = 0\n    var at = 0\n    var au = 0\n   \
    \ var av = 0\n    var aw = 0\n    var ax = 0\n    var ay = 0\n    var az = 0\n\
    \    var ba = 0\n    var bb = 0\n    var bc = 0\n    var bd = 0\n    var be =\
    \ 0\n    var bf = 0\n    var bg = 0\n    var bh = 0\n    var bi = 0\n    var bj\
    \ = 0\n    var bk = 0\n    var bl = 0\n    var bm = 0\n    var bn = 0\n    var\
    \ bo = 0\n    var bp = 0\n    var bq = 0\n    var br = 0\n    var bs = 0\n   \
    \ var bt = 0\n    var bu = 0\n    var bv = 0\n    var bw =", "    let string_length\
    \ = string.characters.count\n    let string_array = Array(string.characters)\n\
    \    let reversed_string_array = Array(string.characters.reversed())\n    \n \
    \   var longest_palindrome_length = 0\n    var longest_palindrome_index = 0\n\
    \    \n    // Find the longest palindrome suffix.\n    for i in 0..<string_length\
    \ {\n        var j = 0\n        var k = string_length - 1 - i\n        \n    \
    \    while j < k && string_array[j] == reversed_string_array[k] {\n          \
    \  j += 1\n            k -= 1\n        }\n        \n        if j >= k && string_length\
    \ - i > longest_palindrome_length {\n            longest_palindrome_length = string_length\
    \ - i\n            longest_palindrome_index = i\n        }\n    }\n    \n    //\
    \ Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    var result = string\n    for i in 0..<longest_palindrome_index\
    \ {\n        result.append(reversed_string_array[i])\n    }\n    \n    return\
    \ result", "    let reversed = String(string.characters.reverse())\n    let combined\
    \ = string + \"|\" + reversed\n    let z_array = z_function(combined)\n    let\
    \ z_array_without_first_element = Array(z_array[1..<z_array.count])\n    let max_z_value\
    \ = z_array_without_first_element.maxElement()!\n    let max_z_index = z_array_without_first_element.indexOf(max_z_value)!\n\
    \    let prefix = String(string.characters.prefix(string.characters.count - max_z_index))\n\
    \    let reversed_prefix = String(prefix.characters.reverse())\n    return prefix\
    \ + string + reversed_prefix", "    let string_length = string.characters.count\n\
    \    let string_array = Array(string.characters)\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_start = 0\n    var longest_palindrome_end =\
    \ 0\n    for i in 0..<string_length {\n        var j = 0\n        while i - j\
    \ >= 0 && i + j < string_length && string_array[i - j] == string_array[i + j]\
    \ {\n            j += 1\n        }\n        if j > longest_palindrome_length {\n\
    \            longest_palindrome_length = j\n            longest_palindrome_start\
    \ = i - j + 1\n            longest_palindrome_end = i + j - 1\n        }\n   \
    \ }\n    var result = string\n    for i in longest_palindrome_start - 1..<string_length\
    \ - (longest_palindrome_end - longest_palindrome_start + 1) {\n        result.insert(string_array[i],\
    \ at: result.startIndex)\n    }\n    return result", "    let string_length =\
    \ string.count\n    let string_chars = Array(string)\n    var longest_palindrome_suffix_length\
    \ = 0\n    for i in 0..<string_length {\n        if is_palindrome(string: string_chars[0..<i])\
    \ {\n            longest_palindrome_suffix_length = i\n        }\n    }\n    var\
    \ prefix = Array(string_chars[0..<(string_length - longest_palindrome_suffix_length)])\n\
    \    prefix.reverse()\n    return String(string_chars) + String(prefix)", "  \
    \  let reversed = String(string.characters.reverse())\n    let combined = string\
    \ + \"|\" + reversed\n    let z_array = z_function(combined)\n    let z_array_reversed\
    \ = z_array.reverse()\n    let z_array_reversed_without_first = Array(z_array_reversed.dropFirst())\n\
    \    let z_array_without_last = Array(z_array.dropLast())\n    let z_array_without_last_and_first\
    \ = zip(z_array_without_last, z_array_reversed_without_first)\n    let z_array_without_last_and_first_filtered\
    \ = z_array_without_last_and_first.filter { $0.0 == $0.1 }\n    let z_array_without_last_and_first_filtered_max\
    \ = z_array_without_last_and_first_filtered.maxElement { $0.0 < $1.0 }\n    let\
    \ z_array_without_last_and_first_filtered_max_value = z_array_without_last_and_first_filtered_max?.0\n\
    \    let z_array_without_last_and_first_filtered_max_index = z_array_without_last_and_first_filtered_max?.1\n\
    \    let z_array_without_last_and_first_filtered_max_index_plus_one = z_array_without_last_and_first_filtered_max_index!\
    \ + 1\n    let prefix = String(string.characters.prefix(string.characters.count\
    \ - z_array_without_last_and_first_filtered_max_index_plus_one))\n    let prefix_reversed\
    \ = String(prefix.characters.reverse())\n    return string + prefix_reversed",
  "    let reversed = String(string.characters.reverse())\n    let combined = string\
    \ + \"#\" + reversed\n    let z = z_function(combined)\n    let z_max = z.maxElement()!\n\
    \    let z_max_index = z.indexOf(z_max)!\n    let prefix = string[string.startIndex..<string.startIndex.advancedBy(z_max_index)]\n\
    \    let suffix = reversed[reversed.startIndex..<reversed.startIndex.advancedBy(z_max)]\n\
    \    return string + String(prefix.characters.reverse()) + suffix", "    let string_length\
    \ = string.characters.count\n    let string_array = Array(string.characters)\n\
    \    var palindrome_length = 0\n    var palindrome_start = 0\n    var palindrome_end\
    \ = 0\n    var i = 0\n    while i < string_length {\n        var j = 0\n     \
    \   while i - j >= 0 && i + j < string_length && string_array[i - j] == string_array[i\
    \ + j] {\n            j += 1\n        }\n        if j > palindrome_length {\n\
    \            palindrome_length = j\n            palindrome_start = i - j + 1\n\
    \            palindrome_end = i + j - 1\n        }\n        i += 1\n    }\n  \
    \  var result = string\n    for i in 0..<palindrome_start {\n        result.append(string_array[palindrome_start\
    \ - i - 1])\n    }\n    return result", "    let reversed = String(string.characters.reverse())\n\
    \    let combined = string + \"#\" + reversed\n    let lps = longest_prefix_suffix(combined)\n\
    \    let prefix = string.substringToIndex(string.startIndex.advancedBy(lps))\n\
    \    let suffix = String(prefix.characters.reverse())\n    return string + suffix",
  "    let string_length = string.characters.count\n    let string_characters = Array(string.characters)\n\
    \    var i = 0\n    var j = string_length - 1\n    while i < j {\n        if string_characters[i]\
    \ != string_characters[j] {\n            break\n        }\n        i += 1\n  \
    \      j -= 1\n    }\n    if i >= j {\n        return string\n    }\n    let suffix\
    \ = String(string_characters[i...j])\n    let prefix = String(string_characters[0..<i])\n\
    \    return prefix + suffix + String(suffix.characters.reversed())", "    let\
    \ string_length = string.characters.count\n    let string_array = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_index = 0\n\
    \    var i = 0\n    while i < string_length {\n        var j = i\n        var\
    \ k = i\n        while k < string_length - 1 && string_array[k] == string_array[k\
    \ + 1] {\n            k += 1\n        }\n        i = k + 1\n        while j >\
    \ 0 && k < string_length - 1 && string_array[j - 1] == string_array[k + 1] {\n\
    \            j -= 1\n            k += 1\n        }\n        if k - j + 1 > longest_palindrome_length\
    \ {\n            longest_palindrome_length = k - j + 1\n            longest_palindrome_index\
    \ = j\n        }\n    }\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(longest_palindrome_index))\n\
    \    let reverse_prefix = String(prefix.characters.reverse())\n    return string\
    \ + reverse_prefix", "    let reversed = string.reverse()\n    let concatenated\
    \ = string + \"#\" + reversed\n    let z_array = z_algorithm(string: concatenated)\n\
    \    let z_array_without_first_element = Array(z_array[1..<z_array.count])\n \
    \   let max_z_value = z_array_without_first_element.maxElement()!\n    let max_z_index\
    \ = z_array_without_first_element.indexOf(max_z_value)!\n    let prefix = string[0..<(string.characters.count\
    \ - max_z_index)]\n    let reversed_prefix = prefix.reverse()\n    return reversed_prefix\
    \ + string", "    let reversed = String(string.characters.reverse())\n    let\
    \ combined = string + \"#\" + reversed\n    let lps = longest_prefix_suffix(string:\
    \ combined)\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(lps.count))\n\
    \    let suffix = String(prefix.characters.reverse())\n    return string + suffix",
  "    let reversed = String(string.characters.reverse())\n    let combined = string\
    \ + \"#\" + reversed\n    let lps = longest_prefix_suffix(combined)\n    let prefix\
    \ = string.substringToIndex(string.startIndex.advancedBy(lps.count))\n    let\
    \ suffix = String(prefix.characters.reverse())\n    return string + suffix", " \
    \   let string_length = string.characters.count\n    let reversed_string = String(string.characters.reverse())\n\
    \    let string_plus_reversed = string + \"#\" + reversed_string\n    let string_plus_reversed_length\
    \ = string_plus_reversed.characters.count\n    var longest_palindrome_suffix =\
    \ [Int](count: string_plus_reversed_length, repeatedValue: 0)\n    var current_longest_palindrome_suffix_length\
    \ = 0\n    for i in 1..<string_plus_reversed_length {\n        let mirror_i =\
    \ current_longest_palindrome_suffix_length + 1\n        if i < mirror_i {\n  \
    \          longest_palindrome_suffix[i] = min(mirror_i - i, longest_palindrome_suffix[2\
    \ * current_longest_palindrome_suffix_length - i])\n        }\n        while i\
    \ + 1 + longest_palindrome_suffix[i] < string_plus_reversed_length && i - 1 -\
    \ longest_palindrome_suffix[i] >= 0 && string_plus_reversed[string_plus_reversed.startIndex.advancedBy(i\
    \ + 1 + longest_palindrome_suffix[i])] == string_plus_reversed[string_plus_reversed.startIndex.advancedBy(i\
    \ - 1 - longest_palindrome_suffix[i])] {\n            longest_palindrome_suffix[i]\
    \ += 1\n        }\n        if i + longest_palindrome_suffix[i] > current_longest_palindrome_suffix_length\
    \ + longest_palindrome_suffix[current_longest_palindrome_suffix_length] {\n  \
    \          current_longest_palindrome_suffix_length = i\n        }\n    }\n  \
    \  let longest_palindrome_suffix_length = longest_palindrome_suffix[current_longest_palindrome_suffix_length]\n\
    \    let prefix_length = string_length - longest_palindrome_suffix_length\n  \
    \  let prefix = string", "    let string_length = string.characters.count\n  \
    \  let string_chars = Array(string.characters)\n    var i = 0\n    var j = string_length\
    \ - 1\n    while i < j {\n        if string_chars[i] != string_chars[j] {\n  \
    \          break\n        }\n        i += 1\n        j -= 1\n    }\n    if i >=\
    \ j {\n        return string\n    }\n    let prefix = string.substring(to: string.index(string.startIndex,\
    \ offsetBy: i))\n    let suffix = string.substring(from: string.index(string.startIndex,\
    \ offsetBy: i))\n    return prefix + String(suffix.characters.reversed()) + suffix",
  "    let string_length = string.characters.count\n    let string_characters = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_end = 0\n \
    \   var palindrome_lengths = [Int](count: string_length, repeatedValue: 0)\n \
    \   for i in 0..<string_length {\n        let mirror = 2 * longest_palindrome_end\
    \ - i\n        if i < longest_palindrome_end {\n            palindrome_lengths[i]\
    \ = min(longest_palindrome_length - i, palindrome_lengths[mirror])\n        }\n\
    \        while i - palindrome_lengths[i] - 1 >= 0 && i + palindrome_lengths[i]\
    \ + 1 < string_length && string_characters[i - palindrome_lengths[i] - 1] == string_characters[i\
    \ + palindrome_lengths[i] + 1] {\n            palindrome_lengths[i] += 1\n   \
    \     }\n        if i + palindrome_lengths[i] > longest_palindrome_end {\n   \
    \         longest_palindrome_end = i + palindrome_lengths[i]\n            longest_palindrome_length\
    \ = palindrome_lengths[i]\n        }\n    }\n    let palindrome_end = longest_palindrome_end\n\
    \    let palindrome_length = longest_palindrome_length\n    let palindrome_start\
    \ = palindrome_end - palindrome_length\n    let prefix_start = palindrome_start\
    \ - 1\n    let prefix_end = palindrome_end\n    let prefix_length = prefix_end\
    \ - prefix_start\n    let prefix_characters = Array(string_characters[prefix_start..<prefix_end])\n\
    \    let prefix_reversed = prefix_characters.reverse()\n    let palindrome = string_characters[0..<palindrome_start]\
    \ + prefix_reversed\n    return String(palindrome)", "    let string_length =\
    \ string.count\n    let string_chars = Array(string)\n    var suffix_length =\
    \ 0\n    var suffix_start = 0\n    var suffix_end = 0\n    var prefix_start =\
    \ 0\n    var prefix_end = 0\n    var prefix_length = 0\n    var prefix_palindrome_length\
    \ = 0\n    var suffix_palindrome_length = 0\n    var palindrome_length = 0\n \
    \   var palindrome_start = 0\n    var palindrome_end = 0\n    var palindrome_length_max\
    \ = 0\n    var palindrome_start_max = 0\n    var palindrome_end_max = 0\n    var\
    \ prefix_palindrome_length_max = 0\n    var suffix_palindrome_length_max = 0\n\
    \    var prefix_length_max = 0\n    var prefix_start_max = 0\n    var prefix_end_max\
    \ = 0\n    var suffix_length_max = 0\n    var suffix_start_max = 0\n    var suffix_end_max\
    \ = 0\n    var palindrome_length_max_max = 0\n    var palindrome_start_max_max\
    \ = 0\n    var palindrome_end_max_max = 0\n    var prefix_palindrome_length_max_max\
    \ = 0\n    var suffix_palindrome_length_max_max = 0\n    var prefix_length_max_max\
    \ = 0\n    var prefix_start_max_max = 0\n    var prefix_end_max_max = 0\n    var\
    \ suffix_length_max_max = 0\n    var suffix_start_max_max = 0\n    var suffix_end_max_max\
    \ = 0\n    var palindrome_length_max_max_max = 0\n    var palindrome_start_max_max_max\
    \ = 0\n    var palindrome_end_max_max_max = 0\n    var prefix_palindrome_length_max_max_max\
    \ = 0\n    var suffix_palindrome_length_max_max_max = 0\n    var prefix_length_max_max_max\
    \ = 0\n    var prefix_start_max_max_max = 0\n    var prefix_end", "    let string_length\
    \ = string.characters.count\n    let string_array = Array(string.characters)\n\
    \    var suffix_array = [Int](count: string_length, repeatedValue: 0)\n    var\
    \ prefix_array = [Int](count: string_length, repeatedValue: 0)\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var m = 0\n    var n = 0\n    var longest_suffix_length\
    \ = 0\n    var longest_suffix_index = 0\n    var longest_prefix_length = 0\n \
    \   var longest_prefix_index = 0\n    var longest_palindrome_length = 0\n    var\
    \ longest_palindrome_index = 0\n    var palindrome_length = 0\n    var palindrome_index\
    \ = 0\n    var palindrome_suffix_length = 0\n    var palindrome_suffix_index =\
    \ 0\n    var palindrome_prefix_length = 0\n    var palindrome_prefix_index = 0\n\
    \    var palindrome_prefix_end_index = 0\n    var palindrome_prefix_end_length\
    \ = 0\n    var palindrome_prefix_start_index = 0\n    var palindrome_prefix_start_length\
    \ = 0\n    var palindrome_suffix_start_index = 0\n    var palindrome_suffix_start_length\
    \ = 0\n    var palindrome_suffix_end_index = 0\n    var palindrome_suffix_end_length\
    \ = 0\n    var palindrome_prefix_start_char = \"\"\n    var palindrome_prefix_end_char\
    \ = \"\"\n    var palindrome_suffix_start_char = \"\"\n    var palindrome_suffix_end_char\
    \ = \"\"\n    var palindrome_prefix_start_char_index = 0\n    var palindrome_prefix_end_char_index\
    \ = 0\n    var palindrome_suffix_start_char_index = 0\n    var palindrome_suffix_end_char_index\
    \ = 0\n    var palindrome_prefix_start_char_length = 0\n    var palindrome_prefix_end_char_length\
    \ = 0\n    var palind", "    let s = string.characters.map { String($0) }\n  \
    \  let n = s.count\n    var i = 0\n    var j = n - 1\n    while i < j {\n    \
    \    if s[i] != s[j] {\n            break\n        }\n        i += 1\n       \
    \ j -= 1\n    }\n    if i >= j {\n        return string\n    }\n    var suffix\
    \ = Array(s[i...j])\n    suffix.reverse()\n    return string + suffix.joinWithSeparator(\"\
    \")", "    let string_length = string.characters.count\n    if string_length <=\
    \ 1 {\n        return string\n    }\n    let string_array = Array(string.characters)\n\
    \    let string_array_reversed = Array(string.characters.reversed())\n    var\
    \ longest_palindrome_length = 0\n    var longest_palindrome_end = 0\n    var palindrome_lengths\
    \ = [Int](repeating: 0, count: string_length)\n    for i in 1..<string_length\
    \ {\n        if string_array[i] == string_array_reversed[i] {\n            palindrome_lengths[i]\
    \ = palindrome_lengths[i - 1] + 1\n            if palindrome_lengths[i] > longest_palindrome_length\
    \ {\n                longest_palindrome_length = palindrome_lengths[i]\n     \
    \           longest_palindrome_end = i\n            }\n        }\n    }\n    if\
    \ longest_palindrome_length == string_length {\n        return string\n    }\n\
    \    let prefix_start = string_length - longest_palindrome_end - 1\n    let prefix\
    \ = string.substring(to: string.index(string.startIndex, offsetBy: prefix_start))\n\
    \    let prefix_reversed = String(prefix.characters.reversed())\n    return prefix_reversed\
    \ + string", "    let reversed = string.characters.reverse()\n    let reversed_string\
    \ = String(reversed)\n    let lps = longest_palindromic_substring(string + \"\
    #\" + reversed_string)\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(string.characters.count\
    \ - lps.characters.count))\n    let reversed_prefix = prefix.characters.reverse()\n\
    \    let reversed_prefix_string = String(reversed_prefix)\n    return string +\
    \ reversed_prefix_string", "    let string_length = string.count\n    let string_array\
    \ = Array(string)\n    var longest_palindrome_length = 0\n    var longest_palindrome_start\
    \ = 0\n    var longest_palindrome_end = 0\n    for i in 0..<string_length {\n\
    \        var j = 0\n        while i - j >= 0 && i + j < string_length && string_array[i\
    \ - j] == string_array[i + j] {\n            j += 1\n        }\n        if j >\
    \ longest_palindrome_length {\n            longest_palindrome_length = j\n   \
    \         longest_palindrome_start = i - j + 1\n            longest_palindrome_end\
    \ = i + j - 1\n        }\n    }\n    for i in 0..<string_length - 1 {\n      \
    \  var j = 0\n        while i - j >= 0 && i + 1 + j < string_length && string_array[i\
    \ - j] == string_array[i + 1 + j] {\n            j += 1\n        }\n        if\
    \ j > longest_palindrome_length {\n            longest_palindrome_length = j\n\
    \            longest_palindrome_start = i - j + 1\n            longest_palindrome_end\
    \ = i + j\n        }\n    }\n    var result = string\n    for i in 0..<string_length\
    \ - longest_palindrome_end - 1 {\n        result.append(string_array[string_length\
    \ - i - 1])\n    }\n    return result", "    let string_length = string.characters.count\n\
    \    let string_chars = Array(string.characters)\n    let reversed_string = String(string_chars.reverse())\n\
    \    let reversed_string_length = reversed_string.characters.count\n    let reversed_string_chars\
    \ = Array(reversed_string.characters)\n    var longest_palindrome_length = 0\n\
    \    var longest_palindrome_index = 0\n    var prefix_length = 0\n    var prefix_index\
    \ = 0\n    var suffix_length = 0\n    var suffix_index = 0\n    var i = 0\n  \
    \  var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n   \
    \ var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var\
    \ t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y\
    \ = 0\n    var z = 0\n    var aa = 0\n    var ab = 0\n    var ac = 0\n    var\
    \ ad = 0\n    var ae = 0\n    var af = 0\n    var ag = 0\n    var ah = 0\n   \
    \ var ai = 0\n    var aj = 0\n    var ak = 0\n    var al = 0\n    var am = 0\n\
    \    var an = 0\n    var ao = 0\n    var ap = 0\n    var aq = 0\n    var ar =\
    \ 0\n    var as = 0\n    var at = 0\n    var au = 0\n    var av = 0\n    var aw\
    \ = 0\n    var ax = 0\n    var ay = 0\n    var az = 0\n    var ba = 0\n    var\
    \ bb = 0\n    var bc = 0\n    var bd = 0\n    var be = 0\n    var bf = 0\n   \
    \ var bg = 0\n    var bh = 0\n    var bi = 0\n    var bj = 0\n    var bk = 0\n\
    \    var bl = 0\n    var bm = 0\n    var bn = 0\n    var bo = 0\n    var bp",
  "    let string_length = string.count\n    let string_chars = Array(string)\n  \
    \  let string_chars_reversed = string_chars.reversed()\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_index = 0\n    var i = 0\n    while i < string_length\
    \ {\n        var j = 0\n        while i - j >= 0 && i + j < string_length && string_chars[i\
    \ - j] == string_chars[i + j] {\n            j += 1\n        }\n        if j >\
    \ longest_palindrome_length {\n            longest_palindrome_length = j\n   \
    \         longest_palindrome_index = i\n        }\n        i += 1\n    }\n   \
    \ var result = string\n    var k = 0\n    while k < string_length - longest_palindrome_length\
    \ {\n        result.append(string_chars_reversed[k])\n        k += 1\n    }\n\
    \    return result", "    let string_length = string.characters.count\n    let\
    \ string_array = Array(string.characters)\n    var longest_palindrome_length =\
    \ 0\n    var longest_palindrome_index = 0\n    var palindrome_length = 0\n   \
    \ var palindrome_index = 0\n    var i = 0\n    while i < string_length {\n   \
    \     if is_palindrome(string_array, start: i - palindrome_length - 1, end: i)\
    \ {\n            palindrome_length += 2\n            palindrome_index = i\n  \
    \      } else if is_palindrome(string_array, start: i - palindrome_length, end:\
    \ i) {\n            palindrome_length += 1\n            palindrome_index = i\n\
    \        }\n        if palindrome_length > longest_palindrome_length {\n     \
    \       longest_palindrome_length = palindrome_length\n            longest_palindrome_index\
    \ = palindrome_index\n        }\n        i += 1\n    }\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(longest_palindrome_index\
    \ - longest_palindrome_length + 1))\n    let reversed_prefix = String(prefix.characters.reverse())\n\
    \    return string + reversed_prefix", "    let reversed = string.reverse()\n\
    \    let concatenated = string + reversed\n    let longest_palindrome_suffix =\
    \ longest_palindrome_suffix_of(concatenated)\n    let prefix = string.substringToIndex(string.endIndex.advancedBy(-longest_palindrome_suffix.characters.count))\n\
    \    let reversed_prefix = prefix.reverse()\n    return string + reversed_prefix",
  "    let string_length = string.characters.count\n    let string_array = Array(string.characters)\n\
    \    var suffix_length = 0\n    var prefix_length = 0\n    var suffix_start =\
    \ 0\n    var prefix_start = 0\n    var suffix_end = 0\n    var prefix_end = 0\n\
    \    var is_palindrome = false\n    var palindrome_length = 0\n    var palindrome_start\
    \ = 0\n    var palindrome_end = 0\n    var i = 0\n    var j = 0\n    var k = 0\n\
    \    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n \
    \   var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n  \
    \  var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n   \
    \ var aa = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n    var ae = 0\n\
    \    var af = 0\n    var ag = 0\n    var ah = 0\n    var ai = 0\n    var aj =\
    \ 0\n    var ak = 0\n    var al = 0\n    var am = 0\n    var an = 0\n    var ao\
    \ = 0\n    var ap = 0\n    var aq = 0\n    var ar = 0\n    var as = 0\n    var\
    \ at = 0\n    var au = 0\n    var av = 0\n    var aw = 0\n    var ax = 0\n   \
    \ var ay = 0\n    var az = 0\n    var ba = 0\n    var bb = 0\n    var bc = 0\n\
    \    var bd = 0\n    var be = 0\n    var bf = 0\n    var bg = 0\n    var bh =\
    \ 0\n    var bi = 0\n    var bj = 0\n    var bk = 0\n    var bl = 0\n    var bm\
    \ = 0\n    var bn = 0\n    var bo = 0\n    var bp = 0\n    var bq = 0\n    var\
    \ br = 0\n    var bs = 0\n", "    let reversed = String(string.characters.reverse())\n\
    \    let combined = string + \"#\" + reversed\n    let z_array = z_algorithm(combined)\n\
    \    let z_array_reversed = z_array.reverse()\n    let z_array_reversed_without_first\
    \ = Array(z_array_reversed[1..<z_array_reversed.count])\n    let z_array_without_last\
    \ = Array(z_array[0..<z_array.count-1])\n    let z_array_without_last_and_first\
    \ = zip(z_array_without_last, z_array_reversed_without_first)\n    let max_z =\
    \ z_array_without_last_and_first.maxElement { $0.0 < $1.0 }\n    let max_z_index\
    \ = z_array_without_last_and_first.indexOf { $0 == max_z }\n    let prefix = String(string.characters.prefix(max_z_index!))\n\
    \    let reversed_prefix = String(prefix.characters.reverse())\n    return prefix\
    \ + string + reversed_prefix", "    let reversed = string.reverse()\n    let concatenated\
    \ = string + \"#\" + reversed\n    let z_array = z_algorithm(string: concatenated)\n\
    \    let z_array_count = z_array.count\n    let z_array_last = z_array[z_array_count\
    \ - 1]\n    let z_array_second_last = z_array[z_array_count - 2]\n    let z_array_third_last\
    \ = z_array[z_array_count - 3]\n    let z_array_fourth_last = z_array[z_array_count\
    \ - 4]\n    let z_array_fifth_last = z_array[z_array_count - 5]\n    let z_array_sixth_last\
    \ = z_array[z_array_count - 6]\n    let z_array_seventh_last = z_array[z_array_count\
    \ - 7]\n    let z_array_eighth_last = z_array[z_array_count - 8]\n    let z_array_ninth_last\
    \ = z_array[z_array_count - 9]\n    let z_array_tenth_last = z_array[z_array_count\
    \ - 10]\n    let z_array_eleventh_last = z_array[z_array_count - 11]\n    let\
    \ z_array_twelfth_last = z_array[z_array_count - 12]\n    let z_array_thirteenth_last\
    \ = z_array[z_array_count - 13]\n    let z_array_fourteenth_last = z_array[z_array_count\
    \ - 14]\n    let z_array_fifteenth_last = z_array[z_array_count - 15]\n    let\
    \ z_array_sixteenth_last = z_array[z_array_count - 16]\n    let z_array_seventeenth_last\
    \ = z_array[z_array_count - 17]\n    let z_array_eighteenth_last = z_array[z_array_count\
    \ - 18]\n    let z_array_nineteenth_last = z_array[z_array_count - 19]\n    let\
    \ z_array_", "    let reversed = String(string.characters.reverse())\n    let\
    \ combined = string + \"#\" + reversed\n    let lps = longest_prefix_suffix(combined)\n\
    \    let prefix = String(string.characters.prefix(string.characters.count - lps))\n\
    \    return reversed + prefix", "    let string_length = string.characters.count\n\
    \    let string_characters = Array(string.characters)\n    var palindrome_suffix\
    \ = [Character]()\n    var palindrome_prefix = [Character]()\n    var palindrome_suffix_length\
    \ = 0\n    var palindrome_prefix_length = 0\n    var palindrome_suffix_start =\
    \ 0\n    var palindrome_prefix_start = 0\n    var palindrome_suffix_end = 0\n\
    \    var palindrome_prefix_end = 0\n    var palindrome_suffix_is_palindrome =\
    \ false\n    var palindrome_prefix_is_palindrome = false\n    var palindrome_suffix_is_longest\
    \ = false\n    var palindrome_prefix_is_longest = false\n    var palindrome_suffix_is_longer\
    \ = false\n    var palindrome_prefix_is_longer = false\n    var palindrome_suffix_is_shorter\
    \ = false\n    var palindrome_prefix_is_shorter = false\n    var palindrome_suffix_is_longer_than_prefix\
    \ = false\n    var palindrome_prefix_is_longer_than_suffix = false\n    var palindrome_suffix_is_shorter_than_prefix\
    \ = false\n    var palindrome_prefix_is_shorter_than_suffix = false\n    var palindrome_suffix_is_equal_to_prefix\
    \ = false\n    var palindrome_prefix_is_equal_to_suffix = false\n    var palindrome_suffix_is_longer_than_half\
    \ = false\n    var palindrome_prefix_is_longer_than_half = false\n    var palindrome_suffix_is_shorter_than_half\
    \ = false\n    var palindrome_prefix_is_shorter_than_half = false\n    var palindrome_suffix_is_equal_to_half\
    \ = false\n    var palindrome_prefix_is_equal_to_half = false\n    var palindrome_suffix_is_longer_than_one\
    \ = false\n    var", "    let reversed = String(string.characters.reverse())\n\
    \    let concatenated = string + \"#\" + reversed\n    let z_array = z_function(concatenated)\n\
    \    let z_array_reversed = z_array.reverse()\n    let z_array_reversed_without_first\
    \ = Array(z_array_reversed.dropFirst())\n    let z_array_without_last = Array(z_array.dropLast())\n\
    \    let max_z = zip(z_array_without_last, z_array_reversed_without_first).map(max).maxElement()!\n\
    \    let prefix = string.substringToIndex(string.startIndex.advancedBy(max_z))\n\
    \    let suffix = String(prefix.characters.reverse())\n    return string + suffix",
  "    let reversed_string = String(string.characters.reverse())\n    let string_length\
    \ = string.characters.count\n    let reversed_string_length = reversed_string.characters.count\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_index = 0\n\
    \    var table = Array(count: reversed_string_length, repeatedValue: Array(count:\
    \ string_length, repeatedValue: 0))\n    for i in 0..<reversed_string_length {\n\
    \        for j in 0..<string_length {\n            if reversed_string[i] == string[j]\
    \ {\n                if i == 0 || j == 0 {\n                    table[i][j] =\
    \ 1\n                } else {\n                    table[i][j] = table[i - 1][j\
    \ - 1] + 1\n                }\n                if table[i][j] > longest_palindrome_length\
    \ {\n                    longest_palindrome_length = table[i][j]\n           \
    \         longest_palindrome_index = i\n                }\n            }\n   \
    \     }\n    }\n    let prefix = reversed_string.substringToIndex(reversed_string.startIndex.advancedBy(reversed_string_length\
    \ - longest_palindrome_index - 1))\n    return string + prefix", "    let reversed\
    \ = String(string.characters.reverse())\n    let combined = string + \"#\" + reversed\n\
    \    let lps = longest_prefix_suffix(string: combined)\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(lps.last!))\n\
    \    let suffix = String(prefix.characters.reverse())\n    return string + suffix",
  "    let reversed = String(string.characters.reverse())\n    let combined = string\
    \ + \"#\" + reversed\n    let lps = longest_prefix_suffix(combined)\n    let prefix\
    \ = string.substringToIndex(string.startIndex.advancedBy(lps))\n    let suffix\
    \ = String(prefix.characters.reverse())\n    return string + suffix", "    let\
    \ string_length = string.characters.count\n    let string_chars = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_index = 0\n\
    \    var palindrome_length = 0\n    var palindrome_index = 0\n    var i = 0\n\
    \    while i < string_length {\n        // Check for palindrome of odd length\n\
    \        palindrome_length = 0\n        palindrome_index = i\n        while i\
    \ - palindrome_length >= 0 && i + palindrome_length < string_length {\n      \
    \      if string_chars[i - palindrome_length] != string_chars[i + palindrome_length]\
    \ {\n                break\n            }\n            palindrome_length += 1\n\
    \        }\n        if palindrome_length > longest_palindrome_length {\n     \
    \       longest_palindrome_length = palindrome_length\n            longest_palindrome_index\
    \ = palindrome_index\n        }\n        // Check for palindrome of even length\n\
    \        palindrome_length = 0\n        palindrome_index = i\n        while i\
    \ - palindrome_length >= 0 && i + palindrome_length + 1 < string_length {\n  \
    \          if string_chars[i - palindrome_length] != string_chars[i + palindrome_length\
    \ + 1] {\n                break\n            }\n            palindrome_length\
    \ += 1\n        }\n        if palindrome_length > longest_palindrome_length {\n\
    \            longest_palindrome_length = palindrome_length\n            longest_palindrome_index\
    \ = palindrome_index\n        }\n        i += 1\n    }\n    let prefix_start =\
    \ longest_palindrome_index - longest_palindrome_length + 1\n    let prefix_end\
    \ = longest_palindrome_index\n    let prefix = String(string_chars[prefix_start...prefix_end])\n\
    \    let reversed_prefix = String(prefix.characters.reversed())\n    return prefix\
    \ + string + reversed_prefix", "    let string_length = string.characters.count\n\
    \    let string_chars = Array(string.characters)\n    let reversed_string = String(string_chars.reverse())\n\
    \    let reversed_string_chars = Array(reversed_string.characters)\n    \n   \
    \ var longest_palindrome_length = 0\n    var longest_palindrome_index = 0\n  \
    \  \n    // Find the longest palindrome suffix.\n    for i in 0..<string_length\
    \ {\n        let prefix_length = string_length - i\n        let prefix = String(string_chars[i..<string_length])\n\
    \        let suffix = String(reversed_string_chars[0..<prefix_length])\n     \
    \   if prefix == suffix {\n            longest_palindrome_length = prefix_length\n\
    \            longest_palindrome_index = i\n            break\n        }\n    }\n\
    \    \n    // Append the reverse of the prefix before the palindrome suffix.\n\
    \    let prefix_length = string_length - longest_palindrome_length\n    let prefix\
    \ = String(string_chars[0..<prefix_length])\n    let reversed_prefix = String(prefix.characters.reverse())\n\
    \    let result = prefix + reversed_prefix + string\n    \n    return result",
  "    let string = string.characters.map { String($0) }\n    let reversed = string.reverse()\n\
    \    let string_length = string.count\n    let reversed_length = reversed.count\n\
    \    var prefix_length = 0\n    var suffix_length = 0\n    var prefix_index =\
    \ 0\n    var suffix_index = 0\n    var longest_palindrome_length = 0\n    var\
    \ longest_palindrome_index = 0\n    var table = Array(count: reversed_length,\
    \ repeatedValue: Array(count: string_length, repeatedValue: 0))\n    for i in\
    \ 0..<reversed_length {\n        for j in 0..<string_length {\n            if\
    \ reversed[i] == string[j] {\n                if i == 0 || j == 0 {\n        \
    \            table[i][j] = 1\n                } else {\n                    table[i][j]\
    \ = table[i - 1][j - 1] + 1\n                }\n                if table[i][j]\
    \ > longest_palindrome_length {\n                    longest_palindrome_length\
    \ = table[i][j]\n                    longest_palindrome_index = j\n          \
    \      }\n            }\n        }\n    }\n    prefix_length = string_length -\
    \ longest_palindrome_length\n    suffix_length = longest_palindrome_length\n \
    \   prefix_index = 0\n    suffix_index = longest_palindrome_index - longest_palindrome_length\
    \ + 1\n    return string[prefix_index..<prefix_index + prefix_length].reverse().joinWithSeparator(\"\
    \") + string.joinWithSeparator(\"\")", "    let reversed = String(string.characters.reverse())\n\
    \    let combined = string + \"#\" + reversed\n    let lps = longest_prefix_suffix(combined)\n\
    \    let prefix = String(string.characters.prefix(string.characters.count - lps.last!))\n\
    \    return prefix + string", "    let string_length = string.characters.count\n\
    \    let string_chars = Array(string.characters)\n    let reversed_string = String(string_chars.reverse())\n\
    \    let reversed_string_length = reversed_string.characters.count\n    let reversed_string_chars\
    \ = Array(reversed_string.characters)\n    var longest_palindrome_length = 0\n\
    \    var longest_palindrome_start = 0\n    var longest_palindrome_end = 0\n  \
    \  var longest_palindrome_end_reversed = 0\n    var longest_palindrome_start_reversed\
    \ = 0\n    var longest_palindrome_length_reversed = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o\
    \ = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t =\
    \ 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n\
    \    var z = 0\n    var aa = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n\
    \    var ae = 0\n    var af = 0\n    var ag = 0\n    var ah = 0\n    var ai =\
    \ 0\n    var aj = 0\n    var ak = 0\n    var al = 0\n    var am = 0\n    var an\
    \ = 0\n    var ao = 0\n    var ap = 0\n    var aq = 0\n    var ar = 0\n    var\
    \ as = 0\n    var at = 0\n    var au = 0\n    var av = 0\n    var aw = 0\n   \
    \ var ax = 0\n    var ay = 0\n    var az = 0\n    var ba = 0\n    var bb = 0\n\
    \    var bc = 0\n    var bd = 0\n    var be = 0\n    var bf = 0\n    var bg =\
    \ 0\n    var bh = 0\n    var bi = 0\n    var bj = 0\n    var bk = 0\n    var",
  "    let string_length = string.characters.count\n    let string_chars = Array(string.characters)\n\
    \    let reversed_string = String(string_chars.reverse())\n    let reversed_string_length\
    \ = reversed_string.characters.count\n    let reversed_string_chars = Array(reversed_string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_index = 0\n\
    \    var z_function = [Int](count: reversed_string_length, repeatedValue: 0)\n\
    \    z_function[0] = reversed_string_length\n    var left = 0\n    var right =\
    \ 0\n    for i in 1..<reversed_string_length {\n        if i <= right {\n    \
    \        z_function[i] = min(right - i + 1, z_function[i - left])\n        }\n\
    \        while i + z_function[i] < reversed_string_length && reversed_string_chars[z_function[i]]\
    \ == reversed_string_chars[i + z_function[i]] {\n            z_function[i] +=\
    \ 1\n        }\n        if i + z_function[i] - 1 > right {\n            left =\
    \ i\n            right = i + z_function[i] - 1\n        }\n        if z_function[i]\
    \ == i {\n            longest_palindrome_length = z_function[i]\n            longest_palindrome_index\
    \ = i\n        }\n    }\n    let string_prefix = String(string_chars[0..<string_length\
    \ - longest_palindrome_length])\n    let string_prefix_reversed = String(string_prefix.characters.reverse())\n\
    \    return string + string_prefix_reversed", "    let string_length = string.characters.count\n\
    \    let string_characters = Array(string.characters)\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_index = 0\n    var current_palindrome_length\
    \ = 0\n    var current_palindrome_index = 0\n    var i = 0\n    while i < string_length\
    \ {\n        current_palindrome_length = 0\n        current_palindrome_index =\
    \ i\n        while i < string_length && string_characters[i] == string_characters[string_length\
    \ - 1 - i] {\n            current_palindrome_length += 1\n            i += 1\n\
    \        }\n        if current_palindrome_length > longest_palindrome_length {\n\
    \            longest_palindrome_length = current_palindrome_length\n         \
    \   longest_palindrome_index = current_palindrome_index\n        }\n        i\
    \ += 1\n    }\n    var result = string\n    for i in 0..<string_length - longest_palindrome_length\
    \ {\n        result.append(string_characters[string_length - 1 - i])\n    }\n\
    \    return result", "    let string_length = string.characters.count\n    let\
    \ string_array = Array(string.characters)\n    var longest_palindrome_length =\
    \ 0\n    var longest_palindrome_index = 0\n    var dp_table = Array(repeating:\
    \ Array(repeating: false, count: string_length), count: string_length)\n    for\
    \ i in 0..<string_length {\n        dp_table[i][i] = true\n        longest_palindrome_length\
    \ = 1\n        longest_palindrome_index = i\n    }\n    for i in 0..<string_length\
    \ - 1 {\n        if string_array[i] == string_array[i + 1] {\n            dp_table[i][i\
    \ + 1] = true\n            longest_palindrome_length = 2\n            longest_palindrome_index\
    \ = i\n        }\n    }\n    for length in 3...string_length {\n        for i\
    \ in 0..<string_length - length + 1 {\n            let j = i + length - 1\n  \
    \          if string_array[i] == string_array[j] && dp_table[i + 1][j - 1] {\n\
    \                dp_table[i][j] = true\n                longest_palindrome_length\
    \ = length\n                longest_palindrome_index = i\n            }\n    \
    \    }\n    }\n    let prefix = string_array[0..<longest_palindrome_index].reversed()\n\
    \    let suffix = string_array[longest_palindrome_index + longest_palindrome_length..<string_length]\n\
    \    return String(prefix) + String(suffix) + String(string_array[longest_palindrome_index..<longest_palindrome_index\
    \ + longest_palindrome_length])", "    let string_length = string.characters.count\n\
    \    let string_array = Array(string.characters)\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_index = 0\n    var palindrome_lengths = [Int](count:\
    \ string_length, repeatedValue: 0)\n    for index in 0..<string_length {\n   \
    \     var palindrome_length = 1\n        if index > 0 && index < string_length\
    \ - 1 {\n            palindrome_length = min(palindrome_lengths[index - 1], string_length\
    \ - index - 1)\n        }\n        while palindrome_length <= index && palindrome_length\
    \ <= string_length - index - 1 && string_array[index - palindrome_length] == string_array[index\
    \ + palindrome_length] {\n            palindrome_lengths[index] = palindrome_length\n\
    \            palindrome_length += 1\n        }\n        if palindrome_length >\
    \ longest_palindrome_length {\n            longest_palindrome_length = palindrome_length\n\
    \            longest_palindrome_index = index\n        }\n    }\n    let prefix_start\
    \ = longest_palindrome_index - longest_palindrome_length + 1\n    let prefix_end\
    \ = longest_palindrome_index + longest_palindrome_length\n    let prefix = string.substringWithRange(Range<String.Index>(start:\
    \ string.startIndex.advancedBy(prefix_start), end: string.startIndex.advancedBy(prefix_end)))\n\
    \    let prefix_reversed = String(prefix.characters.reverse())\n    let suffix\
    \ = string.substringFromIndex(string.startIndex.advancedBy(prefix_end))\n    return\
    \ prefix_reversed + suffix", "    let string = string.lowercased()\n    let reversed\
    \ = String(string.reversed())\n    let suffix = reversed.commonPrefix(with: string)\n\
    \    let prefix = String(string.dropLast(suffix.count))\n    return string + String(prefix.reversed())",
  "    let string_length = string.characters.count\n    let string_array = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_index = 0\n\
    \    var palindrome_length = 0\n    var palindrome_index = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var aa = 0\n    var ab = 0\n    var ac = 0\n \
    \   var ad = 0\n    var ae = 0\n    var af = 0\n    var ag = 0\n    var ah = 0\n\
    \    var ai = 0\n    var aj = 0\n    var ak = 0\n    var al = 0\n    var am =\
    \ 0\n    var an = 0\n    var ao = 0\n    var ap = 0\n    var aq = 0\n    var ar\
    \ = 0\n    var as = 0\n    var at = 0\n    var au = 0\n    var av = 0\n    var\
    \ aw = 0\n    var ax = 0\n    var ay = 0\n    var az = 0\n    var ba = 0\n   \
    \ var bb = 0\n    var bc = 0\n    var bd = 0\n    var be = 0\n    var bf = 0\n\
    \    var bg = 0\n    var bh = 0\n    var bi = 0\n    var bj = 0\n    var bk =\
    \ 0\n    var bl = 0\n    var bm = 0\n    var bn = 0\n    var bo = 0\n    var bp\
    \ = 0\n    var bq = 0\n    var br = 0\n    var bs = 0\n    var bt = 0\n    var\
    \ bu = 0\n    var bv = 0\n    var bw = 0\n    var bx = 0\n    var by = 0\n   \
    \ var bz", "    let string_length = string.characters.count\n    let string_chars\
    \ = Array(string.characters)\n    var palindrome_length = 0\n    var palindrome_start\
    \ = 0\n    var palindrome_end = 0\n    var palindrome_length_max = 0\n    var\
    \ palindrome_start_max = 0\n    var palindrome_end_max = 0\n    for i in 0..<string_length\
    \ {\n        palindrome_length = 0\n        palindrome_start = i\n        palindrome_end\
    \ = i\n        while palindrome_start >= 0 && palindrome_end < string_length {\n\
    \            if string_chars[palindrome_start] == string_chars[palindrome_end]\
    \ {\n                palindrome_length = palindrome_end - palindrome_start + 1\n\
    \                if palindrome_length > palindrome_length_max {\n            \
    \        palindrome_length_max = palindrome_length\n                    palindrome_start_max\
    \ = palindrome_start\n                    palindrome_end_max = palindrome_end\n\
    \                }\n            } else {\n                break\n            }\n\
    \            palindrome_start -= 1\n            palindrome_end += 1\n        }\n\
    \        palindrome_length = 0\n        palindrome_start = i\n        palindrome_end\
    \ = i + 1\n        while palindrome_start >= 0 && palindrome_end < string_length\
    \ {\n            if string_chars[palindrome_start] == string_chars[palindrome_end]\
    \ {\n                palindrome_length = palindrome_end - palindrome_start + 1\n\
    \                if palindrome_length > palindrome_length_max {\n            \
    \        palindrome_length_max = palindrome_length\n                    palindrome_start_max\
    \ = palindrome_start\n                    palindrome_end_max = palindrome_end\n\
    \                }\n            } else {\n                break\n            }\n\
    \            palindrome_start -= 1\n            palindrome_end += 1\n        }\n\
    \    }\n    var result = \"\"\n    for i in 0..<pal", "    let string_length =\
    \ string.characters.count\n    let string_array = Array(string.characters)\n \
    \   let reversed_string_array = Array(string.characters.reversed())\n    \n  \
    \  // Find the longest postfix of supplied string that is a palindrome.\n    var\
    \ longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n    for\
    \ i in 0..<string_length {\n        var j = 0\n        while i - j >= 0 && i +\
    \ j < string_length && string_array[i - j] == reversed_string_array[i + j] {\n\
    \            j += 1\n        }\n        if j > longest_palindrome_length {\n \
    \           longest_palindrome_length = j\n            longest_palindrome_start\
    \ = i - j + 1\n        }\n    }\n    \n    // Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n    var\
    \ result = string\n    for i in 0..<string_length - longest_palindrome_length\
    \ {\n        result.append(reversed_string_array[i])\n    }\n    \n    return\
    \ result", "    let reversed = string.characters.reverse()\n    let reversed_string\
    \ = String(reversed)\n    let string_length = string.characters.count\n    let\
    \ reversed_string_length = reversed_string.characters.count\n    let string_suffix\
    \ = string.substringFromIndex(string.startIndex.advancedBy(string_length / 2))\n\
    \    let reversed_string_prefix = reversed_string.substringToIndex(reversed_string.startIndex.advancedBy(reversed_string_length\
    \ / 2))\n    let reversed_string_prefix_length = reversed_string_prefix.characters.count\n\
    \    let reversed_string_prefix_suffix = reversed_string_prefix.substringFromIndex(reversed_string_prefix.startIndex.advancedBy(reversed_string_prefix_length\
    \ / 2))\n    let reversed_string_prefix_suffix_length = reversed_string_prefix_suffix.characters.count\n\
    \    let reversed_string_prefix_suffix_prefix = reversed_string_prefix.substringToIndex(reversed_string_prefix.startIndex.advancedBy(reversed_string_prefix_length\
    \ / 2))\n    let reversed_string_prefix_suffix_prefix_length = reversed_string_prefix_suffix_prefix.characters.count\n\
    \    let string_suffix_length = string_suffix.characters.count\n    let string_suffix_prefix\
    \ = string_suffix.substringToIndex(string_suffix.startIndex.advancedBy(string_suffix_length\
    \ / 2))\n    let string_suffix_prefix_length = string_suffix_prefix.characters.count\n\
    \    let string_suffix_prefix_suffix = string_suffix.substringFromIndex(string_suffix.startIndex.advancedBy(string_suffix_length\
    \ / 2))\n    let string_suffix_prefix_suffix_length = string_suffix_prefix_suffix.characters.count\n\
    \    let string_suffix_prefix_suffix_prefix = string_suffix.substringToIndex(string_suffix.startIndex.advancedBy(string_suffix_length\
    \ / 2))\n    let", "    let string_length = string.characters.count\n    let reversed_string\
    \ = String(string.characters.reverse())\n    let string_suffix = string + \"#\"\
    \ + reversed_string\n    let string_suffix_length = string_suffix.characters.count\n\
    \    var longest_palindrome_suffix = [Int](count: string_suffix_length, repeatedValue:\
    \ 0)\n    var current_longest_palindrome_suffix_length = 0\n    for i in 1..<string_suffix_length\
    \ {\n        if string_suffix[string_suffix.startIndex.advancedBy(i)] == string_suffix[string_suffix.startIndex.advancedBy(current_longest_palindrome_suffix_length)]\
    \ {\n            current_longest_palindrome_suffix_length += 1\n            longest_palindrome_suffix[i]\
    \ = current_longest_palindrome_suffix_length\n        } else {\n            if\
    \ current_longest_palindrome_suffix_length != 0 {\n                current_longest_palindrome_suffix_length\
    \ = longest_palindrome_suffix[current_longest_palindrome_suffix_length - 1]\n\
    \                i -= 1\n            }\n        }\n    }\n    let prefix_length\
    \ = string_length - longest_palindrome_suffix[string_suffix_length - 1]\n    let\
    \ prefix = string[string.startIndex..<string.startIndex.advancedBy(prefix_length)]\n\
    \    let reversed_prefix = String(prefix.characters.reverse())\n    return string\
    \ + reversed_prefix", "    let string_length = string.characters.count\n    let\
    \ reversed_string = String(string.characters.reverse())\n    let string_with_reversed_prefix\
    \ = string + reversed_string\n    let string_with_reversed_prefix_length = string_with_reversed_prefix.characters.count\n\
    \    let z_function = z_function_of_string(string_with_reversed_prefix)\n    let\
    \ z_function_length = z_function.count\n    var longest_palindrome_suffix_length\
    \ = 0\n    for i in 0..<z_function_length {\n        if z_function[i] == string_length\
    \ {\n            longest_palindrome_suffix_length = string_length - i\n      \
    \      break\n        }\n    }\n    let prefix_length = string_length - longest_palindrome_suffix_length\n\
    \    let prefix = string.substringToIndex(string.startIndex.advancedBy(prefix_length))\n\
    \    let reversed_prefix = String(prefix.characters.reverse())\n    return string\
    \ + reversed_prefix", "    let reversed_string = String(string.characters.reverse())\n\
    \    let combined_string = string + \"#\" + reversed_string\n    let z_function\
    \ = z_algorithm(string: combined_string)\n    let z_function_length = z_function.count\n\
    \    let z_function_last_element = z_function[z_function_length - 1]\n    let\
    \ prefix_length = string.characters.count - z_function_last_element\n    let prefix\
    \ = string.substringToIndex(string.startIndex.advancedBy(prefix_length))\n   \
    \ let reversed_prefix = String(prefix.characters.reverse())\n    return string\
    \ + reversed_prefix", "    let string_length = string.characters.count\n    let\
    \ string_chars = Array(string.characters)\n    var longest_palindrome_length =\
    \ 0\n    var longest_palindrome_start = 0\n    for i in 0..<string_length {\n\
    \        // Check for palindromes of odd length.\n        var j = 0\n        while\
    \ i - j >= 0 && i + j < string_length && string_chars[i - j] == string_chars[i\
    \ + j] {\n            j += 1\n        }\n        if j > longest_palindrome_length\
    \ {\n            longest_palindrome_length = j\n            longest_palindrome_start\
    \ = i - j + 1\n        }\n        // Check for palindromes of even length.\n \
    \       j = 0\n        while i - j >= 0 && i + j + 1 < string_length && string_chars[i\
    \ - j] == string_chars[i + j + 1] {\n            j += 1\n        }\n        if\
    \ j > longest_palindrome_length {\n            longest_palindrome_length = j\n\
    \            longest_palindrome_start = i - j + 1\n        }\n    }\n    let prefix\
    \ = String(string_chars[0..<longest_palindrome_start])\n    let reversed_prefix\
    \ = String(prefix.characters.reverse())\n    return prefix + reversed_prefix +\
    \ String(string_chars[longest_palindrome_start + longest_palindrome_length..<string_length])",
  "    let string_length = string.characters.count\n    let string_array = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_index = 0\n\
    \    var current_palindrome_length = 0\n    var current_palindrome_index = 0\n\
    \    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n \
    \   var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n  \
    \  var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n   \
    \ var x = 0\n    var y = 0\n    var z = 0\n    var aa = 0\n    var ab = 0\n  \
    \  var ac = 0\n    var ad = 0\n    var ae = 0\n    var af = 0\n    var ag = 0\n\
    \    var ah = 0\n    var ai = 0\n    var aj = 0\n    var ak = 0\n    var al =\
    \ 0\n    var am = 0\n    var an = 0\n    var ao = 0\n    var ap = 0\n    var aq\
    \ = 0\n    var ar = 0\n    var as = 0\n    var at = 0\n    var au = 0\n    var\
    \ av = 0\n    var aw = 0\n    var ax = 0\n    var ay = 0\n    var az = 0\n   \
    \ var ba = 0\n    var bb = 0\n    var bc = 0\n    var bd = 0\n    var be = 0\n\
    \    var bf = 0\n    var bg = 0\n    var bh = 0\n    var bi = 0\n    var bj =\
    \ 0\n    var bk = 0\n    var bl = 0\n    var bm = 0\n    var bn = 0\n    var bo\
    \ = 0\n    var bp = 0\n    var bq = 0\n    var br = 0\n    var bs = 0\n    var\
    \ bt = 0\n    var bu = 0\n    var bv = 0\n    var bw = 0\n    var bx = 0\n   \
    \ var by = 0\n", "    let string_length = string.count\n    let string_chars =\
    \ Array(string)\n    let reversed_string = String(string_chars.reversed())\n \
    \   let reversed_string_chars = Array(reversed_string)\n    let reversed_string_length\
    \ = reversed_string.count\n    var longest_prefix_length = 0\n    var longest_prefix_index\
    \ = 0\n    var longest_suffix_length = 0\n    var longest_suffix_index = 0\n \
    \   var longest_palindrome_length = 0\n    var longest_palindrome_index = 0\n\
    \    var longest_palindrome_length_index = 0\n    var longest_palindrome_index_index\
    \ = 0\n    var longest_palindrome_length_index_index = 0\n    var longest_palindrome_index_index_index\
    \ = 0\n    var longest_palindrome_length_index_index_index = 0\n    var longest_palindrome_index_index_index_index\
    \ = 0\n    var longest_palindrome_length_index_index_index_index = 0\n    var\
    \ longest_palindrome_index_index_index_index_index = 0\n    var longest_palindrome_length_index_index_index_index_index\
    \ = 0\n    var longest_palindrome_index_index_index_index_index_index = 0\n  \
    \  var longest_palindrome_length_index_index_index_index_index_index = 0\n   \
    \ var longest_palindrome_index_index_index_index_index_index_index = 0\n    var\
    \ longest_palindrome_length_index_index_index_index_index_index_index = 0\n  \
    \  var longest_palindrome_index_index_index_index_index_index_index_index = 0\n\
    \    var longest_palindrome_length_index_index_index_index_index_index_index_index\
    \ = 0\n    var longest_palindrome_index_index_index_index_index_index_index_index_index\
    \ = 0\n    var longest_palindrome_length_index_index_index_index_index_index_index_index_index\
    \ = 0\n    var longest_palindrome", "    let string_length = string.count\n  \
    \  let string_characters = Array(string)\n    let reversed_string = String(string_characters.reversed())\n\
    \    let reversed_string_length = reversed_string.count\n    let reversed_string_characters\
    \ = Array(reversed_string)\n    var longest_palindrome_length = 0\n    var longest_palindrome_start\
    \ = 0\n    var longest_palindrome_end = 0\n    var longest_palindrome_reversed_start\
    \ = 0\n    var longest_palindrome_reversed_end = 0\n    var longest_palindrome_reversed_length\
    \ = 0\n    var longest_palindrome_reversed_start_index = 0\n    var longest_palindrome_reversed_end_index\
    \ = 0\n    var longest_palindrome_reversed_length_index = 0\n    var longest_palindrome_reversed_start_char\
    \ = \"\"\n    var longest_palindrome_reversed_end_char = \"\"\n    var longest_palindrome_reversed_length_char\
    \ = \"\"\n    var longest_palindrome_reversed_start_char_index = 0\n    var longest_palindrome_reversed_end_char_index\
    \ = 0\n    var longest_palindrome_reversed_length_char_index = 0\n    var longest_palindrome_reversed_start_char_index_plus_one\
    \ = 0\n    var longest_palindrome_reversed_end_char_index_plus_one = 0\n    var\
    \ longest_palindrome_reversed_length_char_index_plus_one = 0\n    var longest_palindrome_reversed_start_char_index_plus_one_char\
    \ = \"\"\n    var longest_palindrome_reversed_end_char_index_plus_one_char = \"\
    \"\n    var longest_palindrome_reversed_length_char_index_plus_one_char = \"\"\
    \n    var longest_palindrome_reversed_start_char_index_plus_one_char_index = 0\n\
    \    var longest_palindrome_re", "    let reversed = String(string.characters.reverse())\n\
    \    let combined = string + \"#\" + reversed\n    let lps = longest_prefix_suffix(string:\
    \ combined)\n    let prefix = String(string.characters.prefix(string.characters.count\
    \ - lps.last!))\n    return prefix + string", "    let string_length = string.characters.count\n\
    \    let string_array = Array(string.characters)\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_index = 0\n    var palindrome_lengths = [Int](count:\
    \ string_length, repeatedValue: 0)\n    for index in 0..<string_length {\n   \
    \     var palindrome_length = 0\n        if index > 0 && index < string_length\
    \ - 1 {\n            palindrome_length = min(palindrome_lengths[index - 1], string_length\
    \ - index - 1)\n        } else {\n            palindrome_length = string_length\
    \ - index - 1\n        }\n        while palindrome_length >= 0 && string_array[index\
    \ - palindrome_length] == string_array[index + palindrome_length] {\n        \
    \    palindrome_length -= 1\n        }\n        palindrome_lengths[index] = palindrome_length\
    \ + 1\n        if palindrome_lengths[index] > longest_palindrome_length {\n  \
    \          longest_palindrome_length = palindrome_lengths[index]\n           \
    \ longest_palindrome_index = index\n        }\n    }\n    let palindrome_prefix\
    \ = string.substringToIndex(string.startIndex.advancedBy(longest_palindrome_index\
    \ - longest_palindrome_length + 1))\n    let palindrome_suffix = String(palindrome_prefix.characters.reverse())\n\
    \    return string + palindrome_suffix", "    let string_length = string.characters.count\n\
    \    let string_array = Array(string.characters)\n    var palindrome_suffix =\
    \ [Character]()\n    var palindrome_prefix = [Character]()\n    var palindrome_suffix_length\
    \ = 0\n    var palindrome_prefix_length = 0\n    var i = 0\n    var j = 0\n  \
    \  var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n   \
    \ var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var\
    \ u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z\
    \ = 0\n    var aa = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n    var\
    \ ae = 0\n    var af = 0\n    var ag = 0\n    var ah = 0\n    var ai = 0\n   \
    \ var aj = 0\n    var ak = 0\n    var al = 0\n    var am = 0\n    var an = 0\n\
    \    var ao = 0\n    var ap = 0\n    var aq = 0\n    var ar = 0\n    var as =\
    \ 0\n    var at = 0\n    var au = 0\n    var av = 0\n    var aw = 0\n    var ax\
    \ = 0\n    var ay = 0\n    var az = 0\n    var ba = 0\n    var bb = 0\n    var\
    \ bc = 0\n    var bd = 0\n    var be = 0\n    var bf = 0\n    var bg = 0\n   \
    \ var bh = 0\n    var bi = 0\n    var bj = 0\n    var bk = 0\n    var bl = 0\n\
    \    var bm = 0\n    var bn = 0\n    var bo = 0\n    var bp = 0\n    var bq =\
    \ 0\n    var br = 0\n    var bs = 0\n    var bt = 0\n    var bu = 0\n    var bv\
    \ = 0\n    var bw = 0\n    var bx = 0\n    var", "    let string_length = string.characters.count\n\
    \    let reversed_string = String(string.characters.reverse())\n    let string_with_reversed_prefix\
    \ = string + \"#\" + reversed_string\n    let string_with_reversed_prefix_length\
    \ = string_with_reversed_prefix.characters.count\n    var longest_prefix_suffix\
    \ = [Int](count: string_with_reversed_prefix_length, repeatedValue: 0)\n    var\
    \ index = 0\n    for i in 1..<string_with_reversed_prefix_length {\n        if\
    \ string_with_reversed_prefix[string_with_reversed_prefix.startIndex.advancedBy(i)]\
    \ == string_with_reversed_prefix[string_with_reversed_prefix.startIndex.advancedBy(index)]\
    \ {\n            index += 1\n            longest_prefix_suffix[i] = index\n  \
    \      } else {\n            if index != 0 {\n                index = longest_prefix_suffix[index\
    \ - 1]\n                i -= 1\n            }\n        }\n    }\n    return reversed_string.substringToIndex(reversed_string.startIndex.advancedBy(string_length\
    \ - longest_prefix_suffix[string_with_reversed_prefix_length - 1])) + string",
  "    let reversed = string.reverse()\n    let concatenated = string + \"#\" + reversed\n\
    \    let z_array = z_function(concatenated)\n    let z_array_without_first_element\
    \ = Array(z_array[1..<z_array.count])\n    let max_index = maxElementIndex(z_array_without_first_element)\n\
    \    let prefix = string[0..<(string.count - max_index - 1)]\n    let reversed_prefix\
    \ = prefix.reverse()\n    return string + reversed_prefix", "    let string_length\
    \ = string.characters.count\n    let string_characters = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_index = 0\n\
    \    var palindrome_length = 0\n    var palindrome_index = 0\n    var i = 0\n\
    \    var j = 0\n    while i < string_length {\n        j = 0\n        while i\
    \ - j >= 0 && i + j < string_length && string_characters[i - j] == string_characters[i\
    \ + j] {\n            palindrome_length = j * 2 + 1\n            palindrome_index\
    \ = i - j\n            j += 1\n        }\n        if palindrome_length > longest_palindrome_length\
    \ {\n            longest_palindrome_length = palindrome_length\n            longest_palindrome_index\
    \ = palindrome_index\n        }\n        j = 0\n        while i - j >= 0 && i\
    \ + j + 1 < string_length && string_characters[i - j] == string_characters[i +\
    \ j + 1] {\n            palindrome_length = j * 2 + 2\n            palindrome_index\
    \ = i - j\n            j += 1\n        }\n        if palindrome_length > longest_palindrome_length\
    \ {\n            longest_palindrome_length = palindrome_length\n            longest_palindrome_index\
    \ = palindrome_index\n        }\n        i += 1\n    }\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(longest_palindrome_index))\n\
    \    let reversed_prefix = String(prefix.characters.reverse())\n    return string\
    \ + reversed_prefix", "    let string_length = string.characters.count\n    let\
    \ string_array = Array(string.characters)\n    var longest_palindrome_length =\
    \ 0\n    var longest_palindrome_index = 0\n    var is_palindrome = Array(count:\
    \ string_length, repeatedValue: Array(count: string_length, repeatedValue: false))\n\
    \    for i in 0..<string_length {\n        is_palindrome[i][i] = true\n      \
    \  if i < string_length - 1 && string_array[i] == string_array[i + 1] {\n    \
    \        is_palindrome[i][i + 1] = true\n            longest_palindrome_length\
    \ = 2\n            longest_palindrome_index = i\n        }\n    }\n    for i in\
    \ 2..<string_length {\n        for j in 0..<string_length - i {\n            if\
    \ string_array[j] == string_array[j + i] && is_palindrome[j + 1][j + i - 1] {\n\
    \                is_palindrome[j][j + i] = true\n                longest_palindrome_length\
    \ = i + 1\n                longest_palindrome_index = j\n            }\n     \
    \   }\n    }\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(longest_palindrome_index))\n\
    \    let prefix_reversed = String(prefix.characters.reverse())\n    return string\
    \ + prefix_reversed", "    let string_length = string.characters.count\n    let\
    \ string_array = Array(string.characters)\n    var longest_palindrome_length =\
    \ 0\n    var longest_palindrome_index = 0\n    var longest_palindrome_array =\
    \ [Character]()\n    var longest_palindrome_string = \"\"\n    var longest_palindrome_prefix\
    \ = \"\"\n    var longest_palindrome_prefix_array = [Character]()\n    var longest_palindrome_prefix_string\
    \ = \"\"\n    var longest_palindrome_prefix_reverse_string = \"\"\n    var longest_palindrome_prefix_reverse_array\
    \ = [Character]()\n    var longest_palindrome_prefix_reverse_string_array = [Character]()\n\
    \    var longest_palindrome_prefix_reverse_string_array_length = 0\n    var longest_palindrome_prefix_reverse_string_array_index\
    \ = 0\n    var longest_palindrome_prefix_reverse_string_array_index_end = 0\n\
    \    var longest_palindrome_prefix_reverse_string_array_index_start = 0\n    var\
    \ longest_palindrome_prefix_reverse_string_array_index_start_end = 0\n    var\
    \ longest_palindrome_prefix_reverse_string_array_index_start_end_length = 0\n\
    \    var longest_palindrome_prefix_reverse_string_array_index_start_end_length_index\
    \ = 0\n    var longest_palindrome_prefix_reverse_string_array_index_start_end_length_index_end\
    \ = 0\n    var longest_palindrome_prefix_reverse_string_array_index_start_end_length_index_end_length\
    \ = 0\n    var longest_palindrome_prefix_reverse_string_array_index_start_end_length_index_end_length_index\
    \ = 0\n    var longest_palindrome_prefix_reverse_string_array_index_start_end_length_index_end_length_index_end\
    \ = 0\n    var longest_palindrome_prefix_reverse_string_array_index_start_end_length_index_end_length_index_end_length\
    \ = 0\n    var", "    let reversed_string = String(string.characters.reverse())\n\
    \    let combined_string = string + \"#\" + reversed_string\n    let lps = longest_prefix_suffix(combined_string)\n\
    \    let prefix = String(string.characters.prefix(string.characters.count - lps))\n\
    \    let reversed_prefix = String(prefix.characters.reverse())\n    return prefix\
    \ + string + reversed_prefix", "    let string_length = string.characters.count\n\
    \    let string_array = Array(string.characters)\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_index = 0\n    var palindrome_length = 0\n \
    \   var palindrome_index = 0\n    for i in 0..<string_length {\n        // Check\
    \ for odd palindromes.\n        palindrome_length = 0\n        palindrome_index\
    \ = i\n        while palindrome_index >= 0 && palindrome_index < string_length\
    \ {\n            if string_array[palindrome_index] == string_array[i] {\n    \
    \            palindrome_length += 1\n                palindrome_index -= 1\n \
    \           } else {\n                break\n            }\n        }\n      \
    \  if palindrome_length > longest_palindrome_length {\n            longest_palindrome_length\
    \ = palindrome_length\n            longest_palindrome_index = i\n        }\n \
    \       // Check for even palindromes.\n        palindrome_length = 0\n      \
    \  palindrome_index = i\n        while palindrome_index >= 0 && palindrome_index\
    \ < string_length {\n            if string_array[palindrome_index] == string_array[i\
    \ + 1] {\n                palindrome_length += 1\n                palindrome_index\
    \ -= 1\n            } else {\n                break\n            }\n        }\n\
    \        if palindrome_length > longest_palindrome_length {\n            longest_palindrome_length\
    \ = palindrome_length\n            longest_palindrome_index = i\n        }\n \
    \   }\n    let prefix_length = string_length - longest_palindrome_length\n   \
    \ let prefix_start = string.startIndex\n    let prefix_end = string.index(prefix_start,\
    \ offsetBy: prefix_length)\n    let prefix = string.substring(to: prefix_end)\n\
    \    let reversed_prefix = String(prefix.characters.reversed())\n    return string\
    \ + reversed_prefix", "    let string_length = string.count\n    let string_chars\
    \ = Array(string)\n    var longest_palindrome_length = 0\n    var longest_palindrome_start\
    \ = 0\n    var longest_palindrome_end = 0\n    for i in 0..<string_length {\n\
    \        var j = 0\n        while i - j >= 0 && i + j < string_length && string_chars[i\
    \ - j] == string_chars[i + j] {\n            j += 1\n        }\n        if j >\
    \ longest_palindrome_length {\n            longest_palindrome_length = j\n   \
    \         longest_palindrome_start = i - j + 1\n            longest_palindrome_end\
    \ = i + j - 1\n        }\n    }\n    var result = \"\"\n    for i in 0..<longest_palindrome_start\
    \ {\n        result.append(string_chars[i])\n    }\n    for i in (longest_palindrome_end\
    \ + 1..<string_length).reversed() {\n        result.append(string_chars[i])\n\
    \    }\n    return result", "    let string_length = string.characters.count\n\
    \    let string_array = Array(string.characters)\n    let reversed_string_array\
    \ = Array(string.characters.reversed())\n    \n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_end_index = 0\n    \n    // Find the longest\
    \ palindrome suffix.\n    for i in 0..<string_length {\n        let reversed_string_index\
    \ = string_length - 1 - i\n        if string_array[i] == reversed_string_array[reversed_string_index]\
    \ {\n            if i + 1 > longest_palindrome_length {\n                longest_palindrome_length\
    \ = i + 1\n                longest_palindrome_end_index = i\n            }\n \
    \       } else {\n            break\n        }\n    }\n    \n    // Append the\
    \ reverse of the prefix to the end of the string.\n    var result = string\n \
    \   for i in 0..<string_length - longest_palindrome_length {\n        result.append(reversed_string_array[i])\n\
    \    }\n    \n    return result", "    let string_length = string.characters.count\n\
    \    let string_array = Array(string.characters)\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_end = 0\n    var longest_palindrome_begin =\
    \ 0\n    var longest_palindrome_end_reverse = 0\n    var longest_palindrome_begin_reverse\
    \ = 0\n    var longest_palindrome_length_reverse = 0\n    var longest_palindrome_end_reverse_reverse\
    \ = 0\n    var longest_palindrome_begin_reverse_reverse = 0\n    var longest_palindrome_length_reverse_reverse\
    \ = 0\n    var longest_palindrome_end_reverse_reverse_reverse = 0\n    var longest_palindrome_begin_reverse_reverse_reverse\
    \ = 0\n    var longest_palindrome_length_reverse_reverse_reverse = 0\n    var\
    \ longest_palindrome_end_reverse_reverse_reverse_reverse = 0\n    var longest_palindrome_begin_reverse_reverse_reverse_reverse\
    \ = 0\n    var longest_palindrome_length_reverse_reverse_reverse_reverse = 0\n\
    \    var longest_palindrome_end_reverse_reverse_reverse_reverse_reverse = 0\n\
    \    var longest_palindrome_begin_reverse_reverse_reverse_reverse_reverse = 0\n\
    \    var longest_palindrome_length_reverse_reverse_reverse_reverse_reverse = 0\n\
    \    var longest_palindrome_end_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = 0\n    var longest_palindrome_begin_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = 0\n    var longest_palindrome_length_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = 0\n    var longest_palindrome_end_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = 0\n    var longest_palindrome_begin_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = 0\n    var longest_palindrome_length_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = 0\n    var longest_palindrome_end_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = 0\n", "    let string_length = string.characters.count\n    let reversed_string\
    \ = String(string.characters.reverse())\n    let string_with_reversed_prefix =\
    \ string + \"#\" + reversed_string\n    let string_with_reversed_prefix_length\
    \ = string_with_reversed_prefix.characters.count\n    var longest_prefix_suffix\
    \ = [Int](count: string_with_reversed_prefix_length, repeatedValue: 0)\n    var\
    \ longest_prefix_suffix_length = 0\n    var longest_prefix_suffix_index = 0\n\
    \    for i in 1..<string_with_reversed_prefix_length {\n        if string_with_reversed_prefix[string_with_reversed_prefix.startIndex.advancedBy(i)]\
    \ == string_with_reversed_prefix[string_with_reversed_prefix.startIndex.advancedBy(longest_prefix_suffix_length)]\
    \ {\n            longest_prefix_suffix_length += 1\n            longest_prefix_suffix[i]\
    \ = longest_prefix_suffix_length\n        } else {\n            if longest_prefix_suffix_length\
    \ > 0 {\n                longest_prefix_suffix_index = i - 1\n               \
    \ longest_prefix_suffix_length = longest_prefix_suffix[longest_prefix_suffix_index]\n\
    \            }\n        }\n    }\n    return reversed_string.substringToIndex(reversed_string.startIndex.advancedBy(string_length\
    \ - longest_prefix_suffix[string_with_reversed_prefix_length - 1])) + string",
  "    let reversed = String(string.characters.reverse())\n    let combined = string\
    \ + reversed\n    let lps = longest_prefix_suffix(string: combined)\n    let prefix\
    \ = String(string.characters.prefix(string.characters.count - lps))\n    return\
    \ prefix + string", "    let string_length = string.characters.count\n    let\
    \ string_array = Array(string.characters)\n    var longest_palindrome_length =\
    \ 0\n    var longest_palindrome_index = 0\n    var palindrome_length = 0\n   \
    \ var palindrome_index = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var\
    \ m = 0\n    var n = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s\
    \ = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x =\
    \ 0\n    var y = 0\n    var z = 0\n    var aa = 0\n    var ab = 0\n    var ac\
    \ = 0\n    var ad = 0\n    var ae = 0\n    var af = 0\n    var ag = 0\n    var\
    \ ah = 0\n    var ai = 0\n    var aj = 0\n    var ak = 0\n    var al = 0\n   \
    \ var am = 0\n    var an = 0\n    var ao = 0\n    var ap = 0\n    var aq = 0\n\
    \    var ar = 0\n    var as_ = 0\n    var at = 0\n    var au = 0\n    var av =\
    \ 0\n    var aw = 0\n    var ax = 0\n    var ay = 0\n    var az = 0\n    var ba\
    \ = 0\n    var bb = 0\n    var bc = 0\n    var bd = 0\n    var be = 0\n    var\
    \ bf = 0\n    var bg = 0\n    var bh = 0\n    var bi = 0\n    var bj = 0\n   \
    \ var bk = 0\n    var bl = 0\n    var bm = 0\n    var bn = 0\n    var bo = 0\n\
    \    var bp = 0\n    var bq = 0\n    var br = 0\n    var bs = 0\n    var bt =\
    \ 0\n    var bu = 0\n    var bv = 0\n    var bw = 0\n    var bx = 0\n    var by\
    \ = 0\n    var bz = 0\n    var ca = 0\n    var", "    let reversed_string = String(string.characters.reverse())\n\
    \    let combined_string = string + \"#\" + reversed_string\n    let lps = longest_prefix_suffix(combined_string)\n\
    \    let prefix = String(string.characters.prefix(string.characters.count - lps.last!))\n\
    \    return prefix + string", "    let reversed = String(string.characters.reverse())\n\
    \    let combined = string + \"#\" + reversed\n    let lps = longest_prefix_suffix(combined)\n\
    \    let prefix = String(string.characters.prefix(string.characters.count - lps))\n\
    \    return prefix + string", "    let string_length = string.characters.count\n\
    \    let string_characters = Array(string.characters)\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_index = 0\n    var i = 0\n    while i < string_length\
    \ {\n        var j = i\n        var k = i\n        while k < string_length - 1\
    \ && string_characters[k + 1] == string_characters[k] {\n            k += 1\n\
    \        }\n        i = k + 1\n        while k < string_length - 1 && j > 0 &&\
    \ string_characters[k + 1] == string_characters[j - 1] {\n            k += 1\n\
    \            j -= 1\n        }\n        let current_palindrome_length = k - j\
    \ + 1\n        if current_palindrome_length > longest_palindrome_length {\n  \
    \          longest_palindrome_length = current_palindrome_length\n           \
    \ longest_palindrome_index = j\n        }\n    }\n    let prefix = String(string_characters[0..<longest_palindrome_index])\n\
    \    let reversed_prefix = String(prefix.characters.reverse())\n    return string\
    \ + reversed_prefix", "    let string_length = string.characters.count\n    let\
    \ string_array = Array(string.characters)\n    var suffix_length = 0\n    var\
    \ suffix_start = 0\n    var suffix_end = 0\n    var prefix_start = 0\n    var\
    \ prefix_end = 0\n    var prefix_length = 0\n    var palindrome_length = 0\n \
    \   var palindrome_start = 0\n    var palindrome_end = 0\n    var palindrome_length_max\
    \ = 0\n    var palindrome_start_max = 0\n    var palindrome_end_max = 0\n    var\
    \ palindrome_length_max_prev = 0\n    var palindrome_start_max_prev = 0\n    var\
    \ palindrome_end_max_prev = 0\n    var palindrome_length_max_prev_prev = 0\n \
    \   var palindrome_start_max_prev_prev = 0\n    var palindrome_end_max_prev_prev\
    \ = 0\n    var palindrome_length_max_prev_prev_prev = 0\n    var palindrome_start_max_prev_prev_prev\
    \ = 0\n    var palindrome_end_max_prev_prev_prev = 0\n    var palindrome_length_max_prev_prev_prev_prev\
    \ = 0\n    var palindrome_start_max_prev_prev_prev_prev = 0\n    var palindrome_end_max_prev_prev_prev_prev\
    \ = 0\n    var palindrome_length_max_prev_prev_prev_prev_prev = 0\n    var palindrome_start_max_prev_prev_prev_prev_prev\
    \ = 0\n    var palindrome_end_max_prev_prev_prev_prev_prev = 0\n    var palindrome_length_max_prev_prev_prev_prev_prev_prev\
    \ = 0\n    var palindrome_start_max_prev_prev_prev_prev_prev_prev = 0\n    var\
    \ palindrome_end_max_prev_prev_prev_prev_prev_prev = 0\n    var palindrome_length_max_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n    var", "    let string_length = string.characters.count\n    let string_characters\
    \ = Array(string.characters)\n    var longest_palindrome_length = 0\n    var longest_palindrome_start\
    \ = 0\n    var longest_palindrome_end = 0\n    for i in 0..<string_length {\n\
    \        var j = 0\n        while i - j >= 0 && i + j < string_length && string_characters[i\
    \ - j] == string_characters[i + j] {\n            j += 1\n        }\n        if\
    \ j > longest_palindrome_length {\n            longest_palindrome_length = j\n\
    \            longest_palindrome_start = i - j + 1\n            longest_palindrome_end\
    \ = i + j - 1\n        }\n        j = 0\n        while i - j >= 0 && i + j + 1\
    \ < string_length && string_characters[i - j] == string_characters[i + j + 1]\
    \ {\n            j += 1\n        }\n        if j > longest_palindrome_length {\n\
    \            longest_palindrome_length = j\n            longest_palindrome_start\
    \ = i - j + 1\n            longest_palindrome_end = i + j\n        }\n    }\n\
    \    let prefix = String(string_characters[0..<longest_palindrome_start])\n  \
    \  let suffix = String(string_characters[longest_palindrome_end + 1..<string_length])\n\
    \    let reversed_prefix = String(prefix.characters.reverse())\n    return reversed_prefix\
    \ + string + suffix", "    let string_length = string.characters.count\n    let\
    \ reversed_string = String(string.characters.reverse())\n    let string_with_reversed_prefix\
    \ = string + \"#\" + reversed_string\n    let string_with_reversed_prefix_length\
    \ = string_with_reversed_prefix.characters.count\n    var longest_prefix_suffix\
    \ = [Int](count: string_with_reversed_prefix_length, repeatedValue: 0)\n    for\
    \ i in 1..<string_with_reversed_prefix_length {\n        var j = longest_prefix_suffix[i\
    \ - 1]\n        while j > 0 && string_with_reversed_prefix[string_with_reversed_prefix.startIndex.advancedBy(i)]\
    \ != string_with_reversed_prefix[string_with_reversed_prefix.startIndex.advancedBy(j)]\
    \ {\n            j = longest_prefix_suffix[j - 1]\n        }\n        if string_with_reversed_prefix[string_with_reversed_prefix.startIndex.advancedBy(i)]\
    \ == string_with_reversed_prefix[string_with_reversed_prefix.startIndex.advancedBy(j)]\
    \ {\n            j += 1\n        }\n        longest_prefix_suffix[i] = j\n   \
    \ }\n    return reversed_string.substringToIndex(reversed_string.startIndex.advancedBy(string_length\
    \ - longest_prefix_suffix[string_with_reversed_prefix_length - 1])) + string",
  "    let string_length = string.characters.count\n    let string_array = Array(string.characters)\n\
    \    var palindrome_suffix_length = 0\n    var palindrome_suffix_start = 0\n \
    \   for i in 0..<string_length {\n        let j = string_length - 1 - i\n    \
    \    if string_array[i] == string_array[j] {\n            palindrome_suffix_length\
    \ += 1\n            palindrome_suffix_start = i\n        } else {\n          \
    \  break\n        }\n    }\n    let palindrome_prefix_length = string_length -\
    \ palindrome_suffix_length\n    let palindrome_prefix_start = palindrome_suffix_start\
    \ - palindrome_prefix_length + 1\n    let palindrome_prefix = String(string_array[palindrome_prefix_start..<palindrome_suffix_start\
    \ + 1])\n    let palindrome_prefix_reversed = String(palindrome_prefix.characters.reverse())\n\
    \    return string + palindrome_prefix_reversed", "    let string_length = string.characters.count\n\
    \    let reversed_string = string.characters.reverse()\n    let reversed_string_array\
    \ = Array(reversed_string)\n    var longest_palindrome_length = 0\n    var longest_palindrome_index\
    \ = 0\n    var i = 0\n    while i < string_length {\n        var j = 0\n     \
    \   while i - j >= 0 && i + j < string_length && string[i - j] == reversed_string_array[i\
    \ + j] {\n            if 2 * j + 1 > longest_palindrome_length {\n           \
    \     longest_palindrome_length = 2 * j + 1\n                longest_palindrome_index\
    \ = i - j\n            }\n            j += 1\n        }\n        j = 0\n     \
    \   while i - j >= 0 && i + j + 1 < string_length && string[i - j] == reversed_string_array[i\
    \ + j + 1] {\n            if 2 * j + 2 > longest_palindrome_length {\n       \
    \         longest_palindrome_length = 2 * j + 2\n                longest_palindrome_index\
    \ = i - j\n            }\n            j += 1\n        }\n        i += 1\n    }\n\
    \    let prefix = string.substringToIndex(string.startIndex.advancedBy(longest_palindrome_index))\n\
    \    let reversed_prefix = prefix.characters.reverse()\n    return string + String(reversed_prefix)",
  "    let reversed = String(string.characters.reverse())\n    let combined = string\
    \ + \"#\" + reversed\n    let lps = longest_prefix_suffix(string: combined)\n\
    \    let prefix = string.substringToIndex(string.startIndex.advancedBy(lps.count))\n\
    \    let suffix = String(prefix.characters.reverse())\n    return string + suffix",
  "    let string_length = string.characters.count\n    let string_array = Array(string.characters)\n\
    \    var suffix_length = 0\n    for i in 0..<string_length {\n        if is_palindrome(string:\
    \ string, start: i, end: string_length - 1) {\n            suffix_length = string_length\
    \ - i\n            break\n        }\n    }\n    var prefix_length = string_length\
    \ - suffix_length\n    var result = string\n    for i in 0..<prefix_length {\n\
    \        result.append(string_array[prefix_length - i - 1])\n    }\n    return\
    \ result", "    let reversed = String(string.characters.reverse())\n    let combined\
    \ = string + \"#\" + reversed\n    let lps = longest_prefix_suffix(string: combined)\n\
    \    let prefix = String(string.characters.prefix(string.characters.count - lps.last!))\n\
    \    return prefix + string", "    let reversed = String(string.characters.reverse())\n\
    \    let combined = string + \"#\" + reversed\n    let lps = longest_prefix_suffix(combined)\n\
    \    let prefix = String(string.characters.prefix(string.characters.count - lps.last!))\n\
    \    return prefix + string", "    let string_length = string.characters.count\n\
    \    let string_array = Array(string.characters)\n    var palindrome_suffix =\
    \ String(string_array[0])\n    var palindrome_prefix = String(string_array[0])\n\
    \    for i in 1..<string_length {\n        palindrome_suffix = String(string_array[i])\
    \ + palindrome_suffix\n        palindrome_prefix = palindrome_prefix + String(string_array[i])\n\
    \        if palindrome_suffix == palindrome_prefix {\n            return string\
    \ + String(palindrome_prefix.characters.reversed())\n        }\n    }\n    return\
    \ string + String(palindrome_prefix.characters.reversed())", "    let string_length\
    \ = string.characters.count\n    if string_length <= 1 {\n        return string\n\
    \    }\n    let string_characters = Array(string.characters)\n    let string_characters_reversed\
    \ = Array(string.characters.reversed())\n    var longest_palindrome_length = 0\n\
    \    var longest_palindrome_index = 0\n    var i = 0\n    while i < string_length\
    \ {\n        var j = 0\n        while i - j >= 0 && i + j < string_length && string_characters[i\
    \ - j] == string_characters[i + j] {\n            j += 1\n        }\n        if\
    \ j > longest_palindrome_length {\n            longest_palindrome_length = j\n\
    \            longest_palindrome_index = i\n        }\n        i += 1\n    }\n\
    \    var result = string\n    let prefix_length = longest_palindrome_index - longest_palindrome_length\
    \ + 1\n    let prefix_start = string.index(string.startIndex, offsetBy: prefix_length)\n\
    \    let prefix = string.substring(to: prefix_start)\n    result.append(contentsOf:\
    \ prefix.characters.reversed())\n    return result", "    let string_length =\
    \ string.characters.count\n    let reversed_string = String(string.characters.reverse())\n\
    \    let string_suffix = string + \"#\" + reversed_string\n    var longest_palindrome_suffix\
    \ = [Int](count: string_suffix.characters.count, repeatedValue: 0)\n    var current_longest_palindrome_suffix_length\
    \ = 0\n    for i in 1..<string_suffix.characters.count {\n        while current_longest_palindrome_suffix_length\
    \ > 0 && string_suffix[string_suffix.startIndex.advancedBy(current_longest_palindrome_suffix_length)]\
    \ != string_suffix[string_suffix.startIndex.advancedBy(i)] {\n            current_longest_palindrome_suffix_length\
    \ = longest_palindrome_suffix[current_longest_palindrome_suffix_length - 1]\n\
    \        }\n        if string_suffix[string_suffix.startIndex.advancedBy(current_longest_palindrome_suffix_length)]\
    \ == string_suffix[string_suffix.startIndex.advancedBy(i)] {\n            current_longest_palindrome_suffix_length\
    \ += 1\n        }\n        longest_palindrome_suffix[i] = current_longest_palindrome_suffix_length\n\
    \    }\n    let palindrome_suffix_length = longest_palindrome_suffix[string_suffix.characters.count\
    \ - 1]\n    let palindrome_prefix_length = string_length - palindrome_suffix_length\n\
    \    let palindrome_prefix = String(string.characters.prefix(palindrome_prefix_length))\n\
    \    let palindrome_suffix = String(palindrome_prefix.characters.reverse())\n\
    \    return string + palindrome_suffix", "    let string_length = string.characters.count\n\
    \    let string_chars = Array(string.characters)\n    let reversed_string = String(string_chars.reverse())\n\
    \    let reversed_string_length = reversed_string.characters.count\n    let reversed_string_chars\
    \ = Array(reversed_string.characters)\n    var longest_palindrome_length = 0\n\
    \    var longest_palindrome_index = 0\n    var i = 0\n    while i < string_length\
    \ {\n        var j = 0\n        while j < reversed_string_length {\n         \
    \   var k = 0\n            while k < string_length - i && k < reversed_string_length\
    \ - j && string_chars[i + k] == reversed_string_chars[j + k] {\n             \
    \   k += 1\n            }\n            if k > longest_palindrome_length {\n  \
    \              longest_palindrome_length = k\n                longest_palindrome_index\
    \ = i\n            }\n            j += 1\n        }\n        i += 1\n    }\n \
    \   let prefix = String(string_chars[0..<longest_palindrome_index])\n    let reversed_prefix\
    \ = String(prefix.characters.reverse())\n    return prefix + reversed_prefix +\
    \ string", "    let string_length = string.characters.count\n    let reverse_string\
    \ = String(string.characters.reverse())\n    let string_suffix = string + \"#\"\
    \ + reverse_string\n    let string_suffix_length = string_suffix.characters.count\n\
    \    var longest_prefix_suffix = [Int](count: string_suffix_length, repeatedValue:\
    \ 0)\n    var longest_prefix_suffix_length = 0\n    for i in 1..<string_suffix_length\
    \ {\n        var j = longest_prefix_suffix[i - 1]\n        while j > 0 && string_suffix[string_suffix.startIndex.advancedBy(i)]\
    \ != string_suffix[string_suffix.startIndex.advancedBy(j)] {\n            j =\
    \ longest_prefix_suffix[j - 1]\n        }\n        if string_suffix[string_suffix.startIndex.advancedBy(i)]\
    \ == string_suffix[string_suffix.startIndex.advancedBy(j)] {\n            j +=\
    \ 1\n        }\n        longest_prefix_suffix[i] = j\n        if j > longest_prefix_suffix_length\
    \ {\n            longest_prefix_suffix_length = j\n        }\n    }\n    let prefix_length\
    \ = string_length - longest_prefix_suffix_length\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(prefix_length))\n\
    \    let reverse_prefix = String(prefix.characters.reverse())\n    return string\
    \ + reverse_prefix", "    let string_length = string.count\n    let string_array\
    \ = Array(string)\n    let reversed_string_array = string_array.reversed()\n \
    \   var longest_palindrome_length = 0\n    var longest_palindrome_index = 0\n\
    \    for i in 0..<string_length {\n        let suffix_length = string_length -\
    \ i\n        let suffix_array = Array(string_array[i..<string_length])\n     \
    \   let reversed_suffix_array = Array(reversed_string_array[0..<suffix_length])\n\
    \        if suffix_array == reversed_suffix_array {\n            longest_palindrome_length\
    \ = suffix_length\n            longest_palindrome_index = i\n            break\n\
    \        }\n    }\n    let prefix_array = Array(string_array[0..<longest_palindrome_index])\n\
    \    let reversed_prefix_array = prefix_array.reversed()\n    let result_array\
    \ = reversed_prefix_array + string_array\n    return String(result_array)", " \
    \   let reversed = String(string.characters.reverse())\n    let combined = string\
    \ + \"#\" + reversed\n    let lps = longest_prefix_suffix(string: combined)\n\
    \    let prefix = string.substringToIndex(string.startIndex.advancedBy(lps.count))\n\
    \    let suffix = String(prefix.characters.reverse())\n    return string + suffix",
  "    let string_length = string.characters.count\n    let string_characters = Array(string.characters)\n\
    \    var i = 0\n    var j = string_length - 1\n    while i < j {\n        if string_characters[i]\
    \ != string_characters[j] {\n            break\n        }\n        i += 1\n  \
    \      j -= 1\n    }\n    if i >= j {\n        return string\n    }\n    let prefix\
    \ = string.substring(to: string.index(string.startIndex, offsetBy: i))\n    let\
    \ suffix = string.substring(from: string.index(string.startIndex, offsetBy: i))\n\
    \    return prefix + String(suffix.characters.reversed()) + suffix", "    let\
    \ string_length = string.count\n    let string_chars = Array(string)\n    let\
    \ string_chars_reversed = string_chars.reversed()\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_start = 0\n    for i in 0..<string_length {\n\
    \        let suffix_length = string_length - i\n        let suffix_start = i\n\
    \        let suffix_end = suffix_start + suffix_length\n        let suffix = string_chars[suffix_start..<suffix_end]\n\
    \        let suffix_reversed = suffix.reversed()\n        if suffix == suffix_reversed\
    \ {\n            longest_palindrome_length = suffix_length\n            longest_palindrome_start\
    \ = suffix_start\n        }\n    }\n    let prefix_length = string_length - longest_palindrome_length\n\
    \    let prefix_start = 0\n    let prefix_end = prefix_start + prefix_length\n\
    \    let prefix = string_chars[prefix_start..<prefix_end]\n    let prefix_reversed\
    \ = prefix.reversed()\n    let palindrome = string + String(prefix_reversed)\n\
    \    return palindrome", "    let string_length = string.characters.count\n  \
    \  let string_array = Array(string.characters)\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_index = 0\n    var palindrome_lengths = [Int](count:\
    \ string_length, repeatedValue: 0)\n    for i in 0..<string_length {\n       \
    \ var palindrome_length = 0\n        if i > 0 && i < string_length - 1 {\n   \
    \         palindrome_length = min(palindrome_lengths[i - longest_palindrome_index],\
    \ longest_palindrome_index - i + longest_palindrome_length)\n        }\n     \
    \   while i - palindrome_length >= 0 && i + palindrome_length < string_length\
    \ && string_array[i - palindrome_length] == string_array[i + palindrome_length]\
    \ {\n            palindrome_length += 1\n        }\n        palindrome_lengths[i]\
    \ = palindrome_length\n        if i + palindrome_length - 1 > longest_palindrome_index\
    \ + longest_palindrome_length - 1 {\n            longest_palindrome_index = i\n\
    \            longest_palindrome_length = palindrome_length\n        }\n    }\n\
    \    let prefix = string.substringToIndex(string.startIndex.advancedBy(longest_palindrome_index\
    \ - longest_palindrome_length + 1))\n    let reversed_prefix = String(prefix.characters.reverse())\n\
    \    return string + reversed_prefix", "    let string_length = string.characters.count\n\
    \    let string_characters = Array(string.characters)\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_index = 0\n    for i in 0..<string_length {\n\
    \        let palindrome_length = longest_palindrome_length_at_index(string_characters,\
    \ index: i)\n        if palindrome_length > longest_palindrome_length {\n    \
    \        longest_palindrome_length = palindrome_length\n            longest_palindrome_index\
    \ = i\n        }\n    }\n    let prefix_start_index = longest_palindrome_index\
    \ - longest_palindrome_length + 1\n    let prefix_end_index = longest_palindrome_index\n\
    \    let prefix = string_characters[prefix_start_index...prefix_end_index]\n \
    \   let reversed_prefix = prefix.reverse()\n    let result = string + String(reversed_prefix)\n\
    \    return result", "    let reversed = String(string.characters.reverse())\n\
    \    let combined = string + \"#\" + reversed\n    let lps = longest_palindromic_substring(combined)\n\
    \    let prefix = String(string.characters.prefix(string.characters.count - lps.characters.count))\n\
    \    let result = prefix + string\n    return result", "    let reversed = String(string.characters.reverse())\n\
    \    let combined = string + \"#\" + reversed\n    let lps = longest_prefix_suffix(combined)\n\
    \    let prefix = string.substringToIndex(string.startIndex.advancedBy(lps))\n\
    \    let suffix = String(prefix.characters.reverse())\n    return string + suffix",
  "    let string_length = string.characters.count\n    let string_array = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_index = 0\n\
    \    var palindrome_length = 0\n    var palindrome_index = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var aa = 0\n    var ab = 0\n    var ac = 0\n \
    \   var ad = 0\n    var ae = 0\n    var af = 0\n    var ag = 0\n    var ah = 0\n\
    \    var ai = 0\n    var aj = 0\n    var ak = 0\n    var al = 0\n    var am =\
    \ 0\n    var an = 0\n    var ao = 0\n    var ap = 0\n    var aq = 0\n    var ar\
    \ = 0\n    var as = 0\n    var at = 0\n    var au = 0\n    var av = 0\n    var\
    \ aw = 0\n    var ax = 0\n    var ay = 0\n    var az = 0\n    var ba = 0\n   \
    \ var bb = 0\n    var bc = 0\n    var bd = 0\n    var be = 0\n    var bf = 0\n\
    \    var bg = 0\n    var bh = 0\n    var bi = 0\n    var bj = 0\n    var bk =\
    \ 0\n    var bl = 0\n    var bm = 0\n    var bn = 0\n    var bo = 0\n    var bp\
    \ = 0\n    var bq = 0\n    var br = 0\n    var bs = 0\n    var bt = 0\n    var\
    \ bu = 0\n    var bv = 0\n    var bw = 0\n    var bx = 0\n    var by = 0\n   \
    \ var bz", "    let reversed = String(string.characters.reverse())\n    let combined\
    \ = string + \"#\" + reversed\n    let z = z_function(combined)\n    let z_max\
    \ = z.maxElement()!\n    let z_max_index = z.indexOf(z_max)!\n    let prefix =\
    \ String(string.characters.prefix(string.characters.count - z_max_index))\n  \
    \  return prefix + string", "    let string = string.characters.map { String($0)\
    \ }\n    let reversed = string.reverse()\n    let combined = string + [\"|\"]\
    \ + reversed\n    let suffix_array = suffix_array_of(combined)\n    let lcp_array\
    \ = lcp_array_of(combined, suffix_array: suffix_array)\n    let lcp_array_reversed\
    \ = lcp_array.reverse()\n    let lcp_array_reversed_with_index = zip(lcp_array_reversed,\
    \ 0..<lcp_array_reversed.count)\n    let lcp_array_reversed_with_index_filtered\
    \ = lcp_array_reversed_with_index.filter { $0.0 > 0 }\n    let lcp_array_reversed_with_index_filtered_sorted\
    \ = lcp_array_reversed_with_index_filtered.sort { $0.0 > $1.0 }\n    let lcp_array_reversed_with_index_filtered_sorted_first\
    \ = lcp_array_reversed_with_index_filtered_sorted.first\n    let lcp_array_reversed_with_index_filtered_sorted_first_index\
    \ = lcp_array_reversed_with_index_filtered_sorted_first?.1\n    let lcp_array_reversed_with_index_filtered_sorted_first_index_mapped\
    \ = lcp_array_reversed_with_index_filtered_sorted_first_index.map { $0 + 1 }\n\
    \    let lcp_array_reversed_with_index_filtered_sorted_first_index_mapped_filtered\
    \ = lcp_array_reversed_with_index_filtered_sorted_first_index_mapped.filter {\
    \ $0 < string.count }\n    let lcp_array_reversed_with_index_filtered_sorted_first_index_mapped_filtered_first\
    \ = lcp_array_reversed_with_index_filtered_sorted_first_index_mapped_filtered",
  "    let reversed = String(string.characters.reverse())\n    let combined = string\
    \ + \"#\" + reversed\n    let lps = longest_prefix_suffix(combined)\n    let prefix\
    \ = string.substringToIndex(string.startIndex.advancedBy(lps.count))\n    let\
    \ suffix = String(prefix.characters.reverse())\n    return string + suffix", " \
    \   let string_length = string.characters.count\n    let string_array = Array(string.characters)\n\
    \    var suffix_length = 0\n    var suffix_start = 0\n    var prefix_start = 0\n\
    \    var prefix_length = 0\n    var palindrome_length = 0\n    var palindrome_start\
    \ = 0\n    var palindrome_end = 0\n    var i = 0\n    var j = 0\n    var k = 0\n\
    \    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n \
    \   var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n  \
    \  var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n   \
    \ var aa = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n    var ae = 0\n\
    \    var af = 0\n    var ag = 0\n    var ah = 0\n    var ai = 0\n    var aj =\
    \ 0\n    var ak = 0\n    var al = 0\n    var am = 0\n    var an = 0\n    var ao\
    \ = 0\n    var ap = 0\n    var aq = 0\n    var ar = 0\n    var as = 0\n    var\
    \ at = 0\n    var au = 0\n    var av = 0\n    var aw = 0\n    var ax = 0\n   \
    \ var ay = 0\n    var az = 0\n    var ba = 0\n    var bb = 0\n    var bc = 0\n\
    \    var bd = 0\n    var be = 0\n    var bf = 0\n    var bg = 0\n    var bh =\
    \ 0\n    var bi = 0\n    var bj = 0\n    var bk = 0\n    var bl = 0\n    var bm\
    \ = 0\n    var bn = 0\n    var bo = 0\n    var bp = 0\n    var bq = 0\n    var\
    \ br = 0\n    var bs = 0\n    var bt = 0\n    var bu = 0\n    var bv = 0\n   \
    \ var bw = 0", "    var string = string\n    let length = string.characters.count\n\
    \    let reversed = string.characters.reverse()\n    let reversed_string = String(reversed)\n\
    \    let suffix = reversed_string.commonSuffixWithString(string, options: NSStringCompareOptions.CaseInsensitiveSearch)\n\
    \    let prefix = string.substringToIndex(string.endIndex.advancedBy(-suffix.characters.count))\n\
    \    let reversed_prefix = String(prefix.characters.reverse())\n    string.appendContentsOf(reversed_prefix)\n\
    \    return string", "    let string_length = string.characters.count\n    let\
    \ string_array = Array(string.characters)\n    var longest_palindrome_length =\
    \ 0\n    var longest_palindrome_index = 0\n    var current_palindrome_length =\
    \ 0\n    var current_palindrome_index = 0\n    var i = 0\n    while i < string_length\
    \ {\n        if string_array[i] == string_array[string_length - 1 - i] {\n   \
    \         current_palindrome_length += 1\n            current_palindrome_index\
    \ = i\n        } else {\n            if current_palindrome_length > longest_palindrome_length\
    \ {\n                longest_palindrome_length = current_palindrome_length\n \
    \               longest_palindrome_index = current_palindrome_index\n        \
    \    }\n            current_palindrome_length = 0\n            current_palindrome_index\
    \ = 0\n        }\n        i += 1\n    }\n    if current_palindrome_length > longest_palindrome_length\
    \ {\n        longest_palindrome_length = current_palindrome_length\n        longest_palindrome_index\
    \ = current_palindrome_index\n    }\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(longest_palindrome_index\
    \ + 1))\n    let reversed_prefix = String(prefix.characters.reverse())\n    return\
    \ string + reversed_prefix", "    let string_length = string.characters.count\n\
    \    let string_array = Array(string.characters)\n    var suffix_length = 0\n\
    \    var suffix_array = [Character]()\n    var prefix_array = [Character]()\n\
    \    for i in 0..<string_length {\n        suffix_array.append(string_array[string_length\
    \ - 1 - i])\n        if is_palindrome(suffix_array) {\n            suffix_length\
    \ = i + 1\n            break\n        }\n    }\n    for i in 0..<string_length\
    \ - suffix_length {\n        prefix_array.append(string_array[i])\n    }\n   \
    \ return string + String(suffix_array.reverse())", "    let string_length = string.characters.count\n\
    \    let string_array = Array(string.characters)\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_index = 0\n    var longest_palindrome_length_array\
    \ = [Int](count: string_length, repeatedValue: 0)\n    for i in 0..<string_length\
    \ {\n        var j = 0\n        while i - j >= 0 && i + j < string_length && string_array[i\
    \ - j] == string_array[i + j] {\n            j += 1\n        }\n        longest_palindrome_length_array[i]\
    \ = j\n        if j > longest_palindrome_length {\n            longest_palindrome_length\
    \ = j\n            longest_palindrome_index = i\n        }\n    }\n    var result\
    \ = string\n    for i in 0..<longest_palindrome_index - longest_palindrome_length\
    \ + 1 {\n        result.append(string_array[i])\n    }\n    return result", " \
    \   let string_length = string.characters.count\n    let string_array = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_index = 0\n\
    \    var palindrome_lengths = [Int](count: string_length, repeatedValue: 0)\n\
    \    for index in 0..<string_length {\n        let reversed_index = string_length\
    \ - index - 1\n        if string_array[index] == string_array[reversed_index]\
    \ {\n            if index == 0 || reversed_index == string_length - 1 {\n    \
    \            palindrome_lengths[index] = 1\n            } else {\n           \
    \     palindrome_lengths[index] = palindrome_lengths[index - 1] + 2\n        \
    \    }\n            if palindrome_lengths[index] > longest_palindrome_length {\n\
    \                longest_palindrome_length = palindrome_lengths[index]\n     \
    \           longest_palindrome_index = index\n            }\n        }\n    }\n\
    \    let prefix_length = string_length - longest_palindrome_length\n    let prefix\
    \ = string_array[0..<prefix_length]\n    let reversed_prefix = prefix.reverse()\n\
    \    let reversed_prefix_string = String(reversed_prefix)\n    return string +\
    \ reversed_prefix_string", "    let reversed = String(string.characters.reverse())\n\
    \    let combined = string + \"#\" + reversed\n    let lps = longest_prefix_suffix(combined)\n\
    \    let prefix = string.substringToIndex(string.startIndex.advancedBy(lps.count))\n\
    \    let suffix = String(prefix.characters.reverse())\n    return string + suffix",
  "    let string_length = string.characters.count\n    let string_chars = Array(string.characters)\n\
    \    let reversed_string = String(string_chars.reverse())\n    let reversed_string_length\
    \ = reversed_string.characters.count\n    let reversed_string_chars = Array(reversed_string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_index = 0\n\
    \    var prefix_length = 0\n    var prefix_index = 0\n    var suffix_length =\
    \ 0\n    var suffix_index = 0\n    var i = 0\n    var j = 0\n    var k = 0\n \
    \   var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n  \
    \  var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n   \
    \ var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var\
    \ aa = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n    var ae = 0\n   \
    \ var af = 0\n    var ag = 0\n    var ah = 0\n    var ai = 0\n    var aj = 0\n\
    \    var ak = 0\n    var al = 0\n    var am = 0\n    var an = 0\n    var ao =\
    \ 0\n    var ap = 0\n    var aq = 0\n    var ar = 0\n    var as = 0\n    var at\
    \ = 0\n    var au = 0\n    var av = 0\n    var aw = 0\n    var ax = 0\n    var\
    \ ay = 0\n    var az = 0\n    var ba = 0\n    var bb = 0\n    var bc = 0\n   \
    \ var bd = 0\n    var be = 0\n    var bf = 0\n    var bg = 0\n    var bh = 0\n\
    \    var bi = 0\n    var bj = 0\n    var bk = 0\n    var bl = 0\n    var bm =\
    \ 0\n    var bn = 0\n    var bo = 0\n    var bp", "    let string_length = string.characters.count\n\
    \    let reversed_string = String(string.characters.reverse())\n    let reversed_string_length\
    \ = reversed_string.characters.count\n    var longest_palindrome_length = 0\n\
    \    var longest_palindrome_index = 0\n    var prefix_length = 0\n    var prefix_index\
    \ = 0\n    var suffix_length = 0\n    var suffix_index = 0\n    var i = 0\n  \
    \  var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n   \
    \ var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var\
    \ t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y\
    \ = 0\n    var z = 0\n    var aa = 0\n    var ab = 0\n    var ac = 0\n    var\
    \ ad = 0\n    var ae = 0\n    var af = 0\n    var ag = 0\n    var ah = 0\n   \
    \ var ai = 0\n    var aj = 0\n    var ak = 0\n    var al = 0\n    var am = 0\n\
    \    var an = 0\n    var ao = 0\n    var ap = 0\n    var aq = 0\n    var ar =\
    \ 0\n    var as = 0\n    var at = 0\n    var au = 0\n    var av = 0\n    var aw\
    \ = 0\n    var ax = 0\n    var ay = 0\n    var az = 0\n    var ba = 0\n    var\
    \ bb = 0\n    var bc = 0\n    var bd = 0\n    var be = 0\n    var bf = 0\n   \
    \ var bg = 0\n    var bh = 0\n    var bi = 0\n    var bj = 0\n    var bk = 0\n\
    \    var bl = 0\n    var bm = 0\n    var bn = 0\n    var bo = 0\n    var bp =\
    \ 0\n    var bq = 0\n    var br = 0\n    var bs = 0\n    var bt = 0\n    var bu\
    \ = 0\n", "    let string_length = string.characters.count\n    let string_characters\
    \ = Array(string.characters)\n    var longest_palindrome_length = 0\n    var longest_palindrome_index\
    \ = 0\n    var palindrome_lengths = [Int](count: string_length, repeatedValue:\
    \ 0)\n    for index in 0..<string_length {\n        var palindrome_length = 0\n\
    \        if index > longest_palindrome_length && string_characters[index - longest_palindrome_length\
    \ - 1] == string_characters[index] {\n            palindrome_length = longest_palindrome_length\
    \ + 2\n        } else {\n            palindrome_length = palindrome_lengths[longest_palindrome_index]\n\
    \        }\n        while index + palindrome_length < string_length && index >=\
    \ palindrome_length && string_characters[index + palindrome_length] == string_characters[index\
    \ - palindrome_length] {\n            palindrome_length += 1\n        }\n    \
    \    palindrome_lengths[index] = palindrome_length\n        if index + palindrome_length\
    \ - 1 > longest_palindrome_length {\n            longest_palindrome_length = palindrome_length\n\
    \            longest_palindrome_index = index\n        }\n    }\n    let prefix\
    \ = string.substringToIndex(string.startIndex.advancedBy(string_length - longest_palindrome_length))\n\
    \    let reversed_prefix = String(prefix.characters.reverse())\n    return string\
    \ + reversed_prefix", "    let reversed = String(string.characters.reverse())\n\
    \    let combined = string + \"#\" + reversed\n    let z_array = z_algorithm(string:\
    \ combined)\n    let z_max = z_array.maxElement()!\n    let z_max_index = z_array.indexOf(z_max)!\n\
    \    let prefix = string.substringToIndex(string.startIndex.advancedBy(z_max_index))\n\
    \    let suffix = String(prefix.characters.reverse())\n    return string + suffix",
  "    let reversed = String(string.characters.reverse())\n    let combined = string\
    \ + \"#\" + reversed\n    let lps = longest_prefix_suffix(combined)\n    let prefix\
    \ = String(string.characters.prefix(string.characters.count - lps))\n    return\
    \ prefix + string", "    let string_length = string.characters.count\n    let\
    \ string_characters = Array(string.characters)\n    var i = 0\n    var j = string_length\
    \ - 1\n    while i < j {\n        if string_characters[i] != string_characters[j]\
    \ {\n            break\n        }\n        i += 1\n        j -= 1\n    }\n   \
    \ if i >= j {\n        return string\n    }\n    let prefix = string.substring(to:\
    \ string.index(string.startIndex, offsetBy: i))\n    let reversed_prefix = String(prefix.characters.reversed())\n\
    \    return reversed_prefix + make_palindrome(string: string.substring(from: string.index(string.startIndex,\
    \ offsetBy: i)))", "    let string_length = string.characters.count\n    let string_characters\
    \ = Array(string.characters)\n    let string_characters_reversed = Array(string.characters.reversed())\n\
    \    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n\
    \    for i in 0..<string_length {\n        var j = 0\n        while i - j >= 0\
    \ && i + j < string_length && string_characters[i - j] == string_characters[i\
    \ + j] {\n            j += 1\n        }\n        if j > longest_palindrome_length\
    \ {\n            longest_palindrome_length = j\n            longest_palindrome_start\
    \ = i - j + 1\n        }\n    }\n    \n    // Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n    var\
    \ result = string\n    for i in 0..<string_length - longest_palindrome_length\
    \ {\n        result.append(string_characters_reversed[i])\n    }\n    \n    return\
    \ result", "    let string_length = string.characters.count\n    let string_array\
    \ = Array(string.characters)\n    var longest_palindrome_length = 0\n    var longest_palindrome_index\
    \ = 0\n    var i = 0\n    while i < string_length {\n        var j = 0\n     \
    \   while i - j >= 0 && i + j < string_length && string_array[i - j] == string_array[i\
    \ + j] {\n            j += 1\n        }\n        if j * 2 - 1 > longest_palindrome_length\
    \ {\n            longest_palindrome_length = j * 2 - 1\n            longest_palindrome_index\
    \ = i\n        }\n        j = 0\n        while i - j >= 0 && i + j + 1 < string_length\
    \ && string_array[i - j] == string_array[i + j + 1] {\n            j += 1\n  \
    \      }\n        if j * 2 > longest_palindrome_length {\n            longest_palindrome_length\
    \ = j * 2\n            longest_palindrome_index = i\n        }\n        i += 1\n\
    \    }\n    let prefix_length = string_length - longest_palindrome_length\n  \
    \  let prefix_start = string.index(string.startIndex, offsetBy: prefix_length)\n\
    \    let prefix = string.substring(to: prefix_start)\n    let reversed_prefix\
    \ = String(prefix.characters.reversed())\n    return string + reversed_prefix",
  "    let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    if string_length == 1 {\n        return string\n\
    \    }\n    let string_array = Array(string.characters)\n    let reversed_string_array\
    \ = Array(string.characters.reversed())\n    var longest_palindrome_length = 0\n\
    \    var longest_palindrome_start = 0\n    for i in 0..<string_length {\n    \
    \    var j = 0\n        while i - j >= 0 && i + j < string_length && string_array[i\
    \ - j] == reversed_string_array[i + j] {\n            j += 1\n        }\n    \
    \    if j > longest_palindrome_length {\n            longest_palindrome_length\
    \ = j\n            longest_palindrome_start = i - j + 1\n        }\n    }\n  \
    \  var result = string\n    for i in 0..<string_length - longest_palindrome_length\
    \ {\n        result.append(string_array[string_length - 1 - i])\n    }\n    return\
    \ result", "    let string_length = string.characters.count\n    let reversed_string\
    \ = String(string.characters.reverse())\n    let string_suffix = string + \"#\"\
    \ + reversed_string\n    let string_suffix_length = string_suffix.characters.count\n\
    \    var longest_palindrome_suffix = [Int](count: string_suffix_length, repeatedValue:\
    \ 0)\n    var current_longest_palindrome_suffix_length = 0\n    for i in 1..<string_suffix_length\
    \ {\n        if string_suffix[string_suffix.startIndex.advancedBy(i)] == string_suffix[string_suffix.startIndex.advancedBy(current_longest_palindrome_suffix_length)]\
    \ {\n            current_longest_palindrome_suffix_length += 1\n            longest_palindrome_suffix[i]\
    \ = current_longest_palindrome_suffix_length\n        } else {\n            if\
    \ current_longest_palindrome_suffix_length != 0 {\n                current_longest_palindrome_suffix_length\
    \ = longest_palindrome_suffix[current_longest_palindrome_suffix_length - 1]\n\
    \                i -= 1\n            }\n        }\n    }\n    let palindrome_suffix_length\
    \ = longest_palindrome_suffix[string_suffix_length - 1]\n    let palindrome_prefix_length\
    \ = string_length - palindrome_suffix_length\n    let palindrome_prefix = String(string.characters.prefix(palindrome_prefix_length))\n\
    \    let palindrome_prefix_reversed = String(palindrome_prefix.characters.reverse())\n\
    \    return string + palindrome_prefix_reversed", "    let string_length = string.characters.count\n\
    \    let string_chars = Array(string.characters)\n    var string_reversed = string_chars.reverse()\n\
    \    var i = 0\n    while i < string_length {\n        if string_chars[i] == string_reversed[i]\
    \ {\n            i += 1\n        } else {\n            break\n        }\n    }\n\
    \    var prefix = string_chars[0..<i]\n    return string + String(prefix.reverse())",
  "    let reversed = String(string.characters.reverse())\n    let concatenated =\
    \ string + \"#\" + reversed\n    let lps = longest_prefix_suffix(string: concatenated)\n\
    \    let prefix = String(string.characters.prefix(string.characters.count - lps.last!))\n\
    \    return prefix + string", "    let reversed = String(string.characters.reverse())\n\
    \    let combined = string + \"#\" + reversed\n    let lps = longest_palindromic_substring(string:\
    \ combined)\n    let prefix = String(string.characters.prefix(string.characters.count\
    \ - lps.characters.count))\n    let reversed_prefix = String(prefix.characters.reverse())\n\
    \    return string + reversed_prefix", "    let s = string.characters.map { String($0)\
    \ }\n    let n = s.count\n    let t = s + [\"#\"] + s.reverse()\n    var z = [Int](count:\
    \ 2 * n + 1, repeatedValue: 0)\n    var l = 0, r = 0\n    for i in 1..<2 * n +\
    \ 1 {\n        if i <= r {\n            z[i] = min(r - i + 1, z[i - l])\n    \
    \    }\n        while i + z[i] < 2 * n + 1 && t[i + z[i]] == t[z[i]] {\n     \
    \       z[i]++\n        }\n        if i + z[i] - 1 > r {\n            l = i\n\
    \            r = i + z[i] - 1\n        }\n    }\n    var prefix = \"\"\n    for\
    \ i in n + 1..<2 * n + 1 {\n        if z[i] == i - n {\n            prefix = s[0..<n\
    \ - (i - n)].reverse().joinWithSeparator(\"\")\n            break\n        }\n\
    \    }\n    return string + prefix", "    let reversed = String(string.characters.reverse())\n\
    \    let concatenated = string + \"#\" + reversed\n    let lps = longest_prefix_suffix(concatenated)\n\
    \    let prefix = String(string.characters.prefix(string.characters.count - lps))\n\
    \    return prefix + string", "    let string_length = string.characters.count\n\
    \    let string_characters = Array(string.characters)\n    var palindrome_suffix_length\
    \ = 0\n    var palindrome_suffix_start = 0\n    var palindrome_suffix_end = 0\n\
    \    var palindrome_prefix_start = 0\n    var palindrome_prefix_end = 0\n    var\
    \ palindrome_prefix_length = 0\n    var palindrome_length = 0\n    var palindrome_start\
    \ = 0\n    var palindrome_end = 0\n    var palindrome_center = 0\n    var palindrome_center_left\
    \ = 0\n    var palindrome_center_right = 0\n    var palindrome_center_left_length\
    \ = 0\n    var palindrome_center_right_length = 0\n    var palindrome_center_length\
    \ = 0\n    var palindrome_center_start = 0\n    var palindrome_center_end = 0\n\
    \    var palindrome_center_left_start = 0\n    var palindrome_center_left_end\
    \ = 0\n    var palindrome_center_right_start = 0\n    var palindrome_center_right_end\
    \ = 0\n    var palindrome_center_left_center = 0\n    var palindrome_center_right_center\
    \ = 0\n    var palindrome_center_left_center_length = 0\n    var palindrome_center_right_center_length\
    \ = 0\n    var palindrome_center_left_center_start = 0\n    var palindrome_center_left_center_end\
    \ = 0\n    var palindrome_center_right_center_start = 0\n    var palindrome_center_right_center_end\
    \ = 0\n    var palindrome_center_left_center_left = 0\n    var palindrome_center_left_center_right\
    \ = 0\n    var palindrome_center_right_center_left = 0\n    var palindrome_center_right_center_right\
    \ = 0\n    var palindrome_center_left_center_left_length = 0\n    var palindrome_center_left_center_right_length\
    \ = 0\n", "    let string_length = string.characters.count\n    let string_array\
    \ = Array(string.characters)\n    var longest_palindrome_length = 0\n    var longest_palindrome_index\
    \ = 0\n    var i = 0\n    while i < string_length {\n        var j = 0\n     \
    \   while i - j >= 0 && i + j < string_length && string_array[i - j] == string_array[i\
    \ + j] {\n            j += 1\n        }\n        if j > longest_palindrome_length\
    \ {\n            longest_palindrome_length = j\n            longest_palindrome_index\
    \ = i\n        }\n        i += 1\n    }\n    var prefix = \"\"\n    for i in 0..<string_length\
    \ - longest_palindrome_length {\n        prefix.append(string_array[i])\n    }\n\
    \    var reversed_prefix = String(prefix.characters.reversed())\n    return prefix\
    \ + string + reversed_prefix", "    let reversed = String(string.characters.reverse())\n\
    \    let combined = string + \"#\" + reversed\n    let lps = longest_prefix_suffix(combined)\n\
    \    let prefix = string.substringToIndex(string.startIndex.advancedBy(lps))\n\
    \    let suffix = String(prefix.characters.reverse())\n    return string + suffix",
  "    let string_length = string.characters.count\n    let reversed_string = String(string.characters.reverse())\n\
    \    let string_with_reversed_prefix = string + \"#\" + reversed_string\n    let\
    \ string_with_reversed_prefix_length = string_with_reversed_prefix.characters.count\n\
    \    var longest_prefix_suffix = [Int](count: string_with_reversed_prefix_length,\
    \ repeatedValue: 0)\n    for i in 1..<string_with_reversed_prefix_length {\n \
    \       var j = longest_prefix_suffix[i - 1]\n        while j > 0 && string_with_reversed_prefix[string_with_reversed_prefix.startIndex.advancedBy(i)]\
    \ != string_with_reversed_prefix[string_with_reversed_prefix.startIndex.advancedBy(j)]\
    \ {\n            j = longest_prefix_suffix[j - 1]\n        }\n        if string_with_reversed_prefix[string_with_reversed_prefix.startIndex.advancedBy(i)]\
    \ == string_with_reversed_prefix[string_with_reversed_prefix.startIndex.advancedBy(j)]\
    \ {\n            j += 1\n        }\n        longest_prefix_suffix[i] = j\n   \
    \ }\n    let palindrome_suffix_length = string_length - longest_prefix_suffix[string_with_reversed_prefix_length\
    \ - 1]\n    let palindrome_prefix = String(string.characters.prefix(palindrome_suffix_length).reverse())\n\
    \    return string + palindrome_prefix", "    let string_length = string.characters.count\n\
    \    let string_chars = Array(string.characters)\n    let string_chars_reversed\
    \ = Array(string.characters.reversed())\n    \n    // Find the longest postfix\
    \ that is a palindrome.\n    var longest_palindrome_length = 0\n    var longest_palindrome_end\
    \ = 0\n    for i in 0..<string_length {\n        let j = string_length - 1 - i\n\
    \        if string_chars[i] == string_chars_reversed[j] {\n            if i ==\
    \ j {\n                longest_palindrome_length = 1\n                longest_palindrome_end\
    \ = i\n            } else if i + 1 == j {\n                longest_palindrome_length\
    \ = 2\n                longest_palindrome_end = i\n            } else {\n    \
    \            longest_palindrome_length = 2 + longest_palindrome_length\n     \
    \           longest_palindrome_end = i\n            }\n        } else {\n    \
    \        break\n        }\n    }\n    \n    // Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n    var\
    \ result = string\n    for i in 0..<string_length - longest_palindrome_end - longest_palindrome_length\
    \ {\n        result.append(string_chars_reversed[i])\n    }\n    \n    return\
    \ result", "    let reversed = string.reverse()\n    let combined = string + \"\
    #\" + reversed\n    let lps = longest_prefix_suffix(combined)\n    let prefix\
    \ = string.substringToIndex(string.endIndex.advancedBy(-lps))\n    return prefix.reverse()\
    \ + string", "    let string_length = string.characters.count\n    let string_chars\
    \ = Array(string.characters)\n    var palindrome_length = 0\n    var palindrome_start\
    \ = 0\n    var palindrome_end = 0\n    var palindrome_length_max = 0\n    var\
    \ palindrome_start_max = 0\n    var palindrome_end_max = 0\n    for i in 0..<string_length\
    \ {\n        palindrome_length = 0\n        palindrome_start = i\n        palindrome_end\
    \ = i\n        while palindrome_start >= 0 && palindrome_end < string_length {\n\
    \            if string_chars[palindrome_start] == string_chars[palindrome_end]\
    \ {\n                palindrome_length = palindrome_end - palindrome_start + 1\n\
    \                if palindrome_length > palindrome_length_max {\n            \
    \        palindrome_length_max = palindrome_length\n                    palindrome_start_max\
    \ = palindrome_start\n                    palindrome_end_max = palindrome_end\n\
    \                }\n            } else {\n                break\n            }\n\
    \            palindrome_start -= 1\n            palindrome_end += 1\n        }\n\
    \        palindrome_length = 0\n        palindrome_start = i\n        palindrome_end\
    \ = i + 1\n        while palindrome_start >= 0 && palindrome_end < string_length\
    \ {\n            if string_chars[palindrome_start] == string_chars[palindrome_end]\
    \ {\n                palindrome_length = palindrome_end - palindrome_start + 1\n\
    \                if palindrome_length > palindrome_length_max {\n            \
    \        palindrome_length_max = palindrome_length\n                    palindrome_start_max\
    \ = palindrome_start\n                    palindrome_end_max = palindrome_end\n\
    \                }\n            } else {\n                break\n            }\n\
    \            palindrome_start -= 1\n            palindrome_end += 1\n        }\n\
    \    }\n    let palindrome_prefix = String(string_chars", "    let string_length\
    \ = string.characters.count\n    let string_chars = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_index = 0\n\
    \    var current_palindrome_length = 0\n    var current_palindrome_index = 0\n\
    \    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n \
    \   var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n  \
    \  var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n   \
    \ var x = 0\n    var y = 0\n    var z = 0\n    var aa = 0\n    var ab = 0\n  \
    \  var ac = 0\n    var ad = 0\n    var ae = 0\n    var af = 0\n    var ag = 0\n\
    \    var ah = 0\n    var ai = 0\n    var aj = 0\n    var ak = 0\n    var al =\
    \ 0\n    var am = 0\n    var an = 0\n    var ao = 0\n    var ap = 0\n    var aq\
    \ = 0\n    var ar = 0\n    var as = 0\n    var at = 0\n    var au = 0\n    var\
    \ av = 0\n    var aw = 0\n    var ax = 0\n    var ay = 0\n    var az = 0\n   \
    \ var ba = 0\n    var bb = 0\n    var bc = 0\n    var bd = 0\n    var be = 0\n\
    \    var bf = 0\n    var bg = 0\n    var bh = 0\n    var bi = 0\n    var bj =\
    \ 0\n    var bk = 0\n    var bl = 0\n    var bm = 0\n    var bn = 0\n    var bo\
    \ = 0\n    var bp = 0\n    var bq = 0\n    var br = 0\n    var bs = 0\n    var\
    \ bt = 0\n    var bu = 0\n    var bv = 0\n    var bw = 0\n    var bx = 0\n   \
    \ var by = 0", "    let string_length = string.characters.count\n    let string_characters\
    \ = Array(string.characters)\n    var longest_palindrome_length = 0\n    var longest_palindrome_index\
    \ = 0\n    var is_palindrome = Array(count: string_length, repeatedValue: false)\n\
    \    for i in 0..<string_length {\n        for j in 0..<2 {\n            var left\
    \ = i\n            var right = i + j\n            while left >= 0 && right < string_length\
    \ && string_characters[left] == string_characters[right] {\n                is_palindrome[left]\
    \ = true\n                if right - left + 1 > longest_palindrome_length {\n\
    \                    longest_palindrome_length = right - left + 1\n          \
    \          longest_palindrome_index = left\n                }\n              \
    \  left -= 1\n                right += 1\n            }\n        }\n    }\n  \
    \  var result = string\n    for i in 0..<string_length {\n        if !is_palindrome[i]\
    \ {\n            result = \"\\(string_characters[i])\\(result)\"\n        }\n\
    \    }\n    return result", "    let string = string.lowercased()\n    let string_length\
    \ = string.count\n    let string_chars = Array(string)\n    let string_chars_reversed\
    \ = string_chars.reversed()\n    \n    // Find the longest postfix of supplied\
    \ string that is a palindrome.\n    var longest_palindrome_length = 0\n    var\
    \ longest_palindrome_start = 0\n    for i in 0..<string_length {\n        let\
    \ j = string_length - i - 1\n        if string_chars[i] == string_chars_reversed[j]\
    \ {\n            longest_palindrome_length += 1\n            longest_palindrome_start\
    \ = i\n        } else {\n            break\n        }\n    }\n    \n    // Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    let prefix_start = longest_palindrome_start + 1\n    let prefix_end\
    \ = string_length\n    let prefix = string[prefix_start..<prefix_end]\n    let\
    \ prefix_reversed = String(prefix.reversed())\n    return string + prefix_reversed",
  "    let reversed = string.reverse()\n    let concatenated = string + reversed\n\
    \    let suffix_length = find_longest_palindromic_suffix(concatenated)\n    let\
    \ prefix = reversed.substringToIndex(advance(reversed.startIndex, reversed.characters.count\
    \ - suffix_length))\n    return string + prefix", "    let string_length = string.characters.count\n\
    \    let reversed_string = String(string.characters.reverse())\n    let string_with_reversed_prefix\
    \ = string + \"#\" + reversed_string\n    let string_with_reversed_prefix_length\
    \ = string_with_reversed_prefix.characters.count\n    var longest_prefix_suffix\
    \ = [Int](count: string_with_reversed_prefix_length, repeatedValue: 0)\n    var\
    \ i = 1\n    while i < string_with_reversed_prefix_length {\n        var j = longest_prefix_suffix[i\
    \ - 1]\n        while j > 0 && string_with_reversed_prefix[string_with_reversed_prefix.startIndex.advancedBy(i)]\
    \ != string_with_reversed_prefix[string_with_reversed_prefix.startIndex.advancedBy(j)]\
    \ {\n            j = longest_prefix_suffix[j - 1]\n        }\n        if string_with_reversed_prefix[string_with_reversed_prefix.startIndex.advancedBy(i)]\
    \ == string_with_reversed_prefix[string_with_reversed_prefix.startIndex.advancedBy(j)]\
    \ {\n            j += 1\n        }\n        longest_prefix_suffix[i] = j\n   \
    \     i += 1\n    }\n    let longest_palindromic_suffix_length = longest_prefix_suffix[string_with_reversed_prefix_length\
    \ - 1]\n    let prefix_to_append = reversed_string[reversed_string.startIndex..<reversed_string.startIndex.advancedBy(string_length\
    \ - longest_palindromic_suffix_length)]\n    return string + prefix_to_append",
  "    let string_length = string.characters.count\n    let string_chars = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_index = 0\n\
    \    var palindrome_length = 0\n    var palindrome_index = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var aa = 0\n    var ab = 0\n    var ac = 0\n \
    \   var ad = 0\n    var ae = 0\n    var af = 0\n    var ag = 0\n    var ah = 0\n\
    \    var ai = 0\n    var aj = 0\n    var ak = 0\n    var al = 0\n    var am =\
    \ 0\n    var an = 0\n    var ao = 0\n    var ap = 0\n    var aq = 0\n    var ar\
    \ = 0\n    var as = 0\n    var at = 0\n    var au = 0\n    var av = 0\n    var\
    \ aw = 0\n    var ax = 0\n    var ay = 0\n    var az = 0\n    var ba = 0\n   \
    \ var bb = 0\n    var bc = 0\n    var bd = 0\n    var be = 0\n    var bf = 0\n\
    \    var bg = 0\n    var bh = 0\n    var bi = 0\n    var bj = 0\n    var bk =\
    \ 0\n    var bl = 0\n    var bm = 0\n    var bn = 0\n    var bo = 0\n    var bp\
    \ = 0\n    var bq = 0\n    var br = 0\n    var bs = 0\n    var bt = 0\n    var\
    \ bu = 0\n    var bv = 0\n    var bw = 0\n    var bx = 0\n    var by = 0\n   \
    \ var b", "    let reversed = String(string.characters.reverse())\n    let string_length\
    \ = string.characters.count\n    let reversed_length = reversed.characters.count\n\
    \    var lps = [Int](count: reversed_length, repeatedValue: 0)\n    var i = 1\n\
    \    var j = 0\n    while i < reversed_length {\n        if reversed[reversed.startIndex.advancedBy(i)]\
    \ == reversed[reversed.startIndex.advancedBy(j)] {\n            lps[i] = j + 1\n\
    \            i += 1\n            j += 1\n        } else {\n            if j !=\
    \ 0 {\n                j = lps[j - 1]\n            } else {\n                lps[i]\
    \ = 0\n                i += 1\n            }\n        }\n    }\n    let prefix_length\
    \ = string_length - lps[reversed_length - 1]\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(prefix_length))\n\
    \    let suffix = String(prefix.characters.reverse())\n    return string + suffix",
  "    let reversed = String(string.characters.reverse())\n    let combined = string\
    \ + \"#\" + reversed\n    let lps = longest_prefix_suffix(combined)\n    let prefix\
    \ = String(string.characters.prefix(string.characters.count - lps))\n    return\
    \ prefix + string", "    let string_length = string.count\n    let string_chars\
    \ = Array(string)\n    var longest_palindrome_length = 0\n    var longest_palindrome_start\
    \ = 0\n    for i in 0..<string_length {\n        let palindrome_length = min(i,\
    \ string_length - i - 1)\n        var palindrome_start = i - palindrome_length\n\
    \        var palindrome_end = i + palindrome_length\n        while palindrome_start\
    \ >= 0 && palindrome_end < string_length && string_chars[palindrome_start] ==\
    \ string_chars[palindrome_end] {\n            palindrome_start -= 1\n        \
    \    palindrome_end += 1\n        }\n        palindrome_start += 1\n        palindrome_end\
    \ -= 1\n        if palindrome_end - palindrome_start > longest_palindrome_length\
    \ {\n            longest_palindrome_length = palindrome_end - palindrome_start\n\
    \            longest_palindrome_start = palindrome_start\n        }\n    }\n \
    \   let prefix = String(string_chars[0..<longest_palindrome_start])\n    let prefix_reversed\
    \ = String(prefix.reversed())\n    return prefix_reversed + string", "    let\
    \ string_length = string.characters.count\n    let string_characters = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_index = 0\n\
    \    var palindrome_length = 0\n    var palindrome_index = 0\n    var i = 0\n\
    \    var j = 0\n    while i < string_length {\n        j = 0\n        while i\
    \ - j >= 0 && i + j < string_length && string_characters[i - j] == string_characters[i\
    \ + j] {\n            j += 1\n        }\n        palindrome_length = 2 * j - 1\n\
    \        palindrome_index = i - j + 1\n        if palindrome_length > longest_palindrome_length\
    \ {\n            longest_palindrome_length = palindrome_length\n            longest_palindrome_index\
    \ = palindrome_index\n        }\n        i += 1\n        j = 0\n        while\
    \ i - j - 1 >= 0 && i + j < string_length && string_characters[i - j - 1] == string_characters[i\
    \ + j] {\n            j += 1\n        }\n        palindrome_length = 2 * j\n \
    \       palindrome_index = i - j\n        if palindrome_length > longest_palindrome_length\
    \ {\n            longest_palindrome_length = palindrome_length\n            longest_palindrome_index\
    \ = palindrome_index\n        }\n    }\n    let prefix = String(string_characters[0..<longest_palindrome_index])\n\
    \    let reversed_prefix = String(prefix.characters.reverse())\n    return string\
    \ + reversed_prefix", "    let string_length = string.characters.count\n    let\
    \ string_chars = Array(string.characters)\n    var suffix_length = 0\n    for\
    \ i in 0..<string_length {\n        if is_palindrome(string_chars, start: i, end:\
    \ string_length - 1) {\n            suffix_length = string_length - i\n      \
    \      break\n        }\n    }\n    var prefix = string.substringToIndex(string.startIndex.advancedBy(string_length\
    \ - suffix_length))\n    prefix = String(prefix.characters.reverse())\n    return\
    \ string + prefix", "    let reversed = string.reverse()\n    let concatenated\
    \ = string + \"#\" + reversed\n    let z = z_function(concatenated)\n    let z_max\
    \ = z.maxElement()!\n    let z_max_index = z.indexOf(z_max)!\n    let prefix =\
    \ string[string.startIndex..<string.startIndex.advancedBy(z_max_index)]\n    let\
    \ suffix = prefix.reverse()\n    return string + suffix", "    let string_length\
    \ = string.characters.count\n    let string_array = Array(string.characters)\n\
    \    let reversed_string_array = Array(string.characters.reversed())\n    \n \
    \   var longest_palindrome_length = 0\n    var longest_palindrome_index = 0\n\
    \    \n    // Find the longest palindrome suffix.\n    for i in 0..<string_length\
    \ {\n        var j = 0\n        while j < string_length - i && string_array[i\
    \ + j] == reversed_string_array[j] {\n            j += 1\n        }\n        if\
    \ j > longest_palindrome_length {\n            longest_palindrome_length = j\n\
    \            longest_palindrome_index = i\n        }\n    }\n    \n    // Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    var result = string\n    for i in 0..<string_length - longest_palindrome_index\
    \ {\n        result.append(string_array[string_length - i - 1])\n    }\n    \n\
    \    return result", "    let string_length = string.characters.count\n    let\
    \ string_array = Array(string.characters)\n    let reversed_string_array = Array(string.characters.reversed())\n\
    \    \n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_index = 0\n\
    \    for i in 0..<string_length {\n        var j = 0\n        while j < string_length\
    \ - i && j < string_length - longest_palindrome_length {\n            if string_array[i\
    \ + j] != reversed_string_array[j] {\n                break\n            }\n \
    \           j += 1\n        }\n        if j > longest_palindrome_length {\n  \
    \          longest_palindrome_length = j\n            longest_palindrome_index\
    \ = i\n        }\n    }\n    \n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    var result\
    \ = string\n    for i in 0..<string_length - longest_palindrome_length {\n   \
    \     result.append(string_array[string_length - 1 - i])\n    }\n    \n    return\
    \ result", "    let s = string.characters.map { String($0) }\n    let n = s.count\n\
    \    let reversed = s.reversed()\n    var lps = Array(repeating: 0, count: n)\n\
    \    var i = 1\n    var len = 0\n    while i < n {\n        if s[i] == s[len]\
    \ {\n            len += 1\n            lps[i] = len\n            i += 1\n    \
    \    } else {\n            if len != 0 {\n                len = lps[len - 1]\n\
    \            } else {\n                lps[i] = 0\n                i += 1\n  \
    \          }\n        }\n    }\n    let prefix = reversed[0..<(n - lps[n - 1])]\n\
    \    return string + prefix.joined()", "    let string_length = string.characters.count\n\
    \    let reversed_string = String(string.characters.reverse())\n    let string_with_reversed_prefix\
    \ = string + \"#\" + reversed_string\n    var longest_prefix_suffix = [Int](count:\
    \ string_with_reversed_prefix.characters.count, repeatedValue: 0)\n    var longest_prefix_suffix_length\
    \ = 0\n    for i in 1..<string_with_reversed_prefix.characters.count {\n     \
    \   var j = longest_prefix_suffix[i - 1]\n        while j > 0 && string_with_reversed_prefix[i]\
    \ != string_with_reversed_prefix[j] {\n            j = longest_prefix_suffix[j\
    \ - 1]\n        }\n        if string_with_reversed_prefix[i] == string_with_reversed_prefix[j]\
    \ {\n            j += 1\n        }\n        longest_prefix_suffix[i] = j\n   \
    \     if j > longest_prefix_suffix_length {\n            longest_prefix_suffix_length\
    \ = j\n        }\n    }\n    let prefix_length = string_length - longest_prefix_suffix_length\n\
    \    let prefix = reversed_string.substringToIndex(reversed_string.startIndex.advancedBy(prefix_length))\n\
    \    return string + prefix", "    let string_length = string.characters.count\n\
    \    let string_array = Array(string.characters)\n    var suffix_length = 0\n\
    \    var suffix_array = [Character]()\n    var prefix_array = [Character]()\n\
    \    var palindrome_array = [Character]()\n    \n    // Find the longest palindromic\
    \ suffix\n    for i in 0..<string_length {\n        suffix_array.append(string_array[string_length\
    \ - 1 - i])\n        if is_palindrome(string: String(suffix_array)) {\n      \
    \      suffix_length = i + 1\n            break\n        }\n    }\n    \n    //\
    \ Append the reverse of the prefix to the end of the string\n    for i in 0..<string_length\
    \ - suffix_length {\n        prefix_array.append(string_array[i])\n    }\n   \
    \ palindrome_array = string_array + prefix_array.reversed()\n    \n    return\
    \ String(palindrome_array)", "    let string_length = string.characters.count\n\
    \    let reversed_string = String(string.characters.reverse())\n    let string_with_reversed_prefix\
    \ = string + \"#\" + reversed_string\n    let string_with_reversed_prefix_length\
    \ = string_with_reversed_prefix.characters.count\n    var longest_prefix_suffix\
    \ = [Int](count: string_with_reversed_prefix_length, repeatedValue: 0)\n    var\
    \ longest_prefix_suffix_length = 0\n    for i in 1..<string_with_reversed_prefix_length\
    \ {\n        var j = longest_prefix_suffix[i - 1]\n        while j > 0 && string_with_reversed_prefix[i]\
    \ != string_with_reversed_prefix[j] {\n            j = longest_prefix_suffix[j\
    \ - 1]\n        }\n        if string_with_reversed_prefix[i] == string_with_reversed_prefix[j]\
    \ {\n            j += 1\n        }\n        longest_prefix_suffix[i] = j\n   \
    \     if j == string_length {\n            longest_prefix_suffix_length = j\n\
    \        }\n    }\n    let palindrome_suffix = string[string_length - longest_prefix_suffix_length..<string_length]\n\
    \    let palindrome_prefix = String(palindrome_suffix.characters.reverse())\n\
    \    return palindrome_prefix + string", "    let reversed = String(string.characters.reverse())\n\
    \    let combined = string + \"#\" + reversed\n    let lps = longest_prefix_suffix(combined)\n\
    \    let prefix = String(string.characters.prefix(string.characters.count - lps.last!))\n\
    \    return prefix + string", "    let s = string.characters.map { String($0)\
    \ }\n    let n = s.count\n    let s_rev = s.reverse()\n    \n    var z = [Int](count:\
    \ 2 * n + 1, repeatedValue: 0)\n    var l = 0\n    var r = 0\n    \n    for i\
    \ in 1..<2 * n {\n        if i > r {\n            l = i\n            r = i\n \
    \       } else {\n            let i_mirror = l + (r - i)\n            let diff\
    \ = r - i\n            if z[i_mirror] < diff {\n                z[i] = z[i_mirror]\n\
    \                continue\n            } else if z[i_mirror] == diff && r + 1\
    \ == n {\n                z[i] = z[i_mirror]\n                continue\n     \
    \       } else {\n                l = i\n            }\n            r = max(r,\
    \ i)\n        }\n        while l - 1 >= 0 && r + 1 < n && s[l - 1] == s_rev[r\
    \ + 1] {\n            l -= 1\n            r += 1\n        }\n        z[i] = r\
    \ - l + 1\n    }\n    \n    var result = \"\"\n    for i in 0..<n {\n        result\
    \ += s[i]\n    }\n    for i in n..<2 * n {\n        if z[i] == i + 1 {\n     \
    \       for j in 0..<n - (i + 1) / 2 {\n                result += s_rev[j]\n \
    \           }\n            break\n        }\n    }\n    return result", "    let\
    \ reversed = String(string.characters.reverse())\n    let longest_common_suffix\
    \ = longest_common_substring(string, reversed)\n    let prefix = String(string.characters.dropLast(longest_common_suffix.characters.count))\n\
    \    return prefix + reversed", "    let string_length = string.characters.count\n\
    \    let string_array = Array(string.characters)\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_end = 0\n    var longest_palindrome_start =\
    \ 0\n    var palindrome_lengths = [Int](count: string_length, repeatedValue: 0)\n\
    \    for i in 0..<string_length {\n        let mirror = 2 * longest_palindrome_end\
    \ - i\n        if i < longest_palindrome_end {\n            palindrome_lengths[i]\
    \ = min(longest_palindrome_end - i, palindrome_lengths[mirror])\n        }\n \
    \       let left = i - (1 + palindrome_lengths[i])\n        let right = i + (1\
    \ + palindrome_lengths[i])\n        while left >= 0 && right < string_length &&\
    \ string_array[left] == string_array[right] {\n            palindrome_lengths[i]\
    \ += 1\n            left -= 1\n            right += 1\n        }\n        if i\
    \ + palindrome_lengths[i] > longest_palindrome_end {\n            longest_palindrome_end\
    \ = i + palindrome_lengths[i]\n            longest_palindrome_start = i\n    \
    \    }\n        if palindrome_lengths[i] > longest_palindrome_length {\n     \
    \       longest_palindrome_length = palindrome_lengths[i]\n        }\n    }\n\
    \    let prefix = string.substringToIndex(string.startIndex.advancedBy(longest_palindrome_start\
    \ - longest_palindrome_length))\n    let reversed_prefix = String(prefix.characters.reverse())\n\
    \    return reversed_prefix + string", "    let s = string.characters.map { String($0)\
    \ }\n    let n = s.count\n    var i = 0\n    var j = n - 1\n    while i < j {\n\
    \        if s[i] != s[j] {\n            break\n        }\n        i += 1\n   \
    \     j -= 1\n    }\n    if i >= j {\n        return string\n    }\n    let suffix\
    \ = Array(s[i...j])\n    let suffix_palindrome = longest_palindrome(suffix)\n\
    \    let prefix = Array(s[0..<i])\n    let prefix_reversed = prefix.reverse()\n\
    \    return prefix.joinWithSeparator(\"\") + suffix_palindrome + prefix_reversed.joinWithSeparator(\"\
    \")", "    let reversed = String(string.characters.reverse())\n    let combined\
    \ = string + \"#\" + reversed\n    let lps = longest_prefix_suffix(combined)\n\
    \    let prefix = String(string.characters.prefix(string.characters.count - lps.last!))\n\
    \    return prefix + string", "    let reversed = String(string.characters.reverse())\n\
    \    let combined = string + \"#\" + reversed\n    let lps = longest_prefix_suffix(combined)\n\
    \    let prefix = String(string.characters.prefix(string.characters.count - lps))\n\
    \    return prefix + string"]
stop_tokens:
- "\n}"
