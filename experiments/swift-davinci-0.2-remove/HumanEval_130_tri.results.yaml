language: swift
name: HumanEval_130_tri
results:
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var arr = [1, 1, 2]\n    if n <= 2 {\n      \
    \  return Array(arr[0...n])\n    }\n    for i in 3...n {\n        arr.append(arr[i\
    \ - 1] + arr[i - 2] + arr[i - 3])\n    }\n    return arr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpi_30lpp1/tmpi_30lpp1.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33dcba9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33dc8a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33dc8a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33dc89f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi_30lpp1                        0x00005588a49d67ba <unavailable> + 6074

    5    libc.so.6                          0x00002b33dcd95460 __libc_start_main +
    245

    6    tmpi_30lpp1                        0x00005588a49d63f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    if n == 0 {\n        return []\n    }\n    if\
    \ n == 1 {\n        return [3]\n    }\n    if n == 2 {\n        return [3, 2]\n\
    \    }\n    if n == 3 {\n        return [3, 2, 8]\n    }\n    var result = [3,\
    \ 2, 8]\n    for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmp_4x6fwm4/tmp_4x6fwm4.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abaec3aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abaec0a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abaec0a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abaec0a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_4x6fwm4                        0x00005643b3ee95ca <unavailable> + 5578

    5    libc.so.6                          0x00002abaec596460 __libc_start_main +
    245

    6    tmp_4x6fwm4                        0x00005643b3ee9209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   return result\n    }\n    result.append(3)\n    if n == 1 {\n        return\
    \ result\n    }\n    result.append(2)\n    if n == 2 {\n        return result\n\
    \    }\n    result.append(8)\n    for i in 3..<n {\n        let next = result[i\
    \ - 1] + result[i - 2] + result[i - 3]\n        result.append(next)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpznbk634l/tmpznbk634l.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b983d807c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b983d4feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b983d4fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b983d4fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpznbk634l                        0x000055a2e4e8161a <unavailable> + 5658

    5    libc.so.6                          0x00002b983d9f3460 __libc_start_main +
    245

    6    tmpznbk634l                        0x000055a2e4e81259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    if n == 0 {\n        return []\n    }\n    if\
    \ n == 1 {\n        return [3]\n    }\n    if n == 2 {\n        return [3, 2]\n\
    \    }\n    if n == 3 {\n        return [3, 2, 8]\n    }\n    var result = [3,\
    \ 2, 8]\n    for i in 3...n {\n        result.append(result[i - 1] + result[i\
    \ - 2] + result[i - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpk1pcems5/tmpk1pcems5.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf20b48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf2083fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf2083f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf2083e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk1pcems5                        0x0000564313b165ca <unavailable> + 5578

    5    libc.so.6                          0x00002aaf20d34460 __libc_start_main +
    245

    6    tmpk1pcems5                        0x0000564313b16209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        switch i {\n        case 0:\n            result.append(0)\n        case\
    \ 1:\n            result.append(0)\n        case 2:\n            result.append(1)\n\
    \        default:\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpdm7r_s9o/tmpdm7r_s9o.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af88f367c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af88f05eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af88f05e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af88f05d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdm7r_s9o                        0x000055994f5ff61a <unavailable> + 5658

    5    libc.so.6                          0x00002af88f553460 __libc_start_main +
    245

    6    tmpdm7r_s9o                        0x000055994f5ff259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result: [Int] = []\n    for i in 0...n {\n\
    \        switch i {\n        case 0:\n            result.append(0)\n        case\
    \ 1:\n            result.append(1)\n        case 2:\n            result.append(1)\n\
    \        default:\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpkf41q9s8/tmpkf41q9s8.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad98aa80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad98a777b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad98a777988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad98a7767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkf41q9s8                        0x00005602df60e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad98ac6c460 __libc_start_main +
    245

    6    tmpkf41q9s8                        0x00005602df60e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    guard n > 0 else { return [] }\n    var result\
    \ = [3, 2, 1]\n    for i in 3...n {\n        result.append(result[i - 1] + result[i\
    \ - 2] + result[i - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpvw428sbg/tmpvw428sbg.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90a3c84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90a397bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90a397b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90a397a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvw428sbg                        0x0000560af26365ca <unavailable> + 5578

    5    libc.so.6                          0x00002b90a3e70460 __libc_start_main +
    245

    6    tmpvw428sbg                        0x0000560af2636209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(2)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpojwktpb_/tmpojwktpb_.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a3e6dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a3e3d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a3e3d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a3e3d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpojwktpb_                        0x000055c6319be61a <unavailable> + 5658

    5    libc.so.6                          0x00002b1a3e8c6460 __libc_start_main +
    245

    6    tmpojwktpb_                        0x000055c6319be259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var tri = [3, 1, 2]\n    if n == 0 {\n      \
    \  return [3]\n    } else if n == 1 {\n        return [3, 1]\n    } else if n\
    \ == 2 {\n        return [3, 1, 2]\n    } else {\n        for i in 3...n {\n \
    \           if i % 2 == 0 {\n                tri.append(1 + i / 2)\n         \
    \   } else {\n                tri.append(tri[i - 1] + tri[i - 2] + tri[i - 3])\n\
    \            }\n        }\n    }\n    return tri\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpsqzyhwkz/tmpsqzyhwkz.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5767074c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5766d6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5766d6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5766d6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsqzyhwkz                        0x0000562d5f7405ca <unavailable> + 5578

    5    libc.so.6                          0x00002b5767260460 __libc_start_main +
    245

    6    tmpsqzyhwkz                        0x0000562d5f740209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    if n == 0 {\n        return []\n    }\n    if\
    \ n == 1 {\n        return [3]\n    }\n    if n == 2 {\n        return [3, 2]\n\
    \    }\n    var result = [3, 2, 8]\n    for i in 3...n {\n        if i % 2 ==\
    \ 0 {\n            result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5bedfac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5beaf1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac5beaf1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac5beaf113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac5beaf0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac5be8f0e83 <unavailable> + 188035

    6    tmpl5yssd0j                        0x000055ed391444c7 <unavailable> + 9415

    7    tmpl5yssd0j                        0x000055ed391434eb <unavailable> + 5355

    8    libc.so.6                          0x00002ac5befe6460 __libc_start_main +
    245

    9    tmpl5yssd0j                        0x000055ed39143209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [1, 3]\n    if n == 1 {\n      \
    \  return [1]\n    }\n    if n == 2 {\n        return result\n    }\n    for i\
    \ in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae08319bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae082e92561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae082e92286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae082e9213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae082e91bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae082c91e83 <unavailable> + 188035

    6    tmpm_xafwck                        0x0000559066244434 <unavailable> + 9268

    7    tmpm_xafwck                        0x00005590662434eb <unavailable> + 5355

    8    libc.so.6                          0x00002ae083387460 __libc_start_main +
    245

    9    tmpm_xafwck                        0x0000559066243209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [3, 2, 1]\n    if n == 0 {\n   \
    \     return []\n    }\n    if n == 1 {\n        return [3]\n    }\n    if n ==\
    \ 2 {\n        return [3, 2]\n    }\n    if n == 3 {\n        return [3, 2, 1]\n\
    \    }\n    for i in 4...n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i - 4])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpolmo4zrx/tmpolmo4zrx.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0b3eacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0b3ba3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0b3ba3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0b3ba27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpolmo4zrx                        0x0000555ff35285ca <unavailable> + 5578

    5    libc.so.6                          0x00002ba0b4098460 __libc_start_main +
    245

    6    tmpolmo4zrx                        0x0000555ff3528209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [1, 3]\n    if n == 1 {\n      \
    \  return [1]\n    }\n    if n == 2 {\n        return result\n    }\n    for i\
    \ in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae08319bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae082e92561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae082e92286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae082e9213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae082e91bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae082c91e83 <unavailable> + 188035

    6    tmpm_xafwck                        0x0000559066244434 <unavailable> + 9268

    7    tmpm_xafwck                        0x00005590662434eb <unavailable> + 5355

    8    libc.so.6                          0x00002ae083387460 __libc_start_main +
    245

    9    tmpm_xafwck                        0x0000559066243209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [1, 3]\n    if n == 1 {\n      \
    \  return [1]\n    }\n    if n == 2 {\n        return result\n    }\n    for i\
    \ in 2...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e75e18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e75b0f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0e75b0f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0e75b0f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0e75b0ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0e7590ee83 <unavailable> + 188035

    6    tmp1i3v7587                        0x000055c557c574c3 <unavailable> + 9411

    7    tmp1i3v7587                        0x000055c557c564eb <unavailable> + 5355

    8    libc.so.6                          0x00002b0e76004460 __libc_start_main +
    245

    9    tmp1i3v7587                        0x000055c557c56209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(1)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(2)\n\
    \        } else if i % 2 == 0 {\n            result.append(1 + i / 2)\n      \
    \  } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abc53b96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc5388d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abc5388d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abc5388d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abc5388cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abc5368ce83 <unavailable> + 188035

    6    tmplbsxjnxo                        0x0000556ab05214bd <unavailable> + 9405

    7    tmplbsxjnxo                        0x0000556ab052053b <unavailable> + 5435

    8    libc.so.6                          0x00002abc53d82460 __libc_start_main +
    245

    9    tmplbsxjnxo                        0x0000556ab0520259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    guard n > 0 else {\
    \ return result }\n    result.append(3)\n    if n == 1 { return result }\n   \
    \ result.append(2)\n    if n == 2 { return result }\n    result.append(8)\n  \
    \  if n == 3 { return result }\n    for i in 3..<n {\n        result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpinepqphq/tmpinepqphq.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba603c36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba60392db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba60392d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba60392c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpinepqphq                        0x00005633e404461a <unavailable> + 5658

    5    libc.so.6                          0x00002ba603e22460 __libc_start_main +
    245

    6    tmpinepqphq                        0x00005633e4044259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result: [Int] = []\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpr1h3nr27/tmpr1h3nr27.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a88c85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a8897cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a8897c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a8897b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr1h3nr27                        0x0000558f04eb95ca <unavailable> + 5578

    5    libc.so.6                          0x00002b6a88e71460 __libc_start_main +
    245

    6    tmpr1h3nr27                        0x0000558f04eb9209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    result.append(3)\n\
    \    if n == 1 {\n        return result\n    }\n    result.append(1)\n    if n\
    \ == 2 {\n        return result\n    }\n    result.append(2)\n    if n == 3 {\n\
    \        return result\n    }\n    for i in 3...n {\n        if i % 2 == 0 {\n\
    \            result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmphukwt62h/tmphukwt62h.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6adbacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6ad8a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6ad8a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6ad8a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphukwt62h                        0x000055812182461a <unavailable> + 5658

    5    libc.so.6                          0x00002ad6add98460 __libc_start_main +
    245

    6    tmphukwt62h                        0x0000558121824259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   return result\n    }\n    result.append(3)\n    if n == 1 {\n        return\
    \ result\n    }\n    result.append(1)\n    if n == 2 {\n        return result\n\
    \    }\n    result.append(2)\n    if n == 3 {\n        return result\n    }\n\
    \    for i in 3..<n {\n        if i % 2 == 0 {\n            result.append(1 +\
    \ i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmph1en42so/tmph1en42so.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375e815c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375e50cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375e50c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375e50b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph1en42so                        0x0000564b92c9361a <unavailable> + 5658

    5    libc.so.6                          0x00002b375ea01460 __libc_start_main +
    245

    6    tmph1en42so                        0x0000564b92c93259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [1, 1, 1]\n    if n < 3 {\n    \
    \    return Array(result[0...n])\n    }\n    for i in 3...n {\n        result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjocv8g_6/tmpjocv8g_6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ab857c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ab54eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8ab54e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8ab54d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjocv8g_6                        0x000056373b48b7ba <unavailable> + 6074

    5    libc.so.6                          0x00002ba8aba43460 __libc_start_main +
    245

    6    tmpjocv8g_6                        0x000056373b48b3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(1)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(2)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmphk9i5q5v/tmphk9i5q5v.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1974203c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1973efab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1973efa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1973ef97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphk9i5q5v                        0x000055f832fbd61a <unavailable> + 5658

    5    libc.so.6                          0x00002b19743ef460 __libc_start_main +
    245

    6    tmphk9i5q5v                        0x000055f832fbd259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [1, 3]\n    if n == 1 { return [1]\
    \ }\n    if n == 2 { return result }\n    for i in 2...n {\n        if i % 2 ==\
    \ 0 {\n            result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aee9df79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee9dc70561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aee9dc70286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aee9dc7013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aee9dc6fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aee9da6fe83 <unavailable> + 188035

    6    tmpxnmcjr8k                        0x000055f7bb1774c3 <unavailable> + 9411

    7    tmpxnmcjr8k                        0x000055f7bb1764eb <unavailable> + 5355

    8    libc.so.6                          0x00002aee9e165460 __libc_start_main +
    245

    9    tmpxnmcjr8k                        0x000055f7bb176209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var arr = [Int]()\n    for i in 0...n {\n   \
    \     if i == 0 {\n            arr.append(0)\n        } else if i == 1 {\n   \
    \         arr.append(1)\n        } else if i == 2 {\n            arr.append(1)\n\
    \        } else {\n            arr.append(arr[i - 1] + arr[i - 2] + arr[i - 3])\n\
    \        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp6_t9rsmg/tmp6_t9rsmg.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4ac9dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4ac6d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4ac6d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4ac6d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6_t9rsmg                        0x0000559c3462861a <unavailable> + 5658

    5    libc.so.6                          0x00002ae4acbca460 __libc_start_main +
    245

    6    tmp6_t9rsmg                        0x0000559c34628259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(3)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(2)\n\
    \        } else if i % 2 == 0 {\n            result.append(1 + i / 2)\n      \
    \  } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aecee7c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aecee4bd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aecee4bd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aecee4bd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aecee4bcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aecee2bce83 <unavailable> + 188035

    6    tmpj24iwxks                        0x00005640966044bd <unavailable> + 9405

    7    tmpj24iwxks                        0x000056409660353b <unavailable> + 5435

    8    libc.so.6                          0x00002aecee9b2460 __libc_start_main +
    245

    9    tmpj24iwxks                        0x0000564096603259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(1)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(2)\n\
    \        } else if i % 2 == 0 {\n            result.append(1 + i / 2)\n      \
    \  } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abc53b96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc5388d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abc5388d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abc5388d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abc5388cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abc5368ce83 <unavailable> + 188035

    6    tmplbsxjnxo                        0x0000556ab05214bd <unavailable> + 9405

    7    tmplbsxjnxo                        0x0000556ab052053b <unavailable> + 5435

    8    libc.so.6                          0x00002abc53d82460 __libc_start_main +
    245

    9    tmplbsxjnxo                        0x0000556ab0520259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   return result\n    }\n    result.append(3)\n    if n == 1 {\n        return\
    \ result\n    }\n    result.append(2)\n    if n == 2 {\n        return result\n\
    \    }\n    result.append(8)\n    for i in 3...n {\n        if i % 2 == 0 {\n\
    \            result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpl34nqq88/tmpl34nqq88.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4dd9ca5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dd999cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dd999c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dd999b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl34nqq88                        0x00005647b636461a <unavailable> + 5658

    5    libc.so.6                          0x00002b4dd9e91460 __libc_start_main +
    245

    6    tmpl34nqq88                        0x00005647b6364259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var arr = [3, 1, 2]\n    if n <= 2 {\n      \
    \  return arr[0...n]\n    }\n    for i in 3...n {\n        arr.append(arr[i -\
    \ 1] + arr[i - 2] + arr[i - 3])\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpie67dvwd.swift:19:19: error: no 'subscript' candidates produce\
    \ the expected contextual result type '[Int]'\n        return arr[0...n]\n   \
    \               ^\nSwift.Collection:2:23: note: 'subscript(_:)' produces 'ArraySlice<Int>',\
    \ not the expected contextual result type '[Int]'\n    @inlinable public subscript<R>(r:\
    \ R) -> Self.SubSequence where R : RangeExpression, Self.Index == R.Bound { get\
    \ }\n                      ^\nSwift.MutableCollection:2:23: note: 'subscript(_:)'\
    \ produces '@lvalue ArraySlice<Int>', not the expected contextual result type\
    \ '[Int]'\n    @inlinable public subscript<R>(r: R) -> Self.SubSequence where\
    \ R : RangeExpression, Self.Index == R.Bound { get set }\n                   \
    \   ^\n"
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    if n == 0 {\n        return []\n    }\n    var\
    \ result = [3, 2, 1]\n    if n == 1 {\n        return [3]\n    }\n    if n ==\
    \ 2 {\n        return [3, 2]\n    }\n    for _ in 3...n {\n        let last =\
    \ result.last!\n        let secondLast = result[result.count - 2]\n        let\
    \ thirdLast = result[result.count - 3]\n        result.append(last + secondLast\
    \ + thirdLast)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpeagbfgdn/tmpeagbfgdn.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b943ec1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b943e915b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b943e915988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b943e9147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeagbfgdn                        0x000055a7e1fac6ba <unavailable> + 5818

    5    libc.so.6                          0x00002b943ee0a460 __libc_start_main +
    245

    6    tmpeagbfgdn                        0x000055a7e1fac2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(1)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(2)\n\
    \        } else if i % 2 == 0 {\n            result.append(1 + i / 2)\n      \
    \  } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abc53b96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc5388d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abc5388d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abc5388d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abc5388cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abc5368ce83 <unavailable> + 188035

    6    tmplbsxjnxo                        0x0000556ab05214bd <unavailable> + 9405

    7    tmplbsxjnxo                        0x0000556ab052053b <unavailable> + 5435

    8    libc.so.6                          0x00002abc53d82460 __libc_start_main +
    245

    9    tmplbsxjnxo                        0x0000556ab0520259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [3, 2, 1]\n    if n == 0 {\n   \
    \     return []\n    }\n    if n == 1 {\n        return [3]\n    }\n    if n ==\
    \ 2 {\n        return [3, 2]\n    }\n    if n == 3 {\n        return [3, 2, 1]\n\
    \    }\n    for i in 4...n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i - 4])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpolmo4zrx/tmpolmo4zrx.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0b3eacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0b3ba3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0b3ba3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0b3ba27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpolmo4zrx                        0x0000555ff35285ca <unavailable> + 5578

    5    libc.so.6                          0x00002ba0b4098460 __libc_start_main +
    245

    6    tmpolmo4zrx                        0x0000555ff3528209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [1, 3]\n    if n == 0 {\n      \
    \  return []\n    } else if n == 1 {\n        return [1]\n    } else if n == 2\
    \ {\n        return result\n    }\n    for i in 2...n {\n        if i % 2 == 0\
    \ {\n            result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aed6fe7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed6fb74561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aed6fb74286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aed6fb7413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aed6fb73bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aed6f973e83 <unavailable> + 188035

    6    tmp874csimz                        0x0000556ed7c8a50f <unavailable> + 9487

    7    tmp874csimz                        0x0000556ed7c894eb <unavailable> + 5355

    8    libc.so.6                          0x00002aed70069460 __libc_start_main +
    245

    9    tmp874csimz                        0x0000556ed7c89209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [1, 3]\n    if n == 0 {\n      \
    \  return []\n    } else if n == 1 {\n        return [1]\n    } else if n == 2\
    \ {\n        return result\n    }\n    for i in 2...n {\n        if i % 2 == 0\
    \ {\n            result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aed6fe7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed6fb74561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aed6fb74286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aed6fb7413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aed6fb73bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aed6f973e83 <unavailable> + 188035

    6    tmp874csimz                        0x0000556ed7c8a50f <unavailable> + 9487

    7    tmp874csimz                        0x0000556ed7c894eb <unavailable> + 5355

    8    libc.so.6                          0x00002aed70069460 __libc_start_main +
    245

    9    tmp874csimz                        0x0000556ed7c89209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmph_9emnd8/tmph_9emnd8.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48881fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4887ef2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4887ef2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4887ef17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph_9emnd8                        0x0000555c6756738a <unavailable> + 5002

    5    libc.so.6                          0x00002b48883e7460 __libc_start_main +
    245

    6    tmph_9emnd8                        0x0000555c67566fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   return result\n    }\n    result.append(3)\n    if n == 1 {\n        return\
    \ result\n    }\n    result.append(2)\n    if n == 2 {\n        return result\n\
    \    }\n    result.append(8)\n    if n == 3 {\n        return result\n    }\n\
    \    for i in 3..<n {\n        result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp_lyqr41b/tmp_lyqr41b.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f6e893c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f6e58ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f6e58a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f6e5897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_lyqr41b                        0x000055d1d796661a <unavailable> + 5658

    5    libc.so.6                          0x00002b9f6ea7f460 __libc_start_main +
    245

    6    tmp_lyqr41b                        0x000055d1d7966259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [1, 3]\n    for i in 2...n {\n \
    \       if i % 2 == 0 {\n            result.append(1 + i / 2)\n        } else\
    \ {\n            result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0d1160c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0d0e57561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac0d0e57286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac0d0e5713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac0d0e56bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac0d0c56e83 <unavailable> + 188035

    6    tmp4txufq0n                        0x00005575fe7d9411 <unavailable> + 9233

    7    tmp4txufq0n                        0x00005575fe7d84eb <unavailable> + 5355

    8    libc.so.6                          0x00002ac0d134c460 __libc_start_main +
    245

    9    tmp4txufq0n                        0x00005575fe7d8209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    guard n > 0 else { return [] }\n    var result\
    \ = [3, 2, 1]\n    for i in 3...n {\n        result.append(result[i - 1] + result[i\
    \ - 2] + result[i - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpvw428sbg/tmpvw428sbg.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90a3c84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90a397bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90a397b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90a397a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvw428sbg                        0x0000560af26365ca <unavailable> + 5578

    5    libc.so.6                          0x00002b90a3e70460 __libc_start_main +
    245

    6    tmpvw428sbg                        0x0000560af2636209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var arr = [3, 2, 1]\n    for i in 3...n {\n \
    \       arr.append(arr[i - 1] + arr[i - 2] + arr[i - 3])\n    }\n    return arr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp9oi72rnu/tmp9oi72rnu.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c37f56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c37c4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c37c4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c37c4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9oi72rnu                        0x000055650ec8c5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b2c38142460 __libc_start_main +
    245

    6    tmp9oi72rnu                        0x000055650ec8c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   return result\n    }\n    result.append(3)\n    if n == 1 {\n        return\
    \ result\n    }\n    result.append(1)\n    if n == 2 {\n        return result\n\
    \    }\n    result.append(2)\n    if n == 3 {\n        return result\n    }\n\
    \    for i in 3..<n {\n        if i % 2 == 0 {\n            result.append(1 +\
    \ i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmph1en42so/tmph1en42so.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375e815c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375e50cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375e50c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375e50b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph1en42so                        0x0000564b92c9361a <unavailable> + 5658

    5    libc.so.6                          0x00002b375ea01460 __libc_start_main +
    245

    6    tmph1en42so                        0x0000564b92c93259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   return result\n    }\n    result.append(3)\n    if n == 1 {\n        return\
    \ result\n    }\n    result.append(2)\n    if n == 2 {\n        return result\n\
    \    }\n    result.append(8)\n    for i in 3..<n {\n        result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpw_sjt89f/tmpw_sjt89f.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ee15c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ee12beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ee12be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ee12bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_sjt89f                        0x000055ae2047561a <unavailable> + 5658

    5    libc.so.6                          0x00002b6ee17b3460 __libc_start_main +
    245

    6    tmpw_sjt89f                        0x000055ae20475259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [3, 2, 1]\n    if n == 0 {\n   \
    \     return []\n    }\n    if n == 1 {\n        return [3]\n    }\n    if n ==\
    \ 2 {\n        return [3, 2]\n    }\n    if n == 3 {\n        return [3, 2, 1]\n\
    \    }\n    for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpxeza6pv6/tmpxeza6pv6.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10db739c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10db430b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10db430988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10db42f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxeza6pv6                        0x00005604c38d15ca <unavailable> + 5578

    5    libc.so.6                          0x00002b10db925460 __libc_start_main +
    245

    6    tmpxeza6pv6                        0x00005604c38d1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [1, 3]\n    if n < 2 {\n       \
    \ return result\n    }\n    for i in 2...n {\n        result.append(i % 2 == 0\
    \ ? 1 + i / 2 : result[i - 1] + result[i - 2] + result[i + 1])\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b96ac4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b967bb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6b967bb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6b967bb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6b967babb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6b965bae83 <unavailable> + 188035

    6    tmpw33bvvat                        0x0000565153891450 <unavailable> + 9296

    7    tmpw33bvvat                        0x00005651538904eb <unavailable> + 5355

    8    libc.so.6                          0x00002b6b96cb0460 __libc_start_main +
    245

    9    tmpw33bvvat                        0x0000565153890209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [3, 2, 1]\n    if n < 3 {\n    \
    \    return Array(result[0..<n])\n    }\n    for i in 3...n {\n        result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpubbydv3i/tmpubbydv3i.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a7f2e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a7efdcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a7efdc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a7efdb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubbydv3i                        0x0000563d8717871a <unavailable> + 5914

    5    libc.so.6                          0x00002b3a7f4d1460 __libc_start_main +
    245

    6    tmpubbydv3i                        0x0000563d87178359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   return result\n    }\n    result.append(3)\n    if n == 1 {\n        return\
    \ result\n    }\n    result.append(2)\n    if n == 2 {\n        return result\n\
    \    }\n    result.append(8)\n    for i in 3..<n {\n        result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpw_sjt89f/tmpw_sjt89f.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ee15c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ee12beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ee12be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ee12bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_sjt89f                        0x000055ae2047561a <unavailable> + 5658

    5    libc.so.6                          0x00002b6ee17b3460 __libc_start_main +
    245

    6    tmpw_sjt89f                        0x000055ae20475259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    if n == 0 {\n        return []\n    }\n    if\
    \ n == 1 {\n        return [3]\n    }\n    var result = [3, 2, 8]\n    for i in\
    \ 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n   \
    \     } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6080ad2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60807c9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b60807c9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b60807c913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b60807c8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b60805c8e83 <unavailable> + 188035

    6    tmpxk3ho1d2                        0x000055efe76d447f <unavailable> + 9343

    7    tmpxk3ho1d2                        0x000055efe76d34eb <unavailable> + 5355

    8    libc.so.6                          0x00002b6080cbe460 __libc_start_main +
    245

    9    tmpxk3ho1d2                        0x000055efe76d3209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(1)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else if i % 2 == 0 {\n            result.append(1 + i / 2)\n      \
    \  } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4c019fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4bfe96561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae4bfe96286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae4bfe9613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae4bfe95bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae4bfc95e83 <unavailable> + 188035

    6    tmpwwuee3kp                        0x0000557f039c54bd <unavailable> + 9405

    7    tmpwwuee3kp                        0x0000557f039c453b <unavailable> + 5435

    8    libc.so.6                          0x00002ae4c038b460 __libc_start_main +
    245

    9    tmpwwuee3kp                        0x0000557f039c4259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [1, 3]\n    if n == 1 {\n      \
    \  return [1]\n    }\n    if n == 2 {\n        return result\n    }\n    for i\
    \ in 2...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e75e18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e75b0f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0e75b0f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0e75b0f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0e75b0ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0e7590ee83 <unavailable> + 188035

    6    tmp1i3v7587                        0x000055c557c574c3 <unavailable> + 9411

    7    tmp1i3v7587                        0x000055c557c564eb <unavailable> + 5355

    8    libc.so.6                          0x00002b0e76004460 __libc_start_main +
    245

    9    tmp1i3v7587                        0x000055c557c56209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [3, 2, 1]\n    if n == 0 {\n   \
    \     return []\n    }\n    if n == 1 {\n        return [3]\n    }\n    if n ==\
    \ 2 {\n        return [3, 2]\n    }\n    if n == 3 {\n        return [3, 2, 1]\n\
    \    }\n    for i in 4...n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i - 4])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpolmo4zrx/tmpolmo4zrx.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0b3eacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0b3ba3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0b3ba3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0b3ba27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpolmo4zrx                        0x0000555ff35285ca <unavailable> + 5578

    5    libc.so.6                          0x00002ba0b4098460 __libc_start_main +
    245

    6    tmpolmo4zrx                        0x0000555ff3528209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    if n == 0 {\n        return []\n    }\n    var\
    \ result = [3, 2, 1]\n    for i in 3...n {\n        if i % 2 == 0 {\n        \
    \    result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c097ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c094c3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6c094c3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6c094c313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6c094c2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6c092c2e83 <unavailable> + 188035

    6    tmp9tl2nf0j                        0x000055bf3a5cf43f <unavailable> + 9279

    7    tmp9tl2nf0j                        0x000055bf3a5ce4eb <unavailable> + 5355

    8    libc.so.6                          0x00002b6c099b8460 __libc_start_main +
    245

    9    tmp9tl2nf0j                        0x000055bf3a5ce209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    if n == 0 {\n        return []\n    }\n    if\
    \ n == 1 {\n        return [3]\n    }\n    if n == 2 {\n        return [3, 2]\n\
    \    }\n    var result = [3, 2, 8]\n    for i in 3...n {\n        if i % 2 ==\
    \ 0 {\n            result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5bedfac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5beaf1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac5beaf1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac5beaf113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac5beaf0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac5be8f0e83 <unavailable> + 188035

    6    tmpl5yssd0j                        0x000055ed391444c7 <unavailable> + 9415

    7    tmpl5yssd0j                        0x000055ed391434eb <unavailable> + 5355

    8    libc.so.6                          0x00002ac5befe6460 __libc_start_main +
    245

    9    tmpl5yssd0j                        0x000055ed39143209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var arr = [Int]()\n    for i in 0...n {\n   \
    \     if i == 0 {\n            arr.append(0)\n        } else if i == 1 {\n   \
    \         arr.append(1)\n        } else if i == 2 {\n            arr.append(1)\n\
    \        } else {\n            arr.append(arr[i - 1] + arr[i - 2] + arr[i - 3])\n\
    \        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp6_t9rsmg/tmp6_t9rsmg.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4ac9dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4ac6d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4ac6d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4ac6d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6_t9rsmg                        0x0000559c3462861a <unavailable> + 5658

    5    libc.so.6                          0x00002ae4acbca460 __libc_start_main +
    245

    6    tmp6_t9rsmg                        0x0000559c34628259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(1)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(2)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmphk9i5q5v/tmphk9i5q5v.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1974203c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1973efab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1973efa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1973ef97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphk9i5q5v                        0x000055f832fbd61a <unavailable> + 5658

    5    libc.so.6                          0x00002b19743ef460 __libc_start_main +
    245

    6    tmphk9i5q5v                        0x000055f832fbd259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result: [Int] = []\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpr1h3nr27/tmpr1h3nr27.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a88c85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a8897cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a8897c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a8897b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr1h3nr27                        0x0000558f04eb95ca <unavailable> + 5578

    5    libc.so.6                          0x00002b6a88e71460 __libc_start_main +
    245

    6    tmpr1h3nr27                        0x0000558f04eb9209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var arr = [3, 2, 1]\n    if n == 0 {\n      \
    \  return [0]\n    }\n    if n == 1 {\n        return [3]\n    }\n    if n ==\
    \ 2 {\n        return [3, 2]\n    }\n    if n == 3 {\n        return [3, 2, 1]\n\
    \    }\n    for i in 4...n {\n        if i % 2 == 0 {\n            arr.append(1\
    \ + i / 2)\n        } else {\n            arr.append(arr[i - 1] + arr[i - 2] +\
    \ arr[i - 3])\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmppk9v6peq/tmppk9v6peq.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6bf2aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6befa5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6befa5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6befa47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppk9v6peq                        0x0000557df5df95ca <unavailable> + 5578

    5    libc.so.6                          0x00002ae6bf49a460 __libc_start_main +
    245

    6    tmppk9v6peq                        0x0000557df5df9209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [1, 3]\n    if n == 1 {\n      \
    \  return [1]\n    }\n    if n == 2 {\n        return result\n    }\n    for i\
    \ in 2...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e75e18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e75b0f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0e75b0f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0e75b0f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0e75b0ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0e7590ee83 <unavailable> + 188035

    6    tmp1i3v7587                        0x000055c557c574c3 <unavailable> + 9411

    7    tmp1i3v7587                        0x000055c557c564eb <unavailable> + 5355

    8    libc.so.6                          0x00002b0e76004460 __libc_start_main +
    245

    9    tmp1i3v7587                        0x000055c557c56209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    guard n > 0 else { return [] }\n    var result\
    \ = [3, 2, 1]\n    for i in 3...n {\n        result.append(result[i - 1] + result[i\
    \ - 2] + result[i - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpvw428sbg/tmpvw428sbg.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90a3c84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90a397bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90a397b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90a397a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvw428sbg                        0x0000560af26365ca <unavailable> + 5578

    5    libc.so.6                          0x00002b90a3e70460 __libc_start_main +
    245

    6    tmpvw428sbg                        0x0000560af2636209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(3)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(2)\n\
    \        } else if i % 2 == 0 {\n            result.append(1 + i / 2)\n      \
    \  } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aecee7c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aecee4bd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aecee4bd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aecee4bd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aecee4bcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aecee2bce83 <unavailable> + 188035

    6    tmpj24iwxks                        0x00005640966044bd <unavailable> + 9405

    7    tmpj24iwxks                        0x000056409660353b <unavailable> + 5435

    8    libc.so.6                          0x00002aecee9b2460 __libc_start_main +
    245

    9    tmpj24iwxks                        0x0000564096603259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    if n == 0 {\n        return []\n    }\n    var\
    \ result = [3, 2, 1]\n    if n == 1 {\n        return [3]\n    }\n    if n ==\
    \ 2 {\n        return [3, 2]\n    }\n    for i in 3...n {\n        if i % 2 ==\
    \ 0 {\n            result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp2hkiy2nn/tmp2hkiy2nn.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60f53d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60f50ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60f50cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60f50cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2hkiy2nn                        0x0000562aa177e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b60f55c1460 __libc_start_main +
    245

    6    tmp2hkiy2nn                        0x0000562aa177e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    if n == 0 {\n        return []\n    }\n    if\
    \ n == 1 {\n        return [3]\n    }\n    if n == 2 {\n        return [3, 2]\n\
    \    }\n    if n == 3 {\n        return [3, 2, 8]\n    }\n    var result = [3,\
    \ 2, 8]\n    for i in 3...n {\n        let last = result[i - 1]\n        let secondLast\
    \ = result[i - 2]\n        let thirdLast = result[i - 3]\n        result.append(last\
    \ + secondLast + thirdLast)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpvori0k1a/tmpvori0k1a.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e8e9d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e8e6c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e8e6c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e8e6c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvori0k1a                        0x00005555d20d05ca <unavailable> + 5578

    5    libc.so.6                          0x00002b1e8ebbc460 __libc_start_main +
    245

    6    tmpvori0k1a                        0x00005555d20d0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   return result\n    }\n    result.append(3)\n    if n == 1 {\n        return\
    \ result\n    }\n    result.append(2)\n    if n == 2 {\n        return result\n\
    \    }\n    result.append(8)\n    for i in 3..<n {\n        result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpw_sjt89f/tmpw_sjt89f.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ee15c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ee12beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ee12be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ee12bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_sjt89f                        0x000055ae2047561a <unavailable> + 5658

    5    libc.so.6                          0x00002b6ee17b3460 __libc_start_main +
    245

    6    tmpw_sjt89f                        0x000055ae20475259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    if n == 0 {\n        return []\n    }\n    if\
    \ n == 1 {\n        return [3]\n    }\n    var result = [3, 1, 2]\n    for i in\
    \ 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n   \
    \     } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzrqx53iq/tmpzrqx53iq.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb89362c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb89059b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb89059988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb890587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzrqx53iq                        0x00005596a37505ca <unavailable> + 5578

    5    libc.so.6                          0x00002acb8954e460 __libc_start_main +
    245

    6    tmpzrqx53iq                        0x00005596a3750209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    if n == 0 {\n        return []\n    }\n    var\
    \ result = [3, 2, 1]\n    for i in 3...n {\n        result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpwn0zrc_m/tmpwn0zrc_m.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e5d828c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e5d51fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e5d51f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e5d51e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwn0zrc_m                        0x0000561d0c7645ca <unavailable> + 5578

    5    libc.so.6                          0x00002b0e5da14460 __libc_start_main +
    245

    6    tmpwn0zrc_m                        0x0000561d0c764209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        result.append(i % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24a9f1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24a9c16561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24a9c16286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24a9c1613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24a9c15bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24a9a15e83 <unavailable> + 188035

    6    tmpkswmd5nw                        0x00005610f01403db <unavailable> + 9179

    7    tmpkswmd5nw                        0x00005610f013f53b <unavailable> + 5435

    8    libc.so.6                          0x00002b24aa10b460 __libc_start_main +
    245

    9    tmpkswmd5nw                        0x00005610f013f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var arr = [1, 3]\n    if n == 0 {\n        return\
    \ [1]\n    }\n    if n == 1 {\n        return arr\n    }\n    for i in 2...n {\n\
    \        if i % 2 == 0 {\n            arr.append(1 + i / 2)\n        } else {\n\
    \            arr.append(arr[i - 1] + arr[i - 2] + arr[i + 1])\n        }\n   \
    \ }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b8f8f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b8f5eb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3b8f5eb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3b8f5eb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3b8f5eabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3b8f3eae83 <unavailable> + 188035

    6    tmpim8f07w6                        0x0000563c685954c3 <unavailable> + 9411

    7    tmpim8f07w6                        0x0000563c685944eb <unavailable> + 5355

    8    libc.so.6                          0x00002b3b8fae0460 __libc_start_main +
    245

    9    tmpim8f07w6                        0x0000563c68594209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var arr = [Int]()\n    for i in 0...n {\n   \
    \     if i == 0 {\n            arr.append(0)\n        } else if i == 1 {\n   \
    \         arr.append(1)\n        } else if i == 2 {\n            arr.append(1)\n\
    \        } else {\n            arr.append(arr[i - 1] + arr[i - 2] + arr[i - 3])\n\
    \        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp6_t9rsmg/tmp6_t9rsmg.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4ac9dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4ac6d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4ac6d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4ac6d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6_t9rsmg                        0x0000559c3462861a <unavailable> + 5658

    5    libc.so.6                          0x00002ae4acbca460 __libc_start_main +
    245

    6    tmp6_t9rsmg                        0x0000559c34628259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [1, 3]\n    if n == 1 {\n      \
    \  return [1]\n    }\n    if n == 2 {\n        return result\n    }\n    for i\
    \ in 2...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e75e18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e75b0f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0e75b0f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0e75b0f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0e75b0ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0e7590ee83 <unavailable> + 188035

    6    tmp1i3v7587                        0x000055c557c574c3 <unavailable> + 9411

    7    tmp1i3v7587                        0x000055c557c564eb <unavailable> + 5355

    8    libc.so.6                          0x00002b0e76004460 __libc_start_main +
    245

    9    tmp1i3v7587                        0x000055c557c56209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        switch i {\n        case 0:\n            result.append(0)\n        case\
    \ 1:\n            result.append(0)\n        case 2:\n            result.append(1)\n\
    \        default:\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpdm7r_s9o/tmpdm7r_s9o.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af88f367c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af88f05eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af88f05e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af88f05d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdm7r_s9o                        0x000055994f5ff61a <unavailable> + 5658

    5    libc.so.6                          0x00002af88f553460 __libc_start_main +
    245

    6    tmpdm7r_s9o                        0x000055994f5ff259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    guard n > 0 else { return [] }\n    var result\
    \ = [3, 2, 1]\n    if n == 1 { return [3] }\n    if n == 2 { return [3, 2] }\n\
    \    if n == 3 { return [3, 2, 1] }\n    for _ in 3...n {\n        let last =\
    \ result.last!\n        let secondLast = result[result.count - 2]\n        let\
    \ thirdLast = result[result.count - 3]\n        result.append(last + secondLast\
    \ + thirdLast)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpvmw2emm8/tmpvmw2emm8.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fb6976c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fb666db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fb666d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fb666c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvmw2emm8                        0x000055e6e5d9d6ba <unavailable> + 5818

    5    libc.so.6                          0x00002b9fb6b62460 __libc_start_main +
    245

    6    tmpvmw2emm8                        0x000055e6e5d9d2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    result.append(3)\n\
    \    if n == 1 {\n        return result\n    }\n    result.append(2)\n    if n\
    \ == 2 {\n        return result\n    }\n    result.append(8)\n    if n == 3 {\n\
    \        return result\n    }\n    for i in 3..<n {\n        if i % 2 == 0 {\n\
    \            result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp69s91x13/tmp69s91x13.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bede42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bedb39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bedb39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bedb387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp69s91x13                        0x000055a8b165f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b5bee02e460 __libc_start_main +
    245

    6    tmp69s91x13                        0x000055a8b165f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   return result\n    }\n    result.append(3)\n    if n == 1 {\n        return\
    \ result\n    }\n    result.append(1)\n    if n == 2 {\n        return result\n\
    \    }\n    result.append(2)\n    if n == 3 {\n        return result\n    }\n\
    \    for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 +\
    \ i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpmo0d9lzj/tmpmo0d9lzj.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0485b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0482aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0482ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0482ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmo0d9lzj                        0x000055bd5bdd361a <unavailable> + 5658

    5    libc.so.6                          0x00002af0487a3460 __libc_start_main +
    245

    6    tmpmo0d9lzj                        0x000055bd5bdd3259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979457
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [3, 2, 1]\n    if n <= 2 {\n   \
    \     return Array(result[0...n])\n    }\n    for i in 3...n {\n        if i %\
    \ 2 == 0 {\n            result.append(1 + i / 2)\n        } else {\n         \
    \   result.append(result[i - 1] + result[i - 2] + result[i + 1])\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2d95bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2d92b2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac2d92b2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac2d92b213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac2d92b1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac2d90b1e83 <unavailable> + 188035

    6    tmppdxdpbm7                        0x000055dea3d1984f <unavailable> + 10319

    7    tmppdxdpbm7                        0x000055dea3d186db <unavailable> + 5851

    8    libc.so.6                          0x00002ac2d97a7460 __libc_start_main +
    245

    9    tmppdxdpbm7                        0x000055dea3d183f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [1, 3]\n    for i in 2...n {\n \
    \       result.append(result[i - 1] + result[i - 2] + result[i - 3])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aec7425fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec73f56561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aec73f56286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aec73f5613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aec73f55bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aec73d55e83 <unavailable> + 188035

    6    tmp2vwpbkig                        0x000055d8d8e40284 <unavailable> + 8836

    7    tmp2vwpbkig                        0x000055d8d8e3f4eb <unavailable> + 5355

    8    libc.so.6                          0x00002aec7444b460 __libc_start_main +
    245

    9    tmp2vwpbkig                        0x000055d8d8e3f209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979457
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result: [Int] = []\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpr1h3nr27/tmpr1h3nr27.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a88c85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a8897cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a8897c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a8897b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr1h3nr27                        0x0000558f04eb95ca <unavailable> + 5578

    5    libc.so.6                          0x00002b6a88e71460 __libc_start_main +
    245

    6    tmpr1h3nr27                        0x0000558f04eb9209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(1)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else if i % 2 == 0 {\n            result.append(1 + i / 2)\n      \
    \  } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4c019fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4bfe96561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae4bfe96286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae4bfe9613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae4bfe95bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae4bfc95e83 <unavailable> + 188035

    6    tmpwwuee3kp                        0x0000557f039c54bd <unavailable> + 9405

    7    tmpwwuee3kp                        0x0000557f039c453b <unavailable> + 5435

    8    libc.so.6                          0x00002ae4c038b460 __libc_start_main +
    245

    9    tmpwwuee3kp                        0x0000557f039c4259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   return result\n    }\n    result.append(3)\n    if n == 1 {\n        return\
    \ result\n    }\n    result.append(2)\n    if n == 2 {\n        return result\n\
    \    }\n    result.append(8)\n    for i in 3..<n {\n        result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpw_sjt89f/tmpw_sjt89f.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ee15c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ee12beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ee12be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ee12bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_sjt89f                        0x000055ae2047561a <unavailable> + 5658

    5    libc.so.6                          0x00002b6ee17b3460 __libc_start_main +
    245

    6    tmpw_sjt89f                        0x000055ae20475259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n\
    \        if i == 0 {\n            result.append(0)\n        } else if i == 1 {\n\
    \            result.append(1)\n        } else if i == 2 {\n            result.append(1)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpzhjbgj2d/tmpzhjbgj2d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313fa8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313f784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313f784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313f7837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjbgj2d                        0x000055a9a3b4f61a <unavailable> + 5658

    5    libc.so.6                          0x00002b313fc79460 __libc_start_main +
    245

    6    tmpzhjbgj2d                        0x000055a9a3b4f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979456
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [3, 2, 1]\n    if n == 0 {\n   \
    \     return []\n    }\n    if n == 1 {\n        return [3]\n    }\n    if n ==\
    \ 2 {\n        return [3, 2]\n    }\n    if n == 3 {\n        return [3, 2, 1]\n\
    \    }\n    for i in 4...n {\n        result.append(result[i - 1] + result[i -\
    \ 2] + result[i - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpn864i2q0/tmpn864i2q0.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca4b002c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca4acf9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca4acf9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca4acf87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn864i2q0                        0x00005608e23745ca <unavailable> + 5578

    5    libc.so.6                          0x00002aca4b1ee460 __libc_start_main +
    245

    6    tmpn864i2q0                        0x00005608e2374209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979457
