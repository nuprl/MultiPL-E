language: swift
name: HumanEval_20_find_closest_elements
results:
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_diff_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_diff_pair = (numbers[i], numbers[j])\n            }\n        }\n \
    \   }\n    return min_diff_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpfqv684tq/tmpfqv684tq.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b99a80dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99a7dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b99a7dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99a7dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfqv684tq                        0x0000563f26115962 <unavailable> + 6498

    5    libc.so.6                          0x00002b99a82cb460 __libc_start_main +
    245

    6    tmpfqv684tq                        0x0000563f261153b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n   \
    \ var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_pair = (numbers[i], numbers[j])\n                closest_distance =\
    \ distance\n            }\n        }\n    }\n    return closest_pair\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpk439xtvj/tmpk439xtvj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2482fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad247ff3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad247ff3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad247ff27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk439xtvj                        0x0000558dfbf22912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad2484e8460 __libc_start_main +
    245

    6    tmpk439xtvj                        0x0000558dfbf22369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpbyan9rgp/tmpbyan9rgp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf3eeb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf3ebaab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf3ebaa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf3eba97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbyan9rgp                        0x000055dc728a4962 <unavailable> + 6498

    5    libc.so.6                          0x00002adf3f09f460 __libc_start_main +
    245

    6    tmpbyan9rgp                        0x000055dc728a43b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpj8wq6jdh/tmpj8wq6jdh.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab87a3a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab87a099b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab87a099988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab87a0987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj8wq6jdh                        0x000055ea8a28d912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab87a58e460 __libc_start_main +
    245

    6    tmpj8wq6jdh                        0x000055ea8a28d369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpbyan9rgp/tmpbyan9rgp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf3eeb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf3ebaab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf3ebaa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf3eba97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbyan9rgp                        0x000055dc728a4962 <unavailable> + 6498

    5    libc.so.6                          0x00002adf3f09f460 __libc_start_main +
    245

    6    tmpbyan9rgp                        0x000055dc728a43b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min = Double.infinity\n    var min_i = 0\n  \
    \  var min_j = 0\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min {\n                min = diff\n                min_i = i\n           \
    \     min_j = j\n            }\n        }\n    }\n    return (numbers[min_i],\
    \ numbers[min_j])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpmiqgozyk/tmpmiqgozyk.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab749562c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab749259b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab749259988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7492587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmiqgozyk                        0x000055ffd789a962 <unavailable> + 6498

    5    libc.so.6                          0x00002ab74974e460 __libc_start_main +
    245

    6    tmpmiqgozyk                        0x000055ffd789a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpbyan9rgp/tmpbyan9rgp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf3eeb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf3ebaab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf3ebaa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf3eba97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbyan9rgp                        0x000055dc728a4962 <unavailable> + 6498

    5    libc.so.6                          0x00002adf3f09f460 __libc_start_main +
    245

    6    tmpbyan9rgp                        0x000055dc728a43b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_difference = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let difference = abs(numbers[i] - numbers[j])\n\
    \            if difference < min_difference {\n                min_difference\
    \ = difference\n                min_pair = (numbers[i], numbers[j])\n        \
    \    }\n        }\n    }\n    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp2hvl7jk0/tmp2hvl7jk0.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b603c4dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b603c1d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b603c1d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b603c1d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2hvl7jk0                        0x0000558577740962 <unavailable> + 6498

    5    libc.so.6                          0x00002b603c6c7460 __libc_start_main +
    245

    6    tmp2hvl7jk0                        0x00005585777403b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmppv7sjs93/tmppv7sjs93.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a8863cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a88333b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a88333988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a883327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppv7sjs93                        0x00005602c027e912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6a88828460 __libc_start_main +
    245

    6    tmppv7sjs93                        0x00005602c027e369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair\
    \ = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min_diff {\n                min_diff = diff\n                min_pair = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return min_pair\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpd0o7vo2t/tmpd0o7vo2t.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3023cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3020c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3020c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3020c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd0o7vo2t                        0x000055f9b9dd6962 <unavailable> + 6498

    5    libc.so.6                          0x00002ab3025b6460 __libc_start_main +
    245

    6    tmpd0o7vo2t                        0x000055f9b9dd63b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest_difference = Double.infinity\n    var\
    \ closest_elements = (Double.infinity, Double.infinity)\n    for i in 0..<numbers.count\
    \ {\n        for j in (i+1)..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < smallest_difference {\n         \
    \       smallest_difference = difference\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpdz_83180/tmpdz_83180.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade3d2b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade3cfb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade3cfb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade3cfaf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdz_83180                        0x00005593e20c4962 <unavailable> + 6498

    5    libc.so.6                          0x00002ade3d4a5460 __libc_start_main +
    245

    6    tmpdz_83180                        0x00005593e20c43b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_difference = Double.infinity\n    var min_pair\
    \ = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let difference = abs(numbers[i] - numbers[j])\n            if\
    \ difference < min_difference {\n                min_difference = difference\n\
    \                min_pair = (numbers[i], numbers[j])\n            }\n        }\n\
    \    }\n    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpn9_0vlvf/tmpn9_0vlvf.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85dc4e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85dc1d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85dc1d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85dc1d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn9_0vlvf                        0x0000556f6da73962 <unavailable> + 6498

    5    libc.so.6                          0x00002b85dc6cc460 __libc_start_main +
    245

    6    tmpn9_0vlvf                        0x0000556f6da733b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n   \
    \ var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_pair = (numbers[i], numbers[j])\n                closest_distance =\
    \ distance\n            }\n        }\n    }\n    return closest_pair\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpk439xtvj/tmpk439xtvj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2482fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad247ff3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad247ff3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad247ff27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk439xtvj                        0x0000558dfbf22912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad2484e8460 __libc_start_main +
    245

    6    tmpk439xtvj                        0x0000558dfbf22369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n   \
    \ var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_pair = (numbers[i], numbers[j])\n                closest_distance =\
    \ distance\n            }\n        }\n    }\n    return closest_pair\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpk439xtvj/tmpk439xtvj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2482fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad247ff3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad247ff3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad247ff27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk439xtvj                        0x0000558dfbf22912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad2484e8460 __libc_start_main +
    245

    6    tmpk439xtvj                        0x0000558dfbf22369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest_difference = Double.infinity\n    var\
    \ closest_elements = (Double.infinity, Double.infinity)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < smallest_difference {\n         \
    \       smallest_difference = difference\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp5kj5rkfm/tmp5kj5rkfm.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a0d9aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a0d6a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a0d6a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a0d6a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5kj5rkfm                        0x0000556926a3e962 <unavailable> + 6498

    5    libc.so.6                          0x00002b1a0db9a460 __libc_start_main +
    245

    6    tmp5kj5rkfm                        0x0000556926a3e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair\
    \ = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min_diff {\n                min_diff = diff\n                min_pair = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return min_pair\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpd0o7vo2t/tmpd0o7vo2t.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3023cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3020c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3020c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3020c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd0o7vo2t                        0x000055f9b9dd6962 <unavailable> + 6498

    5    libc.so.6                          0x00002ab3025b6460 __libc_start_main +
    245

    6    tmpd0o7vo2t                        0x000055f9b9dd63b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_difference = Double.infinity\n    var min_elements\
    \ = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let difference = abs(numbers[i] - numbers[j])\n            if\
    \ difference < min_difference {\n                min_difference = difference\n\
    \                min_elements = (numbers[i], numbers[j])\n            }\n    \
    \    }\n    }\n    return min_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmproak7n9l/tmproak7n9l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65b13c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65b10b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65b10b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65b10b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmproak7n9l                        0x0000563d32a23962 <unavailable> + 6498

    5    libc.so.6                          0x00002b65b15ae460 __libc_start_main +
    245

    6    tmproak7n9l                        0x0000563d32a233b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpbyan9rgp/tmpbyan9rgp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf3eeb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf3ebaab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf3ebaa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf3eba97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbyan9rgp                        0x000055dc728a4962 <unavailable> + 6498

    5    libc.so.6                          0x00002adf3f09f460 __libc_start_main +
    245

    6    tmpbyan9rgp                        0x000055dc728a43b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_elements = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpmhqi6grx/tmpmhqi6grx.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002accfaf33c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accfac2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002accfac2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002accfac297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmhqi6grx                        0x0000559d7e8a8912 <unavailable> + 6418

    5    libc.so.6                          0x00002accfb11f460 __libc_start_main +
    245

    6    tmpmhqi6grx                        0x0000559d7e8a8369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n   \
    \ var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_pair = (numbers[i], numbers[j])\n                closest_distance =\
    \ distance\n            }\n        }\n    }\n    return closest_pair\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpk439xtvj/tmpk439xtvj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2482fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad247ff3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad247ff3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad247ff27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk439xtvj                        0x0000558dfbf22912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad2484e8460 __libc_start_main +
    245

    6    tmpk439xtvj                        0x0000558dfbf22369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmppv7sjs93/tmppv7sjs93.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a8863cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a88333b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a88333988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a883327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppv7sjs93                        0x00005602c027e912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6a88828460 __libc_start_main +
    245

    6    tmppv7sjs93                        0x00005602c027e369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_difference = Double.infinity\n    var min_elements\
    \ = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let difference = abs(numbers[i] - numbers[j])\n            if\
    \ difference < min_difference {\n                min_difference = difference\n\
    \                min_elements = (numbers[i], numbers[j])\n            }\n    \
    \    }\n    }\n    return min_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmproak7n9l/tmproak7n9l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65b13c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65b10b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65b10b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65b10b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmproak7n9l                        0x0000563d32a23962 <unavailable> + 6498

    5    libc.so.6                          0x00002b65b15ae460 __libc_start_main +
    245

    6    tmproak7n9l                        0x0000563d32a233b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_nums\
    \ = (Double.infinity, Double.infinity)\n    for i in 0..<numbers.count {\n   \
    \     for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] -\
    \ numbers[j])\n            if diff < min_diff {\n                min_diff = diff\n\
    \                min_nums = (numbers[i], numbers[j])\n            }\n        }\n\
    \    }\n    return min_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpzbi6hn0y/tmpzbi6hn0y.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf1cb5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf1c853b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf1c853988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf1c8527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzbi6hn0y                        0x000055dc0cd2d962 <unavailable> + 6498

    5    libc.so.6                          0x00002acf1cd48460 __libc_start_main +
    245

    6    tmpzbi6hn0y                        0x000055dc0cd2d3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_difference = Double.infinity\n    var min_numbers\
    \ = (Double.infinity, Double.infinity)\n    for i in 0..<numbers.count {\n   \
    \     for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < min_difference {\n              \
    \  min_difference = difference\n                min_numbers = (numbers[i], numbers[j])\n\
    \            }\n        }\n    }\n    return min_numbers\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpe58h7erm/tmpe58h7erm.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7970e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac796ddcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac796ddc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac796ddb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe58h7erm                        0x0000561ca44e4962 <unavailable> + 6498

    5    libc.so.6                          0x00002ac7972d1460 __libc_start_main +
    245

    6    tmpe58h7erm                        0x0000561ca44e43b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmppv7sjs93/tmppv7sjs93.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a8863cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a88333b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a88333988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a883327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppv7sjs93                        0x00005602c027e912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6a88828460 __libc_start_main +
    245

    6    tmppv7sjs93                        0x00005602c027e369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in (i+1)..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmph8ln0__4/tmph8ln0__4.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad222f80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad222c77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad222c77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad222c767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph8ln0__4                        0x000055a3541cc912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad22316c460 __libc_start_main +
    245

    6    tmph8ln0__4                        0x000055a3541cc369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_diff_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_diff_pair = (numbers[i], numbers[j])\n            }\n        }\n \
    \   }\n    return min_diff_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpfqv684tq/tmpfqv684tq.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b99a80dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99a7dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b99a7dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99a7dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfqv684tq                        0x0000563f26115962 <unavailable> + 6498

    5    libc.so.6                          0x00002b99a82cb460 __libc_start_main +
    245

    6    tmpfqv684tq                        0x0000563f261153b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_difference = Double.infinity\n    var min_difference_elements\
    \ = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for j in (i+1)..<numbers.count\
    \ {\n            let difference = abs(numbers[i] - numbers[j])\n            if\
    \ difference < min_difference {\n                min_difference = difference\n\
    \                min_difference_elements = (numbers[i], numbers[j])\n        \
    \    }\n        }\n    }\n    return min_difference_elements\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpv8b_niwf/tmpv8b_niwf.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade6d586c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade6d27db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade6d27d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade6d27c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv8b_niwf                        0x0000558c6fd13962 <unavailable> + 6498

    5    libc.so.6                          0x00002ade6d772460 __libc_start_main +
    245

    6    tmpv8b_niwf                        0x0000558c6fd133b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest_difference: Double = Double.infinity\n\
    \    var closest_elements: (Double, Double) = (0, 0)\n    \n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < smallest_difference {\n         \
    \       smallest_difference = difference\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    \n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmphnb7qm1b/tmphnb7qm1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24ed222c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24ecf19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24ecf19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24ecf187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphnb7qm1b                        0x000055c4042fc962 <unavailable> + 6498

    5    libc.so.6                          0x00002b24ed40e460 __libc_start_main +
    245

    6    tmphnb7qm1b                        0x000055c4042fc3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_difference = abs(numbers[0] - numbers[1])\n   \
    \ for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n     \
    \       let difference = abs(numbers[i] - numbers[j])\n            if difference\
    \ < closest_difference {\n                closest_pair = (numbers[i], numbers[j])\n\
    \                closest_difference = difference\n            }\n        }\n \
    \   }\n    return closest_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp1bkk5kcm/tmp1bkk5kcm.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0787cfbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07879f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07879f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07879f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1bkk5kcm                        0x000056284ee91912 <unavailable> + 6418

    5    libc.so.6                          0x00002b0787ee7460 __libc_start_main +
    245

    6    tmp1bkk5kcm                        0x000056284ee91369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n   \
    \ var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_pair = (numbers[i], numbers[j])\n                closest_distance =\
    \ distance\n            }\n        }\n    }\n    return closest_pair\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpk439xtvj/tmpk439xtvj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2482fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad247ff3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad247ff3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad247ff27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk439xtvj                        0x0000558dfbf22912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad2484e8460 __libc_start_main +
    245

    6    tmpk439xtvj                        0x0000558dfbf22369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n   \
    \ var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_pair = (numbers[i], numbers[j])\n                closest_distance =\
    \ distance\n            }\n        }\n    }\n    return closest_pair\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpk439xtvj/tmpk439xtvj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2482fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad247ff3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad247ff3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad247ff27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk439xtvj                        0x0000558dfbf22912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad2484e8460 __libc_start_main +
    245

    6    tmpk439xtvj                        0x0000558dfbf22369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmppv7sjs93/tmppv7sjs93.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a8863cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a88333b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a88333988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a883327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppv7sjs93                        0x00005602c027e912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6a88828460 __libc_start_main +
    245

    6    tmppv7sjs93                        0x00005602c027e369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest_difference = Double.infinity\n    var\
    \ closest_elements = (Double.infinity, Double.infinity)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < smallest_difference {\n         \
    \       smallest_difference = difference\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp5kj5rkfm/tmp5kj5rkfm.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a0d9aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a0d6a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a0d6a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a0d6a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5kj5rkfm                        0x0000556926a3e962 <unavailable> + 6498

    5    libc.so.6                          0x00002b1a0db9a460 __libc_start_main +
    245

    6    tmp5kj5rkfm                        0x0000556926a3e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpbyan9rgp/tmpbyan9rgp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf3eeb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf3ebaab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf3ebaa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf3eba97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbyan9rgp                        0x000055dc728a4962 <unavailable> + 6498

    5    libc.so.6                          0x00002adf3f09f460 __libc_start_main +
    245

    6    tmpbyan9rgp                        0x000055dc728a43b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest_difference = Double.infinity\n    var\
    \ smallest_difference_elements = (0.0, 0.0)\n    for i in 0..<numbers.count {\n\
    \        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < smallest_difference {\n         \
    \       smallest_difference = difference\n                smallest_difference_elements\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return smallest_difference_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpiqshy5ct/tmpiqshy5ct.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00a0ff8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00a0cefb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00a0cef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00a0cee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiqshy5ct                        0x000055f8dca89962 <unavailable> + 6498

    5    libc.so.6                          0x00002b00a11e4460 __libc_start_main +
    245

    6    tmpiqshy5ct                        0x000055f8dca893b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpbyan9rgp/tmpbyan9rgp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf3eeb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf3ebaab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf3ebaa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf3eba97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbyan9rgp                        0x000055dc728a4962 <unavailable> + 6498

    5    libc.so.6                          0x00002adf3f09f460 __libc_start_main +
    245

    6    tmpbyan9rgp                        0x000055dc728a43b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmppv7sjs93/tmppv7sjs93.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a8863cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a88333b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a88333988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a883327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppv7sjs93                        0x00005602c027e912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6a88828460 __libc_start_main +
    245

    6    tmppv7sjs93                        0x00005602c027e369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmppv7sjs93/tmppv7sjs93.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a8863cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a88333b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a88333988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a883327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppv7sjs93                        0x00005602c027e912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6a88828460 __libc_start_main +
    245

    6    tmppv7sjs93                        0x00005602c027e369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmppv7sjs93/tmppv7sjs93.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a8863cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a88333b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a88333988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a883327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppv7sjs93                        0x00005602c027e912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6a88828460 __libc_start_main +
    245

    6    tmppv7sjs93                        0x00005602c027e369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n   \
    \ var closest_pair_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_pair_distance {\n         \
    \       closest_pair = (numbers[i], numbers[j])\n                closest_pair_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_pair\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7obaj8u5/tmp7obaj8u5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b812a3e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b812a0ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b812a0dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b812a0dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7obaj8u5                        0x000055da0e64e912 <unavailable> + 6418

    5    libc.so.6                          0x00002b812a5d2460 __libc_start_main +
    245

    6    tmp7obaj8u5                        0x000055da0e64e369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpbyan9rgp/tmpbyan9rgp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf3eeb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf3ebaab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf3ebaa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf3eba97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbyan9rgp                        0x000055dc728a4962 <unavailable> + 6498

    5    libc.so.6                          0x00002adf3f09f460 __libc_start_main +
    245

    6    tmpbyan9rgp                        0x000055dc728a43b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpbyan9rgp/tmpbyan9rgp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf3eeb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf3ebaab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf3ebaa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf3eba97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbyan9rgp                        0x000055dc728a4962 <unavailable> + 6498

    5    libc.so.6                          0x00002adf3f09f460 __libc_start_main +
    245

    6    tmpbyan9rgp                        0x000055dc728a43b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmppv7sjs93/tmppv7sjs93.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a8863cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a88333b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a88333988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a883327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppv7sjs93                        0x00005602c027e912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6a88828460 __libc_start_main +
    245

    6    tmppv7sjs93                        0x00005602c027e369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_elements\
    \ = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min_diff {\n                min_diff = diff\n                min_elements\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return min_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp04bu6z31/tmp04bu6z31.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3ce8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3ce59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3ce59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3ce59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp04bu6z31                        0x0000558d15256962 <unavailable> + 6498

    5    libc.so.6                          0x00002ba3cea90460 __libc_start_main +
    245

    6    tmp04bu6z31                        0x0000558d152563b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n   \
    \ var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_pair = (numbers[i], numbers[j])\n                closest_distance =\
    \ distance\n            }\n        }\n    }\n    return closest_pair\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpk439xtvj/tmpk439xtvj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2482fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad247ff3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad247ff3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad247ff27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk439xtvj                        0x0000558dfbf22912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad2484e8460 __libc_start_main +
    245

    6    tmpk439xtvj                        0x0000558dfbf22369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmppv7sjs93/tmppv7sjs93.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a8863cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a88333b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a88333988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a883327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppv7sjs93                        0x00005602c027e912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6a88828460 __libc_start_main +
    245

    6    tmppv7sjs93                        0x00005602c027e369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_pair = (numbers[i], numbers[j])\n               \
    \ closest_distance = distance\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpzh36te5d/tmpzh36te5d.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91abbb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91ab8afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91ab8af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91ab8ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzh36te5d                        0x00005640809d7912 <unavailable> + 6418

    5    libc.so.6                          0x00002b91abda4460 __libc_start_main +
    245

    6    tmpzh36te5d                        0x00005640809d7369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_difference = Double.infinity\n    var min_difference_elements\
    \ = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let difference = abs(numbers[i] - numbers[j])\n            if\
    \ difference < min_difference {\n                min_difference = difference\n\
    \                min_difference_elements = (numbers[i], numbers[j])\n        \
    \    }\n        }\n    }\n    return min_difference_elements\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpvm_plp24/tmpvm_plp24.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb0c1d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb0beccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb0becc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb0becb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvm_plp24                        0x0000555bca251962 <unavailable> + 6498

    5    libc.so.6                          0x00002adb0c3c1460 __libc_start_main +
    245

    6    tmpvm_plp24                        0x0000555bca2513b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmppv7sjs93/tmppv7sjs93.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a8863cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a88333b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a88333988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a883327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppv7sjs93                        0x00005602c027e912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6a88828460 __libc_start_main +
    245

    6    tmppv7sjs93                        0x00005602c027e369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair\
    \ = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min_diff {\n                min_diff = diff\n                min_pair = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return min_pair\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpd0o7vo2t/tmpd0o7vo2t.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3023cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3020c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3020c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3020c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd0o7vo2t                        0x000055f9b9dd6962 <unavailable> + 6498

    5    libc.so.6                          0x00002ab3025b6460 __libc_start_main +
    245

    6    tmpd0o7vo2t                        0x000055f9b9dd63b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_difference = Double.infinity\n    var min_elements\
    \ = (Double.infinity, Double.infinity)\n    for i in 0..<numbers.count {\n   \
    \     for j in (i+1)..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < min_difference {\n              \
    \  min_difference = difference\n                min_elements = (numbers[i], numbers[j])\n\
    \            }\n        }\n    }\n    return min_elements\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpk052qudk/tmpk052qudk.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b954a478c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b954a16fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b954a16f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b954a16e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk052qudk                        0x000055bf8d4b2962 <unavailable> + 6498

    5    libc.so.6                          0x00002b954a664460 __libc_start_main +
    245

    6    tmpk052qudk                        0x000055bf8d4b23b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_elements\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpm71hmxk5/tmpm71hmxk5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba977680c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba977377b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba977377988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9773767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm71hmxk5                        0x000055caec560912 <unavailable> + 6418

    5    libc.so.6                          0x00002ba97786c460 __libc_start_main +
    245

    6    tmpm71hmxk5                        0x000055caec560369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmppv7sjs93/tmppv7sjs93.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a8863cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a88333b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a88333988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a883327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppv7sjs93                        0x00005602c027e912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6a88828460 __libc_start_main +
    245

    6    tmppv7sjs93                        0x00005602c027e369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in (i+1)..<numbers.count {\n       \
    \     let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpzw3tdli6/tmpzw3tdli6.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b381095fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3810656b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3810656988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38106557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzw3tdli6                        0x0000557b1b1a5912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3810b4b460 __libc_start_main +
    245

    6    tmpzw3tdli6                        0x0000557b1b1a5369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    assert(numbers.count >= 2)\n    var closest_pair\
    \ = (numbers[0], numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_pair = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpulscar9u/tmpulscar9u.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba16874ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba168445b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba168445988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1684447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpulscar9u                        0x0000558302a2a912 <unavailable> + 6418

    5    libc.so.6                          0x00002ba16893a460 __libc_start_main +
    245

    6    tmpulscar9u                        0x0000558302a2a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest_difference = Double.infinity\n    var\
    \ smallest_difference_elements = (0.0, 0.0)\n    for i in 0..<numbers.count {\n\
    \        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < smallest_difference {\n         \
    \       smallest_difference = difference\n                smallest_difference_elements\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return smallest_difference_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpiqshy5ct/tmpiqshy5ct.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00a0ff8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00a0cefb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00a0cef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00a0cee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiqshy5ct                        0x000055f8dca89962 <unavailable> + 6498

    5    libc.so.6                          0x00002b00a11e4460 __libc_start_main +
    245

    6    tmpiqshy5ct                        0x000055f8dca893b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_difference = Double.infinity\n    var closest_elements\
    \ = (Double.infinity, Double.infinity)\n    for i in 0..<numbers.count {\n   \
    \     for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < min_difference {\n              \
    \  min_difference = difference\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjumozp2h/tmpjumozp2h.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4b74cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4b71c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4b71c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4b71c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjumozp2h                        0x0000555d5a1df962 <unavailable> + 6498

    5    libc.so.6                          0x00002ac4b76b9460 __libc_start_main +
    245

    6    tmpjumozp2h                        0x0000555d5a1df3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in (i+1)..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmph8ln0__4/tmph8ln0__4.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad222f80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad222c77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad222c77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad222c767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph8ln0__4                        0x000055a3541cc912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad22316c460 __libc_start_main +
    245

    6    tmph8ln0__4                        0x000055a3541cc369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    assert(numbers.count >= 2)\n    var min_diff = Double.infinity\n\
    \    var min_diff_elements = (numbers[0], numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff {\n                min_diff =\
    \ diff\n                min_diff_elements = (numbers[i], numbers[j])\n       \
    \     }\n        }\n    }\n    return min_diff_elements\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpnwrt57_t/tmpnwrt57_t.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af351807c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3514feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3514fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3514fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnwrt57_t                        0x0000556e04371962 <unavailable> + 6498

    5    libc.so.6                          0x00002af3519f3460 __libc_start_main +
    245

    6    tmpnwrt57_t                        0x0000556e043713b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_elements\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpm71hmxk5/tmpm71hmxk5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba977680c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba977377b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba977377988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9773767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm71hmxk5                        0x000055caec560912 <unavailable> + 6418

    5    libc.so.6                          0x00002ba97786c460 __libc_start_main +
    245

    6    tmpm71hmxk5                        0x000055caec560369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_difference = Double.infinity\n    var closest_elements\
    \ = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let difference = abs(numbers[i] - numbers[j])\n            if\
    \ difference < min_difference {\n                min_difference = difference\n\
    \                closest_elements = (numbers[i], numbers[j])\n            }\n\
    \        }\n    }\n    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpg0bovgf3/tmpg0bovgf3.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4d5eabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4d5ba2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4d5ba2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4d5ba17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg0bovgf3                        0x000055f4e6617962 <unavailable> + 6498

    5    libc.so.6                          0x00002ba4d6097460 __libc_start_main +
    245

    6    tmpg0bovgf3                        0x000055f4e66173b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_difference = difference\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpanr5cgdh/tmpanr5cgdh.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9c026cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9bff63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9bff63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9bff627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpanr5cgdh                        0x000055f4929fc912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad9c0458460 __libc_start_main +
    245

    6    tmpanr5cgdh                        0x000055f4929fc369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var smallest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < smallest_difference {\n         \
    \       closest_elements = (numbers[i], numbers[j])\n                smallest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmphdb8uvy1/tmphdb8uvy1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ec2e08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ec2affb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ec2aff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ec2afe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphdb8uvy1                        0x000055db3d39f912 <unavailable> + 6418

    5    libc.so.6                          0x00002b4ec2ff4460 __libc_start_main +
    245

    6    tmphdb8uvy1                        0x000055db3d39f369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpbyan9rgp/tmpbyan9rgp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf3eeb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf3ebaab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf3ebaa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf3eba97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbyan9rgp                        0x000055dc728a4962 <unavailable> + 6498

    5    libc.so.6                          0x00002adf3f09f460 __libc_start_main +
    245

    6    tmpbyan9rgp                        0x000055dc728a43b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmppv7sjs93/tmppv7sjs93.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a8863cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a88333b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a88333988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a883327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppv7sjs93                        0x00005602c027e912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6a88828460 __libc_start_main +
    245

    6    tmppv7sjs93                        0x00005602c027e369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_difference = Double.infinity\n    var min_numbers\
    \ = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for j in (i+1)..<numbers.count\
    \ {\n            let difference = abs(numbers[i] - numbers[j])\n            if\
    \ difference < min_difference {\n                min_difference = difference\n\
    \                min_numbers = (numbers[i], numbers[j])\n            }\n     \
    \   }\n    }\n    return min_numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpv0snvccf/tmpv0snvccf.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6363a13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b636370ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b636370a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63637097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0snvccf                        0x0000556a32c7a962 <unavailable> + 6498

    5    libc.so.6                          0x00002b6363bff460 __libc_start_main +
    245

    6    tmpv0snvccf                        0x0000556a32c7a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmppv7sjs93/tmppv7sjs93.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a8863cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a88333b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a88333988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a883327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppv7sjs93                        0x00005602c027e912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6a88828460 __libc_start_main +
    245

    6    tmppv7sjs93                        0x00005602c027e369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_difference = Double.infinity\n    var min_difference_elements\
    \ = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let difference = abs(numbers[i] - numbers[j])\n            if\
    \ difference < min_difference {\n                min_difference = difference\n\
    \                min_difference_elements = (numbers[i], numbers[j])\n        \
    \    }\n        }\n    }\n    return min_difference_elements\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpvm_plp24/tmpvm_plp24.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb0c1d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb0beccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb0becc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb0becb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvm_plp24                        0x0000555bca251962 <unavailable> + 6498

    5    libc.so.6                          0x00002adb0c3c1460 __libc_start_main +
    245

    6    tmpvm_plp24                        0x0000555bca2513b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_elements\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpm71hmxk5/tmpm71hmxk5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba977680c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba977377b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba977377988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9773767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm71hmxk5                        0x000055caec560912 <unavailable> + 6418

    5    libc.so.6                          0x00002ba97786c460 __libc_start_main +
    245

    6    tmpm71hmxk5                        0x000055caec560369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ (i+1)..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp5xad94mb/tmp5xad94mb.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae20c05ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae20bd51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae20bd51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae20bd507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5xad94mb                        0x0000565213489962 <unavailable> + 6498

    5    libc.so.6                          0x00002ae20c246460 __libc_start_main +
    245

    6    tmp5xad94mb                        0x00005652134893b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_difference = abs(numbers[0] - numbers[1])\n   \
    \ for i in 0..<numbers.count {\n        for j in (i+1)..<numbers.count {\n   \
    \         let difference = abs(numbers[i] - numbers[j])\n            if difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_elements = (numbers[i], numbers[j])\n            }\n  \
    \      }\n    }\n    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpp5qzyivp/tmpp5qzyivp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adcadb44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adcad83bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adcad83b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adcad83a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp5qzyivp                        0x00005635a0a31912 <unavailable> + 6418

    5    libc.so.6                          0x00002adcadd30460 __libc_start_main +
    245

    6    tmpp5qzyivp                        0x00005635a0a31369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    precondition(numbers.count >= 2)\n    var closest_pair\
    \ = (numbers[0], numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_pair = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpo9b8zzd6/tmpo9b8zzd6.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69a0f57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69a0c4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69a0c4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69a0c4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9b8zzd6                        0x00005608a8734912 <unavailable> + 6418

    5    libc.so.6                          0x00002b69a1143460 __libc_start_main +
    245

    6    tmpo9b8zzd6                        0x00005608a8734369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n   \
    \ var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_pair = (numbers[i], numbers[j])\n                closest_distance =\
    \ distance\n            }\n        }\n    }\n    return closest_pair\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpk439xtvj/tmpk439xtvj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2482fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad247ff3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad247ff3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad247ff27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk439xtvj                        0x0000558dfbf22912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad2484e8460 __libc_start_main +
    245

    6    tmpk439xtvj                        0x0000558dfbf22369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n   \
    \ var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_pair = (numbers[i], numbers[j])\n                closest_distance =\
    \ distance\n            }\n        }\n    }\n    return closest_pair\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpk439xtvj/tmpk439xtvj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2482fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad247ff3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad247ff3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad247ff27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk439xtvj                        0x0000558dfbf22912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad2484e8460 __libc_start_main +
    245

    6    tmpk439xtvj                        0x0000558dfbf22369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    // TODO: Implement\n    return (0, 0)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp5qtb28x5/tmp5qtb28x5.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acfad544c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acfad23bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acfad23b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acfad23a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5qtb28x5                        0x0000563474aef48e <unavailable> + 5262

    5    libc.so.6                          0x00002acfad730460 __libc_start_main +
    245

    6    tmp5qtb28x5                        0x0000563474aef049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmppv7sjs93/tmppv7sjs93.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a8863cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a88333b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a88333988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a883327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppv7sjs93                        0x00005602c027e912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6a88828460 __libc_start_main +
    245

    6    tmppv7sjs93                        0x00005602c027e369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    assert(numbers.count >= 2)\n    var closest_elements\
    \ = (numbers[0], numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_distance = distance\n        \
    \        closest_elements = (numbers[i], numbers[j])\n            }\n        }\n\
    \    }\n    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpshjbfsy8/tmpshjbfsy8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b668428dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6683f84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6683f84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6683f837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshjbfsy8                        0x0000564c1bdea912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6684479460 __libc_start_main +
    245

    6    tmpshjbfsy8                        0x0000564c1bdea369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_elements\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpm71hmxk5/tmpm71hmxk5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba977680c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba977377b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba977377988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9773767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm71hmxk5                        0x000055caec560912 <unavailable> + 6418

    5    libc.so.6                          0x00002ba97786c460 __libc_start_main +
    245

    6    tmpm71hmxk5                        0x000055caec560369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpbyan9rgp/tmpbyan9rgp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf3eeb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf3ebaab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf3ebaa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf3eba97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbyan9rgp                        0x000055dc728a4962 <unavailable> + 6498

    5    libc.so.6                          0x00002adf3f09f460 __libc_start_main +
    245

    6    tmpbyan9rgp                        0x000055dc728a43b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_difference = Double.infinity\n    var min_elements\
    \ = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let difference = abs(numbers[i] - numbers[j])\n            if\
    \ difference < min_difference {\n                min_difference = difference\n\
    \                min_elements = (numbers[i], numbers[j])\n            }\n    \
    \    }\n    }\n    return min_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmproak7n9l/tmproak7n9l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65b13c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65b10b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65b10b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65b10b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmproak7n9l                        0x0000563d32a23962 <unavailable> + 6498

    5    libc.so.6                          0x00002b65b15ae460 __libc_start_main +
    245

    6    tmproak7n9l                        0x0000563d32a233b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n    var closest_difference\
    \ = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count {\n        for\
    \ j in i+1..<numbers.count {\n            let difference = abs(numbers[i] - numbers[j])\n\
    \            if difference < closest_difference {\n                closest = (numbers[i],\
    \ numbers[j])\n                closest_difference = difference\n            }\n\
    \        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpn7tjq5x6/tmpn7tjq5x6.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab492457c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab49214eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab49214e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab49214d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn7tjq5x6                        0x0000559a2ae1c912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab492643460 __libc_start_main +
    245

    6    tmpn7tjq5x6                        0x0000559a2ae1c369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair\
    \ = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for j in (i+1)..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min_diff {\n                min_diff = diff\n                min_pair = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return min_pair\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp6y0en_q1/tmp6y0en_q1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9defb1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9def814b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9def814988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9def8137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6y0en_q1                        0x00005563e9ab1962 <unavailable> + 6498

    5    libc.so.6                          0x00002b9defd09460 __libc_start_main +
    245

    6    tmp6y0en_q1                        0x00005563e9ab13b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_difference = Double.infinity\n    var min_numbers\
    \ = (Double.infinity, Double.infinity)\n    for i in 0..<numbers.count {\n   \
    \     for j in (i+1)..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < min_difference {\n              \
    \  min_difference = difference\n                min_numbers = (numbers[i], numbers[j])\n\
    \            }\n        }\n    }\n    return min_numbers\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpo86qrtjo/tmpo86qrtjo.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1699383c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b169907ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b169907a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16990797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo86qrtjo                        0x000055fa8d45d962 <unavailable> + 6498

    5    libc.so.6                          0x00002b169956f460 __libc_start_main +
    245

    6    tmpo86qrtjo                        0x000055fa8d45d3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest_difference = Double.infinity\n    var\
    \ closest_elements = (Double.infinity, Double.infinity)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < smallest_difference {\n         \
    \       smallest_difference = difference\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp5kj5rkfm/tmp5kj5rkfm.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a0d9aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a0d6a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a0d6a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a0d6a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5kj5rkfm                        0x0000556926a3e962 <unavailable> + 6498

    5    libc.so.6                          0x00002b1a0db9a460 __libc_start_main +
    245

    6    tmp5kj5rkfm                        0x0000556926a3e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_diff_elements\
    \ = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min_diff {\n                min_diff = diff\n                min_diff_elements\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return min_diff_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpogtwd4z1/tmpogtwd4z1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2731c4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2731946b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2731946988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27319457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpogtwd4z1                        0x000055fb9db5d962 <unavailable> + 6498

    5    libc.so.6                          0x00002b2731e3b460 __libc_start_main +
    245

    6    tmpogtwd4z1                        0x000055fb9db5d3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_pair = (numbers[i], numbers[j])\n               \
    \ closest_distance = distance\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpzh36te5d/tmpzh36te5d.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91abbb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91ab8afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91ab8af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91ab8ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzh36te5d                        0x00005640809d7912 <unavailable> + 6418

    5    libc.so.6                          0x00002b91abda4460 __libc_start_main +
    245

    6    tmpzh36te5d                        0x00005640809d7369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_distance = Double.infinity\n    var closest_elements\
    \ = (Double.infinity, Double.infinity)\n    for i in 0..<numbers.count {\n   \
    \     for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < min_distance {\n                min_distance\
    \ = distance\n                closest_elements = (numbers[i], numbers[j])\n  \
    \          }\n        }\n    }\n    return closest_elements\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp0i8ci59w/tmp0i8ci59w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4faef1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4faec12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4faec12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4faec117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0i8ci59w                        0x0000559ab9600962 <unavailable> + 6498

    5    libc.so.6                          0x00002b4faf107460 __libc_start_main +
    245

    6    tmp0i8ci59w                        0x0000559ab96003b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmppv7sjs93/tmppv7sjs93.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a8863cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a88333b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a88333988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a883327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppv7sjs93                        0x00005602c027e912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6a88828460 __libc_start_main +
    245

    6    tmppv7sjs93                        0x00005602c027e369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmppv7sjs93/tmppv7sjs93.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a8863cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a88333b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a88333988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a883327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppv7sjs93                        0x00005602c027e912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6a88828460 __libc_start_main +
    245

    6    tmppv7sjs93                        0x00005602c027e369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_difference = Double.infinity\n    var\
    \ closest_elements = (Double.infinity, Double.infinity)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_difference = difference\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp2qttqc0n/tmp2qttqc0n.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2386b5fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2386856b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2386856988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23868557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2qttqc0n                        0x00005613e8fa7962 <unavailable> + 6498

    5    libc.so.6                          0x00002b2386d4b460 __libc_start_main +
    245

    6    tmp2qttqc0n                        0x00005613e8fa73b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_difference = difference\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpanr5cgdh/tmpanr5cgdh.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9c026cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9bff63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9bff63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9bff627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpanr5cgdh                        0x000055f4929fc912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad9c0458460 __libc_start_main +
    245

    6    tmpanr5cgdh                        0x000055f4929fc369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpbyan9rgp/tmpbyan9rgp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf3eeb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf3ebaab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf3ebaa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf3eba97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbyan9rgp                        0x000055dc728a4962 <unavailable> + 6498

    5    libc.so.6                          0x00002adf3f09f460 __libc_start_main +
    245

    6    tmpbyan9rgp                        0x000055dc728a43b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_difference = Double.infinity\n    var closest_elements\
    \ = (Double.infinity, Double.infinity)\n    for i in 0..<numbers.count {\n   \
    \     for j in (i+1)..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < min_difference {\n              \
    \  min_difference = difference\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpw0kwpkcv/tmpw0kwpkcv.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd3c027c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd3bd1eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd3bd1e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd3bd1d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw0kwpkcv                        0x00005617e4d5e962 <unavailable> + 6498

    5    libc.so.6                          0x00002afd3c213460 __libc_start_main +
    245

    6    tmpw0kwpkcv                        0x00005617e4d5e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n   \
    \ var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_pair = (numbers[i], numbers[j])\n                closest_distance =\
    \ distance\n            }\n        }\n    }\n    return closest_pair\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpk439xtvj/tmpk439xtvj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2482fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad247ff3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad247ff3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad247ff27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk439xtvj                        0x0000558dfbf22912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad2484e8460 __libc_start_main +
    245

    6    tmpk439xtvj                        0x0000558dfbf22369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmppv7sjs93/tmppv7sjs93.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a8863cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a88333b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a88333988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a883327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppv7sjs93                        0x00005602c027e912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6a88828460 __libc_start_main +
    245

    6    tmppv7sjs93                        0x00005602c027e369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpbyan9rgp/tmpbyan9rgp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf3eeb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf3ebaab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf3ebaa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf3eba97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbyan9rgp                        0x000055dc728a4962 <unavailable> + 6498

    5    libc.so.6                          0x00002adf3f09f460 __libc_start_main +
    245

    6    tmpbyan9rgp                        0x000055dc728a43b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpbyan9rgp/tmpbyan9rgp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf3eeb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf3ebaab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf3ebaa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf3eba97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbyan9rgp                        0x000055dc728a4962 <unavailable> + 6498

    5    libc.so.6                          0x00002adf3f09f460 __libc_start_main +
    245

    6    tmpbyan9rgp                        0x000055dc728a43b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n   \
    \ var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_pair = (numbers[i], numbers[j])\n                closest_distance =\
    \ distance\n            }\n        }\n    }\n    return closest_pair\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpk439xtvj/tmpk439xtvj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2482fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad247ff3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad247ff3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad247ff27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk439xtvj                        0x0000558dfbf22912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad2484e8460 __libc_start_main +
    245

    6    tmpk439xtvj                        0x0000558dfbf22369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n   \
    \ var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_pair = (numbers[i], numbers[j])\n                closest_distance =\
    \ distance\n            }\n        }\n    }\n    return closest_pair\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpk439xtvj/tmpk439xtvj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2482fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad247ff3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad247ff3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad247ff27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk439xtvj                        0x0000558dfbf22912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad2484e8460 __libc_start_main +
    245

    6    tmpk439xtvj                        0x0000558dfbf22369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_difference = abs(numbers[0] - numbers[1])\n   \
    \ for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n     \
    \       let difference = abs(numbers[i] - numbers[j])\n            if difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_elements = (numbers[i], numbers[j])\n            }\n  \
    \      }\n    }\n    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpql3hi9i2/tmpql3hi9i2.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3224789c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3224480b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3224480988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b322447f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpql3hi9i2                        0x0000563899000912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3224975460 __libc_start_main +
    245

    6    tmpql3hi9i2                        0x0000563899000369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_difference = Double.infinity\n    var min_difference_elements\
    \ = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let difference = abs(numbers[i] - numbers[j])\n            if\
    \ difference < min_difference {\n                min_difference = difference\n\
    \                min_difference_elements = (numbers[i], numbers[j])\n        \
    \    }\n        }\n    }\n    return min_difference_elements\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpvm_plp24/tmpvm_plp24.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb0c1d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb0beccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb0becc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb0becb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvm_plp24                        0x0000555bca251962 <unavailable> + 6498

    5    libc.so.6                          0x00002adb0c3c1460 __libc_start_main +
    245

    6    tmpvm_plp24                        0x0000555bca2513b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n   \
    \ var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_pair = (numbers[i], numbers[j])\n                closest_distance =\
    \ distance\n            }\n        }\n    }\n    return closest_pair\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpk439xtvj/tmpk439xtvj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2482fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad247ff3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad247ff3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad247ff27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk439xtvj                        0x0000558dfbf22912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad2484e8460 __libc_start_main +
    245

    6    tmpk439xtvj                        0x0000558dfbf22369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_distance = Double.infinity\n    var closest_elements\
    \ = (Double.infinity, Double.infinity)\n    for i in 0..<numbers.count {\n   \
    \     for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < min_distance {\n                min_distance\
    \ = distance\n                closest_elements = (numbers[i], numbers[j])\n  \
    \          }\n        }\n    }\n    return closest_elements\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp0i8ci59w/tmp0i8ci59w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4faef1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4faec12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4faec12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4faec117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0i8ci59w                        0x0000559ab9600962 <unavailable> + 6498

    5    libc.so.6                          0x00002b4faf107460 __libc_start_main +
    245

    6    tmp0i8ci59w                        0x0000559ab96003b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_difference = Double.infinity\n    var min_pair\
    \ = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let difference = abs(numbers[i] - numbers[j])\n            if\
    \ difference < min_difference {\n                min_difference = difference\n\
    \                min_pair = (numbers[i], numbers[j])\n            }\n        }\n\
    \    }\n    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpn9_0vlvf/tmpn9_0vlvf.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85dc4e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85dc1d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85dc1d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85dc1d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn9_0vlvf                        0x0000556f6da73962 <unavailable> + 6498

    5    libc.so.6                          0x00002b85dc6cc460 __libc_start_main +
    245

    6    tmpn9_0vlvf                        0x0000556f6da733b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_difference = abs(numbers[0] - numbers[1])\n   \
    \ for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n     \
    \       let difference = abs(numbers[i] - numbers[j])\n            if difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_elements = (numbers[i], numbers[j])\n            }\n  \
    \      }\n    }\n    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpql3hi9i2/tmpql3hi9i2.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3224789c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3224480b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3224480988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b322447f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpql3hi9i2                        0x0000563899000912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3224975460 __libc_start_main +
    245

    6    tmpql3hi9i2                        0x0000563899000369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_difference = Double.infinity\n    var min_numbers\
    \ = (Double.infinity, Double.infinity)\n    for i in 0..<numbers.count {\n   \
    \     for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < min_difference {\n              \
    \  min_difference = difference\n                min_numbers = (numbers[i], numbers[j])\n\
    \            }\n        }\n    }\n    return min_numbers\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpe58h7erm/tmpe58h7erm.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7970e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac796ddcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac796ddc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac796ddb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe58h7erm                        0x0000561ca44e4962 <unavailable> + 6498

    5    libc.so.6                          0x00002ac7972d1460 __libc_start_main +
    245

    6    tmpe58h7erm                        0x0000561ca44e43b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min = Double.infinity\n    var min_i = 0\n  \
    \  var min_j = 0\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min {\n                min = diff\n                min_i = i\n           \
    \     min_j = j\n            }\n        }\n    }\n    return (numbers[min_i],\
    \ numbers[min_j])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpmiqgozyk/tmpmiqgozyk.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab749562c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab749259b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab749259988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7492587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmiqgozyk                        0x000055ffd789a962 <unavailable> + 6498

    5    libc.so.6                          0x00002ab74974e460 __libc_start_main +
    245

    6    tmpmiqgozyk                        0x000055ffd789a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpj8wq6jdh/tmpj8wq6jdh.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab87a3a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab87a099b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab87a099988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab87a0987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj8wq6jdh                        0x000055ea8a28d912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab87a58e460 __libc_start_main +
    245

    6    tmpj8wq6jdh                        0x000055ea8a28d369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_distance = Double.infinity\n    var min_distance_elements\
    \ = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < min_distance {\n                min_distance = distance\n                min_distance_elements\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return min_distance_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpctxclrk1/tmpctxclrk1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002addda2c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002addd9fbfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002addd9fbf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002addd9fbe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctxclrk1                        0x00005569ea105962 <unavailable> + 6498

    5    libc.so.6                          0x00002addda4b4460 __libc_start_main +
    245

    6    tmpctxclrk1                        0x00005569ea1053b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_difference = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ (i+1)..<numbers.count {\n            let difference = abs(numbers[i] - numbers[j])\n\
    \            if difference < min_difference {\n                min_difference\
    \ = difference\n                min_pair = (numbers[i], numbers[j])\n        \
    \    }\n        }\n    }\n    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpnm8p3v8j/tmpnm8p3v8j.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5d286fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5d2566b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5d2566988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5d25657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnm8p3v8j                        0x000055e172cff962 <unavailable> + 6498

    5    libc.so.6                          0x00002ae5d2a5b460 __libc_start_main +
    245

    6    tmpnm8p3v8j                        0x000055e172cff3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_difference = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let difference = abs(numbers[i] - numbers[j])\n\
    \            if difference < min_difference {\n                min_difference\
    \ = difference\n                min_pair = (numbers[i], numbers[j])\n        \
    \    }\n        }\n    }\n    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp2hvl7jk0/tmp2hvl7jk0.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b603c4dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b603c1d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b603c1d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b603c1d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2hvl7jk0                        0x0000558577740962 <unavailable> + 6498

    5    libc.so.6                          0x00002b603c6c7460 __libc_start_main +
    245

    6    tmp2hvl7jk0                        0x00005585777403b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_pair = (numbers[i], numbers[j])\n               \
    \ closest_distance = distance\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpzh36te5d/tmpzh36te5d.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91abbb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91ab8afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91ab8af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91ab8ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzh36te5d                        0x00005640809d7912 <unavailable> + 6418

    5    libc.so.6                          0x00002b91abda4460 __libc_start_main +
    245

    6    tmpzh36te5d                        0x00005640809d7369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    assert(numbers.count >= 2)\n    var closest_pair\
    \ = (numbers[0], numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_pair = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpulscar9u/tmpulscar9u.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba16874ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba168445b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba168445988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1684447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpulscar9u                        0x0000558302a2a912 <unavailable> + 6418

    5    libc.so.6                          0x00002ba16893a460 __libc_start_main +
    245

    6    tmpulscar9u                        0x0000558302a2a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpbyan9rgp/tmpbyan9rgp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf3eeb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf3ebaab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf3ebaa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf3eba97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbyan9rgp                        0x000055dc728a4962 <unavailable> + 6498

    5    libc.so.6                          0x00002adf3f09f460 __libc_start_main +
    245

    6    tmpbyan9rgp                        0x000055dc728a43b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_elements\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpm71hmxk5/tmpm71hmxk5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba977680c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba977377b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba977377988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9773767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm71hmxk5                        0x000055caec560912 <unavailable> + 6418

    5    libc.so.6                          0x00002ba97786c460 __libc_start_main +
    245

    6    tmpm71hmxk5                        0x000055caec560369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n   \
    \ var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_pair = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest_pair\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpgtct5y61/tmpgtct5y61.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba936142c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba935e39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba935e39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba935e387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtct5y61                        0x0000555d1c0bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002ba93632e460 __libc_start_main +
    245

    6    tmpgtct5y61                        0x0000555d1c0bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_pair = (numbers[i], numbers[j])\n               \
    \ closest_distance = distance\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpzh36te5d/tmpzh36te5d.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91abbb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91ab8afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91ab8af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91ab8ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzh36te5d                        0x00005640809d7912 <unavailable> + 6418

    5    libc.so.6                          0x00002b91abda4460 __libc_start_main +
    245

    6    tmpzh36te5d                        0x00005640809d7369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_difference = Double.infinity\n    var min_elements\
    \ = (Double.infinity, Double.infinity)\n    for i in 0..<numbers.count {\n   \
    \     for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < min_difference {\n              \
    \  min_difference = difference\n                min_elements = (numbers[i], numbers[j])\n\
    \            }\n        }\n    }\n    return min_elements\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpn7ttma0o/tmpn7ttma0o.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5797d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5794cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5794cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5794ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn7ttma0o                        0x0000561d14b13962 <unavailable> + 6498

    5    libc.so.6                          0x00002af5799c4460 __libc_start_main +
    245

    6    tmpn7ttma0o                        0x0000561d14b133b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_pair = (numbers[i], numbers[j])\n               \
    \ closest_distance = distance\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpzh36te5d/tmpzh36te5d.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91abbb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91ab8afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91ab8af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91ab8ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzh36te5d                        0x00005640809d7912 <unavailable> + 6418

    5    libc.so.6                          0x00002b91abda4460 __libc_start_main +
    245

    6    tmpzh36te5d                        0x00005640809d7369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    assert(numbers.count >= 2)\n    var closest_distance\
    \ = Double.infinity\n    var closest_elements = (numbers[0], numbers[1])\n   \
    \ for i in 0..<numbers.count {\n        for j in (i+1)..<numbers.count {\n   \
    \         let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_distance = distance\n        \
    \        closest_elements = (numbers[i], numbers[j])\n            }\n        }\n\
    \    }\n    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpy4xrgl7e/tmpy4xrgl7e.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b936cbbac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b936c8b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b936c8b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b936c8b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy4xrgl7e                        0x000056201d94a962 <unavailable> + 6498

    5    libc.so.6                          0x00002b936cda6460 __libc_start_main +
    245

    6    tmpy4xrgl7e                        0x000056201d94a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n   \
    \ var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_pair = (numbers[i], numbers[j])\n                closest_distance =\
    \ distance\n            }\n        }\n    }\n    return closest_pair\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpk439xtvj/tmpk439xtvj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2482fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad247ff3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad247ff3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad247ff27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk439xtvj                        0x0000558dfbf22912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad2484e8460 __libc_start_main +
    245

    6    tmpk439xtvj                        0x0000558dfbf22369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in (i+1)..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpw5mlfxo7/tmpw5mlfxo7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab282579c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab282270b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab282270988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab28226f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5mlfxo7                        0x0000560a06ac9912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab282765460 __libc_start_main +
    245

    6    tmpw5mlfxo7                        0x0000560a06ac9369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpj8wq6jdh/tmpj8wq6jdh.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab87a3a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab87a099b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab87a099988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab87a0987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj8wq6jdh                        0x000055ea8a28d912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab87a58e460 __libc_start_main +
    245

    6    tmpj8wq6jdh                        0x000055ea8a28d369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_numbers: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_numbers = (numbers[i], numbers[j])\n            \
    \    closest_distance = distance\n            }\n        }\n    }\n    return\
    \ closest_numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpxprvlzd0/tmpxprvlzd0.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7047252c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7046f49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7046f49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7046f487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxprvlzd0                        0x0000557b7a769912 <unavailable> + 6418

    5    libc.so.6                          0x00002b704743e460 __libc_start_main +
    245

    6    tmpxprvlzd0                        0x0000557b7a769369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpbyan9rgp/tmpbyan9rgp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf3eeb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf3ebaab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf3ebaa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf3eba97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbyan9rgp                        0x000055dc728a4962 <unavailable> + 6498

    5    libc.so.6                          0x00002adf3f09f460 __libc_start_main +
    245

    6    tmpbyan9rgp                        0x000055dc728a43b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpbyan9rgp/tmpbyan9rgp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf3eeb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf3ebaab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf3ebaa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf3eba97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbyan9rgp                        0x000055dc728a4962 <unavailable> + 6498

    5    libc.so.6                          0x00002adf3f09f460 __libc_start_main +
    245

    6    tmpbyan9rgp                        0x000055dc728a43b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_pair = (numbers[i], numbers[j])\n               \
    \ closest_distance = distance\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpzh36te5d/tmpzh36te5d.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91abbb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91ab8afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91ab8af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91ab8ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzh36te5d                        0x00005640809d7912 <unavailable> + 6418

    5    libc.so.6                          0x00002b91abda4460 __libc_start_main +
    245

    6    tmpzh36te5d                        0x00005640809d7369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair\
    \ = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min_diff {\n                min_diff = diff\n                min_pair = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return min_pair\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpd0o7vo2t/tmpd0o7vo2t.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3023cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3020c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3020c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3020c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd0o7vo2t                        0x000055f9b9dd6962 <unavailable> + 6498

    5    libc.so.6                          0x00002ab3025b6460 __libc_start_main +
    245

    6    tmpd0o7vo2t                        0x000055f9b9dd63b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in (i+1)..<numbers.count {\n       \
    \     let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpzw3tdli6/tmpzw3tdli6.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b381095fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3810656b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3810656988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38106557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzw3tdli6                        0x0000557b1b1a5912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3810b4b460 __libc_start_main +
    245

    6    tmpzw3tdli6                        0x0000557b1b1a5369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n   \
    \ var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_pair = (numbers[i], numbers[j])\n                closest_distance =\
    \ distance\n            }\n        }\n    }\n    return closest_pair\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpk439xtvj/tmpk439xtvj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2482fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad247ff3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad247ff3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad247ff27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk439xtvj                        0x0000558dfbf22912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad2484e8460 __libc_start_main +
    245

    6    tmpk439xtvj                        0x0000558dfbf22369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_distance = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let distance = abs(numbers[i] - numbers[j])\n\
    \            if distance < min_distance {\n                min_distance = distance\n\
    \                min_pair = (numbers[i], numbers[j])\n            }\n        }\n\
    \    }\n    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpg9tnrynk/tmpg9tnrynk.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af17d413c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af17d10ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af17d10a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af17d1097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg9tnrynk                        0x0000560837011962 <unavailable> + 6498

    5    libc.so.6                          0x00002af17d5ff460 __libc_start_main +
    245

    6    tmpg9tnrynk                        0x00005608370113b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_distance: Double = Double.infinity\n    var\
    \ min_distance_elements: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < min_distance {\n                min_distance\
    \ = distance\n                min_distance_elements = (numbers[i], numbers[j])\n\
    \            }\n        }\n    }\n    return min_distance_elements\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpp27egph1/tmpp27egph1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03cb9b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03cb6a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03cb6a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03cb6a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp27egph1                        0x00005652234bd962 <unavailable> + 6498

    5    libc.so.6                          0x00002b03cbb9e460 __libc_start_main +
    245

    6    tmpp27egph1                        0x00005652234bd3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_pair = (numbers[i], numbers[j])\n               \
    \ closest_distance = distance\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpzh36te5d/tmpzh36te5d.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91abbb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91ab8afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91ab8af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91ab8ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzh36te5d                        0x00005640809d7912 <unavailable> + 6418

    5    libc.so.6                          0x00002b91abda4460 __libc_start_main +
    245

    6    tmpzh36te5d                        0x00005640809d7369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair\
    \ = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min_diff {\n                min_diff = diff\n                min_pair = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return min_pair\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpd0o7vo2t/tmpd0o7vo2t.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3023cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3020c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3020c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3020c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd0o7vo2t                        0x000055f9b9dd6962 <unavailable> + 6498

    5    libc.so.6                          0x00002ab3025b6460 __libc_start_main +
    245

    6    tmpd0o7vo2t                        0x000055f9b9dd63b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair\
    \ = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min_diff {\n                min_diff = diff\n                min_pair = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return min_pair\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpd0o7vo2t/tmpd0o7vo2t.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3023cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3020c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3020c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3020c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd0o7vo2t                        0x000055f9b9dd6962 <unavailable> + 6498

    5    libc.so.6                          0x00002ab3025b6460 __libc_start_main +
    245

    6    tmpd0o7vo2t                        0x000055f9b9dd63b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n   \
    \ var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in (i+1)..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_pair = (numbers[i], numbers[j])\n                closest_distance =\
    \ distance\n            }\n        }\n    }\n    return closest_pair\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpzu6a9yoi/tmpzu6a9yoi.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5733b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5730afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5730af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5730ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzu6a9yoi                        0x000055fa18724912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab5735a4460 __libc_start_main +
    245

    6    tmpzu6a9yoi                        0x000055fa18724369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_difference = Double.infinity\n    var min_difference_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let difference = abs(numbers[i] - numbers[j])\n\
    \            if difference < min_difference {\n                min_difference\
    \ = difference\n                min_difference_pair = (numbers[i], numbers[j])\n\
    \            }\n        }\n    }\n    return min_difference_pair\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmph1u2ffcf/tmph1u2ffcf.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae56b4e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae56b1dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae56b1df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae56b1de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph1u2ffcf                        0x000055943fd2b962 <unavailable> + 6498

    5    libc.so.6                          0x00002ae56b6d4460 __libc_start_main +
    245

    6    tmph1u2ffcf                        0x000055943fd2b3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmppv7sjs93/tmppv7sjs93.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a8863cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a88333b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a88333988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a883327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppv7sjs93                        0x00005602c027e912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6a88828460 __libc_start_main +
    245

    6    tmppv7sjs93                        0x00005602c027e369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n   \
    \ var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_pair = (numbers[i], numbers[j])\n                closest_distance =\
    \ distance\n            }\n        }\n    }\n    return closest_pair\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpk439xtvj/tmpk439xtvj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2482fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad247ff3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad247ff3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad247ff27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk439xtvj                        0x0000558dfbf22912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad2484e8460 __libc_start_main +
    245

    6    tmpk439xtvj                        0x0000558dfbf22369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n   \
    \ var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_pair = (numbers[i], numbers[j])\n                closest_distance =\
    \ distance\n            }\n        }\n    }\n    return closest_pair\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpk439xtvj/tmpk439xtvj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2482fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad247ff3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad247ff3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad247ff27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk439xtvj                        0x0000558dfbf22912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad2484e8460 __libc_start_main +
    245

    6    tmpk439xtvj                        0x0000558dfbf22369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n   \
    \ var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_pair = (numbers[i], numbers[j])\n                closest_distance =\
    \ distance\n            }\n        }\n    }\n    return closest_pair\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpk439xtvj/tmpk439xtvj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2482fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad247ff3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad247ff3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad247ff27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk439xtvj                        0x0000558dfbf22912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad2484e8460 __libc_start_main +
    245

    6    tmpk439xtvj                        0x0000558dfbf22369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpbyan9rgp/tmpbyan9rgp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf3eeb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf3ebaab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf3ebaa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf3eba97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbyan9rgp                        0x000055dc728a4962 <unavailable> + 6498

    5    libc.so.6                          0x00002adf3f09f460 __libc_start_main +
    245

    6    tmpbyan9rgp                        0x000055dc728a43b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n   \
    \ var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_pair = (numbers[i], numbers[j])\n                closest_distance =\
    \ distance\n            }\n        }\n    }\n    return closest_pair\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpk439xtvj/tmpk439xtvj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2482fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad247ff3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad247ff3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad247ff27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk439xtvj                        0x0000558dfbf22912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad2484e8460 __libc_start_main +
    245

    6    tmpk439xtvj                        0x0000558dfbf22369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair\
    \ = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min_diff {\n                min_diff = diff\n                min_pair = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return min_pair\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpd0o7vo2t/tmpd0o7vo2t.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3023cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3020c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3020c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3020c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd0o7vo2t                        0x000055f9b9dd6962 <unavailable> + 6498

    5    libc.so.6                          0x00002ab3025b6460 __libc_start_main +
    245

    6    tmpd0o7vo2t                        0x000055f9b9dd63b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmppv7sjs93/tmppv7sjs93.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a8863cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a88333b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a88333988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a883327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppv7sjs93                        0x00005602c027e912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6a88828460 __libc_start_main +
    245

    6    tmppv7sjs93                        0x00005602c027e369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n   \
    \ var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_pair = (numbers[i], numbers[j])\n                closest_distance =\
    \ distance\n            }\n        }\n    }\n    return closest_pair\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpk439xtvj/tmpk439xtvj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2482fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad247ff3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad247ff3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad247ff27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk439xtvj                        0x0000558dfbf22912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad2484e8460 __libc_start_main +
    245

    6    tmpk439xtvj                        0x0000558dfbf22369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_pair = (numbers[i], numbers[j])\n               \
    \ closest_distance = distance\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpzh36te5d/tmpzh36te5d.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91abbb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91ab8afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91ab8af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91ab8ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzh36te5d                        0x00005640809d7912 <unavailable> + 6418

    5    libc.so.6                          0x00002b91abda4460 __libc_start_main +
    245

    6    tmpzh36te5d                        0x00005640809d7369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_difference = difference\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpanr5cgdh/tmpanr5cgdh.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9c026cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9bff63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9bff63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9bff627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpanr5cgdh                        0x000055f4929fc912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad9c0458460 __libc_start_main +
    245

    6    tmpanr5cgdh                        0x000055f4929fc369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: 0
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    let sorted_numbers = numbers.sorted()\n    var closest_distance\
    \ = Double.infinity\n    var closest_elements = (Double.infinity, Double.infinity)\n\
    \    for i in 0..<sorted_numbers.count - 1 {\n        let distance = sorted_numbers[i\
    \ + 1] - sorted_numbers[i]\n        if distance < closest_distance {\n       \
    \     closest_distance = distance\n            closest_elements = (sorted_numbers[i],\
    \ sorted_numbers[i + 1])\n        }\n    }\n    return closest_elements\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n   \
    \ var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_pair = (numbers[i], numbers[j])\n                closest_distance =\
    \ distance\n            }\n        }\n    }\n    return closest_pair\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpk439xtvj/tmpk439xtvj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2482fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad247ff3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad247ff3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad247ff27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk439xtvj                        0x0000558dfbf22912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad2484e8460 __libc_start_main +
    245

    6    tmpk439xtvj                        0x0000558dfbf22369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_diff_numbers\
    \ = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min_diff {\n                min_diff = diff\n                min_diff_numbers\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return min_diff_numbers\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpd35g8ea5/tmpd35g8ea5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa1c65ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa1c351b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa1c351988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa1c3507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd35g8ea5                        0x0000559ade4af962 <unavailable> + 6498

    5    libc.so.6                          0x00002afa1c846460 __libc_start_main +
    245

    6    tmpd35g8ea5                        0x0000559ade4af3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in (i+1)..<numbers.count {\n       \
    \     let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpzw3tdli6/tmpzw3tdli6.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b381095fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3810656b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3810656988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38106557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzw3tdli6                        0x0000557b1b1a5912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3810b4b460 __libc_start_main +
    245

    6    tmpzw3tdli6                        0x0000557b1b1a5369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmppv7sjs93/tmppv7sjs93.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a8863cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a88333b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a88333988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a883327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppv7sjs93                        0x00005602c027e912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6a88828460 __libc_start_main +
    245

    6    tmppv7sjs93                        0x00005602c027e369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n   \
    \ var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_pair = (numbers[i], numbers[j])\n                closest_distance =\
    \ distance\n            }\n        }\n    }\n    return closest_pair\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpk439xtvj/tmpk439xtvj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2482fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad247ff3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad247ff3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad247ff27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk439xtvj                        0x0000558dfbf22912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad2484e8460 __libc_start_main +
    245

    6    tmpk439xtvj                        0x0000558dfbf22369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n   \
    \ var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_pair = (numbers[i], numbers[j])\n                closest_distance =\
    \ distance\n            }\n        }\n    }\n    return closest_pair\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpk439xtvj/tmpk439xtvj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2482fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad247ff3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad247ff3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad247ff27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk439xtvj                        0x0000558dfbf22912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad2484e8460 __libc_start_main +
    245

    6    tmpk439xtvj                        0x0000558dfbf22369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_difference = difference\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpanr5cgdh/tmpanr5cgdh.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9c026cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9bff63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9bff63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9bff627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpanr5cgdh                        0x000055f4929fc912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad9c0458460 __libc_start_main +
    245

    6    tmpanr5cgdh                        0x000055f4929fc369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013599
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcronhk3w/tmpcronhk3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b076e471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b076e168b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b076e168988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076e1677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcronhk3w                        0x000055ba040ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002b076e65d460 __libc_start_main +
    245

    6    tmpcronhk3w                        0x000055ba040ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013598
