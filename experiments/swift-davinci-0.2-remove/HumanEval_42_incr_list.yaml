name: HumanEval_42_incr_list
language: swift
prompt: "\n/// Return list with elements incremented by 1.\nfunc incr_list(l: [Int])\
  \ -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(incr_list(l: [] as [Int]) == [] as [Int])\n\
  assert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l: [5, 2, 5, 2, 3,\
  \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
completions: ['    return l.map { $0 + 1 }', '    return map(l, { x in x + 1 })',
  '    return l.map { $0 + 1 }', '    return map(l, {x in x + 1})', '    return l.map
    { $0 + 1 }', '    return l.map({ x in x + 1 })', '    return l.map { $0 + 1 }',
  '    return l.map { $0 + 1 }', '    return map(l, {x in x + 1})', '    return l.map
    { $0 + 1 }', '    return map(l, { x in x + 1 })', '    return map(l) { $0 + 1
    }', '    return l.map { $0 + 1 }', "    var result = [Int]()\n    for i in l {\n\
    \        result.append(i + 1)\n    }\n    return result", '    return l.map {
    $0 + 1 }', '    return map(l, { x in x + 1 })', '    return map(l, { x in x +
    1 })', '    return l.map { $0 + 1 }', '  return map(l, { x in x + 1 })', '    return
    map(l, { x in x + 1 })', '    return l.map { $0 + 1 }', '    return map(l, { $0
    + 1 })', '    return l.map { $0 + 1 }', '    return l.map { $0 + 1 }', '    return
    l.map { $0 + 1 }', '    return map(l, { x in x + 1 })', '    return l.map { $0
    + 1 }', '    return l.map { $0 + 1 }', '    return map(l, { x in x + 1 })', '    return
    l.map { $0 + 1 }', "    var result: [Int] = []\n    for i in l {\n        result.append(i\
    \ + 1)\n    }\n    return result", '    return l.map { $0 + 1 }', "    var result\
    \ = [Int]()\n    for i in l {\n        result.append(i + 1)\n    }\n    return\
    \ result", "    var res = [Int]()\n    for x in l {\n        res.append(x + 1)\n\
    \    }\n    return res", '    return l.map({ $0 + 1 })', '    return l.map { $0
    + 1 }', '    return l.map { $0 + 1 }', "    var result = [Int]()\n    for i in\
    \ l {\n        result.append(i + 1)\n    }\n    return result", '    return map(l,
    { x in x + 1 })', '    return l.map({ $0 + 1 })', '    return map(l, { x in x
    + 1 })', '    return map(l, { $0 + 1 })', '    return l.map { $0 + 1 }', "   \
    \ var res = [Int]()\n    for i in l {\n        res.append(i + 1)\n    }\n    return\
    \ res", '    return l.map { $0 + 1 }', '    return l.map { $0 + 1 }', '    return
    l.map { $0 + 1 }', '    return l.map { $0 + 1 }', '    return l.map { $0 + 1 }',
  '    return map(l, { x in x + 1 })', '    return l.map { $0 + 1 }', '    return
    l.map { $0 + 1 }', "    var result = [Int]()\n    for i in l {\n        result.append(i\
    \ + 1)\n    }\n    return result", "    var result: [Int] = []\n    for i in l\
    \ {\n        result.append(i + 1)\n    }\n    return result", '    return l.map
    { $0 + 1 }', '    return l.map { $0 + 1 }', '    return map(l, { $0 + 1 })', '    return
    l.map({ $0 + 1 })', "  if l.isEmpty {\n    return []\n  } else {\n    return [l[0]\
    \ + 1] + incr_list(l[1..<l.count])\n  }", '    return l.map { $0 + 1 }', '    return
    map(l, { x in x + 1 })', '    return l.map { $0 + 1 }', '    return map(l, { x
    in x + 1 })', '    return l.map { $0 + 1 }', '    return map(l, {x in x + 1})',
  '    return l.map { $0 + 1 }', '    return map(l, {x in x + 1})', "    var result:\
    \ [Int] = []\n    for x in l {\n        result.append(x + 1)\n    }\n    return\
    \ result", '    return l.map { $0 + 1 }', '    return map(l, { x in x + 1 })',
  '    return map(l, { x in x + 1 })', '    return l.map { $0 + 1 }', "    var result\
    \ = [Int]()\n    for i in l {\n        result.append(i + 1)\n    }\n    return\
    \ result", '    return map(l, { x in x + 1 })', "    var ret = [Int]()\n    for\
    \ i in l {\n        ret.append(i + 1)\n    }\n    return ret", "    var result:\
    \ [Int] = []\n    for i in l {\n        result.append(i + 1)\n    }\n    return\
    \ result", '    return l.map { $0 + 1 }', '    return l.map { $0 + 1 }', "   \
    \ var result = [Int]()\n    for i in l {\n        result.append(i + 1)\n    }\n\
    \    return result", '    return l.map { $0 + 1 }', '    return l.map { $0 + 1
    }', "    var result: [Int] = []\n    for i in l {\n        result.append(i + 1)\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in l {\n    \
    \    result.append(i + 1)\n    }\n    return result", '    return map(l, {x in
    x + 1})', "    var result: [Int] = []\n    for i in l {\n        result.append(i\
    \ + 1)\n    }\n    return result", '    return l.map { $0 + 1 }', '    return
    l.map { $0 + 1 }', '    return map(l, { $0 + 1 })', '    return map(l, { x in
    x + 1 })', '    return map(l, {x in x + 1})', '    return map(l, { x in x + 1
    })', '    return map(l, { x in x + 1 })', '    return map(l, { x in x + 1 })',
  '    return l.map { $0 + 1 }', '    return map(l, { x in x + 1 })', '    return
    l.map { $0 + 1 }', '    return l.map { $0 + 1 }', "    var result: [Int] = []\n\
    \    for i in l {\n        result.append(i + 1)\n    }\n    return result", '    return
    l.map { $0 + 1 }', '    return map(l, { x in x + 1 })', "    var result: [Int]\
    \ = []\n    for i in l {\n        result.append(i + 1)\n    }\n    return result",
  "    var result: [Int] = []\n    for i in l {\n        result.append(i + 1)\n  \
    \  }\n    return result", '    return map(l, { x in x + 1 })', '    return l.map
    { $0 + 1 }', "    var result = [Int]()\n    for i in l {\n        result.append(i\
    \ + 1)\n    }\n    return result", "    var result: [Int] = []\n    for x in l\
    \ {\n        result.append(x + 1)\n    }\n    return result", '    return map(l,
    { x in x + 1 })', '    return map(l, { $0 + 1 })', '    return map(l, { x in x
    + 1 })', '    return map(l, { x in x + 1 })', '    return l.map { $0 + 1 }', '  return
    map(l, { x in x + 1 })', '    return map(l, { x in x + 1 })', '    return l.map
    { $0 + 1 }', '    return l.map { $0 + 1 }', '    return l.map { $0 + 1 }', '    return
    map(l, {x in x + 1})', '    return map(l, { x in x + 1 })', '    return l.map
    { $0 + 1 }', '    return map(l, { x in x + 1 })', '    return l.map { $0 + 1 }',
  '    return map(l, { $0 + 1 })', '    return l.map { $0 + 1 }', '    return l.map
    { $0 + 1 }', '    return map(l, { x in x + 1 })', '    return l.map { $0 + 1 }',
  '    return l.map { $0 + 1 }', '    return l.map { $0 + 1 }', '    return l.map
    { $0 + 1 }', '    return l.map { $0 + 1 }', '    return map(l, { x in x + 1 })',
  '    return l.map { $0 + 1 }', '    return l.map { $0 + 1 }', '    return map(l,
    { x in x + 1 })', '    return l.map({ $0 + 1 })', '    return l.map { $0 + 1 }',
  "    var result: [Int] = []\n    for i in l {\n        result.append(i + 1)\n  \
    \  }\n    return result", '    return map(l, {x in x + 1})', '    return map(l,
    { x in x + 1 })', '    return l.map { $0 + 1 }', '    return l.map { $0 + 1 }',
  "    var l2 = [Int]()\n    for i in l {\n        l2.append(i + 1)\n    }\n    return\
    \ l2", '    return l.map { $0 + 1 }', '    return map(l, { x in x + 1 })', '    return
    l.map { $0 + 1 }', '    return l.map { $0 + 1 }', '    return l.map { $0 + 1 }',
  '    return l.map { $0 + 1 }', '    return map(l, { x in x + 1 })', '    return
    map(l) { x in x + 1 }', '    return map(l, { x in x + 1 })', '    return l.map
    { $0 + 1 }', '    return map(l, { x in x + 1 })', '    return map(l, { x in x
    + 1 })', '    return map(l, {x in x + 1})', '    return l.map { $0 + 1 }', '    return
    map(l, { x in x + 1 })', '    return map(l) { $0 + 1 }', '    return map(l, {
    x in x + 1 })', '    return l.map { $0 + 1 }', '    return l.map { $0 + 1 }',
  '    return map(l, {x in x + 1})', "    var result: [Int] = []\n    for i in l {\n\
    \        result.append(i + 1)\n    }\n    return result", '    return map(l, {
    x in x + 1 })', "    var res = [Int]()\n    for i in l {\n        res.append(i\
    \ + 1)\n    }\n    return res", '    return map(l, { x in x + 1 })', '    return
    map(l, { x in x + 1 })', '    return map(l, { x in x + 1 })', '    return map(l,
    { x in x + 1 })', '    return l.map({ $0 + 1 })', '    return map(l, { x in x
    + 1 })', '    return l.map { $0 + 1 }', '    return map(l, { x in x + 1 })', '    return
    l.map { $0 + 1 }', "    var result = [Int]()\n    for i in l {\n        result.append(i\
    \ + 1)\n    }\n    return result", "    var result: [Int] = []\n    for i in l\
    \ {\n        result.append(i + 1)\n    }\n    return result", '    return map(l,
    { x in x + 1 })', '    return l.map { $0 + 1 }', '    return map(l, { $0 + 1 })',
  '    return map(l, { $0 + 1 })', '    return map(l, {x in x + 1})', '    return
    map(l, { $0 + 1 })', '    return l.map { $0 + 1 }', '    return map(l, { x in
    x + 1 })', '    return map(l, { x in x + 1 })', '  return map(l, { x in x + 1
    })', "    var result: [Int] = []\n    for i in l {\n        result.append(i +\
    \ 1)\n    }\n    return result", '    return map(l, { x in x + 1 })', '    return
    l.map { $0 + 1 }', '    return map(l, {x in x + 1})', '    return l.map { $0 +
    1 }', '    return l.map { $0 + 1 }', '    return l.map { $0 + 1 }', '    return
    map(l, { x in x + 1 })', '    return l.map { $0 + 1 }', "    var result = [Int]()\n\
    \    for i in l {\n        result.append(i + 1)\n    }\n    return result", " \
    \   var new_list: [Int] = []\n    for i in l {\n        new_list.append(i + 1)\n\
    \    }\n    return new_list", '    return l.map { $0 + 1 }', '    return l.map
    { $0 + 1 }', '    return map(l, { $0 + 1 })']
stop_tokens:
- "\n}"
