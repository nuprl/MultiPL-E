name: HumanEval_141_file_name_check
language: swift
prompt: "\n/// Create a function which takes a string representing a file's name,\
  \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  /// A file's name is considered to be valid if and only if all the following conditions\
  \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
  \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// - The\
  \ substring before the dot should not be empty, and it starts with a letter from\
  \ \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after the\
  \ dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\nfunc file_name_check(file_name:\
  \ String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(file_name_check(file_name: \"example.txt\"\
  ) == \"Yes\")\nassert(file_name_check(file_name: \"1example.dll\") == \"No\")\n\
  assert(file_name_check(file_name: \"s1sdf3.asd\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"K.dll\") == \"Yes\")\nassert(file_name_check(file_name: \"MY16FILE3.exe\") ==\
  \ \"Yes\")\nassert(file_name_check(file_name: \"His12FILE94.exe\") == \"No\")\n\
  assert(file_name_check(file_name: \"_Y.txt\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"?aREYA.exe\") == \"No\")\nassert(file_name_check(file_name: \"/this_is_valid.dll\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"this_is_valid.wow\") == \"No\"\
  )\nassert(file_name_check(file_name: \"this_is_valid.txt\") == \"Yes\")\nassert(file_name_check(file_name:\
  \ \"this_is_valid.txtexe\") == \"No\")\nassert(file_name_check(file_name: \"#this2_i4s_5valid.ten\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"@this1_is6_valid.exe\") == \"\
  No\")\nassert(file_name_check(file_name: \"this_is_12valid.6exe4.txt\") == \"No\"\
  )\nassert(file_name_check(file_name: \"all.exe.txt\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"I563_No.exe\") == \"Yes\")\nassert(file_name_check(file_name: \"Is3youfault.txt\"\
  ) == \"Yes\")\nassert(file_name_check(file_name: \"no_one#knows.dll\") == \"Yes\"\
  )\nassert(file_name_check(file_name: \"1I563_Yes3.exe\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"I563_Yes3.txtt\") == \"No\")\nassert(file_name_check(file_name: \"final..txt\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"final132\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"_f4indsartal132.\") == \"No\")\nassert(file_name_check(file_name: \".txt\")\
  \ == \"No\")\nassert(file_name_check(file_name: \"s.\") == \"No\")"
completions: ["    let digits = \"0123456789\"\n    let letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let extensions = [\"txt\", \"exe\", \"dll\"]\n    var digit_count = 0\n\
    \    var dot_count = 0\n    var extension_found = false\n    var extension_start_index\
    \ = 0\n    var extension_end_index = 0\n    var extension_length = 0\n    var\
    \ extension_string = \"\"\n    var extension_string_length = 0\n    var extension_string_valid\
    \ = false\n    var extension_string_valid_count = 0\n    var extension_string_valid_count_max\
    \ = 0\n    var extension_string_valid_count_max_index = 0\n    var extension_string_valid_count_max_index_start\
    \ = 0\n    var extension_string_valid_count_max_index_end = 0\n    var extension_string_valid_count_max_index_length\
    \ = 0\n    var extension_string_valid_count_max_index_string = \"\"\n    var extension_string_valid_count_max_index_string_length\
    \ = 0\n    var extension_string_valid_count_max_index_string_valid = false\n \
    \   var extension_string_valid_count_max_index_string_valid_count = 0\n    var\
    \ extension_string_valid_count_max_index_string_valid_count_max = 0\n    var extension_string_valid_count_max_index_string_valid_count_max_index\
    \ = 0\n    var extension_string_valid_count_max_index_string_valid_count_max_index_start\
    \ = 0\n    var extension_string_valid_count_max_index_string_valid_count_max_index_end\
    \ = 0\n    var extension_string_valid_count_max_index_string_valid_count_max_index_length\
    \ = 0\n    var extension_string_valid_count_max_index_string_valid_count_max_index_string\
    \ = \"\"\n    var extension_string_valid_count_max_index_string_valid_count_max_index_string_length\
    \ = 0\n   ", "    let digits = \"0123456789\"\n    let latin = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let extensions = [\"txt\", \"exe\", \"dll\"]\n    var count = 0\n    var\
    \ dot_index = 0\n    var extension_index = 0\n    var extension_found = false\n\
    \    var valid = true\n    for (index, char) in file_name.enumerated() {\n   \
    \     if digits.contains(char) {\n            count += 1\n        }\n        if\
    \ char == \".\" {\n            dot_index = index\n        }\n        if index\
    \ == file_name.count - 1 {\n            extension_index = index\n        }\n \
    \   }\n    if count > 3 {\n        valid = false\n    }\n    if dot_index == 0\
    \ || dot_index == file_name.count - 1 {\n        valid = false\n    }\n    if\
    \ !latin.contains(file_name[file_name.startIndex]) {\n        valid = false\n\
    \    }\n    for ext in extensions {\n        if file_name[file_name.index(file_name.startIndex,\
    \ offsetBy: dot_index + 1)..<file_name.index(file_name.startIndex, offsetBy: extension_index\
    \ + 1)] == ext {\n            extension_found = true\n        }\n    }\n    if\
    \ !extension_found {\n        valid = false\n    }\n    if valid {\n        return\
    \ \"Yes\"\n    } else {\n        return \"No\"\n    }", "    let file_name_arr\
    \ = file_name.split(separator: \".\")\n    if file_name_arr.count != 2 {\n   \
    \     return \"No\"\n    }\n    let file_name_arr_0 = file_name_arr[0]\n    let\
    \ file_name_arr_1 = file_name_arr[1]\n    if file_name_arr_0.count == 0 || file_name_arr_1.count\
    \ == 0 {\n        return \"No\"\n    }\n    let file_name_arr_0_first_char = file_name_arr_0.first!\n\
    \    if !(file_name_arr_0_first_char >= \"a\" && file_name_arr_0_first_char <=\
    \ \"z\" ||\n        file_name_arr_0_first_char >= \"A\" && file_name_arr_0_first_char\
    \ <= \"Z\") {\n        return \"No\"\n    }\n    let file_name_arr_1_lowercased\
    \ = file_name_arr_1.lowercased()\n    if file_name_arr_1_lowercased != \"txt\"\
    \ && file_name_arr_1_lowercased != \"exe\" &&\n        file_name_arr_1_lowercased\
    \ != \"dll\" {\n        return \"No\"\n    }\n    let file_name_arr_0_digits_count\
    \ = file_name_arr_0.filter { $0 >= \"0\" && $0 <= \"9\" }.count\n    if file_name_arr_0_digits_count\
    \ > 3 {\n        return \"No\"\n    }\n    return \"Yes\"", "    let digits =\
    \ \"0123456789\"\n    let latin_alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let valid_extensions = [\"txt\", \"exe\", \"dll\"]\n    var digit_count\
    \ = 0\n    var dot_count = 0\n    var extension_found = false\n    var extension_index\
    \ = 0\n    var extension_string = \"\"\n    var name_string = \"\"\n    var name_found\
    \ = false\n    var name_index = 0\n    var name_valid = false\n    var extension_valid\
    \ = false\n    var valid = false\n    for i in 0..<file_name.count {\n       \
    \ let index = file_name.index(file_name.startIndex, offsetBy: i)\n        let\
    \ character = file_name[index]\n        if digits.contains(character) {\n    \
    \        digit_count += 1\n        }\n        if character == \".\" {\n      \
    \      dot_count += 1\n            extension_index = i + 1\n        }\n    }\n\
    \    if digit_count > 3 {\n        return \"No\"\n    }\n    if dot_count != 1\
    \ {\n        return \"No\"\n    }\n    for i in extension_index..<file_name.count\
    \ {\n        let index = file_name.index(file_name.startIndex, offsetBy: i)\n\
    \        let character = file_name[index]\n        extension_string.append(character)\n\
    \    }\n    for i in 0..<valid_extensions.count {\n        if extension_string\
    \ == valid_extensions[i] {\n            extension_found = true\n        }\n  \
    \  }\n    if extension_found == false {\n        return \"No\"\n    }\n    for\
    \ i in 0..<extension_index {\n        let index = file_name.index(file_name.startIndex,\
    \ offsetBy: i)\n        let character = file_name[index]\n        name_string.append(character)\n\
    \    }\n    for i in 0..<name_string.count {\n        let index = name_string.index(name_string.startIndex,\
    \ offsetBy: i)\n", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\\
    .(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format:\"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_arr = file_name.split(separator: \"\
    .\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n    let\
    \ file_name_arr_1 = file_name_arr[0]\n    let file_name_arr_2 = file_name_arr[1]\n\
    \    if file_name_arr_1.count == 0 {\n        return \"No\"\n    }\n    if file_name_arr_2\
    \ != \"txt\" && file_name_arr_2 != \"exe\" && file_name_arr_2 != \"dll\" {\n \
    \       return \"No\"\n    }\n    var count = 0\n    for char in file_name_arr_1\
    \ {\n        if char >= \"0\" && char <= \"9\" {\n            count += 1\n   \
    \     }\n    }\n    if count > 3 {\n        return \"No\"\n    }\n    if file_name_arr_1[file_name_arr_1.startIndex]\
    \ >= \"0\" && file_name_arr_1[file_name_arr_1.startIndex] <= \"9\" {\n       \
    \ return \"No\"\n    }\n    return \"Yes\"", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_components.count != 2 {\n        return \"No\"\n  \
    \  }\n    let file_name_prefix = file_name_components[0]\n    let file_name_suffix\
    \ = file_name_components[1]\n    let file_name_prefix_components = file_name_prefix.components(separatedBy:\
    \ CharacterSet.decimalDigits)\n    if file_name_prefix_components.count > 1 {\n\
    \        return \"No\"\n    }\n    if file_name_prefix.count - file_name_prefix_components[0].count\
    \ > 3 {\n        return \"No\"\n    }\n    if file_name_prefix_components[0].count\
    \ == 0 {\n        return \"No\"\n    }\n    if !file_name_prefix_components[0].contains(where:\
    \ { (c) -> Bool in\n        return c >= \"a\" && c <= \"z\" || c >= \"A\" && c\
    \ <= \"Z\"\n    }) {\n        return \"No\"\n    }\n    if file_name_suffix !=\
    \ \"txt\" && file_name_suffix != \"exe\" && file_name_suffix != \"dll\" {\n  \
    \      return \"No\"\n    }\n    return \"Yes\"", "    let digits = \"0123456789\"\
    \n    let alphapet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\
    \    let valid_extensions = [\"txt\", \"exe\", \"dll\"]\n    var digit_count =\
    \ 0\n    var dot_count = 0\n    var extension_valid = false\n    var extension_start\
    \ = 0\n    var extension_end = 0\n    var extension_length = 0\n    var extension_string\
    \ = \"\"\n    var extension_string_lower = \"\"\n    var extension_string_upper\
    \ = \"\"\n    var extension_string_lower_valid = false\n    var extension_string_upper_valid\
    \ = false\n    var extension_string_valid = false\n    var file_name_valid = false\n\
    \    var file_name_length = 0\n    var file_name_valid_length = 0\n    var file_name_valid_length_valid\
    \ = false\n    var file_name_valid_length_valid_lower = false\n    var file_name_valid_length_valid_upper\
    \ = false\n    var file_name_valid_length_valid_lower_valid = false\n    var file_name_valid_length_valid_upper_valid\
    \ = false\n    var file_name_valid_length_valid_valid = false\n    var file_name_valid_length_valid_valid_valid\
    \ = false\n    var file_name_valid_length_valid_valid_valid_valid = false\n  \
    \  var file_name_valid_length_valid_valid_valid_valid_valid = false\n    var file_name_valid_length_valid_valid_valid_valid_valid_valid\
    \ = false\n    var file_name_valid_length_valid_valid_valid_valid_valid_valid_valid\
    \ = false\n    var file_name_valid_length_valid_valid_valid_valid_valid_valid_valid_valid\
    \ = false\n    var file_name_valid_length_valid_valid_valid_valid_valid_valid_valid_valid_valid\
    \ = false\n    var file_name_valid_length_valid_valid_valid_valid_valid_valid_valid_valid_valid_valid\
    \ = false\n    var file", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let first_part = file_name_arr[0]\n    let second_part = file_name_arr[1]\n\
    \    if first_part.count == 0 || first_part.count > 8 {\n        return \"No\"\
    \n    }\n    if second_part.count == 0 || second_part.count > 3 {\n        return\
    \ \"No\"\n    }\n    if !(second_part == \"txt\" || second_part == \"exe\" ||\
    \ second_part == \"dll\") {\n        return \"No\"\n    }\n    var digit_count\
    \ = 0\n    for c in first_part {\n        if c >= \"0\" && c <= \"9\" {\n    \
    \        digit_count += 1\n        }\n    }\n    if digit_count > 3 {\n      \
    \  return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    let file_name_arr_first\
    \ = file_name_arr[0]\n    let file_name_arr_last = file_name_arr[file_name_arr_count\
    \ - 1]\n    let file_name_arr_first_count = file_name_arr_first.count\n    let\
    \ file_name_arr_last_count = file_name_arr_last.count\n    let file_name_arr_first_first\
    \ = file_name_arr_first[file_name_arr_first.startIndex]\n    let file_name_arr_last_first\
    \ = file_name_arr_last[file_name_arr_last.startIndex]\n    let file_name_arr_last_second\
    \ = file_name_arr_last[file_name_arr_last.index(after: file_name_arr_last.startIndex)]\n\
    \    let file_name_arr_last_third = file_name_arr_last[file_name_arr_last.index(file_name_arr_last.startIndex,\
    \ offsetBy: 2)]\n    let file_name_arr_last_fourth = file_name_arr_last[file_name_arr_last.index(file_name_arr_last.startIndex,\
    \ offsetBy: 3)]\n    let file_name_arr_first_count_int = Int(String(file_name_arr_first_count))\n\
    \    let file_name_arr_last_count_int = Int(String(file_name_arr_last_count))\n\
    \    let file_name_arr_first_first_int = Int(String(file_name_arr_first_first))\n\
    \    let file_name_arr_last_first_int = Int(String(file_name_arr_last_first))\n\
    \    let file_name_arr_last_second_int = Int(String(file_name_arr_last_second))\n\
    \    let file_name_arr_last_third_int = Int(String(file_name_arr_last_third))\n\
    \    let file_name_arr", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_components.count != 2 {\n        return \"No\"\n  \
    \  }\n    let file_name_components_1 = file_name_components[0]\n    let file_name_components_2\
    \ = file_name_components[1]\n    let file_name_components_1_characters = Array(file_name_components_1)\n\
    \    if file_name_components_1_characters.count == 0 {\n        return \"No\"\n\
    \    }\n    if file_name_components_1_characters[0] < \"A\" || file_name_components_1_characters[0]\
    \ > \"z\" {\n        return \"No\"\n    }\n    if file_name_components_1_characters[0]\
    \ > \"Z\" && file_name_components_1_characters[0] < \"a\" {\n        return \"\
    No\"\n    }\n    var digits_count = 0\n    for character in file_name_components_1_characters\
    \ {\n        if character >= \"0\" && character <= \"9\" {\n            digits_count\
    \ += 1\n        }\n    }\n    if digits_count > 3 {\n        return \"No\"\n \
    \   }\n    if file_name_components_2 != \"txt\" && file_name_components_2 != \"\
    exe\" && file_name_components_2 != \"dll\" {\n        return \"No\"\n    }\n \
    \   return \"Yes\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    if file_name_arr_count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_arr_first = file_name_arr[0]\n\
    \    let file_name_arr_last = file_name_arr[1]\n    let file_name_arr_first_count\
    \ = file_name_arr_first.count\n    let file_name_arr_last_count = file_name_arr_last.count\n\
    \    if file_name_arr_first_count == 0 || file_name_arr_last_count == 0 {\n  \
    \      return \"No\"\n    }\n    let file_name_arr_first_first_char = file_name_arr_first[file_name_arr_first.startIndex]\n\
    \    let file_name_arr_last_first_char = file_name_arr_last[file_name_arr_last.startIndex]\n\
    \    if !(file_name_arr_first_first_char >= \"a\" && file_name_arr_first_first_char\
    \ <= \"z\" || file_name_arr_first_first_char >= \"A\" && file_name_arr_first_first_char\
    \ <= \"Z\") {\n        return \"No\"\n    }\n    if !(file_name_arr_last_first_char\
    \ >= \"a\" && file_name_arr_last_first_char <= \"z\" || file_name_arr_last_first_char\
    \ >= \"A\" && file_name_arr_last_first_char <= \"Z\") {\n        return \"No\"\
    \n    }\n    if file_name_arr_last != \"txt\" && file_name_arr_last != \"exe\"\
    \ && file_name_arr_last != \"dll\" {\n        return \"No\"\n    }\n    var count\
    \ = 0\n    for char in file_name_arr_first {\n        if char >= \"0\" && char\
    \ <= \"9\" {\n            count += 1\n        }\n    }\n    if count > 3 {\n \
    \       return \"No\"\n   ", "    let valid_extensions = [\"txt\", \"exe\", \"\
    dll\"]\n    let file_name_components = file_name.split(separator: \".\")\n   \
    \ if file_name_components.count != 2 {\n        return \"No\"\n    }\n    let\
    \ name = file_name_components[0]\n    let ext = file_name_components[1]\n    if\
    \ !valid_extensions.contains(ext) {\n        return \"No\"\n    }\n    if name.count\
    \ == 0 {\n        return \"No\"\n    }\n    if name.first! < \"a\" || name.first!\
    \ > \"z\" {\n        return \"No\"\n    }\n    if name.filter({ $0 >= \"0\" &&\
    \ $0 <= \"9\" }).count > 3 {\n        return \"No\"\n    }\n    return \"Yes\"",
  "    let file_name_array = file_name.components(separatedBy: \".\")\n    let file_name_extension\
    \ = file_name_array[1]\n    let file_name_without_extension = file_name_array[0]\n\
    \    let file_name_without_extension_array = Array(file_name_without_extension)\n\
    \    let file_name_without_extension_first_char = file_name_without_extension_array[0]\n\
    \    let file_name_without_extension_first_char_ascii = file_name_without_extension_first_char.asciiValue\n\
    \    let file_name_without_extension_first_char_ascii_int = Int(file_name_without_extension_first_char_ascii!)\n\
    \    let file_name_without_extension_first_char_ascii_int_range = file_name_without_extension_first_char_ascii_int!\
    \ - 65\n    let file_name_without_extension_first_char_ascii_int_range_range =\
    \ file_name_without_extension_first_char_ascii_int_range + 97\n    let file_name_without_extension_first_char_ascii_int_range_range_char\
    \ = Character(UnicodeScalar(file_name_without_extension_first_char_ascii_int_range_range)!)\n\
    \    let file_name_without_extension_first_char_ascii_int_range_range_char_ascii\
    \ = file_name_without_extension_first_char_ascii_int_range_range_char.asciiValue\n\
    \    let file_name_without_extension_first_char_ascii_int_range_range_char_ascii_int\
    \ = Int(file_name_without_extension_first_char_ascii_int_range_range_char_ascii!)\n\
    \    let file_name_without_extension_first_char_ascii_int_range_range_char_ascii_int_range\
    \ = file_name_", "    let regex = try! NSRegularExpression(pattern: \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\", options: [])\n    let matches = regex.matches(in: file_name,\
    \ options: [], range: NSRange(location: 0, length: file_name.count))\n    return\
    \ matches.count > 0 ? \"Yes\" : \"No\"", "    let file_name_array = file_name.split(separator:\
    \ \".\")\n    if file_name_array.count != 2 {\n        return \"No\"\n    }\n\
    \    let first_part = file_name_array[0]\n    let second_part = file_name_array[1]\n\
    \    if first_part.count == 0 || !first_part.first!.isLetter {\n        return\
    \ \"No\"\n    }\n    if second_part != \"txt\" && second_part != \"exe\" && second_part\
    \ != \"dll\" {\n        return \"No\"\n    }\n    if first_part.filter({$0.isNumber}).count\
    \ > 3 {\n        return \"No\"\n    }\n    return \"Yes\"", "    let digits =\
    \ \"0123456789\"\n    let latin_alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let valid_extensions = [\"txt\", \"exe\", \"dll\"]\n    var number_of_digits\
    \ = 0\n    var number_of_dots = 0\n    var extension_found = false\n    var extension_valid\
    \ = false\n    var name_valid = false\n    var name = \"\"\n    var extension\
    \ = \"\"\n    for char in file_name {\n        if digits.contains(char) {\n  \
    \          number_of_digits += 1\n        }\n        if char == \".\" {\n    \
    \        number_of_dots += 1\n        }\n    }\n    if number_of_digits <= 3 &&\
    \ number_of_dots == 1 {\n        let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n        name = file_name_components[0]\n        extension = file_name_components[1]\n\
    \        extension_found = true\n    }\n    if extension_found {\n        if valid_extensions.contains(extension)\
    \ {\n            extension_valid = true\n        }\n        if name.count > 0\
    \ && latin_alphabet.contains(name[name.startIndex]) {\n            name_valid\
    \ = true\n        }\n    }\n    if extension_valid && name_valid {\n        return\
    \ \"Yes\"\n    } else {\n        return \"No\"\n    }", "    let file_name_arr\
    \ = file_name.components(separatedBy: \".\")\n    let file_name_arr_count = file_name_arr.count\n\
    \    if file_name_arr_count != 2 {\n        return \"No\"\n    }\n    let file_name_arr_first\
    \ = file_name_arr[0]\n    let file_name_arr_last = file_name_arr[1]\n    let file_name_arr_first_count\
    \ = file_name_arr_first.count\n    let file_name_arr_last_count = file_name_arr_last.count\n\
    \    if file_name_arr_first_count == 0 || file_name_arr_last_count == 0 {\n  \
    \      return \"No\"\n    }\n    let file_name_arr_first_first_char = file_name_arr_first[file_name_arr_first.startIndex]\n\
    \    if !(file_name_arr_first_first_char >= \"a\" && file_name_arr_first_first_char\
    \ <= \"z\" || file_name_arr_first_first_char >= \"A\" && file_name_arr_first_first_char\
    \ <= \"Z\") {\n        return \"No\"\n    }\n    if file_name_arr_last != \"txt\"\
    \ && file_name_arr_last != \"exe\" && file_name_arr_last != \"dll\" {\n      \
    \  return \"No\"\n    }\n    var num_count = 0\n    for char in file_name_arr_first\
    \ {\n        if char >= \"0\" && char <= \"9\" {\n            num_count += 1\n\
    \        }\n    }\n    if num_count > 3 {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", "    let file_name_array = file_name.components(separatedBy: \".\"\
    )\n    let file_name_array_count = file_name_array.count\n    if file_name_array_count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_array_first = file_name_array[0]\n\
    \    let file_name_array_last = file_name_array[1]\n    let file_name_array_first_count\
    \ = file_name_array_first.count\n    let file_name_array_last_count = file_name_array_last.count\n\
    \    if file_name_array_first_count == 0 {\n        return \"No\"\n    }\n   \
    \ if file_name_array_last_count == 0 {\n        return \"No\"\n    }\n    if file_name_array_last_count\
    \ > 3 {\n        return \"No\"\n    }\n    if file_name_array_last != \"txt\"\
    \ && file_name_array_last != \"exe\" && file_name_array_last != \"dll\" {\n  \
    \      return \"No\"\n    }\n    let file_name_array_first_first_char = file_name_array_first[file_name_array_first.startIndex]\n\
    \    if !(file_name_array_first_first_char >= \"a\" && file_name_array_first_first_char\
    \ <= \"z\") && !(file_name_array_first_first_char >= \"A\" && file_name_array_first_first_char\
    \ <= \"Z\") {\n        return \"No\"\n    }\n    var digit_count = 0\n    for\
    \ char in file_name_array_first {\n        if char >= \"0\" && char <= \"9\" {\n\
    \            digit_count += 1\n        }\n    }\n    if digit_count > 3 {\n  \
    \      return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let file_name_arr_1 = file_name_arr[0]\n    let file_name_arr_2 = file_name_arr[1]\n\
    \    if file_name_arr_1.count == 0 || file_name_arr_2.count == 0 {\n        return\
    \ \"No\"\n    }\n    let first_char = file_name_arr_1[file_name_arr_1.startIndex]\n\
    \    if !(first_char >= \"a\" && first_char <= \"z\" || first_char >= \"A\" &&\
    \ first_char <= \"Z\") {\n        return \"No\"\n    }\n    var count = 0\n  \
    \  for char in file_name_arr_1 {\n        if char >= \"0\" && char <= \"9\" {\n\
    \            count += 1\n        }\n    }\n    if count > 3 {\n        return\
    \ \"No\"\n    }\n    if file_name_arr_2 != \"txt\" && file_name_arr_2 != \"exe\"\
    \ && file_name_arr_2 != \"dll\" {\n        return \"No\"\n    }\n    return \"\
    Yes\"", "    let file_name_arr = file_name.split(separator: \".\")\n    if file_name_arr.count\
    \ != 2 {\n        return \"No\"\n    }\n    let first_part = file_name_arr[0]\n\
    \    let second_part = file_name_arr[1]\n    if first_part.count == 0 || !first_part.first!.isLetter\
    \ {\n        return \"No\"\n    }\n    if second_part != \"txt\" && second_part\
    \ != \"exe\" && second_part != \"dll\" {\n        return \"No\"\n    }\n    let\
    \ digits = \"0123456789\"\n    var digit_count = 0\n    for char in first_part\
    \ {\n        if digits.contains(char) {\n            digit_count += 1\n      \
    \  }\n    }\n    if digit_count > 3 {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", "    let file_name_arr = file_name.split(separator: \".\")\n    if\
    \ file_name_arr.count != 2 {\n        return \"No\"\n    }\n    let first_part\
    \ = file_name_arr[0]\n    let second_part = file_name_arr[1]\n    if first_part.count\
    \ == 0 || !first_part.first!.isLetter {\n        return \"No\"\n    }\n    if\
    \ second_part.count == 0 || !(second_part == \"txt\" || second_part == \"exe\"\
    \ || second_part == \"dll\") {\n        return \"No\"\n    }\n    var digit_count\
    \ = 0\n    for char in first_part {\n        if char.isNumber {\n            digit_count\
    \ += 1\n        }\n    }\n    if digit_count > 3 {\n        return \"No\"\n  \
    \  }\n    return \"Yes\"", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let file_name_arr_0 = file_name_arr[0]\n    let file_name_arr_1 = file_name_arr[1]\n\
    \    if file_name_arr_0.count == 0 {\n        return \"No\"\n    }\n    if file_name_arr_1.count\
    \ == 0 {\n        return \"No\"\n    }\n    if file_name_arr_1 != \"txt\" && file_name_arr_1\
    \ != \"exe\" && file_name_arr_1 != \"dll\" {\n        return \"No\"\n    }\n \
    \   var digit_count = 0\n    for char in file_name_arr_0 {\n        if char >=\
    \ \"0\" && char <= \"9\" {\n            digit_count += 1\n        }\n    }\n \
    \   if digit_count > 3 {\n        return \"No\"\n    }\n    if file_name_arr_0[file_name_arr_0.startIndex]\
    \ < \"A\" || file_name_arr_0[file_name_arr_0.startIndex] > \"z\" {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format:\"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let file_name_arr_0 = file_name_arr[0]\n    let file_name_arr_1 = file_name_arr[1]\n\
    \    if file_name_arr_0.count == 0 || file_name_arr_1.count == 0 {\n        return\
    \ \"No\"\n    }\n    if file_name_arr_0.rangeOfCharacter(from: CharacterSet.decimalDigits)\
    \ != nil {\n        return \"No\"\n    }\n    if file_name_arr_1 != \"txt\" &&\
    \ file_name_arr_1 != \"exe\" && file_name_arr_1 != \"dll\" {\n        return \"\
    No\"\n    }\n    return \"Yes\"", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let first_part = file_name_arr[0]\n    let second_part = file_name_arr[1]\n\
    \    if first_part.count == 0 || first_part.count > 8 {\n        return \"No\"\
    \n    }\n    if !first_part.contains(where: { $0 >= \"a\" && $0 <= \"z\" || $0\
    \ >= \"A\" && $0 <= \"Z\" }) {\n        return \"No\"\n    }\n    if !first_part.contains(where:\
    \ { $0 >= \"0\" && $0 <= \"9\" }) {\n        return \"No\"\n    }\n    if first_part.filter({\
    \ $0 >= \"0\" && $0 <= \"9\" }).count > 3 {\n        return \"No\"\n    }\n  \
    \  if second_part != \"txt\" && second_part != \"exe\" && second_part != \"dll\"\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr\
    \ = file_name.split(separator: \".\")\n    if file_name_arr.count != 2 {\n   \
    \     return \"No\"\n    }\n    let file_name_arr_0 = file_name_arr[0]\n    let\
    \ file_name_arr_1 = file_name_arr[1]\n    if file_name_arr_0.count == 0 {\n  \
    \      return \"No\"\n    }\n    if file_name_arr_1 != \"txt\" && file_name_arr_1\
    \ != \"exe\" && file_name_arr_1 != \"dll\" {\n        return \"No\"\n    }\n \
    \   var count = 0\n    for char in file_name_arr_0 {\n        if char >= \"0\"\
    \ && char <= \"9\" {\n            count += 1\n        }\n    }\n    if count >\
    \ 3 {\n        return \"No\"\n    }\n    if file_name_arr_0[file_name_arr_0.startIndex]\
    \ >= \"0\" && file_name_arr_0[file_name_arr_0.startIndex] <= \"9\" {\n       \
    \ return \"No\"\n    }\n    return \"Yes\"", "    let file_name_array = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_array_count = file_name_array.count\n    if file_name_array_count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_array_first = file_name_array[0]\n\
    \    let file_name_array_second = file_name_array[1]\n    let file_name_array_first_count\
    \ = file_name_array_first.count\n    let file_name_array_second_count = file_name_array_second.count\n\
    \    if file_name_array_first_count == 0 || file_name_array_second_count == 0\
    \ {\n        return \"No\"\n    }\n    let file_name_array_first_first_char =\
    \ file_name_array_first[file_name_array_first.startIndex]\n    if !(file_name_array_first_first_char\
    \ >= \"a\" && file_name_array_first_first_char <= \"z\" || file_name_array_first_first_char\
    \ >= \"A\" && file_name_array_first_first_char <= \"Z\") {\n        return \"\
    No\"\n    }\n    let file_name_array_second_array = Array(file_name_array_second)\n\
    \    if file_name_array_second_array.count != 3 {\n        return \"No\"\n   \
    \ }\n    if file_name_array_second_array[0] != \"t\" || file_name_array_second_array[1]\
    \ != \"x\" || file_name_array_second_array[2] != \"t\" {\n        if file_name_array_second_array[0]\
    \ != \"e\" || file_name_array_second_array[1] != \"x\" || file_name_array_second_array[2]\
    \ != \"e\" {\n            if file_name_array_second_array[0] != \"d\" || file_name_array_second_array[1]\
    \ != \"l\" || file_name_array_second_array[2] != \"l\" {\n                return\
    \ \"No\"\n            }", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let prefix = file_name_arr[0]\n    let suffix = file_name_arr[1]\n    if prefix.count\
    \ == 0 || prefix.count > 8 {\n        return \"No\"\n    }\n    if !prefix.contains(where:\
    \ {$0.isLetter}) {\n        return \"No\"\n    }\n    if prefix.contains(where:\
    \ {$0.isNumber}) {\n        return \"No\"\n    }\n    if !(suffix == \"txt\" ||\
    \ suffix == \"exe\" || suffix == \"dll\") {\n        return \"No\"\n    }\n  \
    \  return \"Yes\"", "    let pattern = \"^[a-zA-Z]\\\\w{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n  \
    \  let range = NSRange(location: 0, length: file_name.utf16.count)\n    if regex.firstMatch(in:\
    \ file_name, options: [], range: range) != nil {\n        return \"Yes\"\n   \
    \ } else {\n        return \"No\"\n    }", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    let file_name_arr_first\
    \ = file_name_arr[0]\n    let file_name_arr_last = file_name_arr[file_name_arr_count\
    \ - 1]\n    let file_name_arr_first_count = file_name_arr_first.count\n    let\
    \ file_name_arr_last_count = file_name_arr_last.count\n    let file_name_arr_first_first\
    \ = file_name_arr_first[file_name_arr_first.startIndex]\n    let file_name_arr_first_last\
    \ = file_name_arr_first[file_name_arr_first.index(before: file_name_arr_first.endIndex)]\n\
    \    let file_name_arr_last_first = file_name_arr_last[file_name_arr_last.startIndex]\n\
    \    let file_name_arr_last_last = file_name_arr_last[file_name_arr_last.index(before:\
    \ file_name_arr_last.endIndex)]\n    let file_name_arr_first_first_ascii = file_name_arr_first_first.asciiValue\n\
    \    let file_name_arr_first_last_ascii = file_name_arr_first_last.asciiValue\n\
    \    let file_name_arr_last_first_ascii = file_name_arr_last_first.asciiValue\n\
    \    let file_name_arr_last_last_ascii = file_name_arr_last_last.asciiValue\n\
    \    let file_name_arr_first_first_ascii_int = file_name_arr_first_first_ascii!\
    \ - 48\n    let file_name_arr_first_last_ascii_int = file_name_arr_first_last_ascii!\
    \ - 48\n    let file_name_arr_last_first_ascii_int = file_name_arr_last_first_ascii!\
    \ - 48\n    let", "    let file_name_arr = file_name.split(separator: \".\")\n\
    \    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n    if file_name_arr[0].count\
    \ == 0 {\n        return \"No\"\n    }\n    if file_name_arr[1] != \"txt\" &&\
    \ file_name_arr[1] != \"exe\" && file_name_arr[1] != \"dll\" {\n        return\
    \ \"No\"\n    }\n    var digit_count = 0\n    for char in file_name_arr[0] {\n\
    \        if char >= \"0\" && char <= \"9\" {\n            digit_count += 1\n \
    \       }\n    }\n    if digit_count > 3 {\n        return \"No\"\n    }\n   \
    \ if file_name_arr[0].first! < \"a\" || file_name_arr[0].first! > \"z\" {\n  \
    \      if file_name_arr[0].first! < \"A\" || file_name_arr[0].first! > \"Z\" {\n\
    \            return \"No\"\n        }\n    }\n    return \"Yes\"", "    let digits\
    \ = \"0123456789\"\n    let letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let valid_extensions = [\"txt\", \"exe\", \"dll\"]\n    var digit_count\
    \ = 0\n    var dot_count = 0\n    var extension_count = 0\n    var letter_count\
    \ = 0\n    var extension_valid = false\n    var extension_length = 0\n    var\
    \ extension_start = 0\n    var extension_end = 0\n    var extension_string = \"\
    \"\n    var extension_index = 0\n    var letter_index = 0\n    var letter_start\
    \ = 0\n    var letter_end = 0\n    var letter_string = \"\"\n    var letter_valid\
    \ = false\n    var dot_index = 0\n    var digit_index = 0\n    var digit_start\
    \ = 0\n    var digit_end = 0\n    var digit_string = \"\"\n    var digit_valid\
    \ = false\n    var file_name_valid = false\n    var file_name_length = 0\n   \
    \ var file_name_index = 0\n    var file_name_char = \"\"\n    var file_name_string\
    \ = \"\"\n    var file_name_valid_string = \"\"\n    var file_name_valid_index\
    \ = 0\n    var file_name_valid_char = \"\"\n    var file_name_valid_length = 0\n\
    \    var file_name_valid_string_length = 0\n    var file_name_valid_string_index\
    \ = 0\n    var file_name_valid_string_char = \"\"\n    var file_name_valid_string_valid\
    \ = false\n    var file_name_valid_string_valid_index = 0\n    var file_name_valid_string_valid_char\
    \ = \"\"\n    var file_name_valid_string_valid_length = 0\n    var file_name_valid_string_valid_string\
    \ = \"\"\n    var file_name_valid_string_valid_string_index = 0\n    var file_name_valid_string_valid_string_char\
    \ = \"\"\n    var file_name_valid_string_valid_string_length = 0\n    var file_name_",
  "    let file_name_arr = file_name.split(separator: \".\")\n    if file_name_arr.count\
    \ != 2 {\n        return \"No\"\n    }\n    let first_part = file_name_arr[0]\n\
    \    let second_part = file_name_arr[1]\n    if first_part.count == 0 || first_part.count\
    \ > 8 {\n        return \"No\"\n    }\n    if !first_part.first!.isLetter {\n\
    \        return \"No\"\n    }\n    if second_part != \"txt\" && second_part !=\
    \ \"exe\" && second_part != \"dll\" {\n        return \"No\"\n    }\n    var count\
    \ = 0\n    for c in first_part {\n        if c.isNumber {\n            count +=\
    \ 1\n        }\n    }\n    if count > 3 {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", "    let file_name_arr = file_name.components(separatedBy: \".\")\n\
    \    let file_name_arr_count = file_name_arr.count\n    let file_name_arr_first\
    \ = file_name_arr[0]\n    let file_name_arr_last = file_name_arr[file_name_arr_count\
    \ - 1]\n    let file_name_arr_first_count = file_name_arr_first.count\n    let\
    \ file_name_arr_last_count = file_name_arr_last.count\n    let file_name_arr_first_arr\
    \ = Array(file_name_arr_first)\n    let file_name_arr_last_arr = Array(file_name_arr_last)\n\
    \    let file_name_arr_first_arr_first = file_name_arr_first_arr[0]\n    let file_name_arr_last_arr_last\
    \ = file_name_arr_last_arr[file_name_arr_last_count - 1]\n    let file_name_arr_first_arr_first_ascii\
    \ = file_name_arr_first_arr_first.asciiValue\n    let file_name_arr_last_arr_last_ascii\
    \ = file_name_arr_last_arr_last.asciiValue\n    let file_name_arr_first_arr_first_ascii_int\
    \ = Int(file_name_arr_first_arr_first_ascii!)\n    let file_name_arr_last_arr_last_ascii_int\
    \ = Int(file_name_arr_last_arr_last_ascii!)\n    let file_name_arr_first_arr_first_ascii_int_min\
    \ = 97\n    let file_name_arr_first_arr_first_ascii_int_max = 122\n    let file_name_arr_last_arr_last_ascii_int_min\
    \ = 97\n    let file_name_arr_last_arr_last_ascii_int_max = 122\n    let file_name_arr_last_arr_last_ascii_int_min_upper\
    \ = 65\n   ", "    let file_name_arr = file_name.split(separator: \".\")\n   \
    \ let file_name_arr_count = file_name_arr.count\n    let file_name_arr_first =\
    \ file_name_arr[0]\n    let file_name_arr_last = file_name_arr[file_name_arr_count\
    \ - 1]\n    let file_name_arr_first_count = file_name_arr_first.count\n    let\
    \ file_name_arr_last_count = file_name_arr_last.count\n    let file_name_arr_first_arr\
    \ = Array(file_name_arr_first)\n    let file_name_arr_last_arr = Array(file_name_arr_last)\n\
    \    var file_name_arr_first_arr_count = 0\n    var file_name_arr_last_arr_count\
    \ = 0\n    var file_name_arr_first_arr_first = \"\"\n    var file_name_arr_last_arr_first\
    \ = \"\"\n    var file_name_arr_first_arr_last = \"\"\n    var file_name_arr_last_arr_last\
    \ = \"\"\n    var file_name_arr_first_arr_first_count = 0\n    var file_name_arr_last_arr_first_count\
    \ = 0\n    var file_name_arr_first_arr_last_count = 0\n    var file_name_arr_last_arr_last_count\
    \ = 0\n    var file_name_arr_first_arr_first_arr = [String]()\n    var file_name_arr_last_arr_first_arr\
    \ = [String]()\n    var file_name_arr_first_arr_last_arr = [String]()\n    var\
    \ file_name_arr_last_arr_last_arr = [String]()\n    var file_name_arr_first_arr_first_arr_count\
    \ = 0\n    var file_name_arr_last_arr_first_arr_count = 0\n    var file_name_arr_first_arr_last_arr_count\
    \ = 0\n    var file_name_arr_last_arr_last_arr_count = 0\n    var file_name",
  "    let file_name_components = file_name.components(separatedBy: \".\")\n    if\
    \ file_name_components.count != 2 {\n        return \"No\"\n    }\n    let file_name_prefix\
    \ = file_name_components[0]\n    let file_name_suffix = file_name_components[1]\n\
    \    if file_name_prefix.count == 0 || file_name_suffix.count == 0 {\n       \
    \ return \"No\"\n    }\n    if file_name_suffix != \"txt\" && file_name_suffix\
    \ != \"exe\" && file_name_suffix != \"dll\" {\n        return \"No\"\n    }\n\
    \    let file_name_prefix_components = file_name_prefix.components(separatedBy:\
    \ CharacterSet.decimalDigits)\n    if file_name_prefix_components.count > 1 {\n\
    \        return \"No\"\n    }\n    let file_name_prefix_first_char = file_name_prefix[file_name_prefix.startIndex]\n\
    \    if !(file_name_prefix_first_char >= \"a\" && file_name_prefix_first_char\
    \ <= \"z\") &&\n        !(file_name_prefix_first_char >= \"A\" && file_name_prefix_first_char\
    \ <= \"Z\") {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr\
    \ = file_name.split(separator: \".\")\n    if file_name_arr.count != 2 {\n   \
    \     return \"No\"\n    }\n    let file_name_arr_0 = file_name_arr[0]\n    let\
    \ file_name_arr_1 = file_name_arr[1]\n    if file_name_arr_0.count == 0 {\n  \
    \      return \"No\"\n    }\n    if !(file_name_arr_0.first! >= \"a\" && file_name_arr_0.first!\
    \ <= \"z\" || file_name_arr_0.first! >= \"A\" && file_name_arr_0.first! <= \"\
    Z\") {\n        return \"No\"\n    }\n    if file_name_arr_1 != \"txt\" && file_name_arr_1\
    \ != \"exe\" && file_name_arr_1 != \"dll\" {\n        return \"No\"\n    }\n \
    \   var count = 0\n    for char in file_name_arr_0 {\n        if char >= \"0\"\
    \ && char <= \"9\" {\n            count += 1\n        }\n    }\n    if count >\
    \ 3 {\n        return \"No\"\n    }\n    return \"Yes\"", "    let digits = CharacterSet.decimalDigits\n\
    \    let letters = CharacterSet.letters\n    let dot = CharacterSet(charactersIn:\
    \ \".\")\n    let valid_extensions = [\"txt\", \"exe\", \"dll\"]\n    let components\
    \ = file_name.components(separatedBy: dot)\n    let extension_part = components.last!\n\
    \    let name_part = components.first!\n    let name_part_first_char = name_part.first!\n\
    \    let digits_count = name_part.filter { digits.contains($0.unicodeScalars.first!)\
    \ }.count\n    let letters_count = name_part.filter { letters.contains($0.unicodeScalars.first!)\
    \ }.count\n    let dot_count = file_name.filter { dot.contains($0.unicodeScalars.first!)\
    \ }.count\n    if digits_count > 3 {\n        return \"No\"\n    }\n    if dot_count\
    \ != 1 {\n        return \"No\"\n    }\n    if letters_count == 0 {\n        return\
    \ \"No\"\n    }\n    if !letters.contains(name_part_first_char.unicodeScalars.first!)\
    \ {\n        return \"No\"\n    }\n    if !valid_extensions.contains(extension_part)\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    return file_name.matches(file_name_regex)\
    \ ? \"Yes\" : \"No\"", "    let file_name_arr = file_name.split(separator: \"\
    .\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n    let\
    \ file_name_arr_0 = file_name_arr[0]\n    let file_name_arr_1 = file_name_arr[1]\n\
    \    if file_name_arr_0.count == 0 {\n        return \"No\"\n    }\n    if file_name_arr_1.count\
    \ == 0 {\n        return \"No\"\n    }\n    if file_name_arr_1 != \"txt\" && file_name_arr_1\
    \ != \"exe\" && file_name_arr_1 != \"dll\" {\n        return \"No\"\n    }\n \
    \   var count = 0\n    for char in file_name_arr_0 {\n        if char >= \"0\"\
    \ && char <= \"9\" {\n            count += 1\n        }\n    }\n    if count >\
    \ 3 {\n        return \"No\"\n    }\n    if file_name_arr_0[file_name_arr_0.startIndex]\
    \ >= \"0\" && file_name_arr_0[file_name_arr_0.startIndex] <= \"9\" {\n       \
    \ return \"No\"\n    }\n    return \"Yes\"", "    let file_name_array = file_name.split(separator:\
    \ \".\")\n    let file_name_array_count = file_name_array.count\n    let file_name_array_first\
    \ = file_name_array[0]\n    let file_name_array_last = file_name_array[file_name_array_count\
    \ - 1]\n    let file_name_array_first_count = file_name_array_first.count\n  \
    \  let file_name_array_last_count = file_name_array_last.count\n    let file_name_array_first_first\
    \ = file_name_array_first[file_name_array_first.startIndex]\n    let file_name_array_first_first_ascii\
    \ = file_name_array_first_first.asciiValue\n    let file_name_array_first_first_ascii_int\
    \ = Int(file_name_array_first_first_ascii!)\n    let file_name_array_first_first_ascii_int_lower\
    \ = file_name_array_first_first_ascii_int! - 32\n    let file_name_array_first_first_ascii_int_upper\
    \ = file_name_array_first_first_ascii_int! + 32\n    var file_name_array_first_first_ascii_int_lower_bool\
    \ = false\n    var file_name_array_first_first_ascii_int_upper_bool = false\n\
    \    if file_name_array_first_first_ascii_int_lower >= 97 && file_name_array_first_first_ascii_int_lower\
    \ <= 122 {\n        file_name_array_first_first_ascii_int_lower_bool = true\n\
    \    }\n    if file_name_array_first_first_ascii_int_upper >= 65 && file_name_array_first_first_ascii_int_upper\
    \ <= 90 {\n        file_name_array_first_first_ascii_int_upper_bool = true\n \
    \   }\n    var file_name_array_first_first_ascii_int_bool = false", "    let file_name_components\
    \ = file_name.components(separatedBy: \".\")\n    let file_name_without_extension\
    \ = file_name_components[0]\n    let file_name_extension = file_name_components[1]\n\
    \    let file_name_without_extension_components = file_name_without_extension.components(separatedBy:\
    \ CharacterSet.decimalDigits.inverted)\n    let file_name_without_extension_digits\
    \ = file_name_without_extension_components.filter { $0 != \"\" }\n    let file_name_without_extension_first_character\
    \ = file_name_without_extension.first\n    let file_name_without_extension_first_character_is_valid\
    \ = file_name_without_extension_first_character?.isLetter ?? false\n    let file_name_extension_is_valid\
    \ = file_name_extension == \"txt\" || file_name_extension == \"exe\" || file_name_extension\
    \ == \"dll\"\n    let file_name_without_extension_digits_count_is_valid = file_name_without_extension_digits.count\
    \ <= 3\n    let file_name_is_valid = file_name_without_extension_first_character_is_valid\
    \ && file_name_extension_is_valid && file_name_without_extension_digits_count_is_valid\n\
    \    return file_name_is_valid ? \"Yes\" : \"No\"", "    let digits = \"0123456789\"\
    \n    let alphapet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\
    \    let extensions = [\"txt\", \"exe\", \"dll\"]\n    var count = 0\n    var\
    \ dot_count = 0\n    var extension_count = 0\n    var alphapet_count = 0\n   \
    \ for char in file_name {\n        if digits.contains(char) {\n            count\
    \ += 1\n        }\n        if char == \".\" {\n            dot_count += 1\n  \
    \      }\n        if alphapet.contains(char) {\n            alphapet_count +=\
    \ 1\n        }\n    }\n    for ext in extensions {\n        if file_name.contains(ext)\
    \ {\n            extension_count += 1\n        }\n    }\n    if count > 3 || dot_count\
    \ != 1 || alphapet_count == 0 || extension_count != 1 {\n        return \"No\"\
    \n    }\n    return \"Yes\"", "    let file_name_array = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_array.count != 2 {\n        return \"No\"\n    }\n\
    \    let first_part = file_name_array[0]\n    let second_part = file_name_array[1]\n\
    \    if first_part.count == 0 || !first_part.contains(where: {$0 >= \"a\" && $0\
    \ <= \"z\"}) {\n        return \"No\"\n    }\n    if second_part != \"txt\" &&\
    \ second_part != \"exe\" && second_part != \"dll\" {\n        return \"No\"\n\
    \    }\n    if first_part.contains(where: {$0 >= \"0\" && $0 <= \"9\"}) {\n  \
    \      var digit_count = 0\n        for char in first_part {\n            if char\
    \ >= \"0\" && char <= \"9\" {\n                digit_count += 1\n            }\n\
    \        }\n        if digit_count > 3 {\n            return \"No\"\n        }\n\
    \    }\n    return \"Yes\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    let file_name_arr_first\
    \ = file_name_arr[0]\n    let file_name_arr_last = file_name_arr[file_name_arr_count\
    \ - 1]\n    let file_name_arr_first_count = file_name_arr_first.count\n    let\
    \ file_name_arr_last_count = file_name_arr_last.count\n    let file_name_arr_first_char\
    \ = file_name_arr_first[file_name_arr_first.startIndex]\n    let file_name_arr_last_char\
    \ = file_name_arr_last[file_name_arr_last.startIndex]\n    let file_name_arr_first_char_int\
    \ = Int(String(file_name_arr_first_char))\n    let file_name_arr_last_char_int\
    \ = Int(String(file_name_arr_last_char))\n    let file_name_arr_first_char_int_count\
    \ = String(file_name_arr_first_char_int).count\n    let file_name_arr_last_char_int_count\
    \ = String(file_name_arr_last_char_int).count\n    let file_name_arr_first_char_int_count_bool\
    \ = file_name_arr_first_char_int_count > 0\n    let file_name_arr_last_char_int_count_bool\
    \ = file_name_arr_last_char_int_count > 0\n    let file_name_arr_first_char_int_count_bool_not\
    \ = !file_name_arr_first_char_int_count_bool\n    let file_name_arr_last_char_int_count_bool_not\
    \ = !file_name_arr_last_char_int_count_bool\n    let file_name_arr_first_char_int_count_bool_not_and\
    \ = file_name_arr_first_char_int_count_bool_not && file_name_arr_last_char_int_count",
  "    let file_name_array = file_name.components(separatedBy: \".\")\n    let file_name_without_extension\
    \ = file_name_array[0]\n    let file_name_extension = file_name_array[1]\n   \
    \ let file_name_without_extension_array = Array(file_name_without_extension)\n\
    \    var number_of_digits = 0\n    for character in file_name_without_extension_array\
    \ {\n        if character >= \"0\" && character <= \"9\" {\n            number_of_digits\
    \ += 1\n        }\n    }\n    if number_of_digits > 3 {\n        return \"No\"\
    \n    }\n    if file_name_without_extension.count == 0 {\n        return \"No\"\
    \n    }\n    if file_name_without_extension_array[0] < \"A\" || file_name_without_extension_array[0]\
    \ > \"z\" {\n        return \"No\"\n    }\n    if file_name_extension != \"txt\"\
    \ && file_name_extension != \"exe\" && file_name_extension != \"dll\" {\n    \
    \    return \"No\"\n    }\n    return \"Yes\"", "    let file_name_array = file_name.split(separator:\
    \ \".\")\n    if file_name_array.count != 2 {\n        return \"No\"\n    }\n\
    \    let first_part = file_name_array[0]\n    let second_part = file_name_array[1]\n\
    \    if first_part.count == 0 || !first_part.first!.isLetter {\n        return\
    \ \"No\"\n    }\n    if second_part != \"txt\" && second_part != \"exe\" && second_part\
    \ != \"dll\" {\n        return \"No\"\n    }\n    if first_part.filter({ $0.isNumber\
    \ }).count > 3 {\n        return \"No\"\n    }\n    return \"Yes\"", "    let\
    \ digits = CharacterSet.decimalDigits\n    let alphapet = CharacterSet.letters\n\
    \    let dot = CharacterSet.init(charactersIn: \".\")\n    let txt = CharacterSet.init(charactersIn:\
    \ \"txt\")\n    let exe = CharacterSet.init(charactersIn: \"exe\")\n    let dll\
    \ = CharacterSet.init(charactersIn: \"dll\")\n    let file_name_characters = CharacterSet.init(charactersIn:\
    \ file_name)\n    var digits_count = 0\n    var dot_count = 0\n    var dot_index\
    \ = 0\n    var extension_start_index = 0\n    var extension_end_index = 0\n  \
    \  var extension_length = 0\n    var extension_characters = CharacterSet()\n \
    \   var extension_valid = false\n    var extension_txt = false\n    var extension_exe\
    \ = false\n    var extension_dll = false\n    var extension_valid_count = 0\n\
    \    var extension_valid_txt = false\n    var extension_valid_exe = false\n  \
    \  var extension_valid_dll = false\n    var extension_valid_count_txt = 0\n  \
    \  var extension_valid_count_exe = 0\n    var extension_valid_count_dll = 0\n\
    \    var extension_valid_count_txt_exe = 0\n    var extension_valid_count_txt_dll\
    \ = 0\n    var extension_valid_count_exe_dll = 0\n    var extension_valid_count_txt_exe_dll\
    \ = 0\n    var extension_valid_txt_exe = false\n    var extension_valid_txt_dll\
    \ = false\n    var extension_valid_exe_dll = false\n    var extension_valid_txt_exe_dll\
    \ = false\n    var extension_valid_txt_exe_count = 0\n    var extension_valid_txt_dll_count\
    \ = 0\n    var extension_valid_exe_dll_count = 0\n    var extension_valid_txt_exe_dll_count\
    \ = 0\n    var extension_valid_txt_exe_txt = false\n    var extension_valid_txt_exe_exe\
    \ = false\n    var extension_valid_txt_exe_dll = false\n    var extension_valid_txt_dll_txt\
    \ = false\n   ", "    let file_name_arr = file_name.split(separator: \".\")\n\
    \    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n    let first_part\
    \ = file_name_arr[0]\n    let second_part = file_name_arr[1]\n    if first_part.count\
    \ == 0 || first_part.count > 8 {\n        return \"No\"\n    }\n    if second_part\
    \ != \"txt\" && second_part != \"exe\" && second_part != \"dll\" {\n        return\
    \ \"No\"\n    }\n    var digits_count = 0\n    for c in first_part {\n       \
    \ if c >= \"0\" && c <= \"9\" {\n            digits_count += 1\n        }\n  \
    \  }\n    if digits_count > 3 {\n        return \"No\"\n    }\n    if first_part[first_part.startIndex]\
    \ < \"a\" || first_part[first_part.startIndex] > \"z\" {\n        if first_part[first_part.startIndex]\
    \ < \"A\" || first_part[first_part.startIndex] > \"Z\" {\n            return \"\
    No\"\n        }\n    }\n    return \"Yes\"", "    let file_name_array = file_name.split(separator:\
    \ \".\")\n    if file_name_array.count != 2 {\n        return \"No\"\n    }\n\
    \    let first_part = file_name_array[0]\n    let second_part = file_name_array[1]\n\
    \    if first_part.count == 0 || first_part.count > 8 {\n        return \"No\"\
    \n    }\n    if second_part != \"txt\" && second_part != \"exe\" && second_part\
    \ != \"dll\" {\n        return \"No\"\n    }\n    var digit_count = 0\n    for\
    \ char in first_part {\n        if char >= \"0\" && char <= \"9\" {\n        \
    \    digit_count += 1\n        }\n    }\n    if digit_count > 3 {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let file_name_arr_0 = file_name_arr[0]\n    let file_name_arr_1 = file_name_arr[1]\n\
    \    if file_name_arr_0.count == 0 || file_name_arr_1.count == 0 {\n        return\
    \ \"No\"\n    }\n    if !(file_name_arr_0.first! >= \"a\" && file_name_arr_0.first!\
    \ <= \"z\" || file_name_arr_0.first! >= \"A\" && file_name_arr_0.first! <= \"\
    Z\") {\n        return \"No\"\n    }\n    if file_name_arr_1 != \"txt\" && file_name_arr_1\
    \ != \"exe\" && file_name_arr_1 != \"dll\" {\n        return \"No\"\n    }\n \
    \   var count = 0\n    for char in file_name_arr_0 {\n        if char >= \"0\"\
    \ && char <= \"9\" {\n            count += 1\n        }\n    }\n    if count >\
    \ 3 {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_components\
    \ = file_name.components(separatedBy: \".\")\n    let file_name_without_extension\
    \ = file_name_components[0]\n    let file_name_extension = file_name_components[1]\n\
    \    let file_name_without_extension_components = file_name_without_extension.components(separatedBy:\
    \ CharacterSet.decimalDigits.inverted)\n    let file_name_without_extension_digits\
    \ = file_name_without_extension_components.joined()\n    let file_name_without_extension_first_character\
    \ = file_name_without_extension.first!\n    let file_name_without_extension_first_character_is_valid\
    \ = file_name_without_extension_first_character.isLetter\n    let file_name_extension_is_valid\
    \ = [\"txt\", \"exe\", \"dll\"].contains(file_name_extension)\n    let file_name_without_extension_digits_count\
    \ = file_name_without_extension_digits.count\n    let file_name_without_extension_digits_count_is_valid\
    \ = file_name_without_extension_digits_count <= 3\n    let file_name_is_valid\
    \ = file_name_without_extension_first_character_is_valid && file_name_extension_is_valid\
    \ && file_name_without_extension_digits_count_is_valid\n    return file_name_is_valid\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_test = NSPredicate(format:\"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_split = file_name.split(separator: \".\")\n    if file_name_split.count\
    \ != 2 {\n        return \"No\"\n    }\n    let prefix = file_name_split[0]\n\
    \    let suffix = file_name_split[1]\n    if prefix.count == 0 || !prefix.contains(where:\
    \ { $0 >= \"a\" && $0 <= \"z\" || $0 >= \"A\" && $0 <= \"Z\" }) {\n        return\
    \ \"No\"\n    }\n    if prefix.contains(where: { $0 >= \"0\" && $0 <= \"9\" })\
    \ {\n        let prefix_digit_count = prefix.filter { $0 >= \"0\" && $0 <= \"\
    9\" }.count\n        if prefix_digit_count > 3 {\n            return \"No\"\n\
    \        }\n    }\n    if suffix != \"txt\" && suffix != \"exe\" && suffix !=\
    \ \"dll\" {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_split\
    \ = file_name.split(separator: \".\")\n    if file_name_split.count != 2 {\n \
    \       return \"No\"\n    }\n    let file_name_split_0 = file_name_split[0]\n\
    \    let file_name_split_1 = file_name_split[1]\n    if file_name_split_0.count\
    \ == 0 || file_name_split_1.count == 0 {\n        return \"No\"\n    }\n    if\
    \ file_name_split_1 != \"txt\" && file_name_split_1 != \"exe\" && file_name_split_1\
    \ != \"dll\" {\n        return \"No\"\n    }\n    var digits_count = 0\n    for\
    \ char in file_name_split_0 {\n        if char >= \"0\" && char <= \"9\" {\n \
    \           digits_count += 1\n        }\n    }\n    if digits_count > 3 {\n \
    \       return \"No\"\n    }\n    if file_name_split_0[file_name_split_0.startIndex]\
    \ < \"A\" || file_name_split_0[file_name_split_0.startIndex] > \"z\" {\n     \
    \   return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let first_part = file_name_arr[0]\n    let second_part = file_name_arr[1]\n\
    \    if first_part.count == 0 || first_part.count > 8 {\n        return \"No\"\
    \n    }\n    if second_part != \"txt\" && second_part != \"exe\" && second_part\
    \ != \"dll\" {\n        return \"No\"\n    }\n    var digit_count = 0\n    for\
    \ char in first_part {\n        if char >= \"0\" && char <= \"9\" {\n        \
    \    digit_count += 1\n        }\n    }\n    if digit_count > 3 {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let file_name_arr_0 = file_name_arr[0]\n    let file_name_arr_1 = file_name_arr[1]\n\
    \    if file_name_arr_0.count == 0 || file_name_arr_1.count == 0 {\n        return\
    \ \"No\"\n    }\n    if file_name_arr_0.rangeOfCharacter(from: CharacterSet.decimalDigits)\
    \ != nil {\n        return \"No\"\n    }\n    if file_name_arr_1 != \"txt\" &&\
    \ file_name_arr_1 != \"exe\" && file_name_arr_1 != \"dll\" {\n        return \"\
    No\"\n    }\n    return \"Yes\"", "    let file_name_split = file_name.split(separator:\
    \ \".\")\n    if file_name_split.count != 2 {\n        return \"No\"\n    }\n\
    \    let file_name_split_0 = file_name_split[0]\n    let file_name_split_1 = file_name_split[1]\n\
    \    if file_name_split_0.count == 0 {\n        return \"No\"\n    }\n    if file_name_split_1.count\
    \ == 0 {\n        return \"No\"\n    }\n    if file_name_split_1 != \"txt\" &&\
    \ file_name_split_1 != \"exe\" && file_name_split_1 != \"dll\" {\n        return\
    \ \"No\"\n    }\n    var count = 0\n    for char in file_name_split_0 {\n    \
    \    if char >= \"0\" && char <= \"9\" {\n            count += 1\n        }\n\
    \    }\n    if count > 3 {\n        return \"No\"\n    }\n    if file_name_split_0[file_name_split_0.startIndex]\
    \ < \"A\" || file_name_split_0[file_name_split_0.startIndex] > \"z\" {\n     \
    \   return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let first_part = file_name_arr[0]\n    let second_part = file_name_arr[1]\n\
    \    if first_part.count == 0 || first_part.count > 8 {\n        return \"No\"\
    \n    }\n    if second_part != \"txt\" && second_part != \"exe\" && second_part\
    \ != \"dll\" {\n        return \"No\"\n    }\n    var digit_count = 0\n    for\
    \ c in first_part {\n        if c >= \"0\" && c <= \"9\" {\n            digit_count\
    \ += 1\n        }\n    }\n    if digit_count > 3 {\n        return \"No\"\n  \
    \  }\n    return \"Yes\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let file_name_arr_0 = file_name_arr[0]\n    let file_name_arr_1 = file_name_arr[1]\n\
    \    if file_name_arr_0.count == 0 || file_name_arr_1.count == 0 {\n        return\
    \ \"No\"\n    }\n    let file_name_arr_0_first_char = file_name_arr_0[file_name_arr_0.startIndex]\n\
    \    if !file_name_arr_0_first_char.isLetter {\n        return \"No\"\n    }\n\
    \    let file_name_arr_0_digit_count = file_name_arr_0.filter({$0.isNumber}).count\n\
    \    if file_name_arr_0_digit_count > 3 {\n        return \"No\"\n    }\n    let\
    \ file_name_arr_1_valid_extensions = [\"txt\", \"exe\", \"dll\"]\n    if !file_name_arr_1_valid_extensions.contains(file_name_arr_1)\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_components\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_components.count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_without_extension =\
    \ file_name_components[0]\n    let file_extension = file_name_components[1]\n\
    \    if file_name_without_extension.count == 0 {\n        return \"No\"\n    }\n\
    \    if file_name_without_extension.count > 3 {\n        return \"No\"\n    }\n\
    \    if file_name_without_extension.rangeOfCharacter(from: CharacterSet.decimalDigits)\
    \ != nil {\n        return \"No\"\n    }\n    if file_extension != \"txt\" &&\
    \ file_extension != \"exe\" && file_extension != \"dll\" {\n        return \"\
    No\"\n    }\n    return \"Yes\"", "    let digits = CharacterSet.decimalDigits\n\
    \    let letters = CharacterSet.letters\n    let dot = CharacterSet(charactersIn:\
    \ \".\")\n    let file_extensions = [\"txt\", \"exe\", \"dll\"]\n    var digits_count\
    \ = 0\n    var dot_count = 0\n    var dot_index = 0\n    var file_extension =\
    \ \"\"\n    var file_name_without_extension = \"\"\n    for (index, char) in file_name.enumerated()\
    \ {\n        if digits.contains(char.unicodeScalars.first!) {\n            digits_count\
    \ += 1\n        }\n        if dot.contains(char.unicodeScalars.first!) {\n   \
    \         dot_count += 1\n            dot_index = index\n        }\n    }\n  \
    \  if digits_count > 3 || dot_count != 1 {\n        return \"No\"\n    }\n   \
    \ file_extension = String(file_name[file_name.index(file_name.startIndex, offsetBy:\
    \ dot_index + 1)...])\n    file_name_without_extension = String(file_name[..<file_name.index(file_name.startIndex,\
    \ offsetBy: dot_index)])\n    if !file_extensions.contains(file_extension) ||\
    \ file_name_without_extension.isEmpty || !letters.contains(file_name_without_extension.first!.unicodeScalars.first!)\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    let digits = CharacterSet.decimalDigits\n\
    \    let latin_letters = CharacterSet.letters\n    let valid_extensions = [\"\
    txt\", \"exe\", \"dll\"]\n    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_components.count != 2 {\n        return \"No\"\n  \
    \  }\n    let file_name_without_extension = file_name_components[0]\n    let file_name_extension\
    \ = file_name_components[1]\n    if file_name_without_extension.count == 0 ||\
    \ file_name_extension.count == 0 {\n        return \"No\"\n    }\n    if file_name_without_extension.rangeOfCharacter(from:\
    \ digits) != nil {\n        return \"No\"\n    }\n    if file_name_without_extension.rangeOfCharacter(from:\
    \ latin_letters) == nil {\n        return \"No\"\n    }\n    if !valid_extensions.contains(file_name_extension)\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr\
    \ = file_name.split(separator: \".\")\n    if file_name_arr.count != 2 {\n   \
    \     return \"No\"\n    }\n    let file_name_arr_0 = file_name_arr[0]\n    let\
    \ file_name_arr_1 = file_name_arr[1]\n    if file_name_arr_0.count == 0 {\n  \
    \      return \"No\"\n    }\n    if file_name_arr_1 != \"txt\" && file_name_arr_1\
    \ != \"exe\" && file_name_arr_1 != \"dll\" {\n        return \"No\"\n    }\n \
    \   var digit_count = 0\n    for char in file_name_arr_0 {\n        if char >=\
    \ \"0\" && char <= \"9\" {\n            digit_count += 1\n        }\n    }\n \
    \   if digit_count > 3 {\n        return \"No\"\n    }\n    if file_name_arr_0[file_name_arr_0.startIndex]\
    \ < \"A\" || file_name_arr_0[file_name_arr_0.startIndex] > \"z\" {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_components_count = file_name_components.count\n  \
    \  if file_name_components_count != 2 {\n        return \"No\"\n    }\n    let\
    \ file_name_components_0 = file_name_components[0]\n    let file_name_components_1\
    \ = file_name_components[1]\n    if file_name_components_0.count == 0 {\n    \
    \    return \"No\"\n    }\n    if file_name_components_1.count == 0 {\n      \
    \  return \"No\"\n    }\n    if file_name_components_1 != \"txt\" && file_name_components_1\
    \ != \"exe\" && file_name_components_1 != \"dll\" {\n        return \"No\"\n \
    \   }\n    let file_name_components_0_first_char = file_name_components_0[file_name_components_0.startIndex]\n\
    \    if !(file_name_components_0_first_char >= \"a\" && file_name_components_0_first_char\
    \ <= \"z\" || file_name_components_0_first_char >= \"A\" && file_name_components_0_first_char\
    \ <= \"Z\") {\n        return \"No\"\n    }\n    var file_name_components_0_digit_count\
    \ = 0\n    for char in file_name_components_0 {\n        if char >= \"0\" && char\
    \ <= \"9\" {\n            file_name_components_0_digit_count += 1\n        }\n\
    \    }\n    if file_name_components_0_digit_count > 3 {\n        return \"No\"\
    \n    }\n    return \"Yes\"", "    let digits = \"0123456789\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let extensions\
    \ = [\"txt\", \"exe\", \"dll\"]\n    var digit_count = 0\n    var dot_count =\
    \ 0\n    var extension_found = false\n    var extension_start = 0\n    var extension_end\
    \ = 0\n    var extension_length = 0\n    var extension_string = \"\"\n    var\
    \ extension_index = 0\n    var extension_string_length = 0\n    var extension_string_index\
    \ = 0\n    var extension_string_char = \"\"\n    var extension_string_char_index\
    \ = 0\n    var extension_string_char_found = false\n    var extension_string_char_count\
    \ = 0\n    var extension_string_char_count_max = 0\n    var extension_string_char_count_min\
    \ = 0\n    var extension_string_char_count_valid = false\n    var extension_string_char_count_valid_max\
    \ = false\n    var extension_string_char_count_valid_min = false\n    var extension_string_char_count_valid_all\
    \ = false\n    var extension_string_char_count_valid_all_max = false\n    var\
    \ extension_string_char_count_valid_all_min = false\n    var extension_string_char_count_valid_all_all\
    \ = false\n    var extension_string_char_count_valid_all_all_max = false\n   \
    \ var extension_string_char_count_valid_all_all_min = false\n    var extension_string_char_count_valid_all_all_all\
    \ = false\n    var extension_string_char_count_valid_all_all_all_max = false\n\
    \    var extension_string_char_count_valid_all_all_all_min = false\n    var extension_string_char_count_valid_all_all_all_all\
    \ = false\n    var extension_string_char_count_valid_all_all_all_all_max = false\n\
    \    var extension_string_char_count_valid_all_all_all_all_min = false\n   ",
  "    let file_name_arr = file_name.split(separator: \".\")\n    if file_name_arr.count\
    \ != 2 {\n        return \"No\"\n    }\n    let name = file_name_arr[0]\n    let\
    \ ext = file_name_arr[1]\n    if name.count == 0 || !name.first!.isLetter {\n\
    \        return \"No\"\n    }\n    if name.filter({$0.isNumber}).count > 3 {\n\
    \        return \"No\"\n    }\n    if ext != \"txt\" && ext != \"exe\" && ext\
    \ != \"dll\" {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr\
    \ = file_name.split(separator: \".\")\n    if file_name_arr.count != 2 {\n   \
    \     return \"No\"\n    }\n    let first_substr = file_name_arr[0]\n    let second_substr\
    \ = file_name_arr[1]\n    if first_substr.count == 0 || first_substr.count > 8\
    \ {\n        return \"No\"\n    }\n    if second_substr != \"txt\" && second_substr\
    \ != \"exe\" && second_substr != \"dll\" {\n        return \"No\"\n    }\n   \
    \ let first_substr_arr = Array(first_substr)\n    var digit_count = 0\n    for\
    \ char in first_substr_arr {\n        if char >= \"0\" && char <= \"9\" {\n  \
    \          digit_count += 1\n        }\n    }\n    if digit_count > 3 {\n    \
    \    return \"No\"\n    }\n    if first_substr_arr[0] < \"A\" || (first_substr_arr[0]\
    \ > \"Z\" && first_substr_arr[0] < \"a\") || first_substr_arr[0] > \"z\" {\n \
    \       return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let name = file_name_arr[0]\n    let ext = file_name_arr[1]\n    if name.count\
    \ == 0 || !name.first!.isLetter {\n        return \"No\"\n    }\n    if name.filter({$0.isNumber}).count\
    \ > 3 {\n        return \"No\"\n    }\n    if ![\"txt\", \"exe\", \"dll\"].contains(ext)\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_arr.count != 2\
    \ {\n        return \"No\"\n    }\n    let first_part = file_name_arr[0]\n   \
    \ let second_part = file_name_arr[1]\n    if first_part.count == 0 || !first_part.contains(where:\
    \ { $0 >= \"a\" && $0 <= \"z\" || $0 >= \"A\" && $0 <= \"Z\" }) {\n        return\
    \ \"No\"\n    }\n    if second_part.count == 0 || !(second_part == \"txt\" ||\
    \ second_part == \"exe\" || second_part == \"dll\") {\n        return \"No\"\n\
    \    }\n    if first_part.contains(where: { $0 >= \"0\" && $0 <= \"9\" }) {\n\
    \        var count = 0\n        for c in first_part {\n            if c >= \"\
    0\" && c <= \"9\" {\n                count += 1\n            }\n        }\n  \
    \      if count > 3 {\n            return \"No\"\n        }\n    }\n    return\
    \ \"Yes\"", "    let file_name_arr = file_name.split(separator: \".\")\n    if\
    \ file_name_arr.count != 2 {\n        return \"No\"\n    }\n    let first_part\
    \ = file_name_arr[0]\n    let second_part = file_name_arr[1]\n    if first_part.count\
    \ == 0 || !first_part.first!.isLetter {\n        return \"No\"\n    }\n    if\
    \ second_part != \"txt\" && second_part != \"exe\" && second_part != \"dll\" {\n\
    \        return \"No\"\n    }\n    if first_part.filter({$0.isNumber}).count >\
    \ 3 {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_components\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_components.count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_without_extension =\
    \ file_name_components[0]\n    let file_extension = file_name_components[1]\n\
    \    if file_name_without_extension.count == 0 {\n        return \"No\"\n    }\n\
    \    let valid_extensions = [\"txt\", \"exe\", \"dll\"]\n    if !valid_extensions.contains(file_extension)\
    \ {\n        return \"No\"\n    }\n    let file_name_without_extension_components\
    \ = file_name_without_extension.components(separatedBy: CharacterSet.decimalDigits)\n\
    \    if file_name_without_extension_components.count > 1 {\n        return \"\
    No\"\n    }\n    let first_character = file_name_without_extension.first!\n  \
    \  if !CharacterSet.letters.contains(first_character.unicodeScalars.first!) {\n\
    \        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let file_name_arr_0 = file_name_arr[0]\n    let file_name_arr_1 = file_name_arr[1]\n\
    \    if file_name_arr_0.count == 0 {\n        return \"No\"\n    }\n    if file_name_arr_1.count\
    \ == 0 {\n        return \"No\"\n    }\n    if !file_name_arr_0.contains(where:\
    \ {$0 >= \"a\" && $0 <= \"z\"}) && !file_name_arr_0.contains(where: {$0 >= \"\
    A\" && $0 <= \"Z\"}) {\n        return \"No\"\n    }\n    if file_name_arr_0.contains(where:\
    \ {$0 >= \"0\" && $0 <= \"9\"}) {\n        return \"No\"\n    }\n    if file_name_arr_1\
    \ != \"txt\" && file_name_arr_1 != \"exe\" && file_name_arr_1 != \"dll\" {\n \
    \       return \"No\"\n    }\n    return \"Yes\"", "    let file_name_array =\
    \ file_name.split(separator: \".\")\n    if file_name_array.count != 2 {\n   \
    \     return \"No\"\n    }\n    let first_part = file_name_array[0]\n    let second_part\
    \ = file_name_array[1]\n    if first_part.count == 0 || first_part.count > 8 {\n\
    \        return \"No\"\n    }\n    if second_part.count == 0 || second_part.count\
    \ > 3 {\n        return \"No\"\n    }\n    if !(second_part == \"txt\" || second_part\
    \ == \"exe\" || second_part == \"dll\") {\n        return \"No\"\n    }\n    let\
    \ first_part_array = Array(first_part)\n    var digit_count = 0\n    for char\
    \ in first_part_array {\n        if char >= \"0\" && char <= \"9\" {\n       \
    \     digit_count += 1\n        }\n    }\n    if digit_count > 3 {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "    let file_name_array = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_array.count != 2 {\n        return \"No\"\n    }\n\
    \    let file_name_array_0 = file_name_array[0]\n    let file_name_array_1 = file_name_array[1]\n\
    \    if file_name_array_0.count == 0 || file_name_array_1.count == 0 {\n     \
    \   return \"No\"\n    }\n    if file_name_array_1 != \"txt\" && file_name_array_1\
    \ != \"exe\" && file_name_array_1 != \"dll\" {\n        return \"No\"\n    }\n\
    \    if file_name_array_0.count > 3 {\n        return \"No\"\n    }\n    if file_name_array_0.rangeOfCharacter(from:\
    \ CharacterSet.decimalDigits) != nil {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", "    let file_name_arr = file_name.components(separatedBy: \".\")\n\
    \    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n    let file_name_arr_0\
    \ = file_name_arr[0]\n    let file_name_arr_1 = file_name_arr[1]\n    if file_name_arr_0.count\
    \ == 0 {\n        return \"No\"\n    }\n    let file_name_arr_0_first_char = file_name_arr_0[file_name_arr_0.startIndex]\n\
    \    if !(file_name_arr_0_first_char >= \"a\" && file_name_arr_0_first_char <=\
    \ \"z\" || file_name_arr_0_first_char >= \"A\" && file_name_arr_0_first_char <=\
    \ \"Z\") {\n        return \"No\"\n    }\n    var digit_count = 0\n    for char\
    \ in file_name_arr_0 {\n        if char >= \"0\" && char <= \"9\" {\n        \
    \    digit_count += 1\n        }\n    }\n    if digit_count > 3 {\n        return\
    \ \"No\"\n    }\n    if file_name_arr_1 != \"txt\" && file_name_arr_1 != \"exe\"\
    \ && file_name_arr_1 != \"dll\" {\n        return \"No\"\n    }\n    return \"\
    Yes\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_test = NSPredicate(format:\"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_array = file_name.components(separatedBy: \".\")\n    let file_name_array_count\
    \ = file_name_array.count\n    if file_name_array_count != 2 {\n        return\
    \ \"No\"\n    }\n    let file_name_array_first = file_name_array[0]\n    let file_name_array_second\
    \ = file_name_array[1]\n    let file_name_array_first_count = file_name_array_first.count\n\
    \    let file_name_array_second_count = file_name_array_second.count\n    if file_name_array_first_count\
    \ == 0 || file_name_array_second_count == 0 {\n        return \"No\"\n    }\n\
    \    let file_name_array_first_first_char = file_name_array_first[file_name_array_first.startIndex]\n\
    \    if !(file_name_array_first_first_char >= \"a\" && file_name_array_first_first_char\
    \ <= \"z\" || file_name_array_first_first_char >= \"A\" && file_name_array_first_first_char\
    \ <= \"Z\") {\n        return \"No\"\n    }\n    let file_name_array_second_lowercase\
    \ = file_name_array_second.lowercased()\n    if file_name_array_second_lowercase\
    \ != \"txt\" && file_name_array_second_lowercase != \"exe\" && file_name_array_second_lowercase\
    \ != \"dll\" {\n        return \"No\"\n    }\n    var digit_count = 0\n    for\
    \ char in file_name_array_first {\n        if char >= \"0\" && char <= \"9\" {\n\
    \            digit_count += 1\n        }\n    }\n    if digit_count > 3 {\n  \
    \      return \"No\"\n    }\n    return \"Yes\"", "    let file_name_regex = \"\
    ^[a-zA-Z]{1}[a-zA-Z0-9]{0,3}\\\\.[a-zA-Z]{3}$\"\n    let file_name_test = NSPredicate(format:\"\
    SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    let file_name_arr_first\
    \ = file_name_arr[0]\n    let file_name_arr_last = file_name_arr[file_name_arr_count\
    \ - 1]\n    let file_name_arr_first_count = file_name_arr_first.count\n    let\
    \ file_name_arr_last_count = file_name_arr_last.count\n    let file_name_arr_first_char\
    \ = file_name_arr_first[file_name_arr_first.startIndex]\n    let file_name_arr_last_char\
    \ = file_name_arr_last[file_name_arr_last.startIndex]\n    let file_name_arr_first_char_int\
    \ = Int(String(file_name_arr_first_char))\n    let file_name_arr_last_char_int\
    \ = Int(String(file_name_arr_last_char))\n    let file_name_arr_first_char_int_count\
    \ = String(file_name_arr_first_char_int!).count\n    let file_name_arr_last_char_int_count\
    \ = String(file_name_arr_last_char_int!).count\n    let file_name_arr_first_char_int_count_bool\
    \ = file_name_arr_first_char_int_count > 0\n    let file_name_arr_last_char_int_count_bool\
    \ = file_name_arr_last_char_int_count > 0\n    let file_name_arr_first_char_int_count_bool_not\
    \ = !file_name_arr_first_char_int_count_bool\n    let file_name_arr_last_char_int_count_bool_not\
    \ = !file_name_arr_last_char_int_count_bool\n    let file_name_arr_first_char_int_count_bool_not_and\
    \ = file_name_arr_first_char_int_count_bool_not && file_name_arr_last_char_int_count",
  "    let digits = \"0123456789\"\n    let latin_alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let valid_extensions = [\"txt\", \"exe\", \"dll\"]\n    var number_of_digits\
    \ = 0\n    var number_of_dots = 0\n    var extension_found = false\n    var extension_is_valid\
    \ = false\n    var extension_start_index = 0\n    var extension_end_index = 0\n\
    \    var extension_length = 0\n    var extension_string = \"\"\n    for i in 0..<file_name.count\
    \ {\n        let index = file_name.index(file_name.startIndex, offsetBy: i)\n\
    \        if digits.contains(file_name[index]) {\n            number_of_digits\
    \ += 1\n        }\n        if file_name[index] == \".\" {\n            number_of_dots\
    \ += 1\n            extension_start_index = i + 1\n        }\n        if number_of_dots\
    \ == 1 {\n            extension_end_index = i\n            extension_length =\
    \ extension_end_index - extension_start_index\n            extension_string =\
    \ String(file_name[file_name.index(file_name.startIndex, offsetBy: extension_start_index)..<file_name.index(file_name.startIndex,\
    \ offsetBy: extension_end_index)])\n            if valid_extensions.contains(extension_string)\
    \ {\n                extension_is_valid = true\n            }\n        }\n   \
    \ }\n    if number_of_digits > 3 {\n        return \"No\"\n    }\n    if number_of_dots\
    \ != 1 {\n        return \"No\"\n    }\n    if extension_length == 0 {\n     \
    \   return \"No\"\n    }\n    if !latin_alphabet.contains(file_name[file_name.startIndex])\
    \ {\n        return \"No\"\n    }\n    if !extension_is_valid {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_components.count != 2 {\n        return \"No\"\n  \
    \  }\n    let file_name_components_0 = file_name_components[0]\n    let file_name_components_1\
    \ = file_name_components[1]\n    if file_name_components_0.count == 0 {\n    \
    \    return \"No\"\n    }\n    let first_char = file_name_components_0[file_name_components_0.startIndex]\n\
    \    if !(first_char >= \"a\" && first_char <= \"z\" || first_char >= \"A\" &&\
    \ first_char <= \"Z\") {\n        return \"No\"\n    }\n    let digits = CharacterSet.decimalDigits\n\
    \    if file_name_components_0.unicodeScalars.filter({ digits.contains($0) }).count\
    \ > 3 {\n        return \"No\"\n    }\n    if file_name_components_1 != \"txt\"\
    \ && file_name_components_1 != \"exe\" && file_name_components_1 != \"dll\" {\n\
    \        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_array =\
    \ file_name.components(separatedBy: \".\")\n    if file_name_array.count != 2\
    \ {\n        return \"No\"\n    }\n    let first_part = file_name_array[0]\n \
    \   let second_part = file_name_array[1]\n    if first_part.count == 0 || !first_part.contains(where:\
    \ { $0 >= \"a\" && $0 <= \"z\" || $0 >= \"A\" && $0 <= \"Z\" }) {\n        return\
    \ \"No\"\n    }\n    if second_part != \"txt\" && second_part != \"exe\" && second_part\
    \ != \"dll\" {\n        return \"No\"\n    }\n    if first_part.contains(where:\
    \ { $0 >= \"0\" && $0 <= \"9\" }) {\n        let digit_count = first_part.filter({\
    \ $0 >= \"0\" && $0 <= \"9\" }).count\n        if digit_count > 3 {\n        \
    \    return \"No\"\n        }\n    }\n    return \"Yes\"", "    var digits = 0\n\
    \    var dot = false\n    var ext = \"\"\n    var name = \"\"\n    for c in file_name\
    \ {\n        if c >= \"0\" && c <= \"9\" {\n            digits += 1\n        }\
    \ else if c == \".\" {\n            dot = true\n        } else if dot {\n    \
    \        ext.append(c)\n        } else {\n            name.append(c)\n       \
    \ }\n    }\n    if digits > 3 || !dot || name.isEmpty || !(name.first! >= \"a\"\
    \ && name.first! <= \"z\" || name.first! >= \"A\" && name.first! <= \"Z\") ||\
    \ ext != \"txt\" && ext != \"exe\" && ext != \"dll\" {\n        return \"No\"\n\
    \    }\n    return \"Yes\"", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_components.count != 2 {\n        return \"No\"\n  \
    \  }\n    let file_name_prefix = file_name_components[0]\n    let file_name_suffix\
    \ = file_name_components[1]\n    if file_name_prefix.count == 0 {\n        return\
    \ \"No\"\n    }\n    let file_name_prefix_first_char = file_name_prefix[file_name_prefix.startIndex]\n\
    \    if !(file_name_prefix_first_char >= \"a\" && file_name_prefix_first_char\
    \ <= \"z\" ||\n        file_name_prefix_first_char >= \"A\" && file_name_prefix_first_char\
    \ <= \"Z\") {\n        return \"No\"\n    }\n    let file_name_prefix_digits =\
    \ file_name_prefix.filter { $0 >= \"0\" && $0 <= \"9\" }\n    if file_name_prefix_digits.count\
    \ > 3 {\n        return \"No\"\n    }\n    if file_name_suffix != \"txt\" && file_name_suffix\
    \ != \"exe\" && file_name_suffix != \"dll\" {\n        return \"No\"\n    }\n\
    \    return \"Yes\"", "    let pattern = \"^[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n  \
    \  let range = NSRange(location: 0, length: file_name.utf16.count)\n    if regex.firstMatch(in:\
    \ file_name, options: [], range: range) != nil {\n        return \"Yes\"\n   \
    \ } else {\n        return \"No\"\n    }", "    let pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.[a-zA-Z]{3}$\"\n    let regex = try! NSRegularExpression(pattern: pattern,\
    \ options: [])\n    let matches = regex.matches(in: file_name, options: [], range:\
    \ NSRange(location: 0, length: file_name.count))\n    return matches.count > 0\
    \ ? \"Yes\" : \"No\"", "    // your code here\n    return \"\"", '    return ""',
  "    let digits = CharacterSet.decimalDigits\n    let latin_letters = CharacterSet.letters\n\
    \    let valid_extensions = [\"txt\", \"exe\", \"dll\"]\n    let components =\
    \ file_name.components(separatedBy: \".\")\n    let digits_count = components[0].unicodeScalars.filter\
    \ { digits.contains($0) }.count\n    let letters_count = components[0].unicodeScalars.filter\
    \ { latin_letters.contains($0) }.count\n    let extension_is_valid = valid_extensions.contains(components[1])\n\
    \    let is_valid = (digits_count <= 3) && (components.count == 2) && (letters_count\
    \ > 0) && extension_is_valid\n    return is_valid ? \"Yes\" : \"No\"", "    let\
    \ file_name_array = file_name.components(separatedBy: \".\")\n    if file_name_array.count\
    \ != 2 {\n        return \"No\"\n    }\n    let first_part = file_name_array[0]\n\
    \    let second_part = file_name_array[1]\n    let valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"]\n    if !valid_extensions.contains(second_part) {\n      \
    \  return \"No\"\n    }\n    if first_part.isEmpty {\n        return \"No\"\n\
    \    }\n    let first_char = first_part[first_part.startIndex]\n    if !first_char.isLetter\
    \ {\n        return \"No\"\n    }\n    let digits = \"0123456789\"\n    var digit_count\
    \ = 0\n    for char in first_part {\n        if digits.contains(char) {\n    \
    \        digit_count += 1\n        }\n    }\n    if digit_count > 3 {\n      \
    \  return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    if file_name_arr_count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_arr_first = file_name_arr[0]\n\
    \    let file_name_arr_last = file_name_arr[1]\n    let file_name_arr_first_count\
    \ = file_name_arr_first.count\n    let file_name_arr_last_count = file_name_arr_last.count\n\
    \    if file_name_arr_first_count == 0 || file_name_arr_last_count == 0 {\n  \
    \      return \"No\"\n    }\n    let file_name_arr_first_first = file_name_arr_first[file_name_arr_first.startIndex]\n\
    \    let file_name_arr_last_first = file_name_arr_last[file_name_arr_last.startIndex]\n\
    \    if !(file_name_arr_first_first >= \"a\" && file_name_arr_first_first <= \"\
    z\" || file_name_arr_first_first >= \"A\" && file_name_arr_first_first <= \"Z\"\
    ) {\n        return \"No\"\n    }\n    if !(file_name_arr_last_first >= \"a\"\
    \ && file_name_arr_last_first <= \"z\" || file_name_arr_last_first >= \"A\" &&\
    \ file_name_arr_last_first <= \"Z\") {\n        return \"No\"\n    }\n    if file_name_arr_last\
    \ != \"txt\" && file_name_arr_last != \"exe\" && file_name_arr_last != \"dll\"\
    \ {\n        return \"No\"\n    }\n    var count = 0\n    for ch in file_name_arr_first\
    \ {\n        if ch >= \"0\" && ch <= \"9\" {\n            count += 1\n       \
    \ }\n    }\n    if count > 3 {\n        return \"No\"\n    }\n    return \"Yes\"",
  "    let file_name_arr = file_name.split(separator: \".\")\n    if file_name_arr.count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_arr_0 = file_name_arr[0]\n\
    \    let file_name_arr_1 = file_name_arr[1]\n    if file_name_arr_0.count == 0\
    \ {\n        return \"No\"\n    }\n    if file_name_arr_1.count == 0 {\n     \
    \   return \"No\"\n    }\n    if file_name_arr_1 != \"txt\" && file_name_arr_1\
    \ != \"exe\" && file_name_arr_1 != \"dll\" {\n        return \"No\"\n    }\n \
    \   let file_name_arr_0_arr = Array(file_name_arr_0)\n    var count = 0\n    for\
    \ char in file_name_arr_0_arr {\n        if char >= \"0\" && char <= \"9\" {\n\
    \            count += 1\n        }\n    }\n    if count > 3 {\n        return\
    \ \"No\"\n    }\n    if file_name_arr_0_arr[0] < \"A\" || file_name_arr_0_arr[0]\
    \ > \"z\" {\n        return \"No\"\n    }\n    return \"Yes\"", '    return ""',
  "    let file_name_arr = file_name.split(separator: \".\")\n    let file_name_arr_count\
    \ = file_name_arr.count\n    let file_name_arr_first = file_name_arr[0]\n    let\
    \ file_name_arr_last = file_name_arr[file_name_arr_count - 1]\n    let file_name_arr_first_count\
    \ = file_name_arr_first.count\n    let file_name_arr_last_count = file_name_arr_last.count\n\
    \    let file_name_arr_first_first = file_name_arr_first[file_name_arr_first.startIndex]\n\
    \    let file_name_arr_last_first = file_name_arr_last[file_name_arr_last.startIndex]\n\
    \    let file_name_arr_first_last = file_name_arr_first[file_name_arr_first.index(before:\
    \ file_name_arr_first.endIndex)]\n    let file_name_arr_last_last = file_name_arr_last[file_name_arr_last.index(before:\
    \ file_name_arr_last.endIndex)]\n    let file_name_arr_first_last_count = file_name_arr_first_last.count\n\
    \    let file_name_arr_last_last_count = file_name_arr_last_last.count\n    let\
    \ file_name_arr_first_last_first = file_name_arr_first_last[file_name_arr_first_last.startIndex]\n\
    \    let file_name_arr_last_last_first = file_name_arr_last_last[file_name_arr_last_last.startIndex]\n\
    \    let file_name_arr_first_last_last = file_name_arr_first_last[file_name_arr_first_last.index(before:\
    \ file_name_arr_first_last.endIndex)]\n    let file_name_arr_last_last_last =\
    \ file_name_arr_last_last[file_name_arr_last_last.index(before: file_name_arr_last_last.endIndex)]",
  "    let digits = \"0123456789\"\n    let alphapet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let extensions = [\"txt\", \"exe\", \"dll\"]\n    var digits_count = 0\n\
    \    var dot_count = 0\n    var extension_valid = false\n    for char in file_name\
    \ {\n        if digits.contains(char) {\n            digits_count += 1\n     \
    \   }\n        if char == \".\" {\n            dot_count += 1\n        }\n   \
    \ }\n    if digits_count > 3 {\n        return \"No\"\n    }\n    if dot_count\
    \ != 1 {\n        return \"No\"\n    }\n    let file_name_parts = file_name.split(separator:\
    \ \".\")\n    if file_name_parts.count != 2 {\n        return \"No\"\n    }\n\
    \    if file_name_parts[0].count == 0 {\n        return \"No\"\n    }\n    if\
    \ !alphapet.contains(file_name_parts[0].first!) {\n        return \"No\"\n   \
    \ }\n    for ext in extensions {\n        if file_name_parts[1] == ext {\n   \
    \         extension_valid = true\n        }\n    }\n    if extension_valid {\n\
    \        return \"Yes\"\n    }\n    return \"No\"", "    let file_name_components\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_components.count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_prefix = file_name_components[0]\n\
    \    let file_name_suffix = file_name_components[1]\n    if file_name_prefix.count\
    \ == 0 || file_name_suffix.count == 0 {\n        return \"No\"\n    }\n    let\
    \ file_name_prefix_first_char = file_name_prefix[file_name_prefix.startIndex]\n\
    \    if !(file_name_prefix_first_char >= \"a\" && file_name_prefix_first_char\
    \ <= \"z\" ||\n        file_name_prefix_first_char >= \"A\" && file_name_prefix_first_char\
    \ <= \"Z\") {\n        return \"No\"\n    }\n    if file_name_prefix.filter({$0\
    \ >= \"0\" && $0 <= \"9\"}).count > 3 {\n        return \"No\"\n    }\n    if\
    \ file_name_suffix != \"txt\" && file_name_suffix != \"exe\" && file_name_suffix\
    \ != \"dll\" {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr\
    \ = file_name.split(separator: \".\")\n    if file_name_arr.count != 2 {\n   \
    \     return \"No\"\n    }\n    let file_name_arr_0 = file_name_arr[0]\n    let\
    \ file_name_arr_1 = file_name_arr[1]\n    if file_name_arr_0.count == 0 {\n  \
    \      return \"No\"\n    }\n    if file_name_arr_1.count == 0 {\n        return\
    \ \"No\"\n    }\n    if file_name_arr_1 != \"txt\" && file_name_arr_1 != \"exe\"\
    \ && file_name_arr_1 != \"dll\" {\n        return \"No\"\n    }\n    var count\
    \ = 0\n    for char in file_name_arr_0 {\n        if char >= \"0\" && char <=\
    \ \"9\" {\n            count += 1\n        }\n    }\n    if count > 3 {\n    \
    \    return \"No\"\n    }\n    if file_name_arr_0[file_name_arr_0.startIndex]\
    \ < \"a\" || file_name_arr_0[file_name_arr_0.startIndex] > \"z\" {\n        if\
    \ file_name_arr_0[file_name_arr_0.startIndex] < \"A\" || file_name_arr_0[file_name_arr_0.startIndex]\
    \ > \"Z\" {\n            return \"No\"\n        }\n    }\n    return \"Yes\"",
  "    let file_name_arr = file_name.split(separator: \".\")\n    if file_name_arr.count\
    \ != 2 {\n        return \"No\"\n    }\n    if file_name_arr[0].count == 0 {\n\
    \        return \"No\"\n    }\n    if !file_name_arr[0].contains(where: {$0 >=\
    \ \"a\" && $0 <= \"z\"}) &&\n        !file_name_arr[0].contains(where: {$0 >=\
    \ \"A\" && $0 <= \"Z\"}) {\n        return \"No\"\n    }\n    if file_name_arr[0].contains(where:\
    \ {$0 >= \"0\" && $0 <= \"9\"}) {\n        return \"No\"\n    }\n    if file_name_arr[1]\
    \ != \"txt\" && file_name_arr[1] != \"exe\" && file_name_arr[1] != \"dll\" {\n\
    \        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  if file_name_arr[0].count == 0 {\n        return \"No\"\n    }\n    if file_name_arr[1]\
    \ != \"txt\" && file_name_arr[1] != \"exe\" && file_name_arr[1] != \"dll\" {\n\
    \        return \"No\"\n    }\n    var count = 0\n    for c in file_name_arr[0]\
    \ {\n        if c >= \"0\" && c <= \"9\" {\n            count += 1\n        }\n\
    \    }\n    if count > 3 {\n        return \"No\"\n    }\n    if file_name_arr[0][file_name_arr[0].startIndex]\
    \ >= \"0\" && file_name_arr[0][file_name_arr[0].startIndex] <= \"9\" {\n     \
    \   return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    if file_name_arr_count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_arr_first = file_name_arr[0]\n\
    \    let file_name_arr_last = file_name_arr[1]\n    let file_name_arr_first_count\
    \ = file_name_arr_first.count\n    let file_name_arr_last_count = file_name_arr_last.count\n\
    \    if file_name_arr_first_count == 0 || file_name_arr_last_count == 0 {\n  \
    \      return \"No\"\n    }\n    let file_name_arr_first_first = file_name_arr_first[file_name_arr_first.startIndex]\n\
    \    let file_name_arr_last_first = file_name_arr_last[file_name_arr_last.startIndex]\n\
    \    let file_name_arr_first_first_ascii = file_name_arr_first_first.asciiValue!\n\
    \    let file_name_arr_last_first_ascii = file_name_arr_last_first.asciiValue!\n\
    \    if (file_name_arr_first_first_ascii < 65 || file_name_arr_first_first_ascii\
    \ > 90) &&\n        (file_name_arr_first_first_ascii < 97 || file_name_arr_first_first_ascii\
    \ > 122) {\n        return \"No\"\n    }\n    if (file_name_arr_last_first_ascii\
    \ < 65 || file_name_arr_last_first_ascii > 90) &&\n        (file_name_arr_last_first_ascii\
    \ < 97 || file_name_arr_last_first_ascii > 122) {\n        return \"No\"\n   \
    \ }\n    let file_name_arr_first_arr = Array(file_name_arr_first)\n    var file_name_arr_first_arr_count\
    \ = 0\n    for", "    let file_name_arr = file_name.split(separator: \".\")\n\
    \    let file_name_arr_count = file_name_arr.count\n    if file_name_arr_count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_arr_0 = file_name_arr[0]\n\
    \    let file_name_arr_1 = file_name_arr[1]\n    let file_name_arr_0_count = file_name_arr_0.count\n\
    \    let file_name_arr_1_count = file_name_arr_1.count\n    if file_name_arr_0_count\
    \ == 0 || file_name_arr_1_count == 0 {\n        return \"No\"\n    }\n    let\
    \ file_name_arr_0_first_char = file_name_arr_0.first\n    let file_name_arr_1_first_char\
    \ = file_name_arr_1.first\n    if file_name_arr_0_first_char == nil || file_name_arr_1_first_char\
    \ == nil {\n        return \"No\"\n    }\n    let file_name_arr_0_first_char_value\
    \ = file_name_arr_0_first_char!.unicodeScalars.first!.value\n    let file_name_arr_1_first_char_value\
    \ = file_name_arr_1_first_char!.unicodeScalars.first!.value\n    if (file_name_arr_0_first_char_value\
    \ < 65 || file_name_arr_0_first_char_value > 90) && (file_name_arr_0_first_char_value\
    \ < 97 || file_name_arr_0_first_char_value > 122) {\n        return \"No\"\n \
    \   }\n    if (file_name_arr_1_first_char_value < 65 || file_name_arr_1_first_char_value\
    \ > 90) && (file_name_arr_1_first_char_value < 97 || file_name_arr_1_first_char_value\
    \ > 122) {\n        return \"No\"\n    }\n    let file_name_arr_0", "    let file_name_components\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_components.count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_without_extension =\
    \ file_name_components[0]\n    let file_extension = file_name_components[1]\n\
    \    if file_name_without_extension.rangeOfCharacter(from: CharacterSet.decimalDigits)\
    \ != nil {\n        return \"No\"\n    }\n    if file_name_without_extension.count\
    \ > 3 {\n        return \"No\"\n    }\n    if file_extension != \"txt\" && file_extension\
    \ != \"exe\" && file_extension != \"dll\" {\n        return \"No\"\n    }\n  \
    \  return \"Yes\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let file_name_arr_0 = file_name_arr[0]\n    let file_name_arr_1 = file_name_arr[1]\n\
    \    if file_name_arr_0.count == 0 {\n        return \"No\"\n    }\n    let file_name_arr_0_first_char\
    \ = file_name_arr_0[file_name_arr_0.startIndex]\n    if !(file_name_arr_0_first_char\
    \ >= \"a\" && file_name_arr_0_first_char <= \"z\" ||\n        file_name_arr_0_first_char\
    \ >= \"A\" && file_name_arr_0_first_char <= \"Z\") {\n        return \"No\"\n\
    \    }\n    if file_name_arr_1 != \"txt\" && file_name_arr_1 != \"exe\" && file_name_arr_1\
    \ != \"dll\" {\n        return \"No\"\n    }\n    let file_name_arr_0_digit_count\
    \ = file_name_arr_0.filter { $0 >= \"0\" && $0 <= \"9\" }.count\n    if file_name_arr_0_digit_count\
    \ > 3 {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_components\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_components.count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_components_1 = file_name_components[0]\n\
    \    let file_name_components_2 = file_name_components[1]\n    if file_name_components_1.count\
    \ == 0 {\n        return \"No\"\n    }\n    if file_name_components_2 != \"txt\"\
    \ && file_name_components_2 != \"exe\" && file_name_components_2 != \"dll\" {\n\
    \        return \"No\"\n    }\n    var digits_count = 0\n    for char in file_name_components_1\
    \ {\n        if char >= \"0\" && char <= \"9\" {\n            digits_count +=\
    \ 1\n        }\n    }\n    if digits_count > 3 {\n        return \"No\"\n    }\n\
    \    if file_name_components_1[file_name_components_1.startIndex] >= \"0\" &&\
    \ file_name_components_1[file_name_components_1.startIndex] <= \"9\" {\n     \
    \   return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let file_name_arr_0 = file_name_arr[0]\n    let file_name_arr_1 = file_name_arr[1]\n\
    \    if file_name_arr_0.count == 0 || file_name_arr_1.count == 0 {\n        return\
    \ \"No\"\n    }\n    if file_name_arr_0.count > 3 {\n        return \"No\"\n \
    \   }\n    if file_name_arr_0.rangeOfCharacter(from: CharacterSet.decimalDigits)\
    \ != nil {\n        return \"No\"\n    }\n    if file_name_arr_1 != \"txt\" &&\
    \ file_name_arr_1 != \"exe\" && file_name_arr_1 != \"dll\" {\n        return \"\
    No\"\n    }\n    return \"Yes\"", "    let file_name_array = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_array.count != 2 {\n        return \"No\"\n    }\n\
    \    if file_name_array[0].count == 0 {\n        return \"No\"\n    }\n    if\
    \ file_name_array[1] != \"txt\" && file_name_array[1] != \"exe\" && file_name_array[1]\
    \ != \"dll\" {\n        return \"No\"\n    }\n    var number_count = 0\n    for\
    \ char in file_name_array[0] {\n        if char >= \"0\" && char <= \"9\" {\n\
    \            number_count += 1\n        }\n    }\n    if number_count > 3 {\n\
    \        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_components\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_components.count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_without_extension =\
    \ file_name_components[0]\n    let file_name_extension = file_name_components[1]\n\
    \    if file_name_without_extension.count == 0 {\n        return \"No\"\n    }\n\
    \    if file_name_without_extension.rangeOfCharacter(from: CharacterSet.decimalDigits)\
    \ != nil {\n        return \"No\"\n    }\n    if file_name_without_extension.rangeOfCharacter(from:\
    \ CharacterSet.letters) == nil {\n        return \"No\"\n    }\n    if file_name_extension\
    \ != \"txt\" && file_name_extension != \"exe\" && file_name_extension != \"dll\"\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr\
    \ = file_name.split(separator: \".\")\n    if file_name_arr.count != 2 {\n   \
    \     return \"No\"\n    }\n    let first_part = file_name_arr[0]\n    let second_part\
    \ = file_name_arr[1]\n    if first_part.count == 0 || first_part.count > 8 {\n\
    \        return \"No\"\n    }\n    if !first_part.contains(where: { $0 >= \"a\"\
    \ && $0 <= \"z\" || $0 >= \"A\" && $0 <= \"Z\" }) {\n        return \"No\"\n \
    \   }\n    if !first_part.contains(where: { $0 >= \"0\" && $0 <= \"9\" }) {\n\
    \        return \"No\"\n    }\n    if first_part.filter({ $0 >= \"0\" && $0 <=\
    \ \"9\" }).count > 3 {\n        return \"No\"\n    }\n    if second_part != \"\
    txt\" && second_part != \"exe\" && second_part != \"dll\" {\n        return \"\
    No\"\n    }\n    return \"Yes\"", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    let file_name_arr_first\
    \ = file_name_arr[0]\n    let file_name_arr_last = file_name_arr[file_name_arr_count\
    \ - 1]\n    let file_name_arr_first_count = file_name_arr_first.count\n    let\
    \ file_name_arr_last_count = file_name_arr_last.count\n    let file_name_arr_first_arr\
    \ = Array(file_name_arr_first)\n    let file_name_arr_last_arr = Array(file_name_arr_last)\n\
    \    var file_name_arr_first_arr_count = 0\n    var file_name_arr_last_arr_count\
    \ = 0\n    var file_name_arr_first_arr_first = file_name_arr_first_arr[0]\n  \
    \  var file_name_arr_last_arr_first = file_name_arr_last_arr[0]\n    for i in\
    \ 0..<file_name_arr_first_count {\n        if file_name_arr_first_arr[i] >= \"\
    0\" && file_name_arr_first_arr[i] <= \"9\" {\n            file_name_arr_first_arr_count\
    \ += 1\n        }\n    }\n    for i in 0..<file_name_arr_last_count {\n      \
    \  if file_name_arr_last_arr[i] >= \"0\" && file_name_arr_last_arr[i] <= \"9\"\
    \ {\n            file_name_arr_last_arr_count += 1\n        }\n    }\n    if file_name_arr_first_arr_count\
    \ > 3 || file_name_arr_last_arr_count > 3 {\n        return \"No\"\n    }\n  \
    \  if file_name_arr_count != 2 {\n        return \"No\"\n    }\n    if file_name_arr_first_count\
    \ == 0 {\n        return \"No\"\n    }\n    if file_name_arr_first_arr_first",
  "    let file_name_array = file_name.components(separatedBy: \".\")\n    let file_name_prefix\
    \ = file_name_array[0]\n    let file_name_suffix = file_name_array[1]\n    let\
    \ file_name_prefix_array = Array(file_name_prefix)\n    let file_name_suffix_array\
    \ = Array(file_name_suffix)\n    var digit_count = 0\n    var letter_count = 0\n\
    \    var dot_count = 0\n    var valid_suffix = false\n    for i in 0..<file_name_prefix_array.count\
    \ {\n        if file_name_prefix_array[i] >= \"0\" && file_name_prefix_array[i]\
    \ <= \"9\" {\n            digit_count += 1\n        }\n        if file_name_prefix_array[i]\
    \ >= \"a\" && file_name_prefix_array[i] <= \"z\" ||\n            file_name_prefix_array[i]\
    \ >= \"A\" && file_name_prefix_array[i] <= \"Z\" {\n            letter_count +=\
    \ 1\n        }\n    }\n    for i in 0..<file_name_suffix_array.count {\n     \
    \   if file_name_suffix_array[i] >= \"0\" && file_name_suffix_array[i] <= \"9\"\
    \ {\n            digit_count += 1\n        }\n        if file_name_suffix_array[i]\
    \ >= \"a\" && file_name_suffix_array[i] <= \"z\" ||\n            file_name_suffix_array[i]\
    \ >= \"A\" && file_name_suffix_array[i] <= \"Z\" {\n            letter_count +=\
    \ 1\n        }\n    }\n    for i in 0..<file_name.count {\n        if file_name[file_name.index(file_name.startIndex,\
    \ offsetBy: i)] == \".\" {\n            dot_count += 1\n        }\n    }\n   \
    \ if file_name_suffix == \"txt\" || file_name_suffix == \"exe\" || file_name_suffix\
    \ == \"dll\" {\n        valid_suff", "    let pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let regex = try! NSRegularExpression(pattern: pattern,\
    \ options: [])\n    let range = NSRange(location: 0, length: file_name.utf16.count)\n\
    \    if regex.firstMatch(in: file_name, options: [], range: range) != nil {\n\
    \        return \"Yes\"\n    } else {\n        return \"No\"\n    }", "    let\
    \ regex = try! NSRegularExpression(pattern: \"^[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    , options: [])\n    let matches = regex.matches(in: file_name, options: [], range:\
    \ NSRange(location: 0, length: file_name.count))\n    return matches.count > 0\
    \ ? \"Yes\" : \"No\"", "    let file_name_arr = file_name.split(separator: \"\
    .\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n    let\
    \ prefix = file_name_arr[0]\n    let suffix = file_name_arr[1]\n    if prefix.count\
    \ == 0 || prefix.count > 8 {\n        return \"No\"\n    }\n    if !prefix.first!.isLetter\
    \ {\n        return \"No\"\n    }\n    if prefix.filter({$0.isNumber}).count >\
    \ 3 {\n        return \"No\"\n    }\n    if ![\"txt\", \"exe\", \"dll\"].contains(suffix)\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_components\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_components.count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_components_1 = file_name_components[0]\n\
    \    let file_name_components_2 = file_name_components[1]\n    if file_name_components_1.count\
    \ == 0 || file_name_components_2.count == 0 {\n        return \"No\"\n    }\n\
    \    if file_name_components_2 != \"txt\" && file_name_components_2 != \"exe\"\
    \ && file_name_components_2 != \"dll\" {\n        return \"No\"\n    }\n    let\
    \ file_name_components_1_characters = Array(file_name_components_1)\n    var number_of_digits\
    \ = 0\n    for char in file_name_components_1_characters {\n        if char >=\
    \ \"0\" && char <= \"9\" {\n            number_of_digits += 1\n        }\n   \
    \ }\n    if number_of_digits > 3 {\n        return \"No\"\n    }\n    if file_name_components_1_characters[0]\
    \ < \"A\" || file_name_components_1_characters[0] > \"z\" {\n        return \"\
    No\"\n    }\n    return \"Yes\"", "    let digits = \"0123456789\"\n    let alphapet\
    \ = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let extensions\
    \ = [\"txt\", \"exe\", \"dll\"]\n    var digit_count = 0\n    var dot_count =\
    \ 0\n    var extension_count = 0\n    var extension_index = 0\n    var extension_string\
    \ = \"\"\n    var extension_valid = false\n    var alphapet_count = 0\n    var\
    \ alphapet_index = 0\n    var alphapet_valid = false\n    var file_name_valid\
    \ = false\n    \n    for char in file_name {\n        if digits.contains(char)\
    \ {\n            digit_count += 1\n        }\n        if char == \".\" {\n   \
    \         dot_count += 1\n        }\n        if char == \".\" {\n            extension_index\
    \ = file_name.firstIndex(of: char)!\n        }\n        if alphapet.contains(char)\
    \ {\n            alphapet_count += 1\n            alphapet_index = file_name.firstIndex(of:\
    \ char)!\n        }\n    }\n    \n    if digit_count > 3 {\n        return \"\
    No\"\n    }\n    if dot_count != 1 {\n        return \"No\"\n    }\n    if alphapet_count\
    \ == 0 {\n        return \"No\"\n    }\n    if alphapet_index != 0 {\n       \
    \ return \"No\"\n    }\n    if extension_index == 0 {\n        return \"No\"\n\
    \    }\n    \n    extension_string = String(file_name[extension_index...])\n \
    \   for ext in extensions {\n        if extension_string == ext {\n          \
    \  extension_valid = true\n        }\n    }\n    if extension_valid == false {\n\
    \        return \"No\"\n    }\n    \n    return \"Yes\"", "    let file_name_arr\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_arr.count != 2\
    \ {\n        return \"No\"\n    }\n    let first_part = file_name_arr[0]\n   \
    \ let second_part = file_name_arr[1]\n    if first_part.count == 0 || first_part.count\
    \ > 8 {\n        return \"No\"\n    }\n    if second_part.count == 0 || second_part.count\
    \ > 3 {\n        return \"No\"\n    }\n    if !(second_part == \"txt\" || second_part\
    \ == \"exe\" || second_part == \"dll\") {\n        return \"No\"\n    }\n    let\
    \ first_char = first_part[first_part.startIndex]\n    if !(first_char >= \"a\"\
    \ && first_char <= \"z\" || first_char >= \"A\" && first_char <= \"Z\") {\n  \
    \      return \"No\"\n    }\n    var digit_count = 0\n    for char in first_part\
    \ {\n        if char >= \"0\" && char <= \"9\" {\n            digit_count += 1\n\
    \        }\n    }\n    if digit_count > 3 {\n        return \"No\"\n    }\n  \
    \  return \"Yes\"", "    let file_name_array = file_name.split(separator: \".\"\
    )\n    if file_name_array.count != 2 {\n        return \"No\"\n    }\n    let\
    \ file_name_before_dot = file_name_array[0]\n    let file_name_after_dot = file_name_array[1]\n\
    \    if file_name_before_dot.count == 0 || file_name_after_dot.count == 0 {\n\
    \        return \"No\"\n    }\n    if file_name_before_dot.count > 3 {\n     \
    \   return \"No\"\n    }\n    if !file_name_before_dot.contains(where: {$0 >=\
    \ \"a\" && $0 <= \"z\"}) && !file_name_before_dot.contains(where: {$0 >= \"A\"\
    \ && $0 <= \"Z\"}) {\n        return \"No\"\n    }\n    if !file_name_after_dot.contains(where:\
    \ {$0 >= \"a\" && $0 <= \"z\"}) && !file_name_after_dot.contains(where: {$0 >=\
    \ \"A\" && $0 <= \"Z\"}) {\n        return \"No\"\n    }\n    if !file_name_after_dot.contains(where:\
    \ {$0 >= \"0\" && $0 <= \"9\"}) {\n        return \"No\"\n    }\n    if !(file_name_after_dot\
    \ == \"txt\" || file_name_after_dot == \"exe\" || file_name_after_dot == \"dll\"\
    ) {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_chars\
    \ = Array(file_name)\n    let file_name_chars_count = file_name_chars.count\n\
    \    var dot_index = -1\n    var digits_count = 0\n    for i in 0..<file_name_chars_count\
    \ {\n        if file_name_chars[i] == \".\" {\n            dot_index = i\n   \
    \         break\n        }\n        if file_name_chars[i] >= \"0\" && file_name_chars[i]\
    \ <= \"9\" {\n            digits_count += 1\n        }\n    }\n    if digits_count\
    \ > 3 || dot_index == -1 || dot_index == 0 || dot_index == file_name_chars_count\
    \ - 1 {\n        return \"No\"\n    }\n    let valid_extensions = [\"txt\", \"\
    exe\", \"dll\"]\n    let extension_start_index = dot_index + 1\n    let extension_end_index\
    \ = file_name_chars_count\n    let extension = String(file_name_chars[extension_start_index..<extension_end_index])\n\
    \    if !valid_extensions.contains(extension) {\n        return \"No\"\n    }\n\
    \    let file_name_start_index = 0\n    let file_name_end_index = dot_index\n\
    \    let file_name_without_extension = String(file_name_chars[file_name_start_index..<file_name_end_index])\n\
    \    if file_name_without_extension.isEmpty {\n        return \"No\"\n    }\n\
    \    let first_char = file_name_without_extension[file_name_without_extension.startIndex]\n\
    \    if !(first_char >= \"a\" && first_char <= \"z\" || first_char >= \"A\" &&\
    \ first_char <= \"Z\") {\n        return \"No\"\n    }\n    return \"Yes\"", " \
    \   let digits = \"0123456789\"\n    let letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let extensions = [\"txt\", \"exe\", \"dll\"]\n    var is_valid = true\n\
    \    var digits_count = 0\n    var dot_count = 0\n    var extension_found = false\n\
    \    var extension_start_index = 0\n    var extension_end_index = 0\n    for (index,\
    \ char) in file_name.enumerated() {\n        if digits.contains(char) {\n    \
    \        digits_count += 1\n        }\n        if char == \".\" {\n          \
    \  dot_count += 1\n            extension_start_index = index + 1\n        }\n\
    \        if index == file_name.count - 1 {\n            extension_end_index =\
    \ index + 1\n        }\n    }\n    if digits_count > 3 || dot_count != 1 {\n \
    \       is_valid = false\n    }\n    if file_name.prefix(1) != \".\" && !letters.contains(file_name.prefix(1))\
    \ {\n        is_valid = false\n    }\n    if file_name.suffix(1) != \".\" && !letters.contains(file_name.suffix(1))\
    \ {\n        is_valid = false\n    }\n    for extension in extensions {\n    \
    \    if file_name[extension_start_index..<extension_end_index] == extension {\n\
    \            extension_found = true\n        }\n    }\n    if !extension_found\
    \ {\n        is_valid = false\n    }\n    if is_valid {\n        return \"Yes\"\
    \n    } else {\n        return \"No\"\n    }", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format:\"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_arr = file_name.split(separator: \"\
    .\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n    if\
    \ file_name_arr[0].count == 0 {\n        return \"No\"\n    }\n    if file_name_arr[1]\
    \ != \"txt\" && file_name_arr[1] != \"exe\" && file_name_arr[1] != \"dll\" {\n\
    \        return \"No\"\n    }\n    var count = 0\n    for char in file_name_arr[0]\
    \ {\n        if char >= \"0\" && char <= \"9\" {\n            count += 1\n   \
    \     }\n    }\n    if count > 3 {\n        return \"No\"\n    }\n    return \"\
    Yes\"", "    let file_name_components = file_name.components(separatedBy: \".\"\
    )\n    let file_name_without_extension = file_name_components[0]\n    let file_name_extension\
    \ = file_name_components[1]\n    let file_name_without_extension_components =\
    \ file_name_without_extension.components(separatedBy: CharacterSet.decimalDigits.inverted)\n\
    \    let file_name_without_extension_digits = file_name_without_extension_components.joined(separator:\
    \ \"\")\n    if file_name_without_extension_digits.count > 3 {\n        return\
    \ \"No\"\n    }\n    let file_name_without_extension_first_character = file_name_without_extension.first\n\
    \    if file_name_without_extension_first_character == nil {\n        return \"\
    No\"\n    }\n    let file_name_without_extension_first_character_is_letter = file_name_without_extension_first_character!.isLetter\n\
    \    if !file_name_without_extension_first_character_is_letter {\n        return\
    \ \"No\"\n    }\n    let file_name_extension_is_valid = file_name_extension ==\
    \ \"txt\" || file_name_extension == \"exe\" || file_name_extension == \"dll\"\n\
    \    if !file_name_extension_is_valid {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", "    let file_name_arr = file_name.split(separator: \".\")\n    if\
    \ file_name_arr.count != 2 {\n        return \"No\"\n    }\n    let first_part\
    \ = file_name_arr[0]\n    let second_part = file_name_arr[1]\n    if first_part.count\
    \ == 0 || first_part.count > 8 {\n        return \"No\"\n    }\n    if !first_part.first!.isLetter\
    \ {\n        return \"No\"\n    }\n    if !(second_part == \"txt\" || second_part\
    \ == \"exe\" || second_part == \"dll\") {\n        return \"No\"\n    }\n    let\
    \ digits = CharacterSet.decimalDigits\n    if first_part.filter({digits.contains($0)}).count\
    \ > 3 {\n        return \"No\"\n    }\n    return \"Yes\"", "    let digits =\
    \ \"0123456789\"\n    let latin_letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let valid_extensions = [\"txt\", \"exe\", \"dll\"]\n    var digit_count\
    \ = 0\n    var dot_count = 0\n    var extension_count = 0\n    var extension_start\
    \ = 0\n    var extension_end = 0\n    var extension_string = \"\"\n    var extension_valid\
    \ = false\n    var extension_found = false\n    var valid_extension = false\n\
    \    var valid_name = false\n    var valid_extension_count = 0\n    var valid_name_count\
    \ = 0\n    var valid_digit_count = 0\n    var valid_dot_count = 0\n    var valid_extension_start\
    \ = 0\n    var valid_extension_end = 0\n    var valid_extension_string = \"\"\n\
    \    var valid_extension_valid = false\n    var valid_extension_found = false\n\
    \    var valid_file_name = \"\"\n    var valid_file_name_count = 0\n    var valid_file_name_start\
    \ = 0\n    var valid_file_name_end = 0\n    var valid_file_name_string = \"\"\n\
    \    var valid_file_name_valid = false\n    var valid_file_name_found = false\n\
    \    var valid_file_name_extension_count = 0\n    var valid_file_name_extension_start\
    \ = 0\n    var valid_file_name_extension_end = 0\n    var valid_file_name_extension_string\
    \ = \"\"\n    var valid_file_name_extension_valid = false\n    var valid_file_name_extension_found\
    \ = false\n    var valid_file_name_extension_valid_count = 0\n    var valid_file_name_extension_valid_start\
    \ = 0\n    var valid_file_name_extension_valid_end = 0\n    var valid_file_name_extension_valid_string\
    \ = \"\"\n    var valid_file_name_extension_valid_valid = false\n    var valid_file_name_ext",
  "    let file_name_arr = file_name.split(separator: \".\")\n    if file_name_arr.count\
    \ != 2 {\n        return \"No\"\n    }\n    let first_part = file_name_arr[0]\n\
    \    let second_part = file_name_arr[1]\n    if first_part.count == 0 || first_part.count\
    \ > 8 {\n        return \"No\"\n    }\n    if !first_part.first!.isLetter {\n\
    \        return \"No\"\n    }\n    if first_part.filter({$0.isNumber}).count >\
    \ 3 {\n        return \"No\"\n    }\n    if second_part != \"txt\" && second_part\
    \ != \"exe\" && second_part != \"dll\" {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", "    let file_name_arr = file_name.split(separator: \".\")\n    if\
    \ file_name_arr.count != 2 {\n        return \"No\"\n    }\n    let file_name_arr_0\
    \ = file_name_arr[0]\n    let file_name_arr_1 = file_name_arr[1]\n    if file_name_arr_0.count\
    \ == 0 {\n        return \"No\"\n    }\n    if file_name_arr_1.count == 0 {\n\
    \        return \"No\"\n    }\n    if file_name_arr_1 != \"txt\" && file_name_arr_1\
    \ != \"exe\" && file_name_arr_1 != \"dll\" {\n        return \"No\"\n    }\n \
    \   var count = 0\n    for char in file_name_arr_0 {\n        if char >= \"0\"\
    \ && char <= \"9\" {\n            count += 1\n        }\n    }\n    if count >\
    \ 3 {\n        return \"No\"\n    }\n    if file_name_arr_0[file_name_arr_0.startIndex]\
    \ >= \"0\" && file_name_arr_0[file_name_arr_0.startIndex] <= \"9\" {\n       \
    \ return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let first_part = file_name_arr[0]\n    let second_part = file_name_arr[1]\n\
    \    if first_part.count == 0 || first_part.count > 8 {\n        return \"No\"\
    \n    }\n    if !first_part.first!.isLetter {\n        return \"No\"\n    }\n\
    \    if second_part.count > 3 {\n        return \"No\"\n    }\n    if ![\"txt\"\
    , \"exe\", \"dll\"].contains(second_part) {\n        return \"No\"\n    }\n  \
    \  if first_part.filter({$0.isNumber}).count > 3 {\n        return \"No\"\n  \
    \  }\n    return \"Yes\"", "    let file_name_array = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_array_count = file_name_array.count\n    let file_name_array_first\
    \ = file_name_array[0]\n    let file_name_array_last = file_name_array[file_name_array_count\
    \ - 1]\n    let file_name_array_first_count = file_name_array_first.count\n  \
    \  let file_name_array_last_count = file_name_array_last.count\n    var file_name_array_first_digit_count\
    \ = 0\n    var file_name_array_first_letter_count = 0\n    var file_name_array_last_letter_count\
    \ = 0\n    var file_name_array_last_digit_count = 0\n    for i in 0..<file_name_array_first_count\
    \ {\n        if file_name_array_first[i] >= \"0\" && file_name_array_first[i]\
    \ <= \"9\" {\n            file_name_array_first_digit_count += 1\n        }\n\
    \        if file_name_array_first[i] >= \"a\" && file_name_array_first[i] <= \"\
    z\" || file_name_array_first[i] >= \"A\" && file_name_array_first[i] <= \"Z\"\
    \ {\n            file_name_array_first_letter_count += 1\n        }\n    }\n \
    \   for i in 0..<file_name_array_last_count {\n        if file_name_array_last[i]\
    \ >= \"a\" && file_name_array_last[i] <= \"z\" || file_name_array_last[i] >= \"\
    A\" && file_name_array_last[i] <= \"Z\" {\n            file_name_array_last_letter_count\
    \ += 1\n        }\n        if file_name_array_last[i] >= \"0\" && file_name_array_last[i]\
    \ <= \"9\" {\n            file_name_array_last_digit_count += 1\n        }\n \
    \   }\n    if file_name_array_count == 2", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let file_name_arr_0 = file_name_arr[0]\n    let file_name_arr_1 = file_name_arr[1]\n\
    \    if file_name_arr_0.count == 0 {\n        return \"No\"\n    }\n    if !(file_name_arr_0.first!\
    \ >= \"a\" && file_name_arr_0.first! <= \"z\" || file_name_arr_0.first! >= \"\
    A\" && file_name_arr_0.first! <= \"Z\") {\n        return \"No\"\n    }\n    if\
    \ file_name_arr_1 != \"txt\" && file_name_arr_1 != \"exe\" && file_name_arr_1\
    \ != \"dll\" {\n        return \"No\"\n    }\n    var count = 0\n    for char\
    \ in file_name_arr_0 {\n        if char >= \"0\" && char <= \"9\" {\n        \
    \    count += 1\n        }\n    }\n    if count > 3 {\n        return \"No\"\n\
    \    }\n    return \"Yes\"", "    let file_name_array = file_name.split(separator:\
    \ \".\")\n    let file_name_array_count = file_name_array.count\n    if file_name_array_count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_array_first = file_name_array[0]\n\
    \    let file_name_array_second = file_name_array[1]\n    let file_name_array_first_count\
    \ = file_name_array_first.count\n    let file_name_array_second_count = file_name_array_second.count\n\
    \    if file_name_array_first_count == 0 || file_name_array_second_count == 0\
    \ {\n        return \"No\"\n    }\n    let file_name_array_first_first = file_name_array_first[file_name_array_first.startIndex]\n\
    \    let file_name_array_second_first = file_name_array_second[file_name_array_second.startIndex]\n\
    \    let file_name_array_first_first_ascii = file_name_array_first_first.asciiValue\n\
    \    let file_name_array_second_first_ascii = file_name_array_second_first.asciiValue\n\
    \    if file_name_array_first_first_ascii < 65 || file_name_array_first_first_ascii\
    \ > 122 ||\n        (file_name_array_first_first_ascii > 90 && file_name_array_first_first_ascii\
    \ < 97) {\n        return \"No\"\n    }\n    if file_name_array_second_first_ascii\
    \ < 65 || file_name_array_second_first_ascii > 122 ||\n        (file_name_array_second_first_ascii\
    \ > 90 && file_name_array_second_first_ascii < 97) {\n        return \"No\"\n\
    \    }\n    let file_name_array_first_digit_count = file_name_array_first.filter\
    \ { $0 >= \"0\" && $0 <= \"9\" }.count\n    if file_name_", "    let digits =\
    \ \"0123456789\"\n    let letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let extensions = [\"txt\", \"exe\", \"dll\"]\n    var count = 0\n    var\
    \ dot_index = 0\n    var extension_index = 0\n    var extension_found = false\n\
    \    var valid = true\n    for (index, char) in file_name.enumerated() {\n   \
    \     if digits.contains(char) {\n            count += 1\n        }\n        if\
    \ char == \".\" {\n            dot_index = index\n        }\n        if index\
    \ > dot_index {\n            extension_index = index\n        }\n    }\n    if\
    \ count > 3 {\n        valid = false\n    }\n    if file_name.count - extension_index\
    \ - 1 > 3 {\n        valid = false\n    }\n    if !letters.contains(file_name.first!)\
    \ {\n        valid = false\n    }\n    for ext in extensions {\n        if file_name.suffix(ext.count)\
    \ == ext {\n            extension_found = true\n        }\n    }\n    if !extension_found\
    \ {\n        valid = false\n    }\n    if valid {\n        return \"Yes\"\n  \
    \  } else {\n        return \"No\"\n    }", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  if file_name_arr[0].count == 0 {\n        return \"No\"\n    }\n    if file_name_arr[1]\
    \ != \"txt\" && file_name_arr[1] != \"exe\" && file_name_arr[1] != \"dll\" {\n\
    \        return \"No\"\n    }\n    var digit_count = 0\n    for c in file_name_arr[0]\
    \ {\n        if c >= \"0\" && c <= \"9\" {\n            digit_count += 1\n   \
    \     }\n    }\n    if digit_count > 3 {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", "    let file_name_array = file_name.components(separatedBy: \".\"\
    )\n    if file_name_array.count != 2 {\n        return \"No\"\n    }\n    let\
    \ first_part = file_name_array[0]\n    let second_part = file_name_array[1]\n\
    \    if first_part.count == 0 || !first_part.contains(where: { $0 >= \"a\" &&\
    \ $0 <= \"z\" || $0 >= \"A\" && $0 <= \"Z\" }) {\n        return \"No\"\n    }\n\
    \    if second_part.count == 0 || second_part.count > 3 || ![\"txt\", \"exe\"\
    , \"dll\"].contains(second_part) {\n        return \"No\"\n    }\n    if first_part.filter({\
    \ $0 >= \"0\" && $0 <= \"9\" }).count > 3 {\n        return \"No\"\n    }\n  \
    \  return \"Yes\"", "    let digits = \"0123456789\"\n    let latin_alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"]\n    var digits_count = 0\n    var dot_count =\
    \ 0\n    var extension_found = false\n    var extension_index = 0\n    var extension_length\
    \ = 0\n    var valid_extension = false\n    var valid_name = false\n    var valid_extension_name\
    \ = false\n    var valid_extension_length = false\n    var valid_extension_index\
    \ = false\n    var valid_extension_start = false\n    var valid_extension_end\
    \ = false\n    var valid_name_start = false\n    var valid_name_end = false\n\
    \    var valid_name_length = false\n    var valid_name_index = false\n    var\
    \ valid_name_dot = false\n    var valid_name_digits = false\n    var valid_name_latin\
    \ = false\n    var valid_name_extension = false\n    var valid_name_extension_length\
    \ = false\n    var valid_name_extension_index = false\n    var valid_name_extension_start\
    \ = false\n    var valid_name_extension_end = false\n    var valid_name_extension_dot\
    \ = false\n    var valid_name_extension_digits = false\n    var valid_name_extension_latin\
    \ = false\n    var valid_name_extension_extension = false\n    var valid_name_extension_extension_length\
    \ = false\n    var valid_name_extension_extension_index = false\n    var valid_name_extension_extension_start\
    \ = false\n    var valid_name_extension_extension_end = false\n    var valid_name_extension_extension_dot\
    \ = false\n    var valid_name_extension_extension_digits = false\n    var valid_name_extension_extension_latin\
    \ = false\n    var valid_name_extension_extension_extension = false\n    var valid_name_extension_",
  "    let file_name_arr = file_name.components(separatedBy: \".\")\n    if file_name_arr.count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_arr_1 = file_name_arr[0]\n\
    \    let file_name_arr_2 = file_name_arr[1]\n    if file_name_arr_1.count == 0\
    \ || file_name_arr_2.count == 0 {\n        return \"No\"\n    }\n    if file_name_arr_1.count\
    \ > 3 {\n        return \"No\"\n    }\n    if file_name_arr_1.rangeOfCharacter(from:\
    \ CharacterSet.decimalDigits) != nil {\n        return \"No\"\n    }\n    if file_name_arr_2\
    \ != \"txt\" && file_name_arr_2 != \"exe\" && file_name_arr_2 != \"dll\" {\n \
    \       return \"No\"\n    }\n    return \"Yes\"", "    let file_name_array =\
    \ file_name.split(separator: \".\")\n    if file_name_array.count != 2 {\n   \
    \     return \"No\"\n    }\n    let file_name_array_1 = file_name_array[0]\n \
    \   let file_name_array_2 = file_name_array[1]\n    if file_name_array_1.count\
    \ == 0 || file_name_array_2.count == 0 {\n        return \"No\"\n    }\n    if\
    \ file_name_array_1.count > 3 {\n        return \"No\"\n    }\n    if !file_name_array_1.contains(where:\
    \ {$0 >= \"a\" && $0 <= \"z\"}) && !file_name_array_1.contains(where: {$0 >= \"\
    A\" && $0 <= \"Z\"}) {\n        return \"No\"\n    }\n    if !file_name_array_2.contains(where:\
    \ {$0 >= \"a\" && $0 <= \"z\"}) && !file_name_array_2.contains(where: {$0 >= \"\
    A\" && $0 <= \"Z\"}) {\n        return \"No\"\n    }\n    if !(file_name_array_2\
    \ == \"txt\" || file_name_array_2 == \"exe\" || file_name_array_2 == \"dll\")\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_arr.count != 2\
    \ {\n        return \"No\"\n    }\n    let file_name_arr_1 = file_name_arr[0]\n\
    \    let file_name_arr_2 = file_name_arr[1]\n    if file_name_arr_1.count == 0\
    \ || file_name_arr_2.count == 0 {\n        return \"No\"\n    }\n    if file_name_arr_1.rangeOfCharacter(from:\
    \ CharacterSet.decimalDigits) != nil {\n        return \"No\"\n    }\n    if file_name_arr_2.count\
    \ > 3 {\n        return \"No\"\n    }\n    if file_name_arr_2 != \"txt\" && file_name_arr_2\
    \ != \"exe\" && file_name_arr_2 != \"dll\" {\n        return \"No\"\n    }\n \
    \   return \"Yes\"", "    let digits = \"0123456789\"\n    let latin_alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"]\n    var digits_count = 0\n    var dot_count =\
    \ 0\n    var extension_count = 0\n    var extension_index = 0\n    var extension\
    \ = \"\"\n    var valid_extension = false\n    var valid_name = false\n    var\
    \ valid_extension_count = false\n    var valid_dot_count = false\n    var valid_digits_count\
    \ = false\n    var valid_extension_index = false\n    var valid_extension_string\
    \ = false\n    var valid_extension_start = false\n    var valid_extension_end\
    \ = false\n    var valid_name_start = false\n    var valid_name_end = false\n\
    \    var valid_name_string = false\n    var valid_name_count = false\n    var\
    \ valid_name_index = false\n    var valid_name_dot_index = false\n    var valid_name_dot_count\
    \ = false\n    var valid_name_dot_string = false\n    var valid_name_dot_start\
    \ = false\n    var valid_name_dot_end = false\n    var valid_name_dot_count_start\
    \ = false\n    var valid_name_dot_count_end = false\n    var valid_name_dot_count_string\
    \ = false\n    var valid_name_dot_count_index = false\n    var valid_name_dot_count_count\
    \ = false\n    var valid_name_dot_count_dot_index = false\n    var valid_name_dot_count_dot_count\
    \ = false\n    var valid_name_dot_count_dot_string = false\n    var valid_name_dot_count_dot_start\
    \ = false\n    var valid_name_dot_count_dot_end = false\n    var valid_name_dot_count_dot_count_start\
    \ = false\n    var valid_name_dot_count_dot_count_end = false\n    var valid_name_dot_count_dot_count_string",
  "    let file_name_arr = file_name.split(separator: \".\")\n    let file_name_arr_count\
    \ = file_name_arr.count\n    let file_name_arr_first = file_name_arr[0]\n    let\
    \ file_name_arr_last = file_name_arr[file_name_arr_count - 1]\n    let file_name_arr_first_count\
    \ = file_name_arr_first.count\n    let file_name_arr_last_count = file_name_arr_last.count\n\
    \    var file_name_arr_first_digit_count = 0\n    for i in 0..<file_name_arr_first_count\
    \ {\n        if file_name_arr_first[i] >= \"0\" && file_name_arr_first[i] <= \"\
    9\" {\n            file_name_arr_first_digit_count += 1\n        }\n    }\n  \
    \  if file_name_arr_count != 2 || file_name_arr_first_digit_count > 3 || file_name_arr_first[0]\
    \ < \"A\" || file_name_arr_first[0] > \"z\" || (file_name_arr_first[0] > \"Z\"\
    \ && file_name_arr_first[0] < \"a\") || file_name_arr_last != \"txt\" && file_name_arr_last\
    \ != \"exe\" && file_name_arr_last != \"dll\" {\n        return \"No\"\n    }\n\
    \    return \"Yes\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let file_name_arr_1 = file_name_arr[0]\n    let file_name_arr_2 = file_name_arr[1]\n\
    \    if file_name_arr_1.count == 0 || file_name_arr_2.count == 0 {\n        return\
    \ \"No\"\n    }\n    if file_name_arr_1.count > 3 {\n        return \"No\"\n \
    \   }\n    if file_name_arr_1.rangeOfCharacter(from: CharacterSet.decimalDigits)\
    \ != nil {\n        return \"No\"\n    }\n    if file_name_arr_2 != \"txt\" &&\
    \ file_name_arr_2 != \"exe\" && file_name_arr_2 != \"dll\" {\n        return \"\
    No\"\n    }\n    return \"Yes\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.[a-zA-Z]{3}$\"\n    let file_name_test = NSPredicate(format:\"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_arr = file_name.split(separator: \"\
    .\")\n    let file_name_first = file_name_arr[0]\n    let file_name_second = file_name_arr[1]\n\
    \    if file_name_first.count == 0 || file_name_second.count == 0 {\n        return\
    \ \"No\"\n    }\n    if file_name_first.count > 3 {\n        return \"No\"\n \
    \   }\n    if file_name_first.filter({$0 >= \"0\" && $0 <= \"9\"}).count > 3 {\n\
    \        return \"No\"\n    }\n    if file_name_first.filter({$0 >= \"a\" && $0\
    \ <= \"z\"}).count == 0 && file_name_first.filter({$0 >= \"A\" && $0 <= \"Z\"\
    }).count == 0 {\n        return \"No\"\n    }\n    if file_name_second != \"txt\"\
    \ && file_name_second != \"exe\" && file_name_second != \"dll\" {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let file_name_arr_0 = file_name_arr[0]\n    let file_name_arr_1 = file_name_arr[1]\n\
    \    if file_name_arr_0.count == 0 {\n        return \"No\"\n    }\n    let file_name_arr_0_first_char\
    \ = file_name_arr_0[file_name_arr_0.startIndex]\n    if !(file_name_arr_0_first_char\
    \ >= \"a\" && file_name_arr_0_first_char <= \"z\" ||\n        file_name_arr_0_first_char\
    \ >= \"A\" && file_name_arr_0_first_char <= \"Z\") {\n        return \"No\"\n\
    \    }\n    if file_name_arr_1 != \"txt\" && file_name_arr_1 != \"exe\" && file_name_arr_1\
    \ != \"dll\" {\n        return \"No\"\n    }\n    var count = 0\n    for char\
    \ in file_name_arr_0 {\n        if char >= \"0\" && char <= \"9\" {\n        \
    \    count += 1\n        }\n    }\n    if count > 3 {\n        return \"No\"\n\
    \    }\n    return \"Yes\"", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let file_name_arr_0 = file_name_arr[0]\n    let file_name_arr_1 = file_name_arr[1]\n\
    \    if file_name_arr_0.count == 0 {\n        return \"No\"\n    }\n    if file_name_arr_1.count\
    \ == 0 {\n        return \"No\"\n    }\n    if file_name_arr_1 != \"txt\" && file_name_arr_1\
    \ != \"exe\" && file_name_arr_1 != \"dll\" {\n        return \"No\"\n    }\n \
    \   var count = 0\n    for c in file_name_arr_0 {\n        if c >= \"0\" && c\
    \ <= \"9\" {\n            count += 1\n        }\n    }\n    if count > 3 {\n \
    \       return \"No\"\n    }\n    if file_name_arr_0[file_name_arr_0.startIndex]\
    \ < \"A\" || file_name_arr_0[file_name_arr_0.startIndex] > \"z\" {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "    let digits = \"0123456789\"\n    let\
    \ latin_alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\
    \    let valid_extensions = [\"txt\", \"exe\", \"dll\"]\n    var digit_count =\
    \ 0\n    var dot_count = 0\n    var extension_found = false\n    var extension_index\
    \ = 0\n    var extension_name = \"\"\n    var extension_name_length = 0\n    var\
    \ file_name_length = file_name.count\n    var file_name_index = 0\n    var file_name_char\
    \ = \"\"\n    var file_name_char_index = 0\n    var file_name_char_is_valid =\
    \ false\n    var file_name_is_valid = true\n    var file_name_substring = \"\"\
    \n    var file_name_substring_length = 0\n    var file_name_substring_index =\
    \ 0\n    var file_name_substring_char = \"\"\n    var file_name_substring_char_index\
    \ = 0\n    var file_name_substring_char_is_valid = false\n    var file_name_substring_is_valid\
    \ = true\n    var file_name_substring_is_extension = false\n    var file_name_substring_is_prefix\
    \ = false\n    var file_name_substring_is_prefix_valid = false\n    var file_name_substring_is_prefix_valid_char\
    \ = false\n    var file_name_substring_is_prefix_valid_char_index = 0\n    var\
    \ file_name_substring_is_prefix_valid_char_is_valid = false\n    var file_name_substring_is_prefix_valid_char_is_valid_index\
    \ = 0\n    var file_name_substring_is_prefix_valid_char_is_valid_char = \"\"\n\
    \    var file_name_substring_is_prefix_valid_char_is_valid_char_index = 0\n  \
    \  var file_name_substring_is_prefix_valid_char_is_valid_char_is_valid = false\n\
    \    var file_name_", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    if file_name.range(of: file_name_regex, options: .regularExpression)\
    \ != nil {\n        return \"Yes\"\n    }\n    return \"No\"", "    let digits\
    \ = CharacterSet.decimalDigits\n    let latin_alphabet = CharacterSet.letters\n\
    \    let valid_extensions = [\"txt\", \"exe\", \"dll\"]\n    let file_name_components\
    \ = file_name.components(separatedBy: \".\")\n    let file_name_without_extension\
    \ = file_name_components[0]\n    let file_name_extension = file_name_components[1]\n\
    \    let file_name_without_extension_characters = Array(file_name_without_extension)\n\
    \    let file_name_extension_characters = Array(file_name_extension)\n    let\
    \ file_name_without_extension_digits = file_name_without_extension_characters.filter\
    \ { digits.contains($0.unicodeScalars.first!) }\n    let file_name_without_extension_latin_alphabet\
    \ = file_name_without_extension_characters.filter { latin_alphabet.contains($0.unicodeScalars.first!)\
    \ }\n    let file_name_without_extension_latin_alphabet_first_character = file_name_without_extension_latin_alphabet.first\n\
    \    let file_name_without_extension_latin_alphabet_first_character_is_lowercase\
    \ = latin_alphabet.contains(CharacterSet(charactersIn: String(file_name_without_extension_latin_alphabet_first_character!)).lowercaseLetters.first!)\n\
    \    let file_name_without_extension_latin_alphabet_first_character_is_uppercase\
    \ = latin_alphabet.contains(CharacterSet(charactersIn: String(file_name_without_extension_latin_alphabet_first_character!)).uppercaseLetters.first!)\n\
    \    let file_name_without_extension_latin_alphabet_first_character_is_valid =\
    \ file_name_without_extension_latin_alphabet_first_character_is_lowercase || file_name_without_extension_latin_alphabet_first_character_is_uppercase\n\
    \    let file", "    let file_name_arr = file_name.split(separator: \".\")\n \
    \   let file_name_arr_count = file_name_arr.count\n    let file_name_arr_first\
    \ = file_name_arr[0]\n    let file_name_arr_last = file_name_arr[file_name_arr_count\
    \ - 1]\n    let file_name_arr_first_count = file_name_arr_first.count\n    let\
    \ file_name_arr_last_count = file_name_arr_last.count\n    let file_name_arr_first_first\
    \ = file_name_arr_first[file_name_arr_first.startIndex]\n    let file_name_arr_first_first_unicode\
    \ = file_name_arr_first_first.unicodeScalars.first?.value\n    let file_name_arr_first_first_unicode_int\
    \ = Int(file_name_arr_first_first_unicode!)\n    let file_name_arr_first_first_unicode_int_lower\
    \ = file_name_arr_first_first_unicode_int! - 32\n    let file_name_arr_first_first_unicode_int_upper\
    \ = file_name_arr_first_first_unicode_int! + 32\n    let file_name_arr_first_first_unicode_int_lower_bool\
    \ = file_name_arr_first_first_unicode_int_lower >= 65 && file_name_arr_first_first_unicode_int_lower\
    \ <= 90\n    let file_name_arr_first_first_unicode_int_upper_bool = file_name_arr_first_first_unicode_int_upper\
    \ >= 97 && file_name_arr_first_first_unicode_int_upper <= 122\n    let file_name_arr_first_first_unicode_int_bool\
    \ = file_name_arr_first_first_unicode_int_lower_bool || file_name_arr_first_first_unicode_int_upper_bool\n\
    \    let file_name_arr_first_first_unicode_int_bool_bool = file_name_arr_first_first_unicode",
  "    let file_name_arr = file_name.split(separator: \".\")\n    let file_name_arr_count\
    \ = file_name_arr.count\n    let file_name_arr_first = file_name_arr[0]\n    let\
    \ file_name_arr_last = file_name_arr[file_name_arr_count - 1]\n    let file_name_arr_first_count\
    \ = file_name_arr_first.count\n    let file_name_arr_last_count = file_name_arr_last.count\n\
    \    let file_name_arr_first_first = file_name_arr_first[file_name_arr_first.startIndex]\n\
    \    let file_name_arr_last_first = file_name_arr_last[file_name_arr_last.startIndex]\n\
    \    let file_name_arr_first_last = file_name_arr_first[file_name_arr_first.index(before:\
    \ file_name_arr_first.endIndex)]\n    let file_name_arr_last_last = file_name_arr_last[file_name_arr_last.index(before:\
    \ file_name_arr_last.endIndex)]\n    let file_name_arr_first_first_char = Character(String(file_name_arr_first_first))\n\
    \    let file_name_arr_last_first_char = Character(String(file_name_arr_last_first))\n\
    \    let file_name_arr_first_last_char = Character(String(file_name_arr_first_last))\n\
    \    let file_name_arr_last_last_char = Character(String(file_name_arr_last_last))\n\
    \    let file_name_arr_first_first_char_ascii = file_name_arr_first_first_char.asciiValue\n\
    \    let file_name_arr_last_first_char_ascii = file_name_arr_last_first_char.asciiValue\n\
    \    let file_name_arr_first_last_char_ascii = file_name_arr_first_last_char.asciiValue\n\
    \    let file_name_arr_last_", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let first_part = file_name_arr[0]\n    let second_part = file_name_arr[1]\n\
    \    if first_part.count == 0 || first_part.count > 8 {\n        return \"No\"\
    \n    }\n    if second_part != \"txt\" && second_part != \"exe\" && second_part\
    \ != \"dll\" {\n        return \"No\"\n    }\n    var digit_count = 0\n    for\
    \ c in first_part {\n        if c >= \"0\" && c <= \"9\" {\n            digit_count\
    \ += 1\n        }\n    }\n    if digit_count > 3 {\n        return \"No\"\n  \
    \  }\n    return \"Yes\"", "    let file_name_array = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_first = file_name_array[0]\n    let file_name_second\
    \ = file_name_array[1]\n    var file_name_first_digit_count = 0\n    var file_name_first_letter_count\
    \ = 0\n    var file_name_second_valid = false\n    for char in file_name_first\
    \ {\n        if char >= \"0\" && char <= \"9\" {\n            file_name_first_digit_count\
    \ += 1\n        }\n        if char >= \"a\" && char <= \"z\" || char >= \"A\"\
    \ && char <= \"Z\" {\n            file_name_first_letter_count += 1\n        }\n\
    \    }\n    if file_name_second == \"txt\" || file_name_second == \"exe\" || file_name_second\
    \ == \"dll\" {\n        file_name_second_valid = true\n    }\n    if file_name_first_digit_count\
    \ > 3 || file_name_first_letter_count == 0 || file_name_second_valid == false\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_components\
    \ = file_name.components(separatedBy: \".\")\n    let file_name_prefix = file_name_components[0]\n\
    \    let file_name_suffix = file_name_components[1]\n    let file_name_prefix_characters\
    \ = Array(file_name_prefix)\n    let file_name_prefix_numbers = file_name_prefix_characters.filter\
    \ { $0 >= \"0\" && $0 <= \"9\" }\n    let file_name_prefix_letters = file_name_prefix_characters.filter\
    \ { $0 >= \"a\" && $0 <= \"z\" || $0 >= \"A\" && $0 <= \"Z\" }\n    let file_name_suffix_valid\
    \ = file_name_suffix == \"txt\" || file_name_suffix == \"exe\" || file_name_suffix\
    \ == \"dll\"\n    if file_name_components.count != 2 || file_name_prefix_numbers.count\
    \ > 3 || file_name_prefix_letters.count == 0 || !file_name_suffix_valid {\n  \
    \      return \"No\"\n    }\n    return \"Yes\"", "    let file_name_components\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_components.count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_prefix = file_name_components[0]\n\
    \    let file_name_suffix = file_name_components[1]\n    if file_name_prefix.count\
    \ == 0 || file_name_suffix.count == 0 {\n        return \"No\"\n    }\n    if\
    \ file_name_suffix != \"txt\" && file_name_suffix != \"exe\" && file_name_suffix\
    \ != \"dll\" {\n        return \"No\"\n    }\n    let file_name_prefix_digits\
    \ = file_name_prefix.filter { $0 >= \"0\" && $0 <= \"9\" }\n    if file_name_prefix_digits.count\
    \ > 3 {\n        return \"No\"\n    }\n    if file_name_prefix.filter { $0 >=\
    \ \"a\" && $0 <= \"z\" }.count == 0 &&\n        file_name_prefix.filter { $0 >=\
    \ \"A\" && $0 <= \"Z\" }.count == 0 {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", "    // your code here\n    return \"\"", "    let file_name_components\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_components.count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_without_extension =\
    \ file_name_components[0]\n    let file_extension = file_name_components[1]\n\
    \    let file_name_without_extension_components = file_name_without_extension.components(separatedBy:\
    \ CharacterSet.decimalDigits)\n    if file_name_without_extension_components.count\
    \ > 2 {\n        return \"No\"\n    }\n    if file_name_without_extension_components[0].isEmpty\
    \ {\n        return \"No\"\n    }\n    let first_character = file_name_without_extension_components[0].first!\n\
    \    if !(first_character >= \"a\" && first_character <= \"z\" || first_character\
    \ >= \"A\" && first_character <= \"Z\") {\n        return \"No\"\n    }\n    if\
    \ file_extension != \"txt\" && file_extension != \"exe\" && file_extension !=\
    \ \"dll\" {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_regex\
    \ = \"^[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format:\"\
    SELF MATCHES %@\", file_name_regex)\n    if file_name_test.evaluate(with: file_name)\
    \ {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }", "  \
    \  let file_name_arr = file_name.split(separator: \".\")\n    if file_name_arr.count\
    \ != 2 {\n        return \"No\"\n    }\n    let first_part = file_name_arr[0]\n\
    \    let second_part = file_name_arr[1]\n    if first_part.count == 0 || first_part.count\
    \ > 8 {\n        return \"No\"\n    }\n    if !first_part.first!.isLetter {\n\
    \        return \"No\"\n    }\n    if second_part.count == 0 || second_part.count\
    \ > 3 {\n        return \"No\"\n    }\n    if second_part != \"txt\" && second_part\
    \ != \"exe\" && second_part != \"dll\" {\n        return \"No\"\n    }\n    let\
    \ digits = CharacterSet.decimalDigits\n    if first_part.filter({ digits.contains($0)\
    \ }).count > 3 {\n        return \"No\"\n    }\n    return \"Yes\"", "    let\
    \ file_name_array = file_name.components(separatedBy: \".\")\n    if file_name_array.count\
    \ != 2 {\n        return \"No\"\n    }\n    let first_part = file_name_array[0]\n\
    \    let second_part = file_name_array[1]\n    if !first_part.is_valid_first_part()\
    \ || !second_part.is_valid_second_part() {\n        return \"No\"\n    }\n   \
    \ return \"Yes\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_ext = file_name_arr[1]\n    let file_name_no_ext =\
    \ file_name_arr[0]\n    let file_name_no_ext_arr = Array(file_name_no_ext)\n \
    \   let file_name_no_ext_arr_count = file_name_no_ext_arr.count\n    let file_name_no_ext_arr_count_digits\
    \ = file_name_no_ext_arr.filter { $0 >= \"0\" && $0 <= \"9\" }.count\n    let\
    \ file_name_no_ext_arr_count_letters = file_name_no_ext_arr.filter { $0 >= \"\
    a\" && $0 <= \"z\" || $0 >= \"A\" && $0 <= \"Z\" }.count\n    let file_name_no_ext_arr_count_letters_first\
    \ = file_name_no_ext_arr.first!\n    let file_name_no_ext_arr_count_letters_first_check\
    \ = file_name_no_ext_arr_count_letters_first >= \"a\" && file_name_no_ext_arr_count_letters_first\
    \ <= \"z\" || file_name_no_ext_arr_count_letters_first >= \"A\" && file_name_no_ext_arr_count_letters_first\
    \ <= \"Z\"\n    let file_name_ext_check = file_name_ext == \"txt\" || file_name_ext\
    \ == \"exe\" || file_name_ext == \"dll\"\n    if file_name_no_ext_arr_count_digits\
    \ > 3 || file_name_no_ext_arr_count_letters == 0 || file_name_no_ext_arr_count_letters_first_check\
    \ == false || file_name_ext_check == false {\n        return \"No\"\n    } else\
    \ {\n        return \"Yes\"\n    }", "    let file_name_array = file_name.split(separator:\
    \ \".\")\n    let file_name_first = file_name_array[0]\n    let file_name_second\
    \ = file_name_array[1]\n    let file_name_first_array = Array(file_name_first)\n\
    \    let file_name_second_array = Array(file_name_second)\n    let file_name_first_array_count\
    \ = file_name_first_array.count\n    let file_name_second_array_count = file_name_second_array.count\n\
    \    var file_name_first_array_count_digit = 0\n    var file_name_first_array_count_letter\
    \ = 0\n    var file_name_second_array_count_letter = 0\n    var file_name_second_array_count_txt\
    \ = 0\n    var file_name_second_array_count_exe = 0\n    var file_name_second_array_count_dll\
    \ = 0\n    var file_name_second_array_count_txt_exe_dll = 0\n    for i in 0...file_name_first_array_count\
    \ - 1 {\n        if file_name_first_array[i] >= \"0\" && file_name_first_array[i]\
    \ <= \"9\" {\n            file_name_first_array_count_digit += 1\n        }\n\
    \        if file_name_first_array[i] >= \"a\" && file_name_first_array[i] <= \"\
    z\" || file_name_first_array[i] >= \"A\" && file_name_first_array[i] <= \"Z\"\
    \ {\n            file_name_first_array_count_letter += 1\n        }\n    }\n \
    \   for i in 0...file_name_second_array_count - 1 {\n        if file_name_second_array[i]\
    \ >= \"a\" && file_name_second_array[i] <= \"z\" || file_name_second_array[i]\
    \ >= \"A\" && file_name_second_array[i] <= \"Z\" {\n            file_name_second_array_count_letter\
    \ += 1\n        }\n        if file_name", "    let pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let regex = try! NSRegularExpression(pattern: pattern,\
    \ options: [])\n    let range = NSRange(location: 0, length: file_name.count)\n\
    \    if regex.firstMatch(in: file_name, options: [], range: range) != nil {\n\
    \        return \"Yes\"\n    } else {\n        return \"No\"\n    }", "    let\
    \ file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let\
    \ file_name_test = NSPredicate(format:\"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_arr = file_name.components(separatedBy: \".\")\n    let file_name_arr_count\
    \ = file_name_arr.count\n    if file_name_arr_count != 2 {\n        return \"\
    No\"\n    }\n    let file_name_arr_first = file_name_arr[0]\n    let file_name_arr_last\
    \ = file_name_arr[1]\n    let file_name_arr_first_count = file_name_arr_first.count\n\
    \    let file_name_arr_last_count = file_name_arr_last.count\n    if file_name_arr_first_count\
    \ == 0 || file_name_arr_last_count == 0 {\n        return \"No\"\n    }\n    let\
    \ file_name_arr_first_first_char = file_name_arr_first[file_name_arr_first.startIndex]\n\
    \    let file_name_arr_last_first_char = file_name_arr_last[file_name_arr_last.startIndex]\n\
    \    if !(file_name_arr_first_first_char >= \"a\" && file_name_arr_first_first_char\
    \ <= \"z\" || file_name_arr_first_first_char >= \"A\" && file_name_arr_first_first_char\
    \ <= \"Z\") {\n        return \"No\"\n    }\n    if !(file_name_arr_last_first_char\
    \ >= \"a\" && file_name_arr_last_first_char <= \"z\" || file_name_arr_last_first_char\
    \ >= \"A\" && file_name_arr_last_first_char <= \"Z\") {\n        return \"No\"\
    \n    }\n    if file_name_arr_last != \"txt\" && file_name_arr_last != \"exe\"\
    \ && file_name_arr_last != \"dll\" {\n        return \"No\"\n    }\n    var count\
    \ = 0\n    for char in file_name_arr_first {\n        if char >= \"0\" && char\
    \ <= \"9\" {\n            count += 1\n        }\n    }\n    if count > 3 {\n \
    \       return \"No\"\n   ", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    let file_name_arr_first\
    \ = file_name_arr[0]\n    let file_name_arr_last = file_name_arr[file_name_arr_count\
    \ - 1]\n    let file_name_arr_first_count = file_name_arr_first.count\n    let\
    \ file_name_arr_last_count = file_name_arr_last.count\n    var file_name_arr_first_digit_count\
    \ = 0\n    var file_name_arr_first_letter_count = 0\n    var file_name_arr_last_letter_count\
    \ = 0\n    var file_name_arr_last_digit_count = 0\n    var file_name_arr_last_letter_check\
    \ = false\n    var file_name_arr_last_digit_check = false\n    var file_name_arr_first_letter_check\
    \ = false\n    var file_name_arr_first_digit_check = false\n    var file_name_arr_first_letter_check_count\
    \ = 0\n    var file_name_arr_last_letter_check_count = 0\n    var file_name_arr_last_digit_check_count\
    \ = 0\n    var file_name_arr_first_digit_check_count = 0\n    var file_name_arr_last_check\
    \ = false\n    var file_name_arr_first_check = false\n    var file_name_arr_check\
    \ = false\n    var file_name_check = false\n    var file_name_check_count = 0\n\
    \    var file_name_check_count_check = false\n    var file_name_check_count_check_count\
    \ = 0\n    var file_name_check_count_check_count_check = false\n    var file_name_check_count_check_count_check_count\
    \ = 0\n    var file_name_check_count_check_count_check_count_check = false\n \
    \   var file_name_check_count_check_count_check_count_check_count = 0\n    var\
    \ file_name", "    let file_name_arr = file_name.split(separator: \".\")\n   \
    \ let file_name_arr_count = file_name_arr.count\n    let file_name_arr_first =\
    \ file_name_arr[0]\n    let file_name_arr_last = file_name_arr[file_name_arr_count\
    \ - 1]\n    let file_name_arr_first_count = file_name_arr_first.count\n    let\
    \ file_name_arr_last_count = file_name_arr_last.count\n    let file_name_arr_first_first\
    \ = file_name_arr_first[file_name_arr_first.startIndex]\n    let file_name_arr_last_first\
    \ = file_name_arr_last[file_name_arr_last.startIndex]\n    let file_name_arr_last_second\
    \ = file_name_arr_last[file_name_arr_last.index(after: file_name_arr_last.startIndex)]\n\
    \    let file_name_arr_last_third = file_name_arr_last[file_name_arr_last.index(file_name_arr_last.startIndex,\
    \ offsetBy: 2)]\n    let file_name_arr_last_fourth = file_name_arr_last[file_name_arr_last.index(file_name_arr_last.startIndex,\
    \ offsetBy: 3)]\n    let file_name_arr_first_first_unicode = file_name_arr_first_first.unicodeScalars.first?.value\n\
    \    let file_name_arr_last_first_unicode = file_name_arr_last_first.unicodeScalars.first?.value\n\
    \    let file_name_arr_last_second_unicode = file_name_arr_last_second.unicodeScalars.first?.value\n\
    \    let file_name_arr_last_third_unicode = file_name_arr_last_third.unicodeScalars.first?.value\n\
    \    let file_name_arr_last_fourth_unicode = file_name_arr_last_fourth.unicodeScalars.first?.value\n\
    \   ", "    let file_name_arr = file_name.split(separator: \".\")\n    if file_name_arr.count\
    \ != 2 {\n        return \"No\"\n    }\n    let first_part = file_name_arr[0]\n\
    \    let second_part = file_name_arr[1]\n    if first_part.count == 0 || first_part.count\
    \ > 8 {\n        return \"No\"\n    }\n    if second_part.count == 0 || second_part.count\
    \ > 3 {\n        return \"No\"\n    }\n    if !(second_part == \"txt\" || second_part\
    \ == \"exe\" || second_part == \"dll\") {\n        return \"No\"\n    }\n    let\
    \ first_part_arr = Array(first_part)\n    var digit_count = 0\n    for char in\
    \ first_part_arr {\n        if !(char >= \"a\" && char <= \"z\" || char >= \"\
    A\" && char <= \"Z\") {\n            if !(char >= \"0\" && char <= \"9\") {\n\
    \                return \"No\"\n            }\n            digit_count += 1\n\
    \            if digit_count > 3 {\n                return \"No\"\n           \
    \ }\n        }\n    }\n    return \"Yes\"", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  if file_name_arr[0].count == 0 {\n        return \"No\"\n    }\n    if file_name_arr[1]\
    \ != \"txt\" && file_name_arr[1] != \"exe\" && file_name_arr[1] != \"dll\" {\n\
    \        return \"No\"\n    }\n    let first_char = file_name_arr[0].first!\n\
    \    if !(first_char >= \"a\" && first_char <= \"z\" || first_char >= \"A\" &&\
    \ first_char <= \"Z\") {\n        return \"No\"\n    }\n    var digit_count =\
    \ 0\n    for char in file_name_arr[0] {\n        if char >= \"0\" && char <= \"\
    9\" {\n            digit_count += 1\n        }\n    }\n    if digit_count > 3\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_array\
    \ = file_name.components(separatedBy: \".\")\n    let file_name_array_count =\
    \ file_name_array.count\n    if file_name_array_count != 2 {\n        return \"\
    No\"\n    }\n    let file_name_array_first = file_name_array[0]\n    let file_name_array_second\
    \ = file_name_array[1]\n    let file_name_array_first_count = file_name_array_first.count\n\
    \    let file_name_array_second_count = file_name_array_second.count\n    if file_name_array_first_count\
    \ == 0 || file_name_array_second_count == 0 {\n        return \"No\"\n    }\n\
    \    let file_name_array_first_first_char = file_name_array_first[file_name_array_first.startIndex]\n\
    \    let file_name_array_second_first_char = file_name_array_second[file_name_array_second.startIndex]\n\
    \    if !file_name_array_first_first_char.isLetter {\n        return \"No\"\n\
    \    }\n    if !file_name_array_second_first_char.isLetter {\n        return \"\
    No\"\n    }\n    let file_name_array_first_digit_count = file_name_array_first.filter({$0.isNumber}).count\n\
    \    if file_name_array_first_digit_count > 3 {\n        return \"No\"\n    }\n\
    \    let file_name_array_second_digit_count = file_name_array_second.filter({$0.isNumber}).count\n\
    \    if file_name_array_second_digit_count > 3 {\n        return \"No\"\n    }\n\
    \    if file_name_array_second != \"txt\" && file_name_array_second != \"exe\"\
    \ && file_name_array_second != \"dll\" {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", "    let digits = \"0123456789\"\n    let letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let extensions = [\"txt\", \"exe\", \"dll\"]\n    var digit_count = 0\n\
    \    var dot_count = 0\n    var extension_found = false\n    var extension_index\
    \ = 0\n    var extension_length = 0\n    var extension_string = \"\"\n    var\
    \ letter_found = false\n    var letter_index = 0\n    var letter_string = \"\"\
    \n    var name_string = \"\"\n    var name_length = 0\n    var name_index = 0\n\
    \    var name_found = false\n    var name_string_length = 0\n    var name_string_index\
    \ = 0\n    var name_string_found = false\n    var name_string_char = \"\"\n  \
    \  var name_string_char_index = 0\n    var name_string_char_found = false\n  \
    \  var name_string_char_is_letter = false\n    var name_string_char_is_digit =\
    \ false\n    var name_string_char_is_letter_or_digit = false\n    var name_string_char_is_not_letter_or_digit\
    \ = false\n    var name_string_char_is_not_letter = false\n    var name_string_char_is_not_digit\
    \ = false\n    var name_string_char_is_not_letter_or_digit = false\n    var name_string_char_is_not_letter_or_digit\
    \ = false\n    var name_string_char_is_not_letter_or_digit = false\n    var name_string_char_is_not_letter_or_digit\
    \ = false\n    var name_string_char_is_not_letter_or_digit = false\n    var name_string_char_is_not_letter_or_digit\
    \ = false\n    var name_string_char_is_not_letter_or_digit = false\n    var name_string_char_is_not_letter_or_digit\
    \ = false\n    var name_string_char_is_not_letter_or_digit = false\n    var name",
  "    let file_name_arr = file_name.split(separator: \".\")\n    let file_name_arr_count\
    \ = file_name_arr.count\n    if file_name_arr_count != 2 {\n        return \"\
    No\"\n    }\n    let file_name_arr_0 = file_name_arr[0]\n    let file_name_arr_1\
    \ = file_name_arr[1]\n    let file_name_arr_0_count = file_name_arr_0.count\n\
    \    let file_name_arr_1_count = file_name_arr_1.count\n    if file_name_arr_0_count\
    \ == 0 || file_name_arr_1_count == 0 {\n        return \"No\"\n    }\n    let\
    \ file_name_arr_0_first_char = file_name_arr_0.first!\n    let file_name_arr_1_first_char\
    \ = file_name_arr_1.first!\n    if file_name_arr_0_first_char < \"a\" || file_name_arr_0_first_char\
    \ > \"z\" {\n        if file_name_arr_0_first_char < \"A\" || file_name_arr_0_first_char\
    \ > \"Z\" {\n            return \"No\"\n        }\n    }\n    if file_name_arr_1_first_char\
    \ < \"a\" || file_name_arr_1_first_char > \"z\" {\n        if file_name_arr_1_first_char\
    \ < \"A\" || file_name_arr_1_first_char > \"Z\" {\n            return \"No\"\n\
    \        }\n    }\n    let file_name_arr_0_digit_count = file_name_arr_0.filter\
    \ { $0 >= \"0\" && $0 <= \"9\" }.count\n    if file_name_arr_0_digit_count > 3\
    \ {\n        return \"No\"\n    }\n    if file_name_arr_1 != \"txt\" && file_name_arr_1\
    \ != \"exe\" && file_name_arr_1 != \"dll\" {\n        return \"No\"\n    }\n \
    \   return \"Yes", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_components.count != 2 {\n        return \"No\"\n  \
    \  }\n    let file_name_prefix = file_name_components[0]\n    let file_name_suffix\
    \ = file_name_components[1]\n    if file_name_prefix.count == 0 {\n        return\
    \ \"No\"\n    }\n    let file_name_prefix_first_char = file_name_prefix[file_name_prefix.startIndex]\n\
    \    if !(file_name_prefix_first_char >= \"a\" && file_name_prefix_first_char\
    \ <= \"z\" ||\n        file_name_prefix_first_char >= \"A\" && file_name_prefix_first_char\
    \ <= \"Z\") {\n        return \"No\"\n    }\n    if file_name_prefix.filter({$0\
    \ >= \"0\" && $0 <= \"9\"}).count > 3 {\n        return \"No\"\n    }\n    if\
    \ !(file_name_suffix == \"txt\" || file_name_suffix == \"exe\" || file_name_suffix\
    \ == \"dll\") {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr\
    \ = file_name.split(separator: \".\")\n    let file_name_arr_count = file_name_arr.count\n\
    \    let file_name_arr_first = file_name_arr[0]\n    let file_name_arr_last =\
    \ file_name_arr[file_name_arr_count - 1]\n    let file_name_arr_first_count =\
    \ file_name_arr_first.count\n    let file_name_arr_last_count = file_name_arr_last.count\n\
    \    var file_name_arr_first_count_digit = 0\n    var file_name_arr_first_count_letter\
    \ = 0\n    var file_name_arr_last_count_letter = 0\n    var file_name_arr_last_count_digit\
    \ = 0\n    var file_name_arr_last_count_letter_check = 0\n    var file_name_arr_last_count_digit_check\
    \ = 0\n    var file_name_arr_last_count_letter_check_arr = [Character]()\n   \
    \ var file_name_arr_last_count_digit_check_arr = [Character]()\n    var file_name_arr_last_count_letter_check_arr_count\
    \ = 0\n    var file_name_arr_last_count_digit_check_arr_count = 0\n    var file_name_arr_last_count_letter_check_arr_count_check\
    \ = 0\n    var file_name_arr_last_count_digit_check_arr_count_check = 0\n    var\
    \ file_name_arr_last_count_letter_check_arr_count_check_arr = [Character]()\n\
    \    var file_name_arr_last_count_digit_check_arr_count_check_arr = [Character]()\n\
    \    var file_name_arr_last_count_letter_check_arr_count_check_arr_count = 0\n\
    \    var file_name_arr_last_count_digit_check_arr_count_check_arr_count = 0\n\
    \    var file_name_arr_last_count_letter_check_arr_count_check_arr_count_check\
    \ = 0\n   ", "    let pattern = \"^[a-zA-Z]\\\\w{0,3}\\\\.(txt|exe|dll)$\"\n \
    \   let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let\
    \ matches = regex.matches(in: file_name, options: [], range: NSRange(location:\
    \ 0, length: file_name.count))\n    return matches.count > 0 ? \"Yes\" : \"No\"",
  "    let file_name_array = file_name.components(separatedBy: \".\")\n    let file_name_first\
    \ = file_name_array[0]\n    let file_name_second = file_name_array[1]\n    let\
    \ file_name_second_array = Array(file_name_second)\n    let file_name_first_array\
    \ = Array(file_name_first)\n    var count = 0\n    for i in file_name_first_array\
    \ {\n        if i >= \"0\" && i <= \"9\" {\n            count += 1\n        }\n\
    \    }\n    if count > 3 {\n        return \"No\"\n    }\n    if file_name_first_array[0]\
    \ < \"A\" || file_name_first_array[0] > \"z\" {\n        return \"No\"\n    }\n\
    \    if file_name_second_array[0] < \"A\" || file_name_second_array[0] > \"z\"\
    \ {\n        return \"No\"\n    }\n    if file_name_second != \"txt\" && file_name_second\
    \ != \"exe\" && file_name_second != \"dll\" {\n        return \"No\"\n    }\n\
    \    return \"Yes\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    if file_name_arr_count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_arr_first = file_name_arr[0]\n\
    \    let file_name_arr_last = file_name_arr[1]\n    let file_name_arr_first_count\
    \ = file_name_arr_first.count\n    let file_name_arr_last_count = file_name_arr_last.count\n\
    \    if file_name_arr_first_count == 0 || file_name_arr_last_count == 0 {\n  \
    \      return \"No\"\n    }\n    let file_name_arr_first_first_char = file_name_arr_first[file_name_arr_first.startIndex]\n\
    \    if !(file_name_arr_first_first_char >= \"a\" && file_name_arr_first_first_char\
    \ <= \"z\" ||\n        file_name_arr_first_first_char >= \"A\" && file_name_arr_first_first_char\
    \ <= \"Z\") {\n        return \"No\"\n    }\n    if file_name_arr_last != \"txt\"\
    \ && file_name_arr_last != \"exe\" && file_name_arr_last != \"dll\" {\n      \
    \  return \"No\"\n    }\n    var file_name_arr_first_digit_count = 0\n    for\
    \ char in file_name_arr_first {\n        if char >= \"0\" && char <= \"9\" {\n\
    \            file_name_arr_first_digit_count += 1\n        }\n    }\n    if file_name_arr_first_digit_count\
    \ > 3 {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_array\
    \ = file_name.components(separatedBy: \".\")\n    let file_name_extension = file_name_array[1]\n\
    \    let file_name_without_extension = file_name_array[0]\n    let file_name_without_extension_array\
    \ = Array(file_name_without_extension)\n    let file_name_without_extension_array_count\
    \ = file_name_without_extension_array.count\n    var count = 0\n    for i in 0..<file_name_without_extension_array_count\
    \ {\n        if file_name_without_extension_array[i] >= \"0\" && file_name_without_extension_array[i]\
    \ <= \"9\" {\n            count += 1\n        }\n    }\n    if count > 3 {\n \
    \       return \"No\"\n    }\n    if file_name_extension != \"txt\" && file_name_extension\
    \ != \"exe\" && file_name_extension != \"dll\" {\n        return \"No\"\n    }\n\
    \    if file_name_without_extension_array_count == 0 {\n        return \"No\"\n\
    \    }\n    if file_name_without_extension_array[0] < \"a\" || file_name_without_extension_array[0]\
    \ > \"z\" {\n        if file_name_without_extension_array[0] < \"A\" || file_name_without_extension_array[0]\
    \ > \"Z\" {\n            return \"No\"\n        }\n    }\n    return \"Yes\"",
  "    let file_name_array = file_name.components(separatedBy: \".\")\n    let file_name_extension\
    \ = file_name_array[1]\n    let file_name_without_extension = file_name_array[0]\n\
    \    let file_name_without_extension_array = Array(file_name_without_extension)\n\
    \    var number_of_digits = 0\n    for i in file_name_without_extension_array\
    \ {\n        if i >= \"0\" && i <= \"9\" {\n            number_of_digits += 1\n\
    \        }\n    }\n    if number_of_digits > 3 {\n        return \"No\"\n    }\n\
    \    if file_name_extension != \"txt\" && file_name_extension != \"exe\" && file_name_extension\
    \ != \"dll\" {\n        return \"No\"\n    }\n    if file_name_without_extension_array[0]\
    \ >= \"0\" && file_name_without_extension_array[0] <= \"9\" {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let first_part = file_name_arr[0]\n    let second_part = file_name_arr[1]\n\
    \    if first_part.count == 0 || !first_part.contains(where: {$0 >= \"a\" && $0\
    \ <= \"z\"}) {\n        return \"No\"\n    }\n    if second_part != \"txt\" &&\
    \ second_part != \"exe\" && second_part != \"dll\" {\n        return \"No\"\n\
    \    }\n    let digits = first_part.filter({$0 >= \"0\" && $0 <= \"9\"})\n   \
    \ if digits.count > 3 {\n        return \"No\"\n    }\n    return \"Yes\"", " \
    \   let file_name_arr = file_name.components(separatedBy: \".\")\n    if file_name_arr.count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_arr_1 = file_name_arr[0]\n\
    \    let file_name_arr_2 = file_name_arr[1]\n    if file_name_arr_1.count == 0\
    \ {\n        return \"No\"\n    }\n    if file_name_arr_2.count == 0 {\n     \
    \   return \"No\"\n    }\n    if file_name_arr_2 != \"txt\" && file_name_arr_2\
    \ != \"exe\" && file_name_arr_2 != \"dll\" {\n        return \"No\"\n    }\n \
    \   var count = 0\n    for char in file_name_arr_1 {\n        if char >= \"0\"\
    \ && char <= \"9\" {\n            count += 1\n        }\n    }\n    if count >\
    \ 3 {\n        return \"No\"\n    }\n    if file_name_arr_1[file_name_arr_1.startIndex]\
    \ >= \"0\" && file_name_arr_1[file_name_arr_1.startIndex] <= \"9\" {\n       \
    \ return \"No\"\n    }\n    return \"Yes\"", "    let digits = \"0123456789\"\n\
    \    let latin_alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let valid_extensions = [\"txt\", \"exe\", \"dll\"]\n    var digits_count\
    \ = 0\n    var dot_count = 0\n    var extension_count = 0\n    var extension_index\
    \ = 0\n    var extension = \"\"\n    var valid_extension = false\n    var valid_name\
    \ = false\n    var valid_extension_count = false\n    var valid_digits_count =\
    \ false\n    var valid_dot_count = false\n    var valid_extension_index = false\n\
    \    var valid_extension_name = false\n    var valid_name_count = false\n    var\
    \ valid_name_index = false\n    var valid_name_name = false\n    var name = \"\
    \"\n    var name_count = 0\n    var name_index = 0\n    var name_name = \"\"\n\
    \    for character in file_name {\n        if digits.contains(character) {\n \
    \           digits_count += 1\n        }\n        if character == \".\" {\n  \
    \          dot_count += 1\n            extension_index = file_name.firstIndex(of:\
    \ character)!\n        }\n    }\n    if digits_count <= 3 {\n        valid_digits_count\
    \ = true\n    }\n    if dot_count == 1 {\n        valid_dot_count = true\n   \
    \ }\n    if valid_dot_count {\n        extension = String(file_name[file_name.index(after:\
    \ extension_index)...])\n        for valid_extension in valid_extensions {\n \
    \           if extension == valid_extension {\n                valid_extension_count\
    \ = true\n            }\n        }\n    }\n    if valid_extension_count {\n  \
    \      name = String(file_name[..<extension_index])\n        name_index = name.firstIndex(of:\
    \ \".\")!\n        name_name = String(name[..<name_index])\n        for character\
    \ in name_name {\n            if latin_alphabet.contains(character) {\n      \
    \          name_count +=", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_components.count != 2 {\n        return \"No\"\n  \
    \  }\n    let file_name_components_0 = file_name_components[0]\n    let file_name_components_1\
    \ = file_name_components[1]\n    if file_name_components_0.count == 0 {\n    \
    \    return \"No\"\n    }\n    if file_name_components_1.count == 0 {\n      \
    \  return \"No\"\n    }\n    if file_name_components_1 != \"txt\" && file_name_components_1\
    \ != \"exe\" && file_name_components_1 != \"dll\" {\n        return \"No\"\n \
    \   }\n    var digits_count = 0\n    for char in file_name_components_0 {\n  \
    \      if char >= \"0\" && char <= \"9\" {\n            digits_count += 1\n  \
    \      }\n    }\n    if digits_count > 3 {\n        return \"No\"\n    }\n   \
    \ if file_name_components_0[file_name_components_0.startIndex] < \"A\" || file_name_components_0[file_name_components_0.startIndex]\
    \ > \"z\" {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_array\
    \ = file_name.split(separator: \".\")\n    if file_name_array.count != 2 {\n \
    \       return \"No\"\n    }\n    let prefix = file_name_array[0]\n    let suffix\
    \ = file_name_array[1]\n    if prefix.count == 0 || prefix.count > 8 {\n     \
    \   return \"No\"\n    }\n    if suffix != \"txt\" && suffix != \"exe\" && suffix\
    \ != \"dll\" {\n        return \"No\"\n    }\n    let prefix_array = Array(prefix)\n\
    \    for i in 0..<prefix_array.count {\n        if !(prefix_array[i] >= \"0\"\
    \ && prefix_array[i] <= \"9\") && !(prefix_array[i] >= \"a\" && prefix_array[i]\
    \ <= \"z\") && !(prefix_array[i] >= \"A\" && prefix_array[i] <= \"Z\") {\n   \
    \         return \"No\"\n        }\n    }\n    return \"Yes\"", "    let file_name_array\
    \ = file_name.split(separator: \".\")\n    if file_name_array.count != 2 {\n \
    \       return \"No\"\n    }\n    let first_part = file_name_array[0]\n    let\
    \ second_part = file_name_array[1]\n    if first_part.count == 0 || !first_part.first!.isLetter\
    \ {\n        return \"No\"\n    }\n    if second_part != \"txt\" && second_part\
    \ != \"exe\" && second_part != \"dll\" {\n        return \"No\"\n    }\n    var\
    \ digit_count = 0\n    for char in first_part {\n        if char.isNumber {\n\
    \            digit_count += 1\n        }\n    }\n    if digit_count > 3 {\n  \
    \      return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    let file_name_arr_first\
    \ = file_name_arr[0]\n    let file_name_arr_last = file_name_arr[file_name_arr_count\
    \ - 1]\n    let file_name_arr_first_count = file_name_arr_first.count\n    let\
    \ file_name_arr_last_count = file_name_arr_last.count\n    var file_name_arr_first_digit_count\
    \ = 0\n    var file_name_arr_first_letter_count = 0\n    var file_name_arr_first_letter_check\
    \ = false\n    var file_name_arr_last_check = false\n    var file_name_arr_last_check_arr\
    \ = [\"txt\", \"exe\", \"dll\"]\n    var file_name_arr_last_check_arr_count =\
    \ file_name_arr_last_check_arr.count\n    var file_name_arr_last_check_arr_index\
    \ = 0\n    var file_name_arr_last_check_arr_index_count = 0\n    var file_name_arr_last_check_arr_index_check\
    \ = false\n    var file_name_arr_last_check_arr_index_check_count = 0\n    var\
    \ file_name_arr_last_check_arr_index_check_count_check = false\n    var file_name_arr_last_check_arr_index_check_count_check_count\
    \ = 0\n    var file_name_arr_last_check_arr_index_check_count_check_count_check\
    \ = false\n    var file_name_arr_last_check_arr_index_check_count_check_count_check_count\
    \ = 0\n    var file_name_arr_last_check_arr_index_check_count_check_count_check_count_check\
    \ = false\n    var file_name_arr_last_check_arr_index_check_count_check_count_check_count_check_count\
    \ = 0\n    var file_name_arr_last_check_arr", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_before_dot = file_name_arr[0]\n    let file_name_after_dot\
    \ = file_name_arr[1]\n    var digit_count = 0\n    for char in file_name_before_dot\
    \ {\n        if char >= \"0\" && char <= \"9\" {\n            digit_count += 1\n\
    \        }\n    }\n    if digit_count > 3 {\n        return \"No\"\n    }\n  \
    \  if file_name_before_dot.count == 0 {\n        return \"No\"\n    }\n    if\
    \ file_name_before_dot[file_name_before_dot.startIndex] < \"A\" || file_name_before_dot[file_name_before_dot.startIndex]\
    \ > \"z\" {\n        return \"No\"\n    }\n    if file_name_after_dot != \"txt\"\
    \ && file_name_after_dot != \"exe\" && file_name_after_dot != \"dll\" {\n    \
    \    return \"No\"\n    }\n    return \"Yes\"", "    let file_name_regex = \"\
    ^[a-zA-Z]{1}[a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format:\"\
    SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let file_name_arr_0 = file_name_arr[0]\n    let file_name_arr_1 = file_name_arr[1]\n\
    \    if file_name_arr_0.count == 0 || file_name_arr_1.count == 0 {\n        return\
    \ \"No\"\n    }\n    let file_name_arr_0_first_char = file_name_arr_0.first!\n\
    \    if !(file_name_arr_0_first_char >= \"a\" && file_name_arr_0_first_char <=\
    \ \"z\" || file_name_arr_0_first_char >= \"A\" && file_name_arr_0_first_char <=\
    \ \"Z\") {\n        return \"No\"\n    }\n    let file_name_arr_0_digit_count\
    \ = file_name_arr_0.filter { $0 >= \"0\" && $0 <= \"9\" }.count\n    if file_name_arr_0_digit_count\
    \ > 3 {\n        return \"No\"\n    }\n    if file_name_arr_1 != \"txt\" && file_name_arr_1\
    \ != \"exe\" && file_name_arr_1 != \"dll\" {\n        return \"No\"\n    }\n \
    \   return \"Yes\"", "    let file_name_arr = file_name.split(separator: \".\"\
    )\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n    let prefix\
    \ = file_name_arr[0]\n    let suffix = file_name_arr[1]\n    if prefix.count ==\
    \ 0 || prefix.count > 8 {\n        return \"No\"\n    }\n    if !(prefix.first!\
    \ >= \"a\" && prefix.first! <= \"z\" || prefix.first! >= \"A\" && prefix.first!\
    \ <= \"Z\") {\n        return \"No\"\n    }\n    if !(suffix == \"txt\" || suffix\
    \ == \"exe\" || suffix == \"dll\") {\n        return \"No\"\n    }\n    var digit_count\
    \ = 0\n    for char in prefix {\n        if char >= \"0\" && char <= \"9\" {\n\
    \            digit_count += 1\n        }\n    }\n    if digit_count > 3 {\n  \
    \      return \"No\"\n    }\n    return \"Yes\"", "    let file_name_regex = \"\
    ^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format:\"\
    SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    let digits = \"0123456789\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let file_extensions\
    \ = [\"txt\", \"exe\", \"dll\"]\n    var digits_count = 0\n    var dot_count =\
    \ 0\n    var extension_found = false\n    var extension_start_index = 0\n    var\
    \ extension_end_index = 0\n    var extension_length = 0\n    var extension_string\
    \ = \"\"\n    var extension_string_length = 0\n    var file_name_length = file_name.count\n\
    \    var file_name_start_index = 0\n    var file_name_end_index = 0\n    var file_name_string\
    \ = \"\"\n    var file_name_string_length = 0\n    var i = 0\n    var j = 0\n\
    \    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n \
    \   var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n  \
    \  var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n   \
    \ var z = 0\n    var aa = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n\
    \    var ae = 0\n    var af = 0\n    var ag = 0\n    var ah = 0\n    var ai =\
    \ 0\n    var aj = 0\n    var ak = 0\n    var al = 0\n    var am = 0\n    var an\
    \ = 0\n    var ao = 0\n    var ap = 0\n    var aq = 0\n    var ar = 0\n    var\
    \ as = 0\n    var at = 0\n    var au = 0\n    var av = 0\n    var aw = 0\n   \
    \ var ax = 0\n    var ay = 0\n    var az = 0\n    var ba = 0\n    var bb = 0\n\
    \    var bc = 0\n    var bd = 0\n    var be = 0\n    var bf = 0\n    var bg =\
    \ 0\n", "    let digits = \"0123456789\"\n    let letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let extensions = [\"txt\", \"exe\", \"dll\"]\n    var digit_count = 0\n\
    \    var dot_count = 0\n    var extension_found = false\n    var extension_start_index\
    \ = 0\n    var extension_end_index = 0\n    var extension_length = 0\n    var\
    \ extension_name = \"\"\n    var valid_extension = false\n    var valid_name =\
    \ false\n    var valid_extension_length = false\n    var valid_extension_name\
    \ = false\n    var valid_extension_start = false\n    var valid_extension_end\
    \ = false\n    var valid_extension_start_letter = false\n    var valid_extension_end_letter\
    \ = false\n    var valid_extension_start_letter_count = 0\n    var valid_extension_end_letter_count\
    \ = 0\n    var valid_extension_start_letter_index = 0\n    var valid_extension_end_letter_index\
    \ = 0\n    var valid_extension_start_letter_found = false\n    var valid_extension_end_letter_found\
    \ = false\n    var valid_extension_start_letter_found_index = 0\n    var valid_extension_end_letter_found_index\
    \ = 0\n    var valid_extension_start_letter_found_index_count = 0\n    var valid_extension_end_letter_found_index_count\
    \ = 0\n    var valid_extension_start_letter_found_index_count_count = 0\n    var\
    \ valid_extension_end_letter_found_index_count_count = 0\n    var valid_extension_start_letter_found_index_count_count_count\
    \ = 0\n    var valid_extension_end_letter_found_index_count_count_count = 0\n\
    \    var valid_extension_start_letter_found_index_count_count_count_count = 0\n\
    \    var valid_extension_end_letter_found_index_count_count_count_count = 0\n\
    \    var", "    let file_name_components = file_name.components(separatedBy: \"\
    .\")\n    if file_name_components.count != 2 {\n        return \"No\"\n    }\n\
    \    let file_name_prefix = file_name_components[0]\n    let file_name_suffix\
    \ = file_name_components[1]\n    if file_name_prefix.count == 0 || file_name_suffix.count\
    \ == 0 {\n        return \"No\"\n    }\n    let file_name_prefix_first_char =\
    \ file_name_prefix[file_name_prefix.startIndex]\n    if !(file_name_prefix_first_char\
    \ >= \"a\" && file_name_prefix_first_char <= \"z\" || file_name_prefix_first_char\
    \ >= \"A\" && file_name_prefix_first_char <= \"Z\") {\n        return \"No\"\n\
    \    }\n    let file_name_prefix_digit_count = file_name_prefix.filter { $0 >=\
    \ \"0\" && $0 <= \"9\" }.count\n    if file_name_prefix_digit_count > 3 {\n  \
    \      return \"No\"\n    }\n    if file_name_suffix != \"txt\" && file_name_suffix\
    \ != \"exe\" && file_name_suffix != \"dll\" {\n        return \"No\"\n    }\n\
    \    return \"Yes\"", "    let digits = \"0123456789\"\n    let latin_alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"]\n    var digits_count = 0\n    var dot_count =\
    \ 0\n    var extension_found = false\n    var extension_index = 0\n    var valid_extension\
    \ = false\n    var valid_name = false\n    var valid_extension_name = false\n\
    \    var valid_file_name = false\n    var valid_file_extension = false\n    var\
    \ valid_file_name_extension = false\n    var valid_file_name_extension_count =\
    \ false\n    var valid_file_name_extension_count_extension = false\n    var valid_file_name_extension_count_extension_name\
    \ = false\n    var valid_file_name_extension_count_extension_name_count = false\n\
    \    var valid_file_name_extension_count_extension_name_count_name = false\n \
    \   var valid_file_name_extension_count_extension_name_count_name_extension =\
    \ false\n    var valid_file_name_extension_count_extension_name_count_name_extension_count\
    \ = false\n    var valid_file_name_extension_count_extension_name_count_name_extension_count_name\
    \ = false\n    var valid_file_name_extension_count_extension_name_count_name_extension_count_name_extension\
    \ = false\n    var valid_file_name_extension_count_extension_name_count_name_extension_count_name_extension_count\
    \ = false\n    var valid_file_name_extension_count_extension_name_count_name_extension_count_name_extension_count_name\
    \ = false\n    var valid_file_name_extension_count_extension_name_count_name_extension_count_name_extension_count_name_extension\
    \ = false\n    var valid_file_name_extension_count_", "    let file_name_arr =\
    \ file_name.components(separatedBy: \".\")\n    if file_name_arr.count != 2 {\n\
    \        return \"No\"\n    }\n    let name = file_name_arr[0]\n    let ext =\
    \ file_name_arr[1]\n    if name.count == 0 || !name.contains(where: { $0.isLetter\
    \ }) {\n        return \"No\"\n    }\n    if name.contains(where: { $0.isNumber\
    \ }) {\n        let num_count = name.filter({ $0.isNumber }).count\n        if\
    \ num_count > 3 {\n            return \"No\"\n        }\n    }\n    if ![\"txt\"\
    , \"exe\", \"dll\"].contains(ext) {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", "    let file_name_arr = file_name.split(separator: \".\")\n    if\
    \ file_name_arr.count != 2 {\n        return \"No\"\n    }\n    let prefix = file_name_arr[0]\n\
    \    let suffix = file_name_arr[1]\n    if prefix.count == 0 || prefix.count >\
    \ 8 {\n        return \"No\"\n    }\n    if !prefix.contains(where: {$0 >= \"\
    a\" && $0 <= \"z\"}) && !prefix.contains(where: {$0 >= \"A\" && $0 <= \"Z\"})\
    \ {\n        return \"No\"\n    }\n    if !prefix.contains(where: {$0 >= \"0\"\
    \ && $0 <= \"9\"}) {\n        return \"No\"\n    }\n    if prefix.filter({$0 >=\
    \ \"0\" && $0 <= \"9\"}).count > 3 {\n        return \"No\"\n    }\n    if ![\"\
    txt\", \"exe\", \"dll\"].contains(suffix) {\n        return \"No\"\n    }\n  \
    \  return \"Yes\"", "    let file_name_arr = file_name.split(separator: \".\"\
    )\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n    let file_name_arr_0\
    \ = file_name_arr[0]\n    let file_name_arr_1 = file_name_arr[1]\n    if file_name_arr_0.count\
    \ == 0 {\n        return \"No\"\n    }\n    if file_name_arr_1.count == 0 {\n\
    \        return \"No\"\n    }\n    if file_name_arr_1.count > 3 {\n        return\
    \ \"No\"\n    }\n    if file_name_arr_1 != \"txt\" && file_name_arr_1 != \"exe\"\
    \ && file_name_arr_1 != \"dll\" {\n        return \"No\"\n    }\n    var count\
    \ = 0\n    for char in file_name_arr_0 {\n        if char >= \"0\" && char <=\
    \ \"9\" {\n            count += 1\n        }\n    }\n    if count > 3 {\n    \
    \    return \"No\"\n    }\n    if file_name_arr_0.first! < \"a\" || file_name_arr_0.first!\
    \ > \"z\" {\n        if file_name_arr_0.first! < \"A\" || file_name_arr_0.first!\
    \ > \"Z\" {\n            return \"No\"\n        }\n    }\n    return \"Yes\"",
  "    let file_name_array = file_name.components(separatedBy: \".\")\n    if file_name_array.count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_first = file_name_array[0]\n\
    \    let file_name_second = file_name_array[1]\n    if file_name_first.count ==\
    \ 0 {\n        return \"No\"\n    }\n    if file_name_second != \"txt\" && file_name_second\
    \ != \"exe\" && file_name_second != \"dll\" {\n        return \"No\"\n    }\n\
    \    var digit_count = 0\n    for char in file_name_first {\n        if char >=\
    \ \"0\" && char <= \"9\" {\n            digit_count += 1\n        }\n    }\n \
    \   if digit_count > 3 {\n        return \"No\"\n    }\n    return \"Yes\"", " \
    \   let file_name_arr = file_name.split(separator: \".\")\n    if file_name_arr.count\
    \ != 2 {\n        return \"No\"\n    }\n    let first_part = file_name_arr[0]\n\
    \    let second_part = file_name_arr[1]\n    if first_part.count == 0 || first_part.count\
    \ > 8 {\n        return \"No\"\n    }\n    if !first_part.contains(where: { $0\
    \ >= \"a\" && $0 <= \"z\" || $0 >= \"A\" && $0 <= \"Z\" }) {\n        return \"\
    No\"\n    }\n    if !first_part.contains(where: { $0 >= \"0\" && $0 <= \"9\" })\
    \ {\n        return \"No\"\n    }\n    if first_part.filter({ $0 >= \"0\" && $0\
    \ <= \"9\" }).count > 3 {\n        return \"No\"\n    }\n    if second_part !=\
    \ \"txt\" && second_part != \"exe\" && second_part != \"dll\" {\n        return\
    \ \"No\"\n    }\n    return \"Yes\""]
stop_tokens:
- "\n}"
