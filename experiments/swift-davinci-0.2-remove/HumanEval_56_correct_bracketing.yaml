name: HumanEval_56_correct_bracketing
language: swift
prompt: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
  \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
  \ String) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") ==\
  \ true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
  \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
  ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
  \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
  \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\nassert(correct_bracketing(brackets:\
  \ \"<<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>><<>\")\
  \ == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)"
completions: ["    var stack = Stack<Character>()\n    for bracket in brackets {\n\
    \        if bracket == \"<\" {\n            stack.push(bracket)\n        } else\
    \ if bracket == \">\" {\n            if stack.isEmpty {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for c in brackets {\n        if c == \"<\" {\n            stack.push(c)\n\
    \        } else if c == \">\" {\n            if stack.isEmpty {\n            \
    \    return false\n            }\n            stack.pop()\n        }\n    }\n\
    \    return stack.isEmpty", "    var stack = Stack<Character>()\n    for bracket\
    \ in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for char in brackets {\n        if char == \"<\" {\n            stack.push(char)\n\
    \        } else if char == \">\" {\n            if stack.isEmpty {\n         \
    \       return false\n            } else {\n                stack.pop()\n    \
    \        }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for c in brackets {\n        if c == \"<\" {\n            stack.push(c)\n\
    \        } else if c == \">\" {\n            if stack.isEmpty {\n            \
    \    return false\n            }\n            stack.pop()\n        }\n    }\n\
    \    return stack.isEmpty", "    var stack = Stack<Character>()\n    for bracket\
    \ in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = [Character]()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.append(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty", "    var stack =\
    \ Stack<Character>()\n    for bracket in brackets {\n        if bracket == \"\
    <\" {\n            stack.push(bracket)\n        } else if bracket == \">\" {\n\
    \            if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.pop()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty", "    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for char in brackets {\n        if char == \"<\" {\n            stack.push(char)\n\
    \        } else if char == \">\" {\n            if stack.isEmpty {\n         \
    \       return false\n            } else {\n                stack.pop()\n    \
    \        }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for c in brackets {\n        if c == \"<\" {\n            stack.push(c)\n\
    \        } else if c == \">\" {\n            if stack.isEmpty {\n            \
    \    return false\n            }\n            stack.pop()\n        }\n    }\n\
    \    return stack.isEmpty", "    var stack = Stack<Character>()\n    for bracket\
    \ in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for char in brackets {\n        if char == \"<\" {\n            stack.push(char)\n\
    \        } else if char == \">\" {\n            if stack.isEmpty {\n         \
    \       return false\n            } else {\n                stack.pop()\n    \
    \        }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for char in brackets {\n        if char == \"<\" {\n            stack.push(char)\n\
    \        } else if char == \">\" {\n            if stack.isEmpty {\n         \
    \       return false\n            } else {\n                stack.pop()\n    \
    \        }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = [Character]()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.append(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty", "    var stack =\
    \ [Character]()\n    for char in brackets {\n        if char == \"<\" {\n    \
    \        stack.append(char)\n        } else if char == \">\" {\n            if\
    \ stack.isEmpty {\n                return false\n            } else {\n      \
    \          stack.removeLast()\n            }\n        }\n    }\n    return stack.isEmpty",
  "    var stack = Stack<Character>()\n    for bracket in brackets {\n        if bracket\
    \ == \"<\" {\n            stack.push(bracket)\n        } else if bracket == \"\
    >\" {\n            if stack.isEmpty {\n                return false\n        \
    \    } else {\n                stack.pop()\n            }\n        }\n    }\n\
    \    return stack.isEmpty", "    var stack = Stack<Character>()\n    for bracket\
    \ in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for char in brackets {\n        if char == \"<\" {\n            stack.push(char)\n\
    \        } else if char == \">\" {\n            if stack.isEmpty {\n         \
    \       return false\n            } else {\n                stack.pop()\n    \
    \        }\n        }\n    }\n    return stack.isEmpty", "    var stack = [Character]()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.append(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty", "    var stack =\
    \ Stack<Character>()\n    for char in brackets {\n        if char == \"<\" {\n\
    \            stack.push(char)\n        } else if char == \">\" {\n           \
    \ if stack.isEmpty() {\n                return false\n            } else {\n \
    \               stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()",
  "    var stack = Stack<Character>()\n    for i in brackets {\n        if i == \"\
    <\" {\n            stack.push(i)\n        } else if i == \">\" {\n           \
    \ if stack.isEmpty {\n                return false\n            } else {\n   \
    \             stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty",
  "    var stack = Stack<Character>()\n    for c in brackets {\n        if c == \"\
    <\" {\n            stack.push(c)\n        } else if c == \">\" {\n           \
    \ if stack.isEmpty {\n                return false\n            }\n          \
    \  stack.pop()\n        }\n    }\n    return stack.isEmpty", "    var stack =\
    \ Stack<Character>()\n    for bracket in brackets {\n        if bracket == \"\
    <\" {\n            stack.push(bracket)\n        } else if bracket == \">\" {\n\
    \            if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.pop()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty", "    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for char in brackets {\n        if char == \"<\" {\n            stack.push(char)\n\
    \        } else if char == \">\" {\n            if stack.isEmpty {\n         \
    \       return false\n            } else {\n                stack.pop()\n    \
    \        }\n        }\n    }\n    return stack.isEmpty", "    var stack: [Character]\
    \ = []\n    for bracket in brackets {\n        if bracket == \"<\" {\n       \
    \     stack.append(bracket)\n        } else if bracket == \">\" {\n          \
    \  if stack.isEmpty {\n                return false\n            } else {\n  \
    \              stack.removeLast()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty", "    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty", "    var stack = [Character]()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.append(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty", "    var stack =\
    \ Stack<Character>()\n    for bracket in brackets {\n        if bracket == \"\
    <\" {\n            stack.push(bracket)\n        } else if bracket == \">\" {\n\
    \            if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.pop()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty", "    var stack = Stack<Character>()\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.push(char)\n        } else\
    \ if char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n    for\
    \ bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for char in brackets {\n        if char == \"<\" {\n            stack.push(char)\n\
    \        } else if char == \">\" {\n            if stack.isEmpty {\n         \
    \       return false\n            } else {\n                stack.pop()\n    \
    \        }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for c in brackets {\n        if c == \"<\" {\n            stack.push(c)\n\
    \        } else if c == \">\" {\n            if stack.isEmpty {\n            \
    \    return false\n            }\n            stack.pop()\n        }\n    }\n\
    \    return stack.isEmpty", "    var stack = Stack<Character>()\n    for bracket\
    \ in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    // TODO: Implement\
    \ this function\n    return false", "    var stack = Stack<Character>()\n    for\
    \ bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty() {\n    \
    \            return false\n            } else {\n                stack.pop()\n\
    \            }\n        }\n    }\n    return stack.isEmpty()", "    var stack\
    \ = Stack<Character>()\n    for bracket in brackets {\n        if bracket == \"\
    <\" {\n            stack.push(bracket)\n        } else if bracket == \">\" {\n\
    \            if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.pop()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty", "    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack: [Character]\
    \ = []\n    for bracket in brackets {\n        if bracket == \"<\" {\n       \
    \     stack.append(bracket)\n        } else if bracket == \">\" {\n          \
    \  if stack.isEmpty {\n                return false\n            } else {\n  \
    \              stack.removeLast()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty", "    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for char in brackets {\n        if char == \"<\" {\n            stack.push(char)\n\
    \        } else if char == \">\" {\n            if stack.isEmpty {\n         \
    \       return false\n            } else {\n                stack.pop()\n    \
    \        }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = [Character]()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.append(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty", "    var stack =\
    \ Stack<Character>()\n    for bracket in brackets {\n        if bracket == \"\
    <\" {\n            stack.push(bracket)\n        } else if bracket == \">\" {\n\
    \            if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.pop()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty", "    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack: [Character]\
    \ = []\n    for char in brackets {\n        if char == \"<\" {\n            stack.append(char)\n\
    \        } else if char == \">\" {\n            if stack.isEmpty {\n         \
    \       return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty", "    var stack =\
    \ Stack<Character>()\n    for bracket in brackets {\n        if bracket == \"\
    <\" {\n            stack.push(bracket)\n        } else if bracket == \">\" {\n\
    \            if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.pop()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty", "    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for char in brackets {\n        if char == \"<\" {\n            stack.push(char)\n\
    \        } else if char == \">\" {\n            if stack.isEmpty {\n         \
    \       return false\n            } else {\n                stack.pop()\n    \
    \        }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for char in brackets {\n        if char == \"<\" {\n            stack.push(char)\n\
    \        } else if char == \">\" {\n            if stack.isEmpty {\n         \
    \       return false\n            } else {\n                stack.pop()\n    \
    \        }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for char in brackets {\n        if char == \"<\" {\n            stack.push(char)\n\
    \        } else if char == \">\" {\n            if stack.isEmpty {\n         \
    \       return false\n            } else {\n                stack.pop()\n    \
    \        }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for char in brackets {\n        if char == \"<\" {\n            stack.push(char)\n\
    \        } else if char == \">\" {\n            if stack.isEmpty {\n         \
    \       return false\n            } else {\n                stack.pop()\n    \
    \        }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for char in brackets {\n        if char == \"<\" {\n            stack.push(char)\n\
    \        } else if char == \">\" {\n            if stack.isEmpty {\n         \
    \       return false\n            } else {\n                stack.pop()\n    \
    \        }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = [Character]()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.append(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty", "    var stack =\
    \ [Character]()\n    for bracket in brackets {\n        if bracket == \"<\" {\n\
    \            stack.append(bracket)\n        } else if bracket == \">\" {\n   \
    \         if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.removeLast()\n            }\n        }\n    }\n   \
    \ return stack.isEmpty", "    var stack = Stack<Character>()\n    for c in brackets\
    \ {\n        if c == \"<\" {\n            stack.push(c)\n        } else if c ==\
    \ \">\" {\n            if stack.isEmpty {\n                return false\n    \
    \        }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty",
  "    var stack = Stack<Character>()\n    for bracket in brackets {\n        if bracket\
    \ == \"<\" {\n            stack.push(bracket)\n        } else if bracket == \"\
    >\" {\n            if stack.isEmpty {\n                return false\n        \
    \    } else {\n                stack.pop()\n            }\n        }\n    }\n\
    \    return stack.isEmpty", "    var stack = Stack<Character>()\n    for bracket\
    \ in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for char in brackets {\n        if char == \"<\" {\n            stack.push(char)\n\
    \        } else if char == \">\" {\n            if stack.isEmpty {\n         \
    \       return false\n            } else {\n                stack.pop()\n    \
    \        }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for char in brackets {\n        if char == \"<\" {\n            stack.push(char)\n\
    \        } else if char == \">\" {\n            if stack.isEmpty {\n         \
    \       return false\n            } else {\n                stack.pop()\n    \
    \        }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for char in brackets {\n        if char == \"<\" {\n            stack.push(char)\n\
    \        } else if char == \">\" {\n            if stack.isEmpty {\n         \
    \       return false\n            } else {\n                stack.pop()\n    \
    \        }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for c in brackets {\n        if c == \"<\" {\n            stack.push(c)\n\
    \        } else if c == \">\" {\n            if stack.isEmpty {\n            \
    \    return false\n            }\n            stack.pop()\n        }\n    }\n\
    \    return stack.isEmpty", "    var stack = Stack<Character>()\n    for char\
    \ in brackets {\n        if char == \"<\" {\n            stack.push(char)\n  \
    \      } else if char == \">\" {\n            if stack.isEmpty {\n           \
    \     return false\n            } else {\n                stack.pop()\n      \
    \      }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for char in brackets {\n        if char == \"<\" {\n            stack.push(char)\n\
    \        } else if char == \">\" {\n            if stack.isEmpty {\n         \
    \       return false\n            } else {\n                stack.pop()\n    \
    \        }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for char in brackets {\n        if char == \"<\" {\n            stack.push(char)\n\
    \        } else if char == \">\" {\n            if stack.isEmpty {\n         \
    \       return false\n            } else {\n                stack.pop()\n    \
    \        }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for char in brackets {\n        if char == \"<\" {\n            stack.push(char)\n\
    \        } else if char == \">\" {\n            if stack.isEmpty {\n         \
    \       return false\n            } else {\n                stack.pop()\n    \
    \        }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = [Character]()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.append(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty", "    var stack =\
    \ Stack<Character>()\n    for bracket in brackets {\n        if bracket == \"\
    <\" {\n            stack.push(bracket)\n        } else if bracket == \">\" {\n\
    \            if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.pop()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty", "    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for char in brackets {\n        if char == \"<\" {\n            stack.push(char)\n\
    \        } else if char == \">\" {\n            if stack.isEmpty {\n         \
    \       return false\n            } else {\n                stack.pop()\n    \
    \        }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for char in brackets {\n        if char == \"<\" {\n            stack.push(char)\n\
    \        } else if char == \">\" {\n            if stack.isEmpty {\n         \
    \       return false\n            } else {\n                stack.pop()\n    \
    \        }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty"]
stop_tokens:
- "\n}"
