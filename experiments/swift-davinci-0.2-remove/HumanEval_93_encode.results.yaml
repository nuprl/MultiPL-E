language: swift
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encoded\
    \ = \"\"\n    for char in message.characters {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            encoded.append(vowels[(vowels.index(of: String(char).lowercased())!\
    \ + 2) % 5].uppercased())\n        } else {\n            encoded.append(String(char).uppercased())\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpy2dmkj6k.swift:11:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy2dmkj6k.swift:13:43:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        \
    \    encoded.append(vowels[(vowels.index(of: String(char).lowercased())! + 2)\
    \ % 5].uppercased())\n                                          ^\n/tmp/tmpy2dmkj6k.swift:13:43:\
    \ note: use 'firstIndex(of:)' instead\n            encoded.append(vowels[(vowels.index(of:\
    \ String(char).lowercased())! + 2) % 5].uppercased())\n                      \
    \                    ^~~~~\n                                          firstIndex\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isUppercase {\n            encodedMessage.append(char.lowercase)\n\
    \        } else {\n            encodedMessage.append(char.uppercase)\n       \
    \ }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpeib8lfku.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpeib8lfku.swift:12:40:\
    \ error: value of type 'Character' has no member 'lowercase'\n            encodedMessage.append(char.lowercase)\n\
    \                                  ~~~~ ^~~~~~~~~\n/tmp/tmpeib8lfku.swift:14:40:\
    \ error: value of type 'Character' has no member 'uppercase'\n            encodedMessage.append(char.uppercase)\n\
    \                                  ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for character in message {\n        if let\
    \ index = alphabet.index(of: character) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else if let index = alphabet.uppercased().index(of: character) {\n      \
    \      let newIndex = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \        } else {\n            encodedMessage.append(character)\n        }\n \
    \   }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp970xbp76/tmp970xbp76.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a71e86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a71b7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a71b7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a71b7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp970xbp76                        0x000055bb8ca106f7 <unavailable> + 5879

    5    libc.so.6                          0x00002b5a72072460 __libc_start_main +
    245

    6    tmp970xbp76                        0x000055bb8ca10339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for letter in message {\n        if let index\
    \ = alphabet.index(of: letter) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else if let index = alphabet.index(of: letter.lowercased()) {\n         \
    \   let newIndex = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpfrw9g73z.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: letter) {\n\
    \                                ^\n/tmp/tmpfrw9g73z.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: letter) {\n             \
    \                   ^~~~~\n                                firstIndex\n/tmp/tmpfrw9g73z.swift:16:57:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: letter.lowercased())\
    \ {\n                                                        ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for character in message.characters\
    \ {\n        if character.isUppercase {\n            encodedMessage.append(character.lowercase)\n\
    \        } else {\n            encodedMessage.append(character.uppercase)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp06vj3sgv.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in message.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp06vj3sgv.swift:12:45: error: value of type 'Character' has no member\
    \ 'lowercase'\n            encodedMessage.append(character.lowercase)\n      \
    \                            ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmp06vj3sgv.swift:14:45:\
    \ error: value of type 'Character' has no member 'uppercase'\n            encodedMessage.append(character.uppercase)\n\
    \                                  ~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isUppercase {\n            encodedMessage.append(char.lowercase)\n\
    \        } else {\n            encodedMessage.append(char.uppercase)\n       \
    \ }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpeib8lfku.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpeib8lfku.swift:12:40:\
    \ error: value of type 'Character' has no member 'lowercase'\n            encodedMessage.append(char.lowercase)\n\
    \                                  ~~~~ ^~~~~~~~~\n/tmp/tmpeib8lfku.swift:14:40:\
    \ error: value of type 'Character' has no member 'uppercase'\n            encodedMessage.append(char.uppercase)\n\
    \                                  ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isUppercase {\n            encodedMessage.append(char.lowercased())\n\
    \        } else {\n            encodedMessage.append(char.uppercased())\n    \
    \    }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpqqmc5jdf.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for letter in message {\n        if let index\
    \ = alphabet.index(of: letter) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else if let index = alphabet.index(of: letter.lowercased()) {\n         \
    \   let newIndex = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpfrw9g73z.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: letter) {\n\
    \                                ^\n/tmp/tmpfrw9g73z.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: letter) {\n             \
    \                   ^~~~~\n                                firstIndex\n/tmp/tmpfrw9g73z.swift:16:57:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: letter.lowercased())\
    \ {\n                                                        ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let vowels2 = \"cdfghjklmnpqrstvwxyz\"\
    \n    var encoded = \"\"\n    for char in message.characters {\n        if vowels.contains(String(char))\
    \ {\n            encoded.append(vowels2[vowels.index(of: String(char))!])\n  \
    \      } else if vowels2.contains(String(char)) {\n            encoded.append(vowels[vowels2.index(of:\
    \ String(char))!])\n        } else {\n            encoded.append(char)\n     \
    \   }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp616aeluv.swift:12:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp616aeluv.swift:14:53:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n            encoded.append(vowels2[vowels.index(of: String(char))!])\n\
    \                                                    ^\n/tmp/tmp616aeluv.swift:16:53:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n            encoded.append(vowels[vowels2.index(of: String(char))!])\n\
    \                                                    ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for letter in message {\n  \
    \      let letterString = String(letter)\n        if letterString.lowercased()\
    \ == letterString {\n            encodedMessage += letterString.uppercased()\n\
    \        } else {\n            encodedMessage += letterString.lowercased()\n \
    \       }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpogdyaclm/tmpogdyaclm.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3af5d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3af2d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3af2d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3af2cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpogdyaclm                        0x0000555f95ccc517 <unavailable> + 5399

    5    libc.so.6                          0x00002ba3af7c5460 __libc_start_main +
    245

    6    tmpogdyaclm                        0x0000555f95ccc159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)!\n            let newIndex\
    \ = (index + 2) % alphabet.count\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpa6ujf9d5/tmpa6ujf9d5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9a55cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9a52c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba9a52c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9a52c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa6ujf9d5                        0x0000562de4c01907 <unavailable> + 6407

    5    libc.so.6                          0x00002ba9a57b6460 __libc_start_main +
    245

    6    tmpa6ujf9d5                        0x0000562de4c01549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isVowel() {\n            encodedMessage.append(char.nextVowel())\n\
    \        } else if char.isUpper() {\n            encodedMessage.append(char.lowercase())\n\
    \        } else {\n            encodedMessage.append(char.uppercase())\n     \
    \   }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpaeko_w2t.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpaeko_w2t.swift:11:17:\
    \ error: value of type 'Character' has no member 'isVowel'\n        if char.isVowel()\
    \ {\n           ~~~~ ^~~~~~~\n/tmp/tmpaeko_w2t.swift:12:40: error: value of type\
    \ 'Character' has no member 'nextVowel'\n            encodedMessage.append(char.nextVowel())\n\
    \                                  ~~~~ ^~~~~~~~~\n/tmp/tmpaeko_w2t.swift:13:24:\
    \ error: value of type 'Character' has no member 'isUpper'\n        } else if\
    \ char.isUpper() {\n                  ~~~~ ^~~~~~~\n/tmp/tmpaeko_w2t.swift:14:40:\
    \ error: value of type 'Character' has no member 'lowercase'\n            encodedMessage.append(char.lowercase())\n\
    \                                  ~~~~ ^~~~~~~~~\n/tmp/tmpaeko_w2t.swift:16:40:\
    \ error: value of type 'Character' has no member 'uppercase'\n            encodedMessage.append(char.uppercase())\n\
    \                                  ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.firstIndex(of:\
    \ char)! + 2)\n            encoded.append(alphabet[index])\n        } else {\n\
    \            encoded.append(char)\n        }\n    }\n    return encoded\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpaz5o2zhm.swift:14:100: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.firstIndex(of: char)! + 2)\n                            \
    \                                                                       ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.index(of:\
    \ char) {\n            let newIndex = alphabet.index(index, offsetBy: 2)\n   \
    \         encoded.append(alphabet[newIndex])\n        } else if let index = alphabet.index(of:\
    \ char.lowercased()) {\n            let newIndex = alphabet.index(index, offsetBy:\
    \ 2)\n            encoded.append(alphabet[newIndex].uppercased())\n        } else\
    \ {\n            encoded.append(char)\n        }\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpd3q5djvh.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmpd3q5djvh.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmpd3q5djvh.swift:16:55:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: char.lowercased())\
    \ {\n                                                      ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for letter in\
    \ message {\n        if let index = alphabet.firstIndex(of: letter.lowercased())\
    \ {\n            if vowels.contains(letter.lowercased()) {\n                let\
    \ newIndex = alphabet.index(index, offsetBy: 2)\n                encoded.append(alphabet[newIndex])\n\
    \            } else {\n                encoded.append(letter)\n            }\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpi7kvogiq.swift:13:55: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n                   \
    \                                   ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.index(of:\
    \ char) {\n            let newIndex = alphabet.index(index, offsetBy: 2)\n   \
    \         encoded.append(alphabet[newIndex])\n        } else if let index = alphabet.index(of:\
    \ char.lowercased()) {\n            let newIndex = alphabet.index(index, offsetBy:\
    \ 2)\n            encoded.append(alphabet[newIndex].uppercased())\n        } else\
    \ {\n            encoded.append(char)\n        }\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpd3q5djvh.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmpd3q5djvh.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmpd3q5djvh.swift:16:55:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: char.lowercased())\
    \ {\n                                                      ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char) {\n            encoded.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n        } else if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            encoded.append(alphabet[alphabet.index(index, offsetBy: 2)].uppercased())\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpd64f3kjx.swift:15:60: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        } else\
    \ if let index = alphabet.firstIndex(of: char.lowercased()) {\n              \
    \                                             ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for letter in message {\n        if let index\
    \ = alphabet.index(of: letter) {\n            encodedMessage += String(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n        } else if let index = alphabet.index(of: letter.lowercased())\
    \ {\n            encodedMessage += String(alphabet[alphabet.index(index, offsetBy:\
    \ 2)].uppercased())\n        } else {\n            encodedMessage += String(letter)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp0seoc7tp.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: letter) {\n\
    \                                ^\n/tmp/tmp0seoc7tp.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: letter) {\n             \
    \                   ^~~~~\n                                firstIndex\n/tmp/tmp0seoc7tp.swift:15:57:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: letter.lowercased())\
    \ {\n                                                        ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for letter in message {\n        if let index\
    \ = alphabet.index(of: letter) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else if let index = alphabet.index(of: letter.lowercased()) {\n         \
    \   let newIndex = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpfrw9g73z.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: letter) {\n\
    \                                ^\n/tmp/tmpfrw9g73z.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: letter) {\n             \
    \                   ^~~~~\n                                firstIndex\n/tmp/tmpfrw9g73z.swift:16:57:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: letter.lowercased())\
    \ {\n                                                        ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if let index = alphabet.index(of: char.lowercased()) {\n\
    \            if vowels.contains(char.lowercased()) {\n                let nextIndex\
    \ = alphabet.index(index, offsetBy: 2)\n                encodedMessage.append(alphabet[nextIndex])\n\
    \            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpgivhdao1.swift:13:48: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.index(of: char.lowercased()) {\n                          \
    \                     ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if let index = alphabet.index(of: char.lowercased()) {\n\
    \            if vowels.contains(char.lowercased()) {\n                encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmq5425xc.swift:13:48: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.index(of: char.lowercased()) {\n                          \
    \                     ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encoded = \"\"\n    let vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    for char in message.characters {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            let index = vowels.index(of: String(char).lowercased())\n   \
    \         if index == 4 {\n                encoded += vowels[0]\n            }\
    \ else {\n                encoded += vowels[index! + 1]\n            }\n     \
    \   } else {\n            encoded += String(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpu7i7g9lg.swift:11:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpu7i7g9lg.swift:13:32:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        \
    \    let index = vowels.index(of: String(char).lowercased())\n               \
    \                ^\n/tmp/tmpu7i7g9lg.swift:13:32: note: use 'firstIndex(of:)'\
    \ instead\n            let index = vowels.index(of: String(char).lowercased())\n\
    \                               ^~~~~\n                               firstIndex\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isLetter {\n            if char.isUppercase {\n         \
    \       encodedMessage.append(char.lowercased())\n            } else {\n     \
    \           encodedMessage.append(char.uppercased())\n            }\n        }\
    \ else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpypamfnt0.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    let vowels: Set<Character> =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"]\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.firstIndex(of: char)!\n            encodedMessage.append(alphabet[(index\
    \ + 2) % alphabet.count])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpt689w8a2/tmpt689w8a2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b831fe8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b831fb83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b831fb83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b831fb827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt689w8a2                        0x0000563517c50907 <unavailable> + 6407

    5    libc.so.6                          0x00002b8320078460 __libc_start_main +
    245

    6    tmpt689w8a2                        0x0000563517c50549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if let index = alphabet.index(of: char.lowercased()) {\n\
    \            if vowels.contains(char.lowercased()) {\n                let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex])\n\
    \            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpxk2eq_vs.swift:13:48: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.index(of: char.lowercased()) {\n                          \
    \                     ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    let alphabet: [Character] = Array(\"abcdefghijklmnopqrstuvwxyz\")\n\
    \    var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.firstIndex(of: char)!\n            encodedMessage.append(alphabet[(index\
    \ + 2) % alphabet.count])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpl0hsza8p/tmpl0hsza8p.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a75b43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a7583ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a7583a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a758397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl0hsza8p                        0x0000563ed0f4b9e7 <unavailable> + 6631

    5    libc.so.6                          0x00002b7a75d2f460 __libc_start_main +
    245

    6    tmpl0hsza8p                        0x0000563ed0f4b629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encoded = \"\"\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for character in message.characters {\n\
    \        if vowels.contains(String(character).lowercased()) {\n            let\
    \ index = alphabet.index(of: String(character).lowercased())\n            let\
    \ newIndex = alphabet.index(index!, offsetBy: 2)\n            encoded += String(alphabet[newIndex])\n\
    \        } else {\n            encoded += String(character)\n        }\n    }\n\
    \    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpg9dbd6mf.swift:12:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in message.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpg9dbd6mf.swift:14:62: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n            let\
    \ index = alphabet.index(of: String(character).lowercased())\n               \
    \                                              ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.firstIndex(of: char) {\n            encodedMessage += alphabet[alphabet.index(after:\
    \ index)]\n        } else if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            encodedMessage += alphabet[alphabet.index(after: index)].uppercased()\n\
    \        } else {\n            encodedMessage += String(char)\n        }\n   \
    \ }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpbtm5hw9r.swift:14:39: error: subscript 'subscript(_:)' requires\
    \ that 'String.Index' conform to 'RangeExpression'\n            encodedMessage\
    \ += alphabet[alphabet.index(after: index)]\n                                \
    \      ^\nSwift.Collection:2:23: note: where 'R' = 'String.Index'\n    @inlinable\
    \ public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression, Self.Index\
    \ == R.Bound { get }\n                      ^\n/tmp/tmpbtm5hw9r.swift:15:60: error:\
    \ cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n                                                           ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.firstIndex(of: char)\n            let newIndex\
    \ = alphabet.index(index!, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpv3jxfitt/tmpv3jxfitt.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b083df90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b083dc87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b083dc87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b083dc867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv3jxfitt                        0x0000563390a47727 <unavailable> + 5927

    5    libc.so.6                          0x00002b083e17c460 __libc_start_main +
    245

    6    tmpv3jxfitt                        0x0000563390a47369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isUppercase {\n            encodedMessage.append(char.lowercase)\n\
    \        } else {\n            encodedMessage.append(char.uppercase)\n       \
    \ }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpeib8lfku.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpeib8lfku.swift:12:40:\
    \ error: value of type 'Character' has no member 'lowercase'\n            encodedMessage.append(char.lowercase)\n\
    \                                  ~~~~ ^~~~~~~~~\n/tmp/tmpeib8lfku.swift:14:40:\
    \ error: value of type 'Character' has no member 'uppercase'\n            encodedMessage.append(char.uppercase)\n\
    \                                  ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for letter\
    \ in message {\n        if let index = alphabet.firstIndex(of: letter.lowercased())\
    \ {\n            let newIndex = (index + 2) % alphabet.count\n            let\
    \ newLetter = alphabet[newIndex]\n            encodedMessage += vowels.contains(letter.lowercased())\
    \ ? newLetter : newLetter.uppercased()\n        } else {\n            encodedMessage\
    \ += String(letter)\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpxm7di327.swift:13:55: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n                   \
    \                                   ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    let vowels = \"aeiou\"\n   \
    \ let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message {\n \
    \       if let index = alphabet.index(of: char) {\n            let newIndex =\
    \ alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else if let index = alphabet.uppercased().index(of: char) {\n     \
    \       let newIndex = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpjbje2wb8/tmpjbje2wb8.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1984a2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1984723b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1984723988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19847227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjbje2wb8                        0x00005652c656e6f7 <unavailable> + 5879

    5    libc.so.6                          0x00002b1984c18460 __libc_start_main +
    245

    6    tmpjbje2wb8                        0x00005652c656e339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for character in message {\n        if let\
    \ index = alphabet.index(of: character) {\n            if let vowelIndex = vowels.index(of:\
    \ character) {\n                let newIndex = alphabet.index(vowelIndex, offsetBy:\
    \ 2)\n                let newCharacter = alphabet[newIndex]\n                encodedMessage.append(newCharacter)\n\
    \            } else {\n                let newIndex = alphabet.index(index, offsetBy:\
    \ 1)\n                let newCharacter = alphabet[newIndex]\n                encodedMessage.append(newCharacter)\n\
    \            }\n        } else {\n            encodedMessage.append(character)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp1tenhwt5/tmp1tenhwt5.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b520100bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5200d02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5200d02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5200d017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1tenhwt5                        0x00005654ec1a35e7 <unavailable> + 5607

    5    libc.so.6                          0x00002b52011f7460 __libc_start_main +
    245

    6    tmp1tenhwt5                        0x00005654ec1a3229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.index(of: char) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else if let index = alphabet.index(of: char.lowercased()) {\n           \
    \ let newIndex = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmphl50z5q8.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmphl50z5q8.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmphl50z5q8.swift:16:55:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: char.lowercased())\
    \ {\n                                                      ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message\
    \ {\n        if let index = alphabet.index(of: char.lowercased()) {\n        \
    \    let newIndex = alphabet.index(index, offsetBy: 2)\n            let newChar\
    \ = alphabet[newIndex]\n            if vowels.contains(String(newChar)) {\n  \
    \              encoded.append(newChar.uppercased())\n            } else {\n  \
    \              encoded.append(newChar)\n            }\n        } else {\n    \
    \        encoded.append(char)\n        }\n    }\n    return encoded\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6qy7495j.swift:13:48: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.index(of: char.lowercased()) {\n                          \
    \                     ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\",\
    \ \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)!\n            let newIndex\
    \ = (index + 2) % alphabet.count\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmprnhf9ax1/tmprnhf9ax1.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e1a20ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e19f05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e19f05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e19f047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprnhf9ax1                        0x000055a6fcb77877 <unavailable> + 6263

    5    libc.so.6                          0x00002b1e1a3fa460 __libc_start_main +
    245

    6    tmprnhf9ax1                        0x000055a6fcb774b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.firstIndex(of: char)!\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpmpzlhuol/tmpmpzlhuol.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afce07bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afce04b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afce04b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afce04b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmpzlhuol                        0x0000557ff69c5727 <unavailable> + 5927

    5    libc.so.6                          0x00002afce09a9460 __libc_start_main +
    245

    6    tmpmpzlhuol                        0x0000557ff69c5369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.index(of:\
    \ char) {\n            let newIndex = alphabet.index(index, offsetBy: 2)\n   \
    \         encoded.append(alphabet[newIndex])\n        } else if let index = alphabet.index(of:\
    \ char.lowercased()) {\n            let newIndex = alphabet.index(index, offsetBy:\
    \ 2)\n            encoded.append(alphabet[newIndex].uppercased())\n        } else\
    \ {\n            encoded.append(char)\n        }\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpd3q5djvh.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmpd3q5djvh.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmpd3q5djvh.swift:16:55:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: char.lowercased())\
    \ {\n                                                      ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = message.index(of: char)!\n            let nextIndex\
    \ = message.index(after: index)\n            let nextNextIndex = message.index(after:\
    \ nextIndex)\n            encodedMessage.append(message[nextNextIndex])\n    \
    \    } else {\n            encodedMessage.append(char)\n        }\n    }\n   \
    \ return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpped8w5zp/tmpped8w5zp.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af85d58cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af85d283b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af85d283988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af85d2827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpped8w5zp                        0x000055af6e067947 <unavailable> + 6471

    5    libc.so.6                          0x00002af85d778460 __libc_start_main +
    245

    6    tmpped8w5zp                        0x000055af6e067589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    let vowels: [Character] = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    for char in message {\n        if vowels.contains(char) {\n\
    \            let index = alphabet.firstIndex(of: char)!\n            encodedMessage.append(alphabet[index\
    \ + 2])\n        } else {\n            encodedMessage.append(char)\n        }\n\
    \    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpll0wpxfv/tmpll0wpxfv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7a6c41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7a6938b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7a6938988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7a69377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpll0wpxfv                        0x0000558a1a64e827 <unavailable> + 6183

    5    libc.so.6                          0x00002ac7a6e2d460 __libc_start_main +
    245

    6    tmpll0wpxfv                        0x0000558a1a64e469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    let vowels = \"aeiou\"\n   \
    \ let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message {\n \
    \       if vowels.contains(char) {\n            let index = alphabet.index(of:\
    \ char)\n            let newIndex = alphabet.index(index!, offsetBy: 2)\n    \
    \        encodedMessage.append(alphabet[newIndex])\n        } else {\n       \
    \     encodedMessage.append(char)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpal8_479y/tmpal8_479y.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abca4dc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abca4abeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abca4abe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abca4abd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpal8_479y                        0x0000562db8123727 <unavailable> + 5927

    5    libc.so.6                          0x00002abca4fb3460 __libc_start_main +
    245

    6    tmpal8_479y                        0x0000562db8123369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isUppercase {\n            encodedMessage.append(char.lowercased())\n\
    \        } else {\n            encodedMessage.append(char.uppercased())\n    \
    \    }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpqqmc5jdf.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    let alphabet: [Character] = Array(\"abcdefghijklmnopqrstuvwxyz\")\n\
    \    let encoded = message.map { (char) -> Character in\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.firstIndex(of: char)!\n            return\
    \ alphabet[(index + 2) % alphabet.count]\n        } else {\n            return\
    \ char\n        }\n    }\n    return String(encoded)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpxf9ky136/tmpxf9ky136.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61b096ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61b0665b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61b0665988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61b06647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxf9ky136                        0x00005568b19c79e7 <unavailable> + 6631

    5    libc.so.6                          0x00002b61b0b5a460 __libc_start_main +
    245

    6    tmpxf9ky136                        0x00005568b19c7629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    var vowels: [Character] = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = vowels.firstIndex(of: char)!\n            if index\
    \ == 4 {\n                encodedMessage.append(vowels[0])\n            } else\
    \ {\n                encodedMessage.append(vowels[index + 2])\n            }\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpogpehdcc/tmpogpehdcc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1f7697c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1f738eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1f738e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1f738d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpogpehdcc                        0x00005638c0c0d827 <unavailable> + 6183

    5    libc.so.6                          0x00002af1f7883460 __libc_start_main +
    245

    6    tmpogpehdcc                        0x00005638c0c0d469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\",\
    \ \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)!\n            encodedMessage.append(alphabet[(index\
    \ + 2) % alphabet.count])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpduhtj_ul/tmpduhtj_ul.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba55600fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba555d06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba555d06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba555d057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpduhtj_ul                        0x000055ca928f3877 <unavailable> + 6263

    5    libc.so.6                          0x00002ba5561fb460 __libc_start_main +
    245

    6    tmpduhtj_ul                        0x000055ca928f34b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.firstIndex(of: char) {\n            let newIndex = (index + 2) %\
    \ alphabet.count\n            encodedMessage.append(alphabet[newIndex])\n    \
    \    } else {\n            encodedMessage.append(char)\n        }\n    }\n   \
    \ return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpbrawk_3y.swift:14:29: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            let newIndex = (index + 2) % alphabet.count\n\
    \                            ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encoded = \"\"\n    for char in message.characters {\n\
    \        if char.isVowel() {\n            encoded.append(char.nextVowel())\n \
    \       } else if char.isUpperCase() {\n            encoded.append(char.lowercase())\n\
    \        } else {\n            encoded.append(char.uppercase())\n        }\n \
    \   }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpkihn03t9.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpkihn03t9.swift:11:17:\
    \ error: value of type 'Character' has no member 'isVowel'\n        if char.isVowel()\
    \ {\n           ~~~~ ^~~~~~~\n/tmp/tmpkihn03t9.swift:12:33: error: value of type\
    \ 'Character' has no member 'nextVowel'\n            encoded.append(char.nextVowel())\n\
    \                           ~~~~ ^~~~~~~~~\n/tmp/tmpkihn03t9.swift:13:24: error:\
    \ value of type 'Character' has no member 'isUpperCase'\n        } else if char.isUpperCase()\
    \ {\n                  ~~~~ ^~~~~~~~~~~\n/tmp/tmpkihn03t9.swift:14:33: error:\
    \ value of type 'Character' has no member 'lowercase'\n            encoded.append(char.lowercase())\n\
    \                           ~~~~ ^~~~~~~~~\n/tmp/tmpkihn03t9.swift:16:33: error:\
    \ value of type 'Character' has no member 'uppercase'\n            encoded.append(char.uppercase())\n\
    \                           ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.index(of:\
    \ char) {\n            let newIndex = alphabet.index(index, offsetBy: 2)\n   \
    \         encoded.append(alphabet[newIndex])\n        } else if let index = alphabet.index(of:\
    \ char.lowercased()) {\n            let newIndex = alphabet.index(index, offsetBy:\
    \ 2)\n            encoded.append(alphabet[newIndex].uppercased())\n        } else\
    \ {\n            encoded.append(char)\n        }\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpd3q5djvh.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmpd3q5djvh.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmpd3q5djvh.swift:16:55:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: char.lowercased())\
    \ {\n                                                      ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for letter in message {\n        if let index\
    \ = alphabet.index(of: letter) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else if let index = alphabet.index(of: letter.lowercased()) {\n         \
    \   let newIndex = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpfrw9g73z.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: letter) {\n\
    \                                ^\n/tmp/tmpfrw9g73z.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: letter) {\n             \
    \                   ^~~~~\n                                firstIndex\n/tmp/tmpfrw9g73z.swift:16:57:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: letter.lowercased())\
    \ {\n                                                        ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    let vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  \
    \  for char in message {\n        if let index = alphabet.index(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                let\
    \ newIndex = alphabet.index(index, offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex])\n\
    \            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpniroyziv.swift:13:48: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.index(of: char.lowercased()) {\n                          \
    \                     ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for character in message.characters\
    \ {\n        if character.isVowel() {\n            encodedMessage.append(character.nextVowel())\n\
    \        } else if character.isUpperCase() {\n            encodedMessage.append(character.lowercase())\n\
    \        } else {\n            encodedMessage.append(character.uppercase())\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpc1j0z_uo.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in message.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpc1j0z_uo.swift:11:22: error: value of type 'Character' has no member\
    \ 'isVowel'\n        if character.isVowel() {\n           ~~~~~~~~~ ^~~~~~~\n\
    /tmp/tmpc1j0z_uo.swift:12:45: error: value of type 'Character' has no member 'nextVowel'\n\
    \            encodedMessage.append(character.nextVowel())\n                  \
    \                ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpc1j0z_uo.swift:13:29: error: value\
    \ of type 'Character' has no member 'isUpperCase'\n        } else if character.isUpperCase()\
    \ {\n                  ~~~~~~~~~ ^~~~~~~~~~~\n/tmp/tmpc1j0z_uo.swift:14:45: error:\
    \ value of type 'Character' has no member 'lowercase'\n            encodedMessage.append(character.lowercase())\n\
    \                                  ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpc1j0z_uo.swift:16:45:\
    \ error: value of type 'Character' has no member 'uppercase'\n            encodedMessage.append(character.uppercase())\n\
    \                                  ~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isUppercase {\n            encodedMessage.append(char.lowercase)\n\
    \        } else {\n            encodedMessage.append(char.uppercase)\n       \
    \ }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpeib8lfku.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpeib8lfku.swift:12:40:\
    \ error: value of type 'Character' has no member 'lowercase'\n            encodedMessage.append(char.lowercase)\n\
    \                                  ~~~~ ^~~~~~~~~\n/tmp/tmpeib8lfku.swift:14:40:\
    \ error: value of type 'Character' has no member 'uppercase'\n            encodedMessage.append(char.uppercase)\n\
    \                                  ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.firstIndex(of: char)\n            let newIndex\
    \ = alphabet.index(index!, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpv3jxfitt/tmpv3jxfitt.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b083df90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b083dc87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b083dc87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b083dc867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv3jxfitt                        0x0000563390a47727 <unavailable> + 5927

    5    libc.so.6                          0x00002b083e17c460 __libc_start_main +
    245

    6    tmpv3jxfitt                        0x0000563390a47369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.index(of:\
    \ char) {\n            encoded.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n        } else if let index = alphabet.index(of: char.lowercased()) {\n\
    \            encoded.append(alphabet[alphabet.index(index, offsetBy: 2)].uppercased())\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp96irkdw5.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmp96irkdw5.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmp96irkdw5.swift:15:55:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: char.lowercased())\
    \ {\n                                                      ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    var alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message.characters {\n        if alphabet.contains(String(char))\
    \ {\n            if char == \"a\" || char == \"A\" {\n                encodedMessage\
    \ += \"c\"\n            } else if char == \"e\" || char == \"E\" {\n         \
    \       encodedMessage += \"g\"\n            } else if char == \"i\" || char ==\
    \ \"I\" {\n                encodedMessage += \"k\"\n            } else if char\
    \ == \"o\" || char == \"O\" {\n                encodedMessage += \"q\"\n     \
    \       } else if char == \"u\" || char == \"U\" {\n                encodedMessage\
    \ += \"y\"\n            } else {\n                encodedMessage += String(char)\n\
    \            }\n        } else {\n            encodedMessage += String(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpqykb06a0.swift:11:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpqykb06a0.swift:10:9:\
    \ warning: variable 'alphabet' was never mutated; consider changing to 'let' constant\n\
    \    var alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    let vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  \
    \  for letter in message {\n        if let index = alphabet.firstIndex(of: letter.lowercased())\
    \ {\n            if vowels.contains(letter.lowercased()) {\n                let\
    \ newIndex = alphabet.index(index, offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex])\n\
    \            } else {\n                encodedMessage.append(letter)\n       \
    \     }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8y73u4dt.swift:13:55: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n                   \
    \                                   ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.firstIndex(of: char) {\n            encodedMessage += alphabet[alphabet.index(index,\
    \ offsetBy: 2)]\n        } else if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            encodedMessage += alphabet[alphabet.index(index, offsetBy: 2)].uppercased()\n\
    \        } else {\n            encodedMessage += String(char)\n        }\n   \
    \ }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpabqk7vhk.swift:14:39: error: subscript 'subscript(_:)' requires\
    \ that 'String.Index' conform to 'RangeExpression'\n            encodedMessage\
    \ += alphabet[alphabet.index(index, offsetBy: 2)]\n                          \
    \            ^\nSwift.Collection:2:23: note: where 'R' = 'String.Index'\n    @inlinable\
    \ public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression, Self.Index\
    \ == R.Bound { get }\n                      ^\n/tmp/tmpabqk7vhk.swift:15:60: error:\
    \ cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n                                                           ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char) {\n            if alphabet.contains(char) {\n                encoded.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n            }\n        } else if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if alphabet.contains(char.lowercased()) {\n\
    \                encoded.append(alphabet[alphabet.index(index, offsetBy: 2)].uppercased())\n\
    \            }\n        } else {\n            encoded.append(char)\n        }\n\
    \    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpm42hxsub.swift:17:60: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        } else\
    \ if let index = alphabet.firstIndex(of: char.lowercased()) {\n              \
    \                                             ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isUppercase {\n            encodedMessage.append(char.lowercase)\n\
    \        } else {\n            encodedMessage.append(char.uppercase)\n       \
    \ }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpeib8lfku.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpeib8lfku.swift:12:40:\
    \ error: value of type 'Character' has no member 'lowercase'\n            encodedMessage.append(char.lowercase)\n\
    \                                  ~~~~ ^~~~~~~~~\n/tmp/tmpeib8lfku.swift:14:40:\
    \ error: value of type 'Character' has no member 'uppercase'\n            encodedMessage.append(char.uppercase)\n\
    \                                  ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isUppercase {\n            encodedMessage.append(char.lowercase)\n\
    \        } else {\n            encodedMessage.append(char.uppercase)\n       \
    \ }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpeib8lfku.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpeib8lfku.swift:12:40:\
    \ error: value of type 'Character' has no member 'lowercase'\n            encodedMessage.append(char.lowercase)\n\
    \                                  ~~~~ ^~~~~~~~~\n/tmp/tmpeib8lfku.swift:14:40:\
    \ error: value of type 'Character' has no member 'uppercase'\n            encodedMessage.append(char.uppercase)\n\
    \                                  ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    let alphabetUpper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)\n            let newIndex =\
    \ alphabet.index(index!, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else if alphabetUpper.contains(char) {\n            let index = alphabetUpper.firstIndex(of:\
    \ char)\n            let newIndex = alphabetUpper.index(index!, offsetBy: 2)\n\
    \            encodedMessage.append(alphabetUpper[newIndex])\n        } else {\n\
    \            encodedMessage.append(char)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpxgbeuuml/tmpxgbeuuml.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31a6fd3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31a6ccab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31a6cca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31a6cc97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxgbeuuml                        0x000055c806ab8727 <unavailable> + 5927

    5    libc.so.6                          0x00002b31a71bf460 __libc_start_main +
    245

    6    tmpxgbeuuml                        0x000055c806ab8369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for character\
    \ in message {\n        if vowels.contains(String(character).lowercased()) {\n\
    \            let index = alphabet.index(of: character)\n            let nextIndex\
    \ = alphabet.index(index!, offsetBy: 2)\n            encodedMessage += String(alphabet[nextIndex])\n\
    \        } else {\n            encodedMessage += String(character)\n        }\n\
    \    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpwu4b0tsc/tmpwu4b0tsc.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b25ecad8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25ec7cf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b25ec7cf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b25ec7cf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b25ec7cebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpwu4b0tsc                        0x0000561389ba71c1 <unavailable> + 8641

    6    tmpwu4b0tsc                        0x0000561389ba6816 <unavailable> + 6166

    7    libc.so.6                          0x00002b25eccc4460 __libc_start_main +
    245

    8    tmpwu4b0tsc                        0x0000561389ba6519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encoded\
    \ = \"\"\n    for letter in message {\n        if vowels.contains(String(letter).lowercased())\
    \ {\n            encoded += String(letter).uppercased()\n        } else {\n  \
    \          encoded += String(letter).lowercased()\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp2x400i15/tmp2x400i15.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb2e10ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2de05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2de05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb2de047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2x400i15                        0x000055762ce8e6f7 <unavailable> + 5879

    5    libc.so.6                          0x00002aeb2e2fa460 __libc_start_main +
    245

    6    tmp2x400i15                        0x000055762ce8e339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encoded = \"\"\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message {\n        if let\
    \ index = alphabet.firstIndex(of: char) {\n            if vowels.contains(char)\
    \ {\n                let nextIndex = alphabet.index(index, offsetBy: 2)\n    \
    \            encoded.append(alphabet[nextIndex])\n            } else {\n     \
    \           encoded.append(char)\n            }\n        } else {\n          \
    \  encoded.append(char)\n        }\n    }\n    return encoded\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp2vti3u0v/tmp2vti3u0v.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1ada11c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1ad708b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1ad708988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1ad7077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2vti3u0v                        0x0000563ea3bcf697 <unavailable> + 5783

    5    libc.so.6                          0x00002ae1adbfd460 __libc_start_main +
    245

    6    tmp2vti3u0v                        0x0000563ea3bcf2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encoded = \"\"\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message {\n        if let\
    \ index = alphabet.firstIndex(of: char) {\n            encoded.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n        } else if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            encoded.append(alphabet[alphabet.index(index, offsetBy: 2)].uppercased())\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpbf84kz0o.swift:15:60: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        } else\
    \ if let index = alphabet.firstIndex(of: char.lowercased()) {\n              \
    \                                             ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for character in message.characters\
    \ {\n        if character.isLetter {\n            let ascii = character.asciiValue!\n\
    \            let newAscii = ascii + 2\n            let newCharacter = Character(UnicodeScalar(newAscii))\n\
    \            encodedMessage.append(newCharacter)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmphkrvh8aa.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in message.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encoded = \"\"\n    for char in message.characters {\n\
    \        if char.isLetter {\n            if char.isUpper {\n                encoded.append(char.lowercased())\n\
    \            } else {\n                encoded.append(char.uppercased())\n   \
    \         }\n        } else {\n            encoded.append(char)\n        }\n \
    \   }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpjgeq_jql.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpjgeq_jql.swift:12:21:\
    \ error: value of type 'Character' has no member 'isUpper'\n            if char.isUpper\
    \ {\n               ~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encoded = \"\"\n    for char in message.characters {\n\
    \        if char.isUppercase {\n            encoded.append(char.lowercase)\n \
    \       } else {\n            encoded.append(char.uppercase)\n        }\n    \
    \    if char == \"a\" {\n            encoded.append(\"c\")\n        } else if\
    \ char == \"e\" {\n            encoded.append(\"g\")\n        } else if char ==\
    \ \"i\" {\n            encoded.append(\"k\")\n        } else if char == \"o\"\
    \ {\n            encoded.append(\"q\")\n        } else if char == \"u\" {\n  \
    \          encoded.append(\"y\")\n        }\n    }\n    return encoded\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmprricpheb.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmprricpheb.swift:12:33:\
    \ error: value of type 'Character' has no member 'lowercase'\n            encoded.append(char.lowercase)\n\
    \                           ~~~~ ^~~~~~~~~\n/tmp/tmprricpheb.swift:14:33: error:\
    \ value of type 'Character' has no member 'uppercase'\n            encoded.append(char.uppercase)\n\
    \                           ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.index(of: char) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else if let index = alphabet.index(of: char.lowercased()) {\n           \
    \ let newIndex = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmphl50z5q8.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmphl50z5q8.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmphl50z5q8.swift:16:55:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: char.lowercased())\
    \ {\n                                                      ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if let index = vowels.index(of:\
    \ String(letter).lowercased()) {\n            encodedMessage += vowels[(index\
    \ + 2) % vowels.count]\n        } else {\n            encodedMessage += String(letter)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpy9s3mnko/tmpy9s3mnko.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83cfae8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83cf7dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83cf7df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83cf7de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy9s3mnko                        0x000055d033ad6827 <unavailable> + 6183

    5    libc.so.6                          0x00002b83cfcd4460 __libc_start_main +
    245

    6    tmpy9s3mnko                        0x000055d033ad6469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for letter\
    \ in message {\n        if let index = alphabet.index(of: letter.lowercased())\
    \ {\n            let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \   if vowels.contains(letter.lowercased()) {\n                encodedMessage.append(alphabet[newIndex])\n\
    \            } else {\n                encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpq0dabhl5.swift:13:50: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.index(of: letter.lowercased()) {\n                        \
    \                         ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char) {\n            encoded.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n        } else if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            encoded.append(alphabet[alphabet.index(index, offsetBy: 2)].uppercased())\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpd64f3kjx.swift:15:60: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        } else\
    \ if let index = alphabet.firstIndex(of: char.lowercased()) {\n              \
    \                                             ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encoded = \"\"\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message {\n        if let\
    \ index = alphabet.index(of: char) {\n            if let vowelIndex = vowels.index(of:\
    \ char) {\n                let newIndex = alphabet.index(vowelIndex, offsetBy:\
    \ 2)\n                encoded.append(alphabet[newIndex])\n            } else {\n\
    \                encoded.append(alphabet[index])\n            }\n        } else\
    \ {\n            encoded.append(char)\n        }\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp4kw9gb4_/tmp4kw9gb4_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abcc5824c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abcc551bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abcc551b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abcc551a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4kw9gb4_                        0x00005626d5ddf5e7 <unavailable> + 5607

    5    libc.so.6                          0x00002abcc5a10460 __libc_start_main +
    245

    6    tmp4kw9gb4_                        0x00005626d5ddf229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for letter in message {\n        if let index\
    \ = alphabet.index(of: letter) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else if let index = alphabet.index(of: letter.lowercased()) {\n         \
    \   let newIndex = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpfrw9g73z.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: letter) {\n\
    \                                ^\n/tmp/tmpfrw9g73z.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: letter) {\n             \
    \                   ^~~~~\n                                firstIndex\n/tmp/tmpfrw9g73z.swift:16:57:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: letter.lowercased())\
    \ {\n                                                        ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\",\
    \ \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if vowels.contains(letter) {\n\
    \            let index = alphabet.firstIndex(of: letter)!\n            let newIndex\
    \ = index + 2\n            encodedMessage.append(alphabet[newIndex])\n       \
    \ } else {\n            encodedMessage.append(letter)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmplfewhfj2/tmplfewhfj2.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4848ab0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48487a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48487a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48487a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplfewhfj2                        0x00005564044bb827 <unavailable> + 6183

    5    libc.so.6                          0x00002b4848c9c460 __libc_start_main +
    245

    6    tmplfewhfj2                        0x00005564044bb469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for letter in message {\n        if let index\
    \ = alphabet.index(of: letter) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else if let index = alphabet.index(of: letter.lowercased()) {\n         \
    \   let newIndex = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpfrw9g73z.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: letter) {\n\
    \                                ^\n/tmp/tmpfrw9g73z.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: letter) {\n             \
    \                   ^~~~~\n                                firstIndex\n/tmp/tmpfrw9g73z.swift:16:57:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: letter.lowercased())\
    \ {\n                                                        ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for letter in message {\n        if let index\
    \ = alphabet.index(of: letter) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else if let index = alphabet.index(of: letter.lowercased()) {\n         \
    \   let newIndex = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpfrw9g73z.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: letter) {\n\
    \                                ^\n/tmp/tmpfrw9g73z.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: letter) {\n             \
    \                   ^~~~~\n                                firstIndex\n/tmp/tmpfrw9g73z.swift:16:57:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: letter.lowercased())\
    \ {\n                                                        ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for character in message.characters\
    \ {\n        if character.isLetter {\n            if character.isUppercase {\n\
    \                encodedMessage.append(character.lowercased())\n            }\
    \ else {\n                encodedMessage.append(character.uppercased())\n    \
    \        }\n        } else {\n            encodedMessage.append(character)\n \
    \       }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpc6sd9u0g.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in message.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isLetter {\n            if char.isUppercase {\n         \
    \       encodedMessage.append(char.lowercased())\n            } else {\n     \
    \           encodedMessage.append(char.uppercased())\n            }\n        }\
    \ else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpypamfnt0.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        let ascii = char.unicodeScalars.first!.value\n        if ascii >=\
    \ 65 && ascii <= 90 {\n            encodedMessage.append(Character(UnicodeScalar(ascii\
    \ + 32)!))\n        } else if ascii >= 97 && ascii <= 122 {\n            encodedMessage.append(Character(UnicodeScalar(ascii\
    \ - 32)!))\n        } else {\n            encodedMessage.append(char)\n      \
    \  }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp5d6ikbuu.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\",\
    \ \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)!\n            let newIndex\
    \ = index + 2\n            encodedMessage.append(alphabet[newIndex])\n       \
    \ } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp_ir94hd8/tmp_ir94hd8.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ca0a98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ca078fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ca078f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ca078e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ir94hd8                        0x000055b055477827 <unavailable> + 6183

    5    libc.so.6                          0x00002b7ca0c84460 __libc_start_main +
    245

    6    tmp_ir94hd8                        0x000055b055477469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message.lowercased() {\n        if let\
    \ index = letters.index(of: char) {\n            let newIndex = (index + 2) %\
    \ letters.count\n            encoded.append(letters[newIndex])\n        } else\
    \ {\n            encoded.append(char)\n        }\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmps5x_k09l.swift:13:32: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = letters.index(of: char) {\n   \
    \                            ^\n/tmp/tmps5x_k09l.swift:13:32: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = letters.index(of: char) {\n                \
    \               ^~~~~\n                               firstIndex\n/tmp/tmps5x_k09l.swift:14:29:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            let newIndex = (index + 2) % letters.count\n            \
    \                ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message.characters {\n        if let\
    \ index = letters.characters.index(of: char) {\n            let newIndex = (index.encodedOffset\
    \ + 2) % letters.characters.count\n            encoded.append(letters[letters.index(letters.startIndex,\
    \ offsetBy: newIndex)])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpia3jv7pm.swift:12:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpia3jv7pm.swift:13:32:\
    \ error: 'characters' is unavailable: Please use String directly\n        if let\
    \ index = letters.characters.index(of: char) {\n                             \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpia3jv7pm.swift:13:43:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        if\
    \ let index = letters.characters.index(of: char) {\n                         \
    \                 ^\n/tmp/tmpia3jv7pm.swift:13:43: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = letters.characters.index(of: char) {\n     \
    \                                     ^~~~~\n                                \
    \          firstIndex\n/tmp/tmpia3jv7pm.swift:14:35: warning: 'encodedOffset'\
    \ is deprecated: encodedOffset has been deprecated as most common usage is incorrect.\
    \ Use utf16Offset(in:) to achieve the same behavior.\n            let newIndex\
    \ = (index.encodedOffset + 2) % letters.characters.count\n                   \
    \               ^\n/tmp/tmpia3jv7pm.swift:14:64: error: 'characters' is unavailable:\
    \ Please use String directly\n            let newIndex = (index.encodedOffset\
    \ + 2) % letters.characters.count\n                                          \
    \                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpia3jv7pm.swift:9:9: warning: initialization of immutable value 'vowels'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   let vowels = \"aeiou\"\n    ~~~~^~~~~~\n    _\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isUppercase {\n            encodedMessage.append(char.lowercase)\n\
    \        } else {\n            encodedMessage.append(char.uppercase)\n       \
    \ }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpeib8lfku.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpeib8lfku.swift:12:40:\
    \ error: value of type 'Character' has no member 'lowercase'\n            encodedMessage.append(char.lowercase)\n\
    \                                  ~~~~ ^~~~~~~~~\n/tmp/tmpeib8lfku.swift:14:40:\
    \ error: value of type 'Character' has no member 'uppercase'\n            encodedMessage.append(char.uppercase)\n\
    \                                  ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message.characters {\n      \
    \  if vowels.containsString(String(char)) {\n            let index = vowels.characters.indexOf(char)\n\
    \            encodedMessage.append(vowels[vowels.startIndex.advancedBy(index!\
    \ + 2)])\n        } else if letters.containsString(String(char)) {\n         \
    \   let index = letters.characters.indexOf(char)\n            encodedMessage.append(letters[letters.startIndex.advancedBy(index!\
    \ + 2)])\n        } else {\n            encodedMessage.append(char)\n        }\n\
    \    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdvudvxrd.swift:12:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdvudvxrd.swift:13:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpdvudvxrd.swift:14:43: error: value\
    \ of type 'String' has no member 'indexOf'\n            let index = vowels.characters.indexOf(char)\n\
    \                        ~~~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpdvudvxrd.swift:15:60:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ encodedMessage.append(vowels[vowels.startIndex.advancedBy(index! + 2)])\n  \
    \                                       ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpdvudvxrd.swift:16:27:\
    \ error: value of type 'String' has no member 'containsString'\n        } else\
    \ if letters.containsString(String(char)) {\n                  ~~~~~~~ ^~~~~~~~~~~~~~\n\
    /tmp/tmpdvudvxrd.swift:17:44: error: value of type 'String' has no member 'indexOf'\n\
    \            let index = letters.characters.indexOf(char)\n                  \
    \      ~~~~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpdvudvxrd.swift:18:62: error: value\
    \ of type 'String.Index' has no member 'advancedBy'\n            encodedMessage.append(letters[letters.startIndex.advancedBy(index!\
    \ + 2)])\n                                          ~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = vowels.firstIndex(of: char)!\n            let newIndex\
    \ = (index + 2) % vowels.count\n            encodedMessage.append(vowels[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpuotsfr_5/tmpuotsfr_5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d3fd2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d3fa23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d3fa23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d3fa227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuotsfr_5                        0x00005649dcac3877 <unavailable> + 6263

    5    libc.so.6                          0x00002b3d3ff18460 __libc_start_main +
    245

    6    tmpuotsfr_5                        0x00005649dcac34b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isVowel() {\n            encodedMessage.append(char.next().next())\n\
    \        } else if char.isUppercase() {\n            encodedMessage.append(char.lowercase())\n\
    \        } else {\n            encodedMessage.append(char.uppercase())\n     \
    \   }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmphkdq479g.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmphkdq479g.swift:11:17:\
    \ error: value of type 'Character' has no member 'isVowel'\n        if char.isVowel()\
    \ {\n           ~~~~ ^~~~~~~\n/tmp/tmphkdq479g.swift:12:40: error: value of type\
    \ 'Character' has no member 'next'\n            encodedMessage.append(char.next().next())\n\
    \                                  ~~~~ ^~~~\n/tmp/tmphkdq479g.swift:13:24: error:\
    \ cannot call value of non-function type 'Bool'\n        } else if char.isUppercase()\
    \ {\n                       ^          ~~\n                                  \n\
    /tmp/tmphkdq479g.swift:14:40: error: value of type 'Character' has no member 'lowercase'\n\
    \            encodedMessage.append(char.lowercase())\n                       \
    \           ~~~~ ^~~~~~~~~\n/tmp/tmphkdq479g.swift:16:40: error: value of type\
    \ 'Character' has no member 'uppercase'\n            encodedMessage.append(char.uppercase())\n\
    \                                  ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for character in message.characters\
    \ {\n        if character.isLetter {\n            let unicode = character.unicodeScalars.first!.value\n\
    \            let unicodeString = String(unicode, radix: 16, uppercase: true)\n\
    \            let unicodeInt = Int(unicodeString, radix: 16)!\n            let\
    \ unicodeInt2 = unicodeInt + 2\n            let unicode2 = UnicodeScalar(unicodeInt2)\n\
    \            let character2 = Character(unicode2!)\n            encodedMessage.append(character2)\n\
    \        } else {\n            encodedMessage.append(character)\n        }\n \
    \   }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpe7bmjujt.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in message.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    let alphabetArray = Array(alphabet)\n\
    \    var encodedMessage = \"\"\n    for char in message {\n        let charLowercase\
    \ = String(char).lowercased()\n        if vowels.contains(charLowercase) {\n \
    \           let index = alphabetArray.index(of: charLowercase)!\n            let\
    \ newIndex = (index + 2) % alphabetArray.count\n            encodedMessage +=\
    \ alphabetArray[newIndex]\n        } else {\n            encodedMessage += String(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpia0cemt2.swift:16:49: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n            let\
    \ index = alphabetArray.index(of: charLowercase)!\n                          \
    \                      ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encoded = \"\"\n    for char in message.characters {\n\
    \        if char.isLetter {\n            let ascii = char.asciiValue!\n      \
    \      let isUpper = ascii >= 65 && ascii <= 90\n            let asciiOffset =\
    \ isUpper ? 65 : 97\n            let asciiIndex = Int(ascii) - asciiOffset\n \
    \           let encodedIndex = (asciiIndex + 2) % 26\n            let encodedAscii\
    \ = encodedIndex + asciiOffset\n            let encodedChar = Character(UnicodeScalar(encodedAscii))\n\
    \            encoded.append(encodedChar)\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp64zisajg.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp64zisajg.swift:18:41:\
    \ error: value of optional type 'UnicodeScalar?' (aka 'Optional<Unicode.Scalar>')\
    \ must be unwrapped to a value of type 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \            let encodedChar = Character(UnicodeScalar(encodedAscii))\n      \
    \                                  ^\n/tmp/tmp64zisajg.swift:18:41: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         let encodedChar = Character(UnicodeScalar(encodedAscii))\n         \
    \                               ^\n                                          \
    \                          ?? <#default value#>\n/tmp/tmp64zisajg.swift:18:41:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            let encodedChar = Character(UnicodeScalar(encodedAscii))\n\
    \                                        ^\n                                 \
    \                                  !\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    let vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  \
    \  for char in message {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            let index = alphabet.index(of: char)\n            let newIndex\
    \ = alphabet.index(index!, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp99dvrp0l/tmp99dvrp0l.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c94930c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c94627561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6c94627286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6c9462713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6c94626bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp99dvrp0l                        0x000055b57b39c1c1 <unavailable> + 8641

    6    tmp99dvrp0l                        0x000055b57b39b816 <unavailable> + 6166

    7    libc.so.6                          0x00002b6c94b1c460 __libc_start_main +
    245

    8    tmp99dvrp0l                        0x000055b57b39b519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isLetter {\n            if char.isUppercase {\n         \
    \       encodedMessage.append(char.lowercase)\n            } else {\n        \
    \        encodedMessage.append(char.uppercase)\n            }\n        } else\
    \ {\n            encodedMessage.append(char)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpz4fzonx3.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpz4fzonx3.swift:13:44:\
    \ error: value of type 'Character' has no member 'lowercase'\n               \
    \ encodedMessage.append(char.lowercase)\n                                    \
    \  ~~~~ ^~~~~~~~~\n/tmp/tmpz4fzonx3.swift:15:44: error: value of type 'Character'\
    \ has no member 'uppercase'\n                encodedMessage.append(char.uppercase)\n\
    \                                      ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = vowels.firstIndex(of: char)!\n            let nextIndex\
    \ = (index + 2) % vowels.count\n            encodedMessage.append(vowels[nextIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpo90zrjjg/tmpo90zrjjg.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1600e75c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1600b6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1600b6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1600b6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo90zrjjg                        0x000056364291d877 <unavailable> + 6263

    5    libc.so.6                          0x00002b1601061460 __libc_start_main +
    245

    6    tmpo90zrjjg                        0x000056364291d4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isLetter {\n            if char.isUppercase {\n         \
    \       encodedMessage.append(char.lowercase)\n            } else {\n        \
    \        encodedMessage.append(char.uppercase)\n            }\n        } else\
    \ {\n            encodedMessage.append(char)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpz4fzonx3.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpz4fzonx3.swift:13:44:\
    \ error: value of type 'Character' has no member 'lowercase'\n               \
    \ encodedMessage.append(char.lowercase)\n                                    \
    \  ~~~~ ^~~~~~~~~\n/tmp/tmpz4fzonx3.swift:15:44: error: value of type 'Character'\
    \ has no member 'uppercase'\n                encodedMessage.append(char.uppercase)\n\
    \                                      ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            let index = vowels.index(of: String(char).lowercased())\n   \
    \         if index == 4 {\n                encodedMessage += \"a\"\n         \
    \   } else {\n                encodedMessage += vowels[index! + 2]\n         \
    \   }\n        } else {\n            encodedMessage += String(char)\n        }\n\
    \    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpaxm_g9wk/tmpaxm_g9wk.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ab7d11c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ab7a08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ab7a08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ab7a077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaxm_g9wk                        0x0000557599053837 <unavailable> + 6199

    5    libc.so.6                          0x00002b8ab7efd460 __libc_start_main +
    245

    6    tmpaxm_g9wk                        0x0000557599053479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encoded = \"\"\n    for char in message.characters {\n\
    \        if char.isLetter {\n            if char.isUpper {\n                encoded.append(char.lower())\n\
    \            } else {\n                encoded.append(char.upper())\n        \
    \    }\n        } else {\n            encoded.append(char)\n        }\n    }\n\
    \    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp24twu75r.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp24twu75r.swift:12:21:\
    \ error: value of type 'Character' has no member 'isUpper'\n            if char.isUpper\
    \ {\n               ~~~~ ^~~~~~~\n/tmp/tmp24twu75r.swift:13:37: error: value of\
    \ type 'Character' has no member 'lower'\n                encoded.append(char.lower())\n\
    \                               ~~~~ ^~~~~\n/tmp/tmp24twu75r.swift:15:37: error:\
    \ value of type 'Character' has no member 'upper'\n                encoded.append(char.upper())\n\
    \                               ~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.index(of:\
    \ char) {\n            let newIndex = alphabet.index(index, offsetBy: 2)\n   \
    \         encoded.append(alphabet[newIndex])\n        } else if let index = alphabet.index(of:\
    \ char.lowercased()) {\n            let newIndex = alphabet.index(index, offsetBy:\
    \ 2)\n            encoded.append(alphabet[newIndex].uppercased())\n        } else\
    \ {\n            encoded.append(char)\n        }\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpd3q5djvh.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmpd3q5djvh.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmpd3q5djvh.swift:16:55:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: char.lowercased())\
    \ {\n                                                      ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char) {\n            encoded.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n        } else if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            encoded.append(alphabet[alphabet.index(index, offsetBy: 2)].uppercased())\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpd64f3kjx.swift:15:60: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        } else\
    \ if let index = alphabet.firstIndex(of: char.lowercased()) {\n              \
    \                                             ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for letter in message {\n        if let index\
    \ = alphabet.index(of: letter) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else if let index = alphabet.index(of: letter.lowercased()) {\n         \
    \   let newIndex = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpfrw9g73z.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: letter) {\n\
    \                                ^\n/tmp/tmpfrw9g73z.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: letter) {\n             \
    \                   ^~~~~\n                                firstIndex\n/tmp/tmpfrw9g73z.swift:16:57:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: letter.lowercased())\
    \ {\n                                                        ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\",\
    \ \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)!\n            encodedMessage.append(alphabet[(index\
    \ + 2) % alphabet.count])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpduhtj_ul/tmpduhtj_ul.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba55600fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba555d06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba555d06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba555d057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpduhtj_ul                        0x000055ca928f3877 <unavailable> + 6263

    5    libc.so.6                          0x00002ba5561fb460 __libc_start_main +
    245

    6    tmpduhtj_ul                        0x000055ca928f34b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    let vowels = \"aeiou\"\n   \
    \ let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in message {\n\
    \        if alphabet.contains(letter) {\n            if vowels.contains(letter)\
    \ {\n                let index = alphabet.index(of: letter)!\n               \
    \ let newIndex = alphabet.index(index, offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex])\n\
    \            } else {\n                encodedMessage.append(letter)\n       \
    \     }\n        } else {\n            encodedMessage.append(letter)\n       \
    \ }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmprklgbu8t/tmprklgbu8t.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4e3a2ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4e3725b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4e3725988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4e37247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprklgbu8t                        0x000055a60ae1f727 <unavailable> + 5927

    5    libc.so.6                          0x00002ac4e3c1a460 __libc_start_main +
    245

    6    tmprklgbu8t                        0x000055a60ae1f369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isUppercase {\n            encodedMessage.append(char.lowercase)\n\
    \        } else {\n            encodedMessage.append(char.uppercase)\n       \
    \ }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpeib8lfku.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpeib8lfku.swift:12:40:\
    \ error: value of type 'Character' has no member 'lowercase'\n            encodedMessage.append(char.lowercase)\n\
    \                                  ~~~~ ^~~~~~~~~\n/tmp/tmpeib8lfku.swift:14:40:\
    \ error: value of type 'Character' has no member 'uppercase'\n            encodedMessage.append(char.uppercase)\n\
    \                                  ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.index(of: char) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else if let index = alphabet.index(of: char.lowercased()) {\n           \
    \ let newIndex = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmphl50z5q8.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmphl50z5q8.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmphl50z5q8.swift:16:55:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: char.lowercased())\
    \ {\n                                                      ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.firstIndex(of: char) {\n            encodedMessage += String(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n        } else if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            encodedMessage += String(alphabet[alphabet.index(index, offsetBy:\
    \ 2)]).uppercased()\n        } else {\n            encodedMessage += String(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdedn09fg.swift:15:60: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        } else\
    \ if let index = alphabet.firstIndex(of: char.lowercased()) {\n              \
    \                                             ^\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encoded = \"\"\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.firstIndex(of: char)\n            let newIndex\
    \ = alphabet.index(index!, offsetBy: 2)\n            encoded.append(alphabet[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpsx4piea6/tmpsx4piea6.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b230875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2308455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2308455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23084547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx4piea6                        0x000056416aa2f727 <unavailable> + 5927

    5    libc.so.6                          0x00002b230894a460 __libc_start_main +
    245

    6    tmpsx4piea6                        0x000056416aa2f369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char) {\n            encoded.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n        } else if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            encoded.append(alphabet[alphabet.index(index, offsetBy: 2)].uppercased())\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpd64f3kjx.swift:15:60: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        } else\
    \ if let index = alphabet.firstIndex(of: char.lowercased()) {\n              \
    \                                             ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.index(of: char) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else if let index = alphabet.index(of: char.lowercased()) {\n           \
    \ let newIndex = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmphl50z5q8.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmphl50z5q8.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmphl50z5q8.swift:16:55:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: char.lowercased())\
    \ {\n                                                      ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for character in message.characters\
    \ {\n        let lowercaseCharacter = String(character).lowercased()\n       \
    \ if lowercaseCharacter == \"a\" {\n            encodedMessage += \"c\"\n    \
    \    } else if lowercaseCharacter == \"e\" {\n            encodedMessage += \"\
    g\"\n        } else if lowercaseCharacter == \"i\" {\n            encodedMessage\
    \ += \"k\"\n        } else if lowercaseCharacter == \"o\" {\n            encodedMessage\
    \ += \"q\"\n        } else if lowercaseCharacter == \"u\" {\n            encodedMessage\
    \ += \"y\"\n        } else if lowercaseCharacter == \"y\" {\n            encodedMessage\
    \ += \"a\"\n        } else if lowercaseCharacter == \"z\" {\n            encodedMessage\
    \ += \"b\"\n        } else if lowercaseCharacter == \" \" {\n            encodedMessage\
    \ += \" \"\n        } else {\n            encodedMessage += String(character).uppercased()\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmps9eti77g.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in message.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)!\n            encodedMessage.append(alphabet[(index\
    \ + 2) % alphabet.count])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmptsuoi_oh/tmptsuoi_oh.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2567eb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2567badb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2567bad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2567bac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptsuoi_oh                        0x000055faeb9fe907 <unavailable> + 6407

    5    libc.so.6                          0x00002b25680a2460 __libc_start_main +
    245

    6    tmptsuoi_oh                        0x000055faeb9fe549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isVowel() {\n            encodedMessage.append(char.nextVowel())\n\
    \        } else if char.isUpperCase() {\n            encodedMessage.append(char.lowercaseString)\n\
    \        } else {\n            encodedMessage.append(char.uppercaseString)\n \
    \       }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp3g_zt09e.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp3g_zt09e.swift:11:17:\
    \ error: value of type 'Character' has no member 'isVowel'\n        if char.isVowel()\
    \ {\n           ~~~~ ^~~~~~~\n/tmp/tmp3g_zt09e.swift:12:40: error: value of type\
    \ 'Character' has no member 'nextVowel'\n            encodedMessage.append(char.nextVowel())\n\
    \                                  ~~~~ ^~~~~~~~~\n/tmp/tmp3g_zt09e.swift:13:24:\
    \ error: value of type 'Character' has no member 'isUpperCase'\n        } else\
    \ if char.isUpperCase() {\n                  ~~~~ ^~~~~~~~~~~\n/tmp/tmp3g_zt09e.swift:14:40:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \   encodedMessage.append(char.lowercaseString)\n                            \
    \      ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp3g_zt09e.swift:16:40: error: value of type\
    \ 'Character' has no member 'uppercaseString'\n            encodedMessage.append(char.uppercaseString)\n\
    \                                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\",\
    \ \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)!\n            encodedMessage.append(alphabet[index\
    \ + 2])\n        } else {\n            encodedMessage.append(char)\n        }\n\
    \    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp31jofnat/tmp31jofnat.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6649a4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6649742b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6649742988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66497417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp31jofnat                        0x0000559ec2cde827 <unavailable> + 6183

    5    libc.so.6                          0x00002b6649c37460 __libc_start_main +
    245

    6    tmp31jofnat                        0x0000559ec2cde469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.index(of:\
    \ char) {\n            encoded.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n        } else if let index = alphabet.index(of: char.lowercased()) {\n\
    \            encoded.append(alphabet[alphabet.index(index, offsetBy: 2)].uppercased())\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp96irkdw5.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmp96irkdw5.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmp96irkdw5.swift:15:55:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: char.lowercased())\
    \ {\n                                                      ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        let charString = String(char)\n        if charString.lowercaseString\
    \ == charString {\n            encodedMessage += charString.uppercaseString\n\
    \        } else {\n            encodedMessage += charString.lowercaseString\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpbxg5t5zz.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpbxg5t5zz.swift:12:23:\
    \ error: value of type 'String' has no member 'lowercaseString'\n        if charString.lowercaseString\
    \ == charString {\n           ~~~~~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpbxg5t5zz.swift:13:42:\
    \ error: value of type 'String' has no member 'uppercaseString'\n            encodedMessage\
    \ += charString.uppercaseString\n                              ~~~~~~~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmpbxg5t5zz.swift:15:42: error: value of type 'String' has no member 'lowercaseString'\n\
    \            encodedMessage += charString.lowercaseString\n                  \
    \            ~~~~~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.index(of:\
    \ char) {\n            let newIndex = alphabet.index(index, offsetBy: 2)\n   \
    \         encoded.append(alphabet[newIndex])\n        } else if let index = alphabet.index(of:\
    \ char.lowercased()) {\n            let newIndex = alphabet.index(index, offsetBy:\
    \ 2)\n            encoded.append(alphabet[newIndex].uppercased())\n        } else\
    \ {\n            encoded.append(char)\n        }\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpd3q5djvh.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmpd3q5djvh.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmpd3q5djvh.swift:16:55:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: char.lowercased())\
    \ {\n                                                      ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for character in message.characters\
    \ {\n        if character.isUppercase {\n            encodedMessage.append(character.lowercase)\n\
    \        } else {\n            encodedMessage.append(character.uppercase)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp06vj3sgv.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in message.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp06vj3sgv.swift:12:45: error: value of type 'Character' has no member\
    \ 'lowercase'\n            encodedMessage.append(character.lowercase)\n      \
    \                            ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmp06vj3sgv.swift:14:45:\
    \ error: value of type 'Character' has no member 'uppercase'\n            encodedMessage.append(character.uppercase)\n\
    \                                  ~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if let index = alphabet.index(of: char.lowercased()) {\n\
    \            let newIndex = alphabet.index(index, offsetBy: 2)\n            let\
    \ newChar = alphabet[newIndex]\n            if vowels.contains(newChar) {\n  \
    \              encodedMessage += newChar.uppercased()\n            } else {\n\
    \                encodedMessage += newChar\n            }\n        } else {\n\
    \            encodedMessage += String(char)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpa3vz8qqs.swift:13:48: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.index(of: char.lowercased()) {\n                          \
    \                     ^\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.index(of:\
    \ char) {\n            let newIndex = alphabet.index(index, offsetBy: 2)\n   \
    \         encoded.append(alphabet[newIndex])\n        } else if let index = alphabet.index(of:\
    \ char.lowercased()) {\n            let newIndex = alphabet.index(index, offsetBy:\
    \ 2)\n            encoded.append(alphabet[newIndex].uppercased())\n        } else\
    \ {\n            encoded.append(char)\n        }\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpd3q5djvh.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmpd3q5djvh.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmpd3q5djvh.swift:16:55:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: char.lowercased())\
    \ {\n                                                      ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for letter in message {\n        if let index\
    \ = alphabet.index(of: letter) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else if let index = alphabet.index(of: letter.lowercased()) {\n         \
    \   let newIndex = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpfrw9g73z.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: letter) {\n\
    \                                ^\n/tmp/tmpfrw9g73z.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: letter) {\n             \
    \                   ^~~~~\n                                firstIndex\n/tmp/tmpfrw9g73z.swift:16:57:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: letter.lowercased())\
    \ {\n                                                        ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isUppercase {\n            encodedMessage.append(char.lowercased())\n\
    \        } else {\n            encodedMessage.append(char.uppercased())\n    \
    \    }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpqqmc5jdf.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for character in message {\n        if let\
    \ index = alphabet.index(of: character) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else if let index = alphabet.index(of: character.lowercased()) {\n      \
    \      let newIndex = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \        } else {\n            encodedMessage.append(character)\n        }\n \
    \   }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpuswirkve.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: character) {\n\
    \                                ^\n/tmp/tmpuswirkve.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: character) {\n          \
    \                      ^~~~~\n                                firstIndex\n/tmp/tmpuswirkve.swift:16:60:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: character.lowercased())\
    \ {\n                                                           ^\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for character in message {\n        if let\
    \ index = alphabet.firstIndex(of: character) {\n            encodedMessage +=\
    \ String(alphabet[alphabet.index(index, offsetBy: 2)])\n        } else if let\
    \ index = alphabet.firstIndex(of: character.lowercased()) {\n            encodedMessage\
    \ += String(alphabet[alphabet.index(index, offsetBy: 2)]).uppercased()\n     \
    \   } else {\n            encodedMessage += String(character)\n        }\n   \
    \ }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpcymcltyn.swift:15:65: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        } else\
    \ if let index = alphabet.firstIndex(of: character.lowercased()) {\n         \
    \                                                       ^\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isUppercase {\n            encodedMessage.append(char.lowercase)\n\
    \        } else {\n            encodedMessage.append(char.uppercase)\n       \
    \ }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpeib8lfku.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpeib8lfku.swift:12:40:\
    \ error: value of type 'Character' has no member 'lowercase'\n            encodedMessage.append(char.lowercase)\n\
    \                                  ~~~~ ^~~~~~~~~\n/tmp/tmpeib8lfku.swift:14:40:\
    \ error: value of type 'Character' has no member 'uppercase'\n            encodedMessage.append(char.uppercase)\n\
    \                                  ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.firstIndex(of: char) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else if let index = alphabet.firstIndex(of: char.lowercased()) {\n      \
    \      let newIndex = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmph5ki0pkf.swift:16:60: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        } else\
    \ if let index = alphabet.firstIndex(of: char.lowercased()) {\n              \
    \                                             ^\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for character in message.characters\
    \ {\n        if character.isLetter {\n            var asciiValue = character.asciiValue\n\
    \            if asciiValue! >= 65 && asciiValue! <= 90 {\n                asciiValue\
    \ = asciiValue! + 32\n            } else if asciiValue! >= 97 && asciiValue! <=\
    \ 122 {\n                asciiValue = asciiValue! - 32\n            }\n      \
    \      switch asciiValue! {\n            case 97:\n                encodedMessage.append(\"\
    c\")\n            case 101:\n                encodedMessage.append(\"f\")\n  \
    \          case 105:\n                encodedMessage.append(\"i\")\n         \
    \   case 111:\n                encodedMessage.append(\"l\")\n            case\
    \ 117:\n                encodedMessage.append(\"o\")\n            default:\n \
    \               encodedMessage.append(Character(UnicodeScalar(asciiValue!)))\n\
    \            }\n        } else {\n            encodedMessage.append(character)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpemfirfei.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in message.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isUppercase {\n            encodedMessage.append(char.lowercased())\n\
    \        } else {\n            encodedMessage.append(char.uppercased())\n    \
    \    }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpqqmc5jdf.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.firstIndex(of: char) {\n            encodedMessage += alphabet[alphabet.index(index,\
    \ offsetBy: 2)]\n        } else if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            encodedMessage += alphabet[alphabet.index(index, offsetBy: 2)].uppercased()\n\
    \        } else {\n            encodedMessage += String(char)\n        }\n   \
    \ }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpabqk7vhk.swift:14:39: error: subscript 'subscript(_:)' requires\
    \ that 'String.Index' conform to 'RangeExpression'\n            encodedMessage\
    \ += alphabet[alphabet.index(index, offsetBy: 2)]\n                          \
    \            ^\nSwift.Collection:2:23: note: where 'R' = 'String.Index'\n    @inlinable\
    \ public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression, Self.Index\
    \ == R.Bound { get }\n                      ^\n/tmp/tmpabqk7vhk.swift:15:60: error:\
    \ cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n                                                           ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    let vowels: [Character] = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    for char in message {\n        if vowels.contains(char) {\n\
    \            let index = alphabet.firstIndex(of: char)!\n            encodedMessage.append(alphabet[(index\
    \ + 2) % alphabet.count])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpnswzpan2/tmpnswzpan2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8c11f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8c0ee7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8c0ee7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8c0ee67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnswzpan2                        0x000055fadd6ac877 <unavailable> + 6263

    5    libc.so.6                          0x00002ac8c13dc460 __libc_start_main +
    245

    6    tmpnswzpan2                        0x000055fadd6ac4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isLetter {\n            let ascii = char.asciiValue!\n  \
    \          let newAscii = ascii + (ascii < 97 ? 2 : -2)\n            let newChar\
    \ = Character(UnicodeScalar(newAscii))\n            encodedMessage.append(newChar)\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpitq4n300.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    let vowels: [Character] = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    for char in message {\n        if vowels.contains(char) {\n\
    \            let index = alphabet.firstIndex(of: char)!\n            encodedMessage.append(alphabet[(index\
    \ + 2) % alphabet.count])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpnswzpan2/tmpnswzpan2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8c11f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8c0ee7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8c0ee7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8c0ee67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnswzpan2                        0x000055fadd6ac877 <unavailable> + 6263

    5    libc.so.6                          0x00002ac8c13dc460 __libc_start_main +
    245

    6    tmpnswzpan2                        0x000055fadd6ac4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isLetter {\n            let ascii = char.asciiValue!\n  \
    \          let newAscii = ascii + (ascii < 97 ? 2 : -2)\n            let newChar\
    \ = Character(UnicodeScalar(newAscii))\n            encodedMessage.append(newChar)\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpitq4n300.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for letter in message {\n        if let index\
    \ = alphabet.index(of: letter) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else if let index = alphabet.index(of: letter.lowercased()) {\n         \
    \   let newIndex = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpfrw9g73z.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: letter) {\n\
    \                                ^\n/tmp/tmpfrw9g73z.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: letter) {\n             \
    \                   ^~~~~\n                                firstIndex\n/tmp/tmpfrw9g73z.swift:16:57:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: letter.lowercased())\
    \ {\n                                                        ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.index(of: char) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else if let index = alphabet.index(of: char.lowercased()) {\n           \
    \ let newIndex = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmphl50z5q8.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmphl50z5q8.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmphl50z5q8.swift:16:55:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: char.lowercased())\
    \ {\n                                                      ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for letter in message {\n  \
    \      if letter.isLetter {\n            if letter.isUppercase {\n           \
    \     encodedMessage.append(letter.lowercased())\n            } else {\n     \
    \           encodedMessage.append(letter.uppercased())\n            }\n      \
    \  } else {\n            encodedMessage.append(letter)\n        }\n    }\n   \
    \ return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp7_3w17b2/tmp7_3w17b2.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2ff572c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2ff269b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2ff269988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2ff2687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_3w17b2                        0x000055fd8280e5c7 <unavailable> + 5575

    5    libc.so.6                          0x00002ab2ff75e460 __libc_start_main +
    245

    6    tmp7_3w17b2                        0x000055fd8280e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.index(of:\
    \ char) {\n            let newIndex = alphabet.index(index, offsetBy: 2)\n   \
    \         encoded.append(alphabet[newIndex])\n        } else if let index = alphabet.index(of:\
    \ char.lowercased()) {\n            let newIndex = alphabet.index(index, offsetBy:\
    \ 2)\n            encoded.append(alphabet[newIndex].uppercased())\n        } else\
    \ {\n            encoded.append(char)\n        }\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpd3q5djvh.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmpd3q5djvh.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmpd3q5djvh.swift:16:55:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: char.lowercased())\
    \ {\n                                                      ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    let alphabetUpper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)\n            let newIndex =\
    \ alphabet.index(index!, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else if alphabetUpper.contains(char) {\n            let index = alphabetUpper.firstIndex(of:\
    \ char)\n            let newIndex = alphabetUpper.index(index!, offsetBy: 2)\n\
    \            encodedMessage.append(alphabetUpper[newIndex])\n        } else {\n\
    \            encodedMessage.append(char)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpxgbeuuml/tmpxgbeuuml.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31a6fd3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31a6ccab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31a6cca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31a6cc97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxgbeuuml                        0x000055c806ab8727 <unavailable> + 5927

    5    libc.so.6                          0x00002b31a71bf460 __libc_start_main +
    245

    6    tmpxgbeuuml                        0x000055c806ab8369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)!\n            let newIndex\
    \ = index + 2\n            encodedMessage.append(alphabet[newIndex])\n       \
    \ } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmps4r_zp35/tmps4r_zp35.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72b443fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72b4136b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72b4136988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72b41357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps4r_zp35                        0x0000562737a698b7 <unavailable> + 6327

    5    libc.so.6                          0x00002b72b462b460 __libc_start_main +
    245

    6    tmps4r_zp35                        0x0000562737a694f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.index(of: char) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else if let index = alphabet.index(of: char.lowercased()) {\n           \
    \ let newIndex = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmphl50z5q8.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmphl50z5q8.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmphl50z5q8.swift:16:55:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: char.lowercased())\
    \ {\n                                                      ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encoded = \"\"\n    let vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    for char in message.characters {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            let index = vowels.index(of: String(char).lowercased())\n   \
    \         encoded += String(vowels[(index! + 2) % 5]).uppercased()\n        }\
    \ else {\n            encoded += String(char).uppercased()\n        }\n    }\n\
    \    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpuf8qp88u.swift:11:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpuf8qp88u.swift:13:32:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        \
    \    let index = vowels.index(of: String(char).lowercased())\n               \
    \                ^\n/tmp/tmpuf8qp88u.swift:13:32: note: use 'firstIndex(of:)'\
    \ instead\n            let index = vowels.index(of: String(char).lowercased())\n\
    \                               ^~~~~\n                               firstIndex\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    let vowels = \"aeiou\"\n   \
    \ let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message {\n \
    \       if let index = alphabet.index(of: char) {\n            if let vowelIndex\
    \ = vowels.index(of: char) {\n                encodedMessage.append(vowels[vowels.index(vowelIndex,\
    \ offsetBy: 2)])\n            } else {\n                encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 1)])\n            }\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpk95fjgj2/tmpk95fjgj2.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aace461dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aace4314b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aace4314988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aace43137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk95fjgj2                        0x0000556371eec5e7 <unavailable> + 5607

    5    libc.so.6                          0x00002aace4809460 __libc_start_main +
    245

    6    tmpk95fjgj2                        0x0000556371eec229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659978530
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        if let index = alphabet.firstIndex(of: char) {\n                encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n            }\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpg7i25mfv/tmpg7i25mfv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac797fd1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac797cc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac797cc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac797cc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg7i25mfv                        0x000055762c4818b7 <unavailable> + 6327

    5    libc.so.6                          0x00002ac7981bd460 __libc_start_main +
    245

    6    tmpg7i25mfv                        0x000055762c4814f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1659978530
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    let alphabetUpper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if vowels.contains(letter) {\n\
    \            if let index = alphabet.firstIndex(of: letter) {\n              \
    \  let newIndex = alphabet.index(index, offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex])\n\
    \            } else if let index = alphabetUpper.firstIndex(of: letter) {\n  \
    \              let newIndex = alphabetUpper.index(index, offsetBy: 2)\n      \
    \          encodedMessage.append(alphabetUpper[newIndex])\n            }\n   \
    \     } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpa6whgs23/tmpa6whgs23.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca68380c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca68077b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca68077988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca680767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa6whgs23                        0x000055e0814d6697 <unavailable> + 5783

    5    libc.so.6                          0x00002aca6856c460 __libc_start_main +
    245

    6    tmpa6whgs23                        0x000055e0814d62d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isUppercase {\n            encodedMessage.append(char.lowercase)\n\
    \        } else {\n            encodedMessage.append(char.uppercase)\n       \
    \ }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpeib8lfku.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpeib8lfku.swift:12:40:\
    \ error: value of type 'Character' has no member 'lowercase'\n            encodedMessage.append(char.lowercase)\n\
    \                                  ~~~~ ^~~~~~~~~\n/tmp/tmpeib8lfku.swift:14:40:\
    \ error: value of type 'Character' has no member 'uppercase'\n            encodedMessage.append(char.uppercase)\n\
    \                                  ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char) {\n            if let vowelIndex = vowels.firstIndex(of: char) {\n   \
    \             let newIndex = alphabet.index(vowelIndex, offsetBy: 2)\n       \
    \         encoded.append(alphabet[newIndex])\n            } else {\n         \
    \       encoded.append(alphabet[index])\n            }\n        } else {\n   \
    \         encoded.append(char)\n        }\n    }\n    return encoded\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp_xek01dg/tmp_xek01dg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6deadeec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6deaae5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6deaae5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6deaae47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_xek01dg                        0x000055c0a462f5f7 <unavailable> + 5623

    5    libc.so.6                          0x00002b6deafda460 __libc_start_main +
    245

    6    tmp_xek01dg                        0x000055c0a462f239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for character in message.characters\
    \ {\n        if character.isUppercase {\n            encodedMessage.append(character.lowercase)\n\
    \        } else {\n            encodedMessage.append(character.uppercase)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp06vj3sgv.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in message.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp06vj3sgv.swift:12:45: error: value of type 'Character' has no member\
    \ 'lowercase'\n            encodedMessage.append(character.lowercase)\n      \
    \                            ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmp06vj3sgv.swift:14:45:\
    \ error: value of type 'Character' has no member 'uppercase'\n            encodedMessage.append(character.uppercase)\n\
    \                                  ~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isLetter {\n            let ascii = char.asciiValue!\n  \
    \          if ascii >= 65 && ascii <= 90 {\n                encodedMessage.append(Character(UnicodeScalar(ascii\
    \ + 32)))\n            } else if ascii >= 97 && ascii <= 122 {\n             \
    \   encodedMessage.append(Character(UnicodeScalar(ascii - 32)))\n            }\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp4bhsh72o.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        let ascii = char.unicodeScalars.first!.value\n        if ascii >=\
    \ 65 && ascii <= 90 {\n            encodedMessage.append(Character(UnicodeScalar(ascii\
    \ + 32)!))\n        } else if ascii >= 97 && ascii <= 122 {\n            encodedMessage.append(Character(UnicodeScalar(ascii\
    \ - 32)!))\n        } else {\n            encodedMessage.append(char)\n      \
    \  }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp5d6ikbuu.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.index(of:\
    \ char) {\n            let newIndex = alphabet.index(index, offsetBy: 2)\n   \
    \         encoded.append(alphabet[newIndex])\n        } else if let index = alphabet.index(of:\
    \ char.lowercased()) {\n            let newIndex = alphabet.index(index, offsetBy:\
    \ 2)\n            encoded.append(alphabet[newIndex].uppercased())\n        } else\
    \ {\n            encoded.append(char)\n        }\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpd3q5djvh.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmpd3q5djvh.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmpd3q5djvh.swift:16:55:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: char.lowercased())\
    \ {\n                                                      ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message.lowercased() {\n        if let\
    \ index = letters.index(of: char) {\n            if let vowelIndex = vowels.index(of:\
    \ char) {\n                let newIndex = letters.index(vowelIndex, offsetBy:\
    \ 2)\n                encoded.append(letters[newIndex])\n            } else {\n\
    \                encoded.append(char)\n            }\n        } else {\n     \
    \       encoded.append(char)\n        }\n    }\n    return encoded\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmptbfyrg73/tmptbfyrg73.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3162c73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b316296ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b316296a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31629697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptbfyrg73                        0x0000564545458647 <unavailable> + 5703

    5    libc.so.6                          0x00002b3162e5f460 __libc_start_main +
    245

    6    tmptbfyrg73                        0x0000564545458289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659978530
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.firstIndex(of: char)\n            let newIndex\
    \ = alphabet.index(index!, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpv3jxfitt/tmpv3jxfitt.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b083df90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b083dc87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b083dc87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b083dc867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv3jxfitt                        0x0000563390a47727 <unavailable> + 5927

    5    libc.so.6                          0x00002b083e17c460 __libc_start_main +
    245

    6    tmpv3jxfitt                        0x0000563390a47369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let vowelsWithOffset = \"cfilorux\"\
    \n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    let lettersWithOffset\
    \ = \"cdefghijklmnopqrstuvwxyzab\"\n    var encodedMessage = \"\"\n    for letter\
    \ in message {\n        if let index = vowels.index(of: letter) {\n          \
    \  encodedMessage.append(vowelsWithOffset[index])\n        } else if let index\
    \ = letters.index(of: letter) {\n            encodedMessage.append(lettersWithOffset[index])\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp3o31n042/tmp3o31n042.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bd7442c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bd7139b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bd7139988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bd71387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3o31n042                        0x0000561c20d5a587 <unavailable> + 5511

    5    libc.so.6                          0x00002b0bd762e460 __libc_start_main +
    245

    6    tmp3o31n042                        0x0000561c20d5a1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1659978530
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for letter in message {\n  \
    \      switch letter {\n        case \"a\":\n            encodedMessage += \"\
    c\"\n        case \"A\":\n            encodedMessage += \"C\"\n        case \"\
    e\":\n            encodedMessage += \"g\"\n        case \"E\":\n            encodedMessage\
    \ += \"G\"\n        case \"i\":\n            encodedMessage += \"k\"\n       \
    \ case \"I\":\n            encodedMessage += \"K\"\n        case \"o\":\n    \
    \        encodedMessage += \"q\"\n        case \"O\":\n            encodedMessage\
    \ += \"Q\"\n        case \"u\":\n            encodedMessage += \"y\"\n       \
    \ case \"U\":\n            encodedMessage += \"Y\"\n        default:\n       \
    \     encodedMessage += String(letter).lowercased() == String(letter) ? String(letter).uppercased()\
    \ : String(letter).lowercased()\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp9zn22syr/tmp9zn22syr.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3918d83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3918a7ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3918a7a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3918a797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9zn22syr                        0x00005610ad261607 <unavailable> + 5639

    5    libc.so.6                          0x00002b3918f6f460 __libc_start_main +
    245

    6    tmp9zn22syr                        0x00005610ad261249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isUppercase {\n            encodedMessage.append(char.lowercased())\n\
    \        } else {\n            encodedMessage.append(char.uppercased())\n    \
    \    }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpqqmc5jdf.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.firstIndex(of: char)!\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpyh0svvba/tmpyh0svvba.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b612a185c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6129e7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6129e7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6129e7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyh0svvba                        0x000056284c2b3727 <unavailable> + 5927

    5    libc.so.6                          0x00002b612a371460 __libc_start_main +
    245

    6    tmpyh0svvba                        0x000056284c2b3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isUppercase {\n            encodedMessage.append(char.lowercase)\n\
    \        } else {\n            encodedMessage.append(char.uppercase)\n       \
    \ }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpeib8lfku.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpeib8lfku.swift:12:40:\
    \ error: value of type 'Character' has no member 'lowercase'\n            encodedMessage.append(char.lowercase)\n\
    \                                  ~~~~ ^~~~~~~~~\n/tmp/tmpeib8lfku.swift:14:40:\
    \ error: value of type 'Character' has no member 'uppercase'\n            encodedMessage.append(char.uppercase)\n\
    \                                  ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.index(of:\
    \ char) {\n            encoded.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n        } else if let index = alphabet.index(of: char.lowercased()) {\n\
    \            encoded.append(alphabet[alphabet.index(index, offsetBy: 2)].uppercased())\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp96irkdw5.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmp96irkdw5.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmp96irkdw5.swift:15:55:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: char.lowercased())\
    \ {\n                                                      ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.firstIndex(of: char)!\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpyh0svvba/tmpyh0svvba.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b612a185c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6129e7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6129e7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6129e7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyh0svvba                        0x000056284c2b3727 <unavailable> + 5927

    5    libc.so.6                          0x00002b612a371460 __libc_start_main +
    245

    6    tmpyh0svvba                        0x000056284c2b3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isUppercase {\n            encodedMessage.append(char.lowercase)\n\
    \        } else {\n            encodedMessage.append(char.uppercase)\n       \
    \ }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpeib8lfku.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpeib8lfku.swift:12:40:\
    \ error: value of type 'Character' has no member 'lowercase'\n            encodedMessage.append(char.lowercase)\n\
    \                                  ~~~~ ^~~~~~~~~\n/tmp/tmpeib8lfku.swift:14:40:\
    \ error: value of type 'Character' has no member 'uppercase'\n            encodedMessage.append(char.uppercase)\n\
    \                                  ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encoded = \"\"\n    for char in message.characters {\n\
    \        let ascii = char.unicodeScalars.first!.value\n        if ascii >= 65\
    \ && ascii <= 90 {\n            encoded.append(Character(UnicodeScalar(ascii +\
    \ 32)!))\n        } else if ascii >= 97 && ascii <= 122 {\n            encoded.append(Character(UnicodeScalar(ascii\
    \ - 32)!))\n        } else {\n            encoded.append(char)\n        }\n  \
    \  }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpamrp3pgl.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    let vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  \
    \  for char in message {\n        if let index = alphabet.index(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                let\
    \ newIndex = alphabet.index(index, offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex])\n\
    \            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpniroyziv.swift:13:48: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.index(of: char.lowercased()) {\n                          \
    \                     ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\",\
    \ \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)!\n            let newIndex\
    \ = (index + 2) % alphabet.count\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmprnhf9ax1/tmprnhf9ax1.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e1a20ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e19f05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e19f05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e19f047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprnhf9ax1                        0x000055a6fcb77877 <unavailable> + 6263

    5    libc.so.6                          0x00002b1e1a3fa460 __libc_start_main +
    245

    6    tmprnhf9ax1                        0x000055a6fcb774b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.index(of:\
    \ char) {\n            let newIndex = alphabet.index(index, offsetBy: 2)\n   \
    \         encoded.append(alphabet[newIndex])\n        } else if let index = alphabet.index(of:\
    \ char.lowercased()) {\n            let newIndex = alphabet.index(index, offsetBy:\
    \ 2)\n            encoded.append(alphabet[newIndex].uppercased())\n        } else\
    \ {\n            encoded.append(char)\n        }\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpd3q5djvh.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmpd3q5djvh.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmpd3q5djvh.swift:16:55:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: char.lowercased())\
    \ {\n                                                      ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.firstIndex(of: char)\n            let newIndex\
    \ = alphabet.index(index!, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpv3jxfitt/tmpv3jxfitt.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b083df90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b083dc87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b083dc87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b083dc867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv3jxfitt                        0x0000563390a47727 <unavailable> + 5927

    5    libc.so.6                          0x00002b083e17c460 __libc_start_main +
    245

    6    tmpv3jxfitt                        0x0000563390a47369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char) {\n            encoded.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n        } else if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            encoded.append(alphabet[alphabet.index(index, offsetBy: 2)].uppercased())\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpd64f3kjx.swift:15:60: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        } else\
    \ if let index = alphabet.firstIndex(of: char.lowercased()) {\n              \
    \                                             ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.index(of: char) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else if let index = alphabet.index(of: char.lowercased()) {\n           \
    \ let newIndex = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmphl50z5q8.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmphl50z5q8.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmphl50z5q8.swift:16:55:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: char.lowercased())\
    \ {\n                                                      ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char) {\n            encoded.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n        } else if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            encoded.append(alphabet[alphabet.index(index, offsetBy: 2)].uppercased())\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpd64f3kjx.swift:15:60: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        } else\
    \ if let index = alphabet.firstIndex(of: char.lowercased()) {\n              \
    \                                             ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for letter\
    \ in message {\n        if let index = alphabet.index(of: letter.lowercased())\
    \ {\n            if vowels.contains(letter.lowercased()) {\n                let\
    \ newIndex = alphabet.index(index, offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex])\n\
    \            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpb7kjm967.swift:13:50: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.index(of: letter.lowercased()) {\n                        \
    \                         ^\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for letter in message {\n        if let index\
    \ = alphabet.index(of: letter) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else if let index = alphabet.index(of: letter.lowercased()) {\n         \
    \   let newIndex = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpfrw9g73z.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: letter) {\n\
    \                                ^\n/tmp/tmpfrw9g73z.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: letter) {\n             \
    \                   ^~~~~\n                                firstIndex\n/tmp/tmpfrw9g73z.swift:16:57:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: letter.lowercased())\
    \ {\n                                                        ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message.lowercased() {\n        if vowels.contains(char)\
    \ {\n            let index = vowels.index(of: char)!\n            let newIndex\
    \ = (index + 2) % vowels.count\n            encoded.append(vowels[newIndex])\n\
    \        } else if letters.contains(char) {\n            let index = letters.index(of:\
    \ char)!\n            let newIndex = (index + 2) % letters.count\n           \
    \ encoded.append(letters[newIndex])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpl1rzm1c5.swift:14:32: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n            let index = vowels.index(of: char)!\n    \
    \                           ^\n/tmp/tmpl1rzm1c5.swift:14:32: note: use 'firstIndex(of:)'\
    \ instead\n            let index = vowels.index(of: char)!\n                 \
    \              ^~~~~\n                               firstIndex\n/tmp/tmpl1rzm1c5.swift:15:29:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            let newIndex = (index + 2) % vowels.count\n             \
    \               ^\n/tmp/tmpl1rzm1c5.swift:18:33: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n            let index = letters.index(of: char)!\n\
    \                                ^\n/tmp/tmpl1rzm1c5.swift:18:33: note: use 'firstIndex(of:)'\
    \ instead\n            let index = letters.index(of: char)!\n                \
    \                ^~~~~\n                                firstIndex\n/tmp/tmpl1rzm1c5.swift:19:29:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            let newIndex = (index + 2) % letters.count\n            \
    \                ^\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.firstIndex(of: char)\n            let newIndex\
    \ = alphabet.index(index!, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpv3jxfitt/tmpv3jxfitt.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b083df90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b083dc87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b083dc87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b083dc867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv3jxfitt                        0x0000563390a47727 <unavailable> + 5927

    5    libc.so.6                          0x00002b083e17c460 __libc_start_main +
    245

    6    tmpv3jxfitt                        0x0000563390a47369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encoded\
    \ = \"\"\n    for char in message.characters {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            let index = vowels.index(of: String(char).lowercased())\n   \
    \         if index! + 2 > 4 {\n                encoded += vowels[index! + 2 -\
    \ 5]\n            } else {\n                encoded += vowels[index! + 2]\n  \
    \          }\n        } else {\n            encoded += String(char)\n        }\n\
    \    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmprtygtxuz.swift:11:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmprtygtxuz.swift:13:32:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        \
    \    let index = vowels.index(of: String(char).lowercased())\n               \
    \                ^\n/tmp/tmprtygtxuz.swift:13:32: note: use 'firstIndex(of:)'\
    \ instead\n            let index = vowels.index(of: String(char).lowercased())\n\
    \                               ^~~~~\n                               firstIndex\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for letter in message {\n        if let index\
    \ = alphabet.index(of: letter) {\n            if let vowelIndex = vowels.index(of:\
    \ letter) {\n                let newVowelIndex = (vowelIndex + 2) % 5\n      \
    \          encodedMessage.append(vowels[vowels.index(vowels.startIndex, offsetBy:\
    \ newVowelIndex)])\n            } else {\n                let newIndex = (index\
    \ + 2) % 26\n                encodedMessage.append(alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: newIndex)])\n            }\n        } else {\n            encodedMessage.append(letter)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpx55ezws9.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: letter) {\n\
    \                                ^\n/tmp/tmpx55ezws9.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: letter) {\n             \
    \                   ^~~~~\n                                firstIndex\n/tmp/tmpx55ezws9.swift:14:40:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        \
    \    if let vowelIndex = vowels.index(of: letter) {\n                        \
    \               ^\n/tmp/tmpx55ezws9.swift:14:40: note: use 'firstIndex(of:)' instead\n\
    \            if let vowelIndex = vowels.index(of: letter) {\n                \
    \                       ^~~~~\n                                       firstIndex\n\
    /tmp/tmpx55ezws9.swift:15:38: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n                let newVowelIndex = (vowelIndex\
    \ + 2) % 5\n                                     ^\n/tmp/tmpx55ezws9.swift:18:33:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n                let newIndex = (index + 2) % 26\n                   \
    \             ^\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.index(of:\
    \ char) {\n            let newIndex = alphabet.index(index, offsetBy: 2)\n   \
    \         encoded.append(alphabet[newIndex])\n        } else if let index = alphabet.index(of:\
    \ char.lowercased()) {\n            let newIndex = alphabet.index(index, offsetBy:\
    \ 2)\n            encoded.append(alphabet[newIndex].uppercased())\n        } else\
    \ {\n            encoded.append(char)\n        }\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpd3q5djvh.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmpd3q5djvh.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmpd3q5djvh.swift:16:55:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: char.lowercased())\
    \ {\n                                                      ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\",\
    \ \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)!\n            encodedMessage.append(alphabet[(index\
    \ + 2) % alphabet.count])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpduhtj_ul/tmpduhtj_ul.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba55600fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba555d06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba555d06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba555d057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpduhtj_ul                        0x000055ca928f3877 <unavailable> + 6263

    5    libc.so.6                          0x00002ba5561fb460 __libc_start_main +
    245

    6    tmpduhtj_ul                        0x000055ca928f34b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.index(of: char) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else if let index = alphabet.index(of: char.lowercased()) {\n           \
    \ let newIndex = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmphl50z5q8.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmphl50z5q8.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmphl50z5q8.swift:16:55:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: char.lowercased())\
    \ {\n                                                      ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.index(of:\
    \ char) {\n            let newIndex = alphabet.index(index, offsetBy: 2)\n   \
    \         encoded.append(alphabet[newIndex])\n        } else if let index = alphabet.index(of:\
    \ char.lowercased()) {\n            let newIndex = alphabet.index(index, offsetBy:\
    \ 2)\n            encoded.append(alphabet[newIndex].uppercased())\n        } else\
    \ {\n            encoded.append(char)\n        }\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpd3q5djvh.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmpd3q5djvh.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmpd3q5djvh.swift:16:55:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: char.lowercased())\
    \ {\n                                                      ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.firstIndex(of: char)\n            let newIndex\
    \ = alphabet.index(index!, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpv3jxfitt/tmpv3jxfitt.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b083df90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b083dc87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b083dc87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b083dc867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv3jxfitt                        0x0000563390a47727 <unavailable> + 5927

    5    libc.so.6                          0x00002b083e17c460 __libc_start_main +
    245

    6    tmpv3jxfitt                        0x0000563390a47369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encoded = \"\"\n    for char in message.characters {\n\
    \        if char.isVowel {\n            encoded.append(char.next.next)\n     \
    \   } else if char.isUppercase {\n            encoded.append(char.lowercase)\n\
    \        } else {\n            encoded.append(char.uppercase)\n        }\n   \
    \ }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpwbhvzjme.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpwbhvzjme.swift:11:17:\
    \ error: value of type 'Character' has no member 'isVowel'\n        if char.isVowel\
    \ {\n           ~~~~ ^~~~~~~\n/tmp/tmpwbhvzjme.swift:12:33: error: value of type\
    \ 'Character' has no member 'next'\n            encoded.append(char.next.next)\n\
    \                           ~~~~ ^~~~\n/tmp/tmpwbhvzjme.swift:14:33: error: value\
    \ of type 'Character' has no member 'lowercase'\n            encoded.append(char.lowercase)\n\
    \                           ~~~~ ^~~~~~~~~\n/tmp/tmpwbhvzjme.swift:16:33: error:\
    \ value of type 'Character' has no member 'uppercase'\n            encoded.append(char.uppercase)\n\
    \                           ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    let vowels = \"aeiou\"\n   \
    \ let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in message {\n\
    \        if let index = letters.index(of: letter) {\n            let newIndex\
    \ = index + 2\n            if newIndex < letters.count {\n                encodedMessage.append(letters[newIndex])\n\
    \            } else {\n                encodedMessage.append(letters[newIndex\
    \ - letters.count])\n            }\n        } else if let index = vowels.index(of:\
    \ letter) {\n            let newIndex = index + 2\n            if newIndex < vowels.count\
    \ {\n                encodedMessage.append(vowels[newIndex])\n            } else\
    \ {\n                encodedMessage.append(vowels[newIndex - vowels.count])\n\
    \            }\n        } else {\n            encodedMessage.append(letter)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmphudo4zl0.swift:13:32: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = letters.index(of: letter) {\n \
    \                              ^\n/tmp/tmphudo4zl0.swift:13:32: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = letters.index(of: letter) {\n              \
    \                 ^~~~~\n                               firstIndex\n/tmp/tmphudo4zl0.swift:14:28:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            let newIndex = index + 2\n                           ^\n\
    /tmp/tmphudo4zl0.swift:20:38: warning: 'index(of:)' is deprecated: renamed to\
    \ 'firstIndex(of:)'\n        } else if let index = vowels.index(of: letter) {\n\
    \                                     ^\n/tmp/tmphudo4zl0.swift:20:38: note: use\
    \ 'firstIndex(of:)' instead\n        } else if let index = vowels.index(of: letter)\
    \ {\n                                     ^~~~~\n                            \
    \         firstIndex\n/tmp/tmphudo4zl0.swift:21:28: error: cannot convert value\
    \ of type 'String.Index' to expected argument type 'Int'\n            let newIndex\
    \ = index + 2\n                           ^\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for character in message.characters\
    \ {\n        if character.isVowel() {\n            encodedMessage.append(character.next().next())\n\
    \        } else {\n            encodedMessage.append(character)\n        }\n \
    \   }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplvjx8ibm.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in message.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmplvjx8ibm.swift:11:22: error: value of type 'Character' has no member\
    \ 'isVowel'\n        if character.isVowel() {\n           ~~~~~~~~~ ^~~~~~~\n\
    /tmp/tmplvjx8ibm.swift:12:45: error: value of type 'Character' has no member 'next'\n\
    \            encodedMessage.append(character.next().next())\n                \
    \                  ~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.firstIndex(of: char)\n            let newIndex\
    \ = alphabet.index(index!, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpv3jxfitt/tmpv3jxfitt.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b083df90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b083dc87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b083dc87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b083dc867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv3jxfitt                        0x0000563390a47727 <unavailable> + 5927

    5    libc.so.6                          0x00002b083e17c460 __libc_start_main +
    245

    6    tmpv3jxfitt                        0x0000563390a47369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.index(of:\
    \ char) {\n            encoded.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n        } else if let index = alphabet.index(of: char.lowercased()) {\n\
    \            encoded.append(alphabet[alphabet.index(index, offsetBy: 2)].uppercased())\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp96irkdw5.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmp96irkdw5.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmp96irkdw5.swift:15:55:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: char.lowercased())\
    \ {\n                                                      ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isLetter {\n            if char.isUppercase {\n         \
    \       encodedMessage.append(char.lowercased())\n            } else {\n     \
    \           encodedMessage.append(char.uppercased())\n            }\n        }\
    \ else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpypamfnt0.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isLetter {\n            let ascii = char.asciiValue!\n  \
    \          let isUpper = ascii >= 65 && ascii <= 90\n            let isLower =\
    \ ascii >= 97 && ascii <= 122\n            if isUpper {\n                encodedMessage.append(Character(UnicodeScalar(ascii\
    \ + 32)!))\n            } else if isLower {\n                encodedMessage.append(Character(UnicodeScalar(ascii\
    \ - 32)!))\n            }\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpaozqsg_l.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpaozqsg_l.swift:16:74:\
    \ error: cannot force unwrap value of non-optional type 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \                encodedMessage.append(Character(UnicodeScalar(ascii + 32)!))\n\
    \                                                ~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                         \n/tmp/tmpaozqsg_l.swift:18:74:\
    \ error: cannot force unwrap value of non-optional type 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \                encodedMessage.append(Character(UnicodeScalar(ascii - 32)!))\n\
    \                                                ~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                         \n"
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isUppercase {\n            encodedMessage.append(char.lowercase)\n\
    \        } else {\n            encodedMessage.append(char.uppercase)\n       \
    \ }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpeib8lfku.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpeib8lfku.swift:12:40:\
    \ error: value of type 'Character' has no member 'lowercase'\n            encodedMessage.append(char.lowercase)\n\
    \                                  ~~~~ ^~~~~~~~~\n/tmp/tmpeib8lfku.swift:14:40:\
    \ error: value of type 'Character' has no member 'uppercase'\n            encodedMessage.append(char.uppercase)\n\
    \                                  ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isLetter {\n            if char.isUppercase {\n         \
    \       encodedMessage.append(char.lowercase)\n            } else {\n        \
    \        encodedMessage.append(char.uppercase)\n            }\n        } else\
    \ {\n            encodedMessage.append(char)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpz4fzonx3.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpz4fzonx3.swift:13:44:\
    \ error: value of type 'Character' has no member 'lowercase'\n               \
    \ encodedMessage.append(char.lowercase)\n                                    \
    \  ~~~~ ^~~~~~~~~\n/tmp/tmpz4fzonx3.swift:15:44: error: value of type 'Character'\
    \ has no member 'uppercase'\n                encodedMessage.append(char.uppercase)\n\
    \                                      ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for letter in message {\n        if let index\
    \ = alphabet.firstIndex(of: letter) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else if let index = alphabet.firstIndex(of: letter.lowercased()) {\n    \
    \        let newIndex = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpx87jhaew.swift:16:62: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        } else\
    \ if let index = alphabet.firstIndex(of: letter.lowercased()) {\n            \
    \                                                 ^\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if vowels.contains(String(letter).lowercased())\
    \ {\n            encodedMessage += String(letter).lowercased() == \"z\" ? \"b\"\
    \ : String(Array(String(letter).lowercased())[1])\n        } else {\n        \
    \    encodedMessage += String(letter).lowercased() == String(letter) ? String(letter).uppercased()\
    \ : String(letter).lowercased()\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b68bb4b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68bb1a8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b68bb1a8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b68bb1a813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b68bb1a7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b68bafa80a3 <unavailable> + 188579

    6    tmp3l45x0io                        0x000055ba1892b100 <unavailable> + 8448

    7    tmp3l45x0io                        0x000055ba1892a766 <unavailable> + 5990

    8    libc.so.6                          0x00002b68bb69d460 __libc_start_main +
    245

    9    tmp3l45x0io                        0x000055ba1892a469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    let vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  \
    \  for letter in message {\n        if let index = alphabet.index(of: letter.lowercased())\
    \ {\n            let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \   let newLetter = alphabet[newIndex]\n            if vowels.contains(newLetter)\
    \ {\n                encodedMessage += newLetter.uppercased()\n            } else\
    \ {\n                encodedMessage += newLetter\n            }\n        } else\
    \ {\n            encodedMessage += String(letter)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpsykj1bqx.swift:13:50: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.index(of: letter.lowercased()) {\n                        \
    \                         ^\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: -2)])\n            }\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp7a6w06y_.swift:13:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for letter in message {\n        if let index =\
    \ alphabet.index(of: letter) {\n            encoded.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n        } else if let index = alphabet.index(of: letter.lowercased())\
    \ {\n            encoded.append(alphabet[alphabet.index(index, offsetBy: 2)].uppercased())\n\
    \        } else {\n            encoded.append(letter)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp0iyal3sg.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: letter) {\n\
    \                                ^\n/tmp/tmp0iyal3sg.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: letter) {\n             \
    \                   ^~~~~\n                                firstIndex\n/tmp/tmp0iyal3sg.swift:15:57:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: letter.lowercased())\
    \ {\n                                                        ^\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.index(of: char) {\n            if let vowelIndex = vowels.index(of:\
    \ char) {\n                let newIndex = alphabet.index(vowelIndex, offsetBy:\
    \ 2)\n                encodedMessage.append(alphabet[newIndex])\n            }\
    \ else {\n                let newIndex = alphabet.index(index, offsetBy: 1)\n\
    \                encodedMessage.append(alphabet[newIndex])\n            }\n  \
    \      } else {\n            encodedMessage.append(char)\n        }\n    }\n \
    \   return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpw521x8y5/tmpw521x8y5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91b8cacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91b89a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91b89a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91b89a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw521x8y5                        0x0000555a8ad015e7 <unavailable> + 5607

    5    libc.so.6                          0x00002b91b8e98460 __libc_start_main +
    245

    6    tmpw521x8y5                        0x0000555a8ad01229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659978530
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    let vowels = \"aeiou\"\n   \
    \ let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in message {\n\
    \        if let index = alphabet.firstIndex(of: letter) {\n            if let\
    \ vowelIndex = vowels.firstIndex(of: letter) {\n                let newIndex =\
    \ alphabet.index(after: alphabet.index(after: vowelIndex))\n                encodedMessage.append(alphabet[newIndex])\n\
    \            } else {\n                encodedMessage.append(alphabet[alphabet.index(after:\
    \ index)])\n            }\n        } else {\n            encodedMessage.append(letter)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp4gglyvh4/tmp4gglyvh4.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8aa5b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8aa2a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8aa2a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8aa2a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4gglyvh4                        0x000055a9b5a1d5e7 <unavailable> + 5607

    5    libc.so.6                          0x00002ae8aa79d460 __libc_start_main +
    245

    6    tmp4gglyvh4                        0x000055a9b5a1d229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.index(of:\
    \ char) {\n            let newIndex = alphabet.index(index, offsetBy: 2)\n   \
    \         encoded.append(alphabet[newIndex])\n        } else if let index = alphabet.index(of:\
    \ char.lowercased()) {\n            let newIndex = alphabet.index(index, offsetBy:\
    \ 2)\n            encoded.append(alphabet[newIndex].uppercased())\n        } else\
    \ {\n            encoded.append(char)\n        }\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpd3q5djvh.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmpd3q5djvh.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmpd3q5djvh.swift:16:55:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: char.lowercased())\
    \ {\n                                                      ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for character in message.characters\
    \ {\n        if character.isUppercase {\n            encodedMessage.append(character.lowercased())\n\
    \        } else {\n            encodedMessage.append(character.uppercased())\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpasssqrhw.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in message.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.index(of: char)!\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpl59nub89/tmpl59nub89.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b762acc5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b762a9bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b762a9bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b762a9bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl59nub89                        0x000055d44ef94727 <unavailable> + 5927

    5    libc.so.6                          0x00002b762aeb1460 __libc_start_main +
    245

    6    tmpl59nub89                        0x000055d44ef94369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isVowel() {\n            encodedMessage.append(char.nextVowel())\n\
    \        } else if char.isUpperCase() {\n            encodedMessage.append(char.lowercaseString)\n\
    \        } else {\n            encodedMessage.append(char.uppercaseString)\n \
    \       }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp3g_zt09e.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp3g_zt09e.swift:11:17:\
    \ error: value of type 'Character' has no member 'isVowel'\n        if char.isVowel()\
    \ {\n           ~~~~ ^~~~~~~\n/tmp/tmp3g_zt09e.swift:12:40: error: value of type\
    \ 'Character' has no member 'nextVowel'\n            encodedMessage.append(char.nextVowel())\n\
    \                                  ~~~~ ^~~~~~~~~\n/tmp/tmp3g_zt09e.swift:13:24:\
    \ error: value of type 'Character' has no member 'isUpperCase'\n        } else\
    \ if char.isUpperCase() {\n                  ~~~~ ^~~~~~~~~~~\n/tmp/tmp3g_zt09e.swift:14:40:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \   encodedMessage.append(char.lowercaseString)\n                            \
    \      ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp3g_zt09e.swift:16:40: error: value of type\
    \ 'Character' has no member 'uppercaseString'\n            encodedMessage.append(char.uppercaseString)\n\
    \                                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.index(of: char) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else if let index = alphabet.index(of: char.lowercased()) {\n           \
    \ let newIndex = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmphl50z5q8.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmphl50z5q8.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmphl50z5q8.swift:16:55:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: char.lowercased())\
    \ {\n                                                      ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var encodedMessage = \"\"\n    let vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  \
    \  for character in message {\n        if alphabet.contains(String(character))\
    \ {\n            if vowels.contains(String(character)) {\n                let\
    \ index = alphabet.index(of: String(character))!\n                let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n                encodedMessage += String(alphabet[newIndex])\n\
    \            } else {\n                encodedMessage += String(character).uppercased()\n\
    \            }\n        } else {\n            encodedMessage += String(character)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpre7_o3q6.swift:15:48: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n             \
    \   let index = alphabet.index(of: String(character))!\n                     \
    \                          ^\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.index(of: char) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else if let index = alphabet.index(of: char.lowercased()) {\n           \
    \ let newIndex = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmphl50z5q8.swift:13:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmphl50z5q8.swift:13:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmphl50z5q8.swift:16:55:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        } else if let index = alphabet.index(of: char.lowercased())\
    \ {\n                                                      ^\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.firstIndex(of: char)!\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpyh0svvba/tmpyh0svvba.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b612a185c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6129e7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6129e7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6129e7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyh0svvba                        0x000056284c2b3727 <unavailable> + 5927

    5    libc.so.6                          0x00002b612a371460 __libc_start_main +
    245

    6    tmpyh0svvba                        0x000056284c2b3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978530
