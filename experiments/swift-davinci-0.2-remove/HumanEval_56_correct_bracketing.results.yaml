language: swift
name: HumanEval_56_correct_bracketing
results:
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for c in brackets\
    \ {\n        if c == \"<\" {\n            stack.push(c)\n        } else if c ==\
    \ \">\" {\n            if stack.isEmpty {\n                return false\n    \
    \        }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgngawgcz.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.push(char)\n        } else\
    \ if char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz1uwwm0u.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for c in brackets\
    \ {\n        if c == \"<\" {\n            stack.push(c)\n        } else if c ==\
    \ \">\" {\n            if stack.isEmpty {\n                return false\n    \
    \        }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgngawgcz.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.append(bracket)\n      \
    \  } else if bracket == \">\" {\n            if stack.isEmpty {\n            \
    \    return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009661
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.push(char)\n        } else\
    \ if char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz1uwwm0u.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for c in brackets\
    \ {\n        if c == \"<\" {\n            stack.push(c)\n        } else if c ==\
    \ \">\" {\n            if stack.isEmpty {\n                return false\n    \
    \        }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgngawgcz.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.push(char)\n        } else\
    \ if char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz1uwwm0u.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.push(char)\n        } else\
    \ if char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz1uwwm0u.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.append(bracket)\n      \
    \  } else if bracket == \">\" {\n            if stack.isEmpty {\n            \
    \    return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009661
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in brackets {\n\
    \        if char == \"<\" {\n            stack.append(char)\n        } else if\
    \ char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009661
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.push(char)\n        } else\
    \ if char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz1uwwm0u.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.append(bracket)\n      \
    \  } else if bracket == \">\" {\n            if stack.isEmpty {\n            \
    \    return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009661
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.push(char)\n        } else\
    \ if char == \">\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbxjga84p.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for i in brackets\
    \ {\n        if i == \"<\" {\n            stack.push(i)\n        } else if i ==\
    \ \">\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.pop()\n            }\n        }\n   \
    \ }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp51csi_0q.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for c in brackets\
    \ {\n        if c == \"<\" {\n            stack.push(c)\n        } else if c ==\
    \ \">\" {\n            if stack.isEmpty {\n                return false\n    \
    \        }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgngawgcz.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.push(char)\n        } else\
    \ if char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz1uwwm0u.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack: [Character] = []\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.append(bracket)\n      \
    \  } else if bracket == \">\" {\n            if stack.isEmpty {\n            \
    \    return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009661
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.append(bracket)\n      \
    \  } else if bracket == \">\" {\n            if stack.isEmpty {\n            \
    \    return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009661
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.push(char)\n        } else\
    \ if char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz1uwwm0u.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.push(char)\n        } else\
    \ if char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz1uwwm0u.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for c in brackets\
    \ {\n        if c == \"<\" {\n            stack.push(c)\n        } else if c ==\
    \ \">\" {\n            if stack.isEmpty {\n                return false\n    \
    \        }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgngawgcz.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    // TODO: Implement this function\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmp2y8ceu2p/tmp2y8ceu2p.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab314d73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab314a6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab314a6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab314a697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2y8ceu2p                        0x000055641bd3d25b <unavailable> + 4699

    5    libc.so.6                          0x00002ab314f5f460 __libc_start_main +
    245

    6    tmp2y8ceu2p                        0x000055641bd3cee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009661
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty() {\n             \
    \   return false\n            } else {\n                stack.pop()\n        \
    \    }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr6wmcch1.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack: [Character] = []\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.append(bracket)\n      \
    \  } else if bracket == \">\" {\n            if stack.isEmpty {\n            \
    \    return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009661
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.push(char)\n        } else\
    \ if char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz1uwwm0u.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.append(bracket)\n      \
    \  } else if bracket == \">\" {\n            if stack.isEmpty {\n            \
    \    return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009661
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack: [Character] = []\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.append(char)\n        } else\
    \ if char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009661
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.push(char)\n        } else\
    \ if char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz1uwwm0u.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.push(char)\n        } else\
    \ if char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz1uwwm0u.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.push(char)\n        } else\
    \ if char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz1uwwm0u.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.push(char)\n        } else\
    \ if char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz1uwwm0u.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.push(char)\n        } else\
    \ if char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz1uwwm0u.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.append(bracket)\n      \
    \  } else if bracket == \">\" {\n            if stack.isEmpty {\n            \
    \    return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009661
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.append(bracket)\n      \
    \  } else if bracket == \">\" {\n            if stack.isEmpty {\n            \
    \    return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009661
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for c in brackets\
    \ {\n        if c == \"<\" {\n            stack.push(c)\n        } else if c ==\
    \ \">\" {\n            if stack.isEmpty {\n                return false\n    \
    \        }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgngawgcz.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.push(char)\n        } else\
    \ if char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz1uwwm0u.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.push(char)\n        } else\
    \ if char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz1uwwm0u.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.push(char)\n        } else\
    \ if char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz1uwwm0u.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for c in brackets\
    \ {\n        if c == \"<\" {\n            stack.push(c)\n        } else if c ==\
    \ \">\" {\n            if stack.isEmpty {\n                return false\n    \
    \        }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgngawgcz.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.push(char)\n        } else\
    \ if char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz1uwwm0u.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.push(char)\n        } else\
    \ if char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz1uwwm0u.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.push(char)\n        } else\
    \ if char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz1uwwm0u.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.push(char)\n        } else\
    \ if char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz1uwwm0u.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.append(bracket)\n      \
    \  } else if bracket == \">\" {\n            if stack.isEmpty {\n            \
    \    return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009661
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.push(char)\n        } else\
    \ if char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz1uwwm0u.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.push(char)\n        } else\
    \ if char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz1uwwm0u.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdrg8k67y.swift:5:17: error: cannot find 'Stack' in scope\n    var\
    \ stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009660
