language: swift
name: HumanEval_24_largest_divisor
results:
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1..<n).reversed()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 0\n\
    \    for i in 1...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpafn4q82q/tmpafn4q82q.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70fe089c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70fdd80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70fdd80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70fdd7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpafn4q82q                        0x0000558697465335 <unavailable> + 4917

    5    libc.so.6                          0x00002b70fe275460 __libc_start_main +
    245

    6    tmpafn4q82q                        0x0000558697464fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1...n/2).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphd9l0_uu.swift:4:24: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n/2).reverse() {\n             ~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978413
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 1\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1...n/2).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphd9l0_uu.swift:4:24: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n/2).reverse() {\n             ~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978413
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 1\n\
    \    for i in 2...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpp68b56aw/tmpp68b56aw.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f79696c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f7938db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f7938d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f7938c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp68b56aw                        0x000055a742d89335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9f79882460 __libc_start_main +
    245

    6    tmpp68b56aw                        0x000055a742d88fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 1\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n/2 {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b50a0bb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50a08ac561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b50a08ac286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b50a08ac13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b50a08abbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpizo8bsg9                        0x00005653c87f56c9 <unavailable> + 5833

    6    tmpizo8bsg9                        0x00005653c87f52c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b50a0da1460 __libc_start_main +
    245

    8    tmpizo8bsg9                        0x00005653c87f4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 1\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 0\n\
    \    for i in 1...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpafn4q82q/tmpafn4q82q.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70fe089c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70fdd80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70fdd80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70fdd7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpafn4q82q                        0x0000558697465335 <unavailable> + 4917

    5    libc.so.6                          0x00002b70fe275460 __libc_start_main +
    245

    6    tmpafn4q82q                        0x0000558697464fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var divisor = n -\
    \ 1\n    while divisor > 0 {\n        if n % divisor == 0 {\n            return\
    \ divisor\n        }\n        divisor -= 1\n    }\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1...n/2).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphd9l0_uu.swift:4:24: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n/2).reverse() {\n             ~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978413
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 0\n\
    \    for i in 1...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpafn4q82q/tmpafn4q82q.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70fe089c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70fdd80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70fdd80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70fdd7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpafn4q82q                        0x0000558697465335 <unavailable> + 4917

    5    libc.so.6                          0x00002b70fe275460 __libc_start_main +
    245

    6    tmpafn4q82q                        0x0000558697464fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1...n).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp0tbavpyu.swift:4:22: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n).reverse() {\n             ~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978413
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 1\n\
    \    for i in 2...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpp68b56aw/tmpp68b56aw.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f79696c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f7938db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f7938d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f7938c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp68b56aw                        0x000055a742d89335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9f79882460 __libc_start_main +
    245

    6    tmpp68b56aw                        0x000055a742d88fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1...n/2).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphd9l0_uu.swift:4:24: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n/2).reverse() {\n             ~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978413
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 1\n\
    \    for i in 2...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpp68b56aw/tmpp68b56aw.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f79696c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f7938db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f7938d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f7938c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp68b56aw                        0x000055a742d89335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9f79882460 __libc_start_main +
    245

    6    tmpp68b56aw                        0x000055a742d88fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 0\n\
    \    for i in 1...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpafn4q82q/tmpafn4q82q.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70fe089c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70fdd80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70fdd80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70fdd7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpafn4q82q                        0x0000558697465335 <unavailable> + 4917

    5    libc.so.6                          0x00002b70fe275460 __libc_start_main +
    245

    6    tmpafn4q82q                        0x0000558697464fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1..<n).reversed()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1...n/2).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphd9l0_uu.swift:4:24: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n/2).reverse() {\n             ~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978413
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 0\n\
    \    for i in 1..<n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1...n).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp0tbavpyu.swift:4:22: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n).reverse() {\n             ~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978413
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n/2 {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b50a0bb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50a08ac561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b50a08ac286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b50a08ac13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b50a08abbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpizo8bsg9                        0x00005653c87f56c9 <unavailable> + 5833

    6    tmpizo8bsg9                        0x00005653c87f52c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b50a0da1460 __libc_start_main +
    245

    8    tmpizo8bsg9                        0x00005653c87f4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n/2 {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b50a0bb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50a08ac561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b50a08ac286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b50a08ac13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b50a08abbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpizo8bsg9                        0x00005653c87f56c9 <unavailable> + 5833

    6    tmpizo8bsg9                        0x00005653c87f52c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b50a0da1460 __libc_start_main +
    245

    8    tmpizo8bsg9                        0x00005653c87f4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 0\n\
    \    for i in 1...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpafn4q82q/tmpafn4q82q.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70fe089c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70fdd80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70fdd80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70fdd7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpafn4q82q                        0x0000558697465335 <unavailable> + 4917

    5    libc.so.6                          0x00002b70fe275460 __libc_start_main +
    245

    6    tmpafn4q82q                        0x0000558697464fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1...n/2).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphd9l0_uu.swift:4:24: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n/2).reverse() {\n             ~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978413
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 0\n\
    \    for i in 1...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpafn4q82q/tmpafn4q82q.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70fe089c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70fdd80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70fdd80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70fdd7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpafn4q82q                        0x0000558697465335 <unavailable> + 4917

    5    libc.so.6                          0x00002b70fe275460 __libc_start_main +
    245

    6    tmpafn4q82q                        0x0000558697464fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var divisor = n -\
    \ 1\n    while n % divisor != 0 {\n        divisor -= 1\n    }\n    return divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 1\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 1\n\
    \    for i in 2...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpp68b56aw/tmpp68b56aw.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f79696c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f7938db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f7938d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f7938c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp68b56aw                        0x000055a742d89335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9f79882460 __libc_start_main +
    245

    6    tmpp68b56aw                        0x000055a742d88fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1...n/2).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphd9l0_uu.swift:4:24: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n/2).reverse() {\n             ~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978413
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1...n/2).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphd9l0_uu.swift:4:24: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n/2).reverse() {\n             ~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978413
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 0\n\
    \    for i in 1...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpafn4q82q/tmpafn4q82q.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70fe089c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70fdd80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70fdd80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70fdd7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpafn4q82q                        0x0000558697465335 <unavailable> + 4917

    5    libc.so.6                          0x00002b70fe275460 __libc_start_main +
    245

    6    tmpafn4q82q                        0x0000558697464fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 0\n\
    \    for i in 1..<n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 0\n\
    \    for i in 1...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpafn4q82q/tmpafn4q82q.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70fe089c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70fdd80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70fdd80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70fdd7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpafn4q82q                        0x0000558697465335 <unavailable> + 4917

    5    libc.so.6                          0x00002b70fe275460 __libc_start_main +
    245

    6    tmpafn4q82q                        0x0000558697464fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 1\n\
    \    for i in 2...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpp68b56aw/tmpp68b56aw.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f79696c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f7938db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f7938d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f7938c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp68b56aw                        0x000055a742d89335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9f79882460 __libc_start_main +
    245

    6    tmpp68b56aw                        0x000055a742d88fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 0\n\
    \    for i in 1..<n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1...n).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpy3jwqk34.swift:4:22: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n).reverse() {\n             ~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978413
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 1\n\
    \    for i in 2...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpp68b56aw/tmpp68b56aw.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f79696c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f7938db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f7938d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f7938c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp68b56aw                        0x000055a742d89335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9f79882460 __libc_start_main +
    245

    6    tmpp68b56aw                        0x000055a742d88fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n/2 {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b50a0bb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50a08ac561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b50a08ac286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b50a08ac13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b50a08abbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpizo8bsg9                        0x00005653c87f56c9 <unavailable> + 5833

    6    tmpizo8bsg9                        0x00005653c87f52c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b50a0da1460 __libc_start_main +
    245

    8    tmpizo8bsg9                        0x00005653c87f4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1...n/2).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphd9l0_uu.swift:4:24: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n/2).reverse() {\n             ~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978413
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1...n/2).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphd9l0_uu.swift:4:24: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n/2).reverse() {\n             ~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978413
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1...n).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpy3jwqk34.swift:4:22: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n).reverse() {\n             ~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978413
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 1\n\
    \    for i in 2...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpp68b56aw/tmpp68b56aw.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f79696c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f7938db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f7938d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f7938c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp68b56aw                        0x000055a742d89335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9f79882460 __libc_start_main +
    245

    6    tmpp68b56aw                        0x000055a742d88fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 0\n\
    \    for i in 1..<n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 1\n\
    \    for i in 2...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpp68b56aw/tmpp68b56aw.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f79696c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f7938db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f7938d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f7938c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp68b56aw                        0x000055a742d89335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9f79882460 __libc_start_main +
    245

    6    tmpp68b56aw                        0x000055a742d88fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var divisor = n -\
    \ 1\n    while n % divisor != 0 {\n        divisor -= 1\n    }\n    return divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n/2 {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b50a0bb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50a08ac561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b50a08ac286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b50a08ac13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b50a08abbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpizo8bsg9                        0x00005653c87f56c9 <unavailable> + 5833

    6    tmpizo8bsg9                        0x00005653c87f52c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b50a0da1460 __libc_start_main +
    245

    8    tmpizo8bsg9                        0x00005653c87f4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 1\n\
    \    for i in 2...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpp68b56aw/tmpp68b56aw.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f79696c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f7938db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f7938d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f7938c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp68b56aw                        0x000055a742d89335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9f79882460 __libc_start_main +
    245

    6    tmpp68b56aw                        0x000055a742d88fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 1\n\
    \    for i in 2...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpp68b56aw/tmpp68b56aw.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f79696c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f7938db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f7938d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f7938c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp68b56aw                        0x000055a742d89335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9f79882460 __libc_start_main +
    245

    6    tmpp68b56aw                        0x000055a742d88fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1...n).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpy3jwqk34.swift:4:22: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n).reverse() {\n             ~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978413
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1...n/2).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphd9l0_uu.swift:4:24: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n/2).reverse() {\n             ~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978413
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 0\n\
    \    for i in 1..<n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 0\n\
    \    for i in 1...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpafn4q82q/tmpafn4q82q.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70fe089c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70fdd80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70fdd80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70fdd7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpafn4q82q                        0x0000558697465335 <unavailable> + 4917

    5    libc.so.6                          0x00002b70fe275460 __libc_start_main +
    245

    6    tmpafn4q82q                        0x0000558697464fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 1\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1...n/2).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphd9l0_uu.swift:4:24: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n/2).reverse() {\n             ~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978413
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 1\n\
    \    for i in 2...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpp68b56aw/tmpp68b56aw.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f79696c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f7938db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f7938d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f7938c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp68b56aw                        0x000055a742d89335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9f79882460 __libc_start_main +
    245

    6    tmpp68b56aw                        0x000055a742d88fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1...n).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpy3jwqk34.swift:4:22: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n).reverse() {\n             ~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978413
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 1\n\
    \    for i in 2...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpp68b56aw/tmpp68b56aw.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f79696c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f7938db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f7938d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f7938c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp68b56aw                        0x000055a742d89335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9f79882460 __libc_start_main +
    245

    6    tmpp68b56aw                        0x000055a742d88fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 1\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1...n/2).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphd9l0_uu.swift:4:24: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n/2).reverse() {\n             ~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978413
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var divisor = n -\
    \ 1\n    while n % divisor != 0 {\n        divisor -= 1\n    }\n    return divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var divisor = n -\
    \ 1\n    while n % divisor != 0 {\n        divisor -= 1\n    }\n    return divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1...n/2).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphd9l0_uu.swift:4:24: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n/2).reverse() {\n             ~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978413
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 1\n\
    \    for i in 2...n/2 {\n        if n % i == 0 {\n            largest = i\n  \
    \      }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b06c48ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06c45d4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b06c45d4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b06c45d413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b06c45d3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp31gnhaou                        0x000055bf5aab56c9 <unavailable> + 5833

    6    tmp31gnhaou                        0x000055bf5aab52c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b06c4ac9460 __libc_start_main +
    245

    8    tmp31gnhaou                        0x000055bf5aab4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 0\n\
    \    for i in 1..<n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 0\n\
    \    for i in 1..<n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 1\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 0\n\
    \    for i in 1..<n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 0\n\
    \    for i in 1...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpafn4q82q/tmpafn4q82q.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70fe089c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70fdd80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70fdd80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70fdd7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpafn4q82q                        0x0000558697465335 <unavailable> + 4917

    5    libc.so.6                          0x00002b70fe275460 __libc_start_main +
    245

    6    tmpafn4q82q                        0x0000558697464fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1...n/2).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphd9l0_uu.swift:4:24: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n/2).reverse() {\n             ~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978413
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1...n).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpy3jwqk34.swift:4:22: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n).reverse() {\n             ~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978413
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 1\n\
    \    for i in 2...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpp68b56aw/tmpp68b56aw.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f79696c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f7938db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f7938d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f7938c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp68b56aw                        0x000055a742d89335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9f79882460 __libc_start_main +
    245

    6    tmpp68b56aw                        0x000055a742d88fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1...n/2).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphd9l0_uu.swift:4:24: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n/2).reverse() {\n             ~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978413
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 0\n\
    \    for i in 1...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpafn4q82q/tmpafn4q82q.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70fe089c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70fdd80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70fdd80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70fdd7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpafn4q82q                        0x0000558697465335 <unavailable> + 4917

    5    libc.so.6                          0x00002b70fe275460 __libc_start_main +
    245

    6    tmpafn4q82q                        0x0000558697464fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1...n/2).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphd9l0_uu.swift:4:24: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n/2).reverse() {\n             ~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978413
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1...n).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpy3jwqk34.swift:4:22: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n).reverse() {\n             ~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978413
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 0\n\
    \    for i in 1...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpafn4q82q/tmpafn4q82q.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70fe089c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70fdd80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70fdd80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70fdd7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpafn4q82q                        0x0000558697465335 <unavailable> + 4917

    5    libc.so.6                          0x00002b70fe275460 __libc_start_main +
    245

    6    tmpafn4q82q                        0x0000558697464fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 1\n\
    \    for i in 2...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpp68b56aw/tmpp68b56aw.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f79696c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f7938db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f7938d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f7938c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp68b56aw                        0x000055a742d89335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9f79882460 __libc_start_main +
    245

    6    tmpp68b56aw                        0x000055a742d88fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1..<n).reversed()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1...n/2).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphd9l0_uu.swift:4:24: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n/2).reverse() {\n             ~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978413
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n/2 {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b50a0bb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50a08ac561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b50a08ac286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b50a08ac13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b50a08abbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpizo8bsg9                        0x00005653c87f56c9 <unavailable> + 5833

    6    tmpizo8bsg9                        0x00005653c87f52c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b50a0da1460 __libc_start_main +
    245

    8    tmpizo8bsg9                        0x00005653c87f4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 0\n\
    \    for i in 1...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpafn4q82q/tmpafn4q82q.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70fe089c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70fdd80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70fdd80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70fdd7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpafn4q82q                        0x0000558697465335 <unavailable> + 4917

    5    libc.so.6                          0x00002b70fe275460 __libc_start_main +
    245

    6    tmpafn4q82q                        0x0000558697464fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 0\n\
    \    for i in 1...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpafn4q82q/tmpafn4q82q.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70fe089c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70fdd80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70fdd80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70fdd7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpafn4q82q                        0x0000558697465335 <unavailable> + 4917

    5    libc.so.6                          0x00002b70fe275460 __libc_start_main +
    245

    6    tmpafn4q82q                        0x0000558697464fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 1\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 0\n\
    \    for i in 1...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpafn4q82q/tmpafn4q82q.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70fe089c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70fdd80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70fdd80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70fdd7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpafn4q82q                        0x0000558697465335 <unavailable> + 4917

    5    libc.so.6                          0x00002b70fe275460 __libc_start_main +
    245

    6    tmpafn4q82q                        0x0000558697464fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 1\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1...n/2).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphd9l0_uu.swift:4:24: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n/2).reverse() {\n             ~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978413
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 0\n    for i in 1...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp3y7z5ciq/tmp3y7z5ciq.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b678821fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6787f16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6787f16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6787f157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3y7z5ciq                        0x000055c497ed3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b678840b460 __libc_start_main +
    245

    6    tmp3y7z5ciq                        0x000055c497ed2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var divisor = n -\
    \ 1\n    while n % divisor != 0 {\n        divisor -= 1\n    }\n    return divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1...n/2).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphd9l0_uu.swift:4:24: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n/2).reverse() {\n             ~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978413
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 1\n\
    \    for i in 2...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpp68b56aw/tmpp68b56aw.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f79696c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f7938db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f7938d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f7938c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp68b56aw                        0x000055a742d89335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9f79882460 __libc_start_main +
    245

    6    tmpp68b56aw                        0x000055a742d88fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var divisor = n -\
    \ 1\n    while divisor > 0 {\n        if n % divisor == 0 {\n            return\
    \ divisor\n        }\n        divisor -= 1\n    }\n    return divisor\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n/2 {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b50a0bb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50a08ac561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b50a08ac286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b50a08ac13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b50a08abbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpizo8bsg9                        0x00005653c87f56c9 <unavailable> + 5833

    6    tmpizo8bsg9                        0x00005653c87f52c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b50a0da1460 __libc_start_main +
    245

    8    tmpizo8bsg9                        0x00005653c87f4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 1\n\
    \    for i in 2...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpp68b56aw/tmpp68b56aw.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f79696c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f7938db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f7938d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f7938c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp68b56aw                        0x000055a742d89335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9f79882460 __libc_start_main +
    245

    6    tmpp68b56aw                        0x000055a742d88fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    for i in (1...n/2).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphd9l0_uu.swift:4:24: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n/2).reverse() {\n             ~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978413
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo435fext/tmpo435fext.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12470afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1246da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1246da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1246da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo435fext                        0x0000560deea0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b124729b460 __libc_start_main +
    245

    6    tmpo435fext                        0x0000560deea0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n/2 {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b50a0bb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50a08ac561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b50a08ac286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b50a08ac13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b50a08abbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpizo8bsg9                        0x00005653c87f56c9 <unavailable> + 5833

    6    tmpizo8bsg9                        0x00005653c87f52c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b50a0da1460 __libc_start_main +
    245

    8    tmpizo8bsg9                        0x00005653c87f4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = 0\n\
    \    for i in 1..<n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2..<n {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest_divisor\
    \ = 1\n    for i in 2...n/2 {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b50a0bb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50a08ac561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b50a08ac286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b50a08ac13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b50a08abbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpizo8bsg9                        0x00005653c87f56c9 <unavailable> + 5833

    6    tmpizo8bsg9                        0x00005653c87f52c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b50a0da1460 __libc_start_main +
    245

    8    tmpizo8bsg9                        0x00005653c87f4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978414
