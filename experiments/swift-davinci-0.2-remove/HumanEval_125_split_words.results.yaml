language: swift
name: HumanEval_125_split_words
results:
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let words2\
    \ = txt.split(separator: \",\")\n    if words2.count > 1 {\n        return .success(words2.map\
    \ { String($0) })\n    }\n    let count = txt.filter { $0.isLowercase && $0.asciiValue!\
    \ % 2 == 1 }.count\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp15p3ej95/tmp15p3ej95.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b288d423c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b288d11ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b288d11a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b288d1197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp15p3ej95                        0x0000557a0e34d50b <unavailable> + 9483

    5    libc.so.6                          0x00002b288d60f460 __libc_start_main +
    245

    6    tmp15p3ej95                        0x0000557a0e34c8b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let count = txt.lowercased().filter { $0 >= \"a\"\
    \ && $0 <= \"z\" }.count\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpvz5q4oi6/tmpvz5q4oi6.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad11ec8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad11e986b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad11e986988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad11e9857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvz5q4oi6                        0x000055a59312d3f3 <unavailable> + 9203

    5    libc.so.6                          0x00002ad11ee7b460 __libc_start_main +
    245

    6    tmpvz5q4oi6                        0x000055a59312c8d9 <unavailable> + 6361

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.filter { $0.asciiValue! % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpexcpl43f.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpexcpl43f.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    return .failure(txt.filter { $0.isLowercase }.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp7mj59yfy/tmp7mj59yfy.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb8672dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb86424b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb86424988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb864237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7mj59yfy                        0x00005605fb79c2d3 <unavailable> + 8915

    5    libc.so.6                          0x00002adb86919460 __libc_start_main +
    245

    6    tmp7mj59yfy                        0x00005605fb79b7b9 <unavailable> + 6073

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.filter { $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp9kr3bc6p.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp9kr3bc6p.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter{$0.isLetter}.filter{$0.asciiValue!\
    \ % 2 == 1}.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp32iztxyy.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp32iztxyy.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let count = txt.filter { \"abcdefghijklmnopqrstuvwxyz\"\
    .contains($0) }.count\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpivszv2r2/tmpivszv2r2.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07dda03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07dd6fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07dd6fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07dd6f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivszv2r2                        0x00005636d2850323 <unavailable> + 8995

    5    libc.so.6                          0x00002b07ddbef460 __libc_start_main +
    245

    6    tmpivszv2r2                        0x00005636d284f809 <unavailable> + 6153

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.filter { $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp9kr3bc6p.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp9kr3bc6p.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpj1l2o_pg/tmpj1l2o_pg.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67955cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67952c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67952c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67952c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1l2o_pg                        0x000055a1e70a184c <unavailable> + 6220

    5    libc.so.6                          0x00002b67957b9460 __libc_start_main +
    245

    6    tmpj1l2o_pg                        0x000055a1e70a1389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let letters = txt.lowercased().filter { $0.isLetter\
    \ }\n    return .failure(letters.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpgufl2o5x/tmpgufl2o5x.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b42faac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b42ca1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b42ca1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b42ca07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgufl2o5x                        0x000055c4aedf4323 <unavailable> + 8995

    5    libc.so.6                          0x00002b0b43196460 __libc_start_main +
    245

    6    tmpgufl2o5x                        0x000055c4aedf3809 <unavailable> + 6153

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let lowercase = txt.lowercased()\n    var count\
    \ = 0\n    for (i, c) in lowercase.enumerated() {\n        if i % 2 == 0 && c.asciiValue!\
    \ >= 97 && c.asciiValue! <= 122 {\n            count += 1\n        }\n    }\n\
    \    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpv6secw9e/tmpv6secw9e.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac96ca5fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac96c756b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac96c756988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac96c7557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv6secw9e                        0x000056052c7d865b <unavailable> + 9819

    5    libc.so.6                          0x00002ac96cc4b460 __libc_start_main +
    245

    6    tmpv6secw9e                        0x000056052c7d7a09 <unavailable> + 6665

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpj1l2o_pg/tmpj1l2o_pg.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67955cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67952c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67952c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67952c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1l2o_pg                        0x000055a1e70a184c <unavailable> + 6220

    5    libc.so.6                          0x00002b67957b9460 __libc_start_main +
    245

    6    tmpj1l2o_pg                        0x000055a1e70a1389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.filter { $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp9kr3bc6p.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp9kr3bc6p.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map{String($0)})\n    }\n    let commas = txt.split(separator:\
    \ \",\")\n    if commas.count > 1 {\n        return .success(commas.map{String($0)})\n\
    \    }\n    let odd_letters = txt.lowercased().filter{$0.isLetter && $0.asciiValue!\
    \ % 2 == 1}\n    return .failure(odd_letters.count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpr81e23_x/tmpr81e23_x.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ec33cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ec30c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ec30c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ec30c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr81e23_x                        0x00005647f69fc55b <unavailable> + 9563

    5    libc.so.6                          0x00002b8ec35b7460 __libc_start_main +
    245

    6    tmpr81e23_x                        0x00005647f69fb909 <unavailable> + 6409

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0\
    \ >= \"a\" && $0 <= \"z\" }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpf8hezzzp.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpf8hezzzp.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let lowerCase = txt.filter { $0.isLowercase }\n\
    \    return .failure(lowerCase.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp7lhbh5hq/tmp7lhbh5hq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6539ae6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65397ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65397dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65397dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7lhbh5hq                        0x000055a1d58492d3 <unavailable> + 8915

    5    libc.so.6                          0x00002b6539cd2460 __libc_start_main +
    245

    6    tmp7lhbh5hq                        0x000055a1d58487b9 <unavailable> + 6073

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpu68oot_7.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpu68oot_7.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        var count = 0\n        for i in txt.lowercased()\
    \ {\n            if i.asciiValue! % 2 == 1 {\n                count += 1\n   \
    \         }\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmps6rxttzu.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmps6rxttzu.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.reduce(0) { $1.unicodeScalars.first!.value % 2 == 1 ? $0 + 1 : $0 })\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpc600_653.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpc600_653.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Implement this function\n    return .failure(0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpb0saua81/tmpb0saua81.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5be506c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5be1fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5be1fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5be1fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb0saua81                        0x0000555b7671084c <unavailable> + 6220

    5    libc.so.6                          0x00002ba5be6f2460 __libc_start_main +
    245

    6    tmpb0saua81                        0x0000555b76710389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Implement me\n    return .failure(0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp87oemked/tmp87oemked.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b091a697c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b091a38eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b091a38e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b091a38d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp87oemked                        0x0000564fc303684c <unavailable> + 6220

    5    libc.so.6                          0x00002b091a883460 __libc_start_main +
    245

    6    tmp87oemked                        0x0000564fc3036389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Implement this function\n    return .failure(0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpb0saua81/tmpb0saua81.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5be506c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5be1fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5be1fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5be1fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb0saua81                        0x0000555b7671084c <unavailable> + 6220

    5    libc.so.6                          0x00002ba5be6f2460 __libc_start_main +
    245

    6    tmpb0saua81                        0x0000555b76710389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.filter { $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp9kr3bc6p.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp9kr3bc6p.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let odd_letters = txt.lowercased().filter { $0.isLetter\
    \ && $0.asciiValue! % 2 == 1 }\n    return .failure(odd_letters.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpda8i007h/tmpda8i007h.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92cba79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92cb770b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92cb770988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92cb76f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpda8i007h                        0x00005577aa8b255b <unavailable> + 9563

    5    libc.so.6                          0x00002b92cbc65460 __libc_start_main +
    245

    6    tmpda8i007h                        0x00005577aa8b1909 <unavailable> + 6409

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let lowercase = txt.filter { $0.isLowercase }\n\
    \    let odd = lowercase.filter { $0.asciiValue! % 2 == 1 }\n    return .failure(odd.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp3og5s6gn/tmp3og5s6gn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b842bad0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b842b7c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b842b7c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b842b7c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3og5s6gn                        0x000056233562850b <unavailable> + 9483

    5    libc.so.6                          0x00002b842bcbc460 __libc_start_main +
    245

    6    tmp3og5s6gn                        0x00005623356278b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let count = txt.filter { $0.isLowercase && $0.asciiValue!\
    \ % 2 == 1 }.count\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpe9kqe82n/tmpe9kqe82n.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab32abf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab32a8eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab32a8ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab32a8ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9kqe82n                        0x0000558e2286550b <unavailable> + 9483

    5    libc.so.6                          0x00002ab32ade3460 __libc_start_main +
    245

    6    tmpe9kqe82n                        0x0000558e228648b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let count = txt.filter { $0.isLowercase && $0.asciiValue!\
    \ % 2 == 1 }.count\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpe9kqe82n/tmpe9kqe82n.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab32abf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab32a8eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab32a8ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab32a8ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9kqe82n                        0x0000558e2286550b <unavailable> + 9483

    5    libc.so.6                          0x00002ab32ade3460 __libc_start_main +
    245

    6    tmpe9kqe82n                        0x0000558e228648b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.filter { $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp9kr3bc6p.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp9kr3bc6p.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let count = txt.filter { $0.isLowercase && $0.asciiValue!\
    \ % 2 == 1 }.count\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpe9kqe82n/tmpe9kqe82n.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab32abf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab32a8eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab32a8ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab32a8ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9kqe82n                        0x0000558e2286550b <unavailable> + 9483

    5    libc.so.6                          0x00002ab32ade3460 __libc_start_main +
    245

    6    tmpe9kqe82n                        0x0000558e228648b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { \"\
    abcdefghijklmnopqrstuvwxyz\".contains($0) }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpho6phe71.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpho6phe71.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let lowercase = txt.filter { $0.isLowercase }\n\
    \    return .failure(lowercase.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpddikiqhk/tmpddikiqhk.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ba25adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ba22a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ba22a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ba22a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpddikiqhk                        0x000056264bff62d3 <unavailable> + 8915

    5    libc.so.6                          0x00002b6ba2799460 __libc_start_main +
    245

    6    tmpddikiqhk                        0x000056264bff57b9 <unavailable> + 6073

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpj1l2o_pg/tmpj1l2o_pg.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67955cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67952c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67952c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67952c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1l2o_pg                        0x000055a1e70a184c <unavailable> + 6220

    5    libc.so.6                          0x00002b67957b9460 __libc_start_main +
    245

    6    tmpj1l2o_pg                        0x000055a1e70a1389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let index = txt.firstIndex(of: \" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if let index = txt.firstIndex(of: \"\
    ,\") {\n        return .success(txt.split(separator: \",\").map { String($0) })\n\
    \    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp3ife62fj/tmp3ife62fj.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaf3d03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaf39fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaf39fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaf39f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ife62fj                        0x0000558a39b12313 <unavailable> + 8979

    5    libc.so.6                          0x00002adaf3eef460 __libc_start_main +
    245

    6    tmp3ife62fj                        0x0000558a39b117f9 <unavailable> + 6137

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Implement\n    return .failure(0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpiihvqj3s/tmpiihvqj3s.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09adddbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09adad2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09adad2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09adad17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiihvqj3s                        0x000055e8c36a684c <unavailable> + 6220

    5    libc.so.6                          0x00002b09adfc7460 __libc_start_main +
    245

    6    tmpiihvqj3s                        0x000055e8c36a6389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let lowercase = txt.filter { $0.isLowercase }\n\
    \    let odd = lowercase.filter { $0.asciiValue! % 2 == 1 }\n    return .failure(odd.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp3og5s6gn/tmp3og5s6gn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b842bad0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b842b7c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b842b7c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b842b7c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3og5s6gn                        0x000056233562850b <unavailable> + 9483

    5    libc.so.6                          0x00002b842bcbc460 __libc_start_main +
    245

    6    tmp3og5s6gn                        0x00005623356278b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let count = txt.filter { $0.isLowercase && $0.asciiValue!\
    \ % 2 == 1 }.count\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpe9kqe82n/tmpe9kqe82n.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab32abf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab32a8eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab32a8ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab32a8ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9kqe82n                        0x0000558e2286550b <unavailable> + 9483

    5    libc.so.6                          0x00002ab32ade3460 __libc_start_main +
    245

    6    tmpe9kqe82n                        0x0000558e228648b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let odd_letters = txt.filter { $0.isLowercase &&\
    \ $0.asciiValue! % 2 == 1 }\n    return .failure(odd_letters.count)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpch6820si/tmpch6820si.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac45e2a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac45df98b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac45df98988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac45df977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpch6820si                        0x0000555c8f73350b <unavailable> + 9483

    5    libc.so.6                          0x00002ac45e48d460 __libc_start_main +
    245

    6    tmpch6820si                        0x0000555c8f7328b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let odd_letters = txt.filter { $0.isLetter && $0.isLowercase\
    \ && $0.asciiValue! % 2 == 1 }\n    return .failure(odd_letters.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmppkeroq9i/tmppkeroq9i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cef560c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cef257b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cef257988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cef2567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppkeroq9i                        0x000055df619b355b <unavailable> + 9563

    5    libc.so.6                          0x00002b1cef74c460 __libc_start_main +
    245

    6    tmppkeroq9i                        0x000055df619b2909 <unavailable> + 6409

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let count = txt.filter { $0.isLowercase && $0.asciiValue!\
    \ % 2 == 1 }.count\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpe9kqe82n/tmpe9kqe82n.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab32abf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab32a8eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab32a8ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab32a8ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9kqe82n                        0x0000558e2286550b <unavailable> + 9483

    5    libc.so.6                          0x00002ab32ade3460 __libc_start_main +
    245

    6    tmpe9kqe82n                        0x0000558e228648b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.filter { $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp9kr3bc6p.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp9kr3bc6p.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let odd_letters = txt.filter { $0.isLowercase &&\
    \ $0.asciiValue! % 2 == 1 }\n    return .failure(odd_letters.count)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpch6820si/tmpch6820si.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac45e2a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac45df98b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac45df98988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac45df977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpch6820si                        0x0000555c8f73350b <unavailable> + 9483

    5    libc.so.6                          0x00002ac45e48d460 __libc_start_main +
    245

    6    tmpch6820si                        0x0000555c8f7328b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.filter { $0.asciiValue! % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpexcpl43f.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpexcpl43f.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.filter { $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp9kr3bc6p.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp9kr3bc6p.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let words = txt.split(separator: \" \").map(String.init) as?\
    \ [String] {\n        return .success(words)\n    } else if let words = txt.split(separator:\
    \ \",\").map(String.init) as? [String] {\n        return .success(words)\n   \
    \ } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp_m21qp6p/tmp_m21qp6p.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3d51b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3d4eadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3d4ead988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3d4eac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_m21qp6p                        0x00005633f86dccbe <unavailable> + 7358

    5    libc.so.6                          0x00002ab3d53a2460 __libc_start_main +
    245

    6    tmp_m21qp6p                        0x00005633f86dc649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let lowercase = txt.filter { $0.isLowercase }\n\
    \    return .failure(lowercase.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpddikiqhk/tmpddikiqhk.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ba25adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ba22a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ba22a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ba22a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpddikiqhk                        0x000056264bff62d3 <unavailable> + 8915

    5    libc.so.6                          0x00002b6ba2799460 __libc_start_main +
    245

    6    tmpddikiqhk                        0x000056264bff57b9 <unavailable> + 6073

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let count = txt.filter { $0.isLowercase && $0.asciiValue!\
    \ % 2 == 1 }.count\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpe9kqe82n/tmpe9kqe82n.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab32abf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab32a8eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab32a8ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab32a8ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9kqe82n                        0x0000558e2286550b <unavailable> + 9483

    5    libc.so.6                          0x00002ab32ade3460 __libc_start_main +
    245

    6    tmpe9kqe82n                        0x0000558e228648b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.map { Int(UnicodeScalar(String($0))!.value - UnicodeScalar(\"a\").value) }.filter\
    \ { $0 % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp4_xgsnko.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp4_xgsnko.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        var count = 0\n        for c in txt.lowercased()\
    \ {\n            if c.asciiValue! % 2 == 1 {\n                count += 1\n   \
    \         }\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp5uve1gdk.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp5uve1gdk.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let odd_letters = txt.filter { $0.isLowercase &&\
    \ $0.asciiValue! % 2 == 1 }\n    return .failure(odd_letters.count)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpch6820si/tmpch6820si.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac45e2a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac45df98b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac45df98988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac45df977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpch6820si                        0x0000555c8f73350b <unavailable> + 9483

    5    libc.so.6                          0x00002ac45e48d460 __libc_start_main +
    245

    6    tmpch6820si                        0x0000555c8f7328b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter{$0.isLetter}.filter{$0.asciiValue!\
    \ % 2 == 1}.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp32iztxyy.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp32iztxyy.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Implement this function\n    return .failure(0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpb0saua81/tmpb0saua81.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5be506c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5be1fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5be1fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5be1fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb0saua81                        0x0000555b7671084c <unavailable> + 6220

    5    libc.so.6                          0x00002ba5be6f2460 __libc_start_main +
    245

    6    tmpb0saua81                        0x0000555b76710389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.components(separatedBy: \" \")\n    if words.count\
    \ > 1 {\n        return .success(words)\n    }\n    let letters = txt.components(separatedBy:\
    \ \",\")\n    if letters.count > 1 {\n        return .success(letters)\n    }\n\
    \    let count = txt.lowercased().filter { $0.isLetter }.filter { $0.asciiValue!\
    \ % 2 == 1 }.count\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp5c09jo11.swift:9:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmp5c09jo11.swift:13:23: error: value of type 'String'\
    \ has no member 'components'\n    let letters = txt.components(separatedBy: \"\
    ,\")\n                  ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        var count = 0\n        for c in txt.lowercased()\
    \ {\n            if c.asciiValue! % 2 == 1 {\n                count += 1\n   \
    \         }\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp5uve1gdk.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp5uve1gdk.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.filter { $0.asciiValue! % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpexcpl43f.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpexcpl43f.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let words2\
    \ = txt.split(separator: \",\")\n    if words2.count > 1 {\n        return .success(words2.map\
    \ { String($0) })\n    }\n    let odd = txt.filter { $0.isLowercase && $0.asciiValue!\
    \ % 2 == 1 }.count\n    return .failure(odd)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpn0_edteu/tmpn0_edteu.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91b0f3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91b0c31b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91b0c31988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91b0c307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0_edteu                        0x00005592ab60250b <unavailable> + 9483

    5    libc.so.6                          0x00002b91b1126460 __libc_start_main +
    245

    6    tmpn0_edteu                        0x00005592ab6018b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Implement me!\n    return .failure(0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpz_gab7vn/tmpz_gab7vn.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac582673c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac58236ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac58236a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5823697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_gab7vn                        0x000055d8611f784c <unavailable> + 6220

    5    libc.so.6                          0x00002ac58285f460 __libc_start_main +
    245

    6    tmpz_gab7vn                        0x000055d8611f7389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Implement\n    return .failure(0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpiihvqj3s/tmpiihvqj3s.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09adddbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09adad2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09adad2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09adad17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiihvqj3s                        0x000055e8c36a684c <unavailable> + 6220

    5    libc.so.6                          0x00002b09adfc7460 __libc_start_main +
    245

    6    tmpiihvqj3s                        0x000055e8c36a6389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.filter { $0.asciiValue! % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpexcpl43f.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpexcpl43f.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map{String($0)})\n    } else {\n        let\
    \ chars = txt.split(separator: \",\")\n        if chars.count > 1 {\n        \
    \    return .success(chars.map{String($0)})\n        } else {\n            let\
    \ count = txt.filter{$0.isLowercase && $0.asciiValue! % 2 == 1}.count\n      \
    \      return .failure(count)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpvzutio_l/tmpvzutio_l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba60ecb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba60e9afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba60e9af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba60e9ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvzutio_l                        0x0000561cff1a050b <unavailable> + 9483

    5    libc.so.6                          0x00002ba60eea4460 __libc_start_main +
    245

    6    tmpvzutio_l                        0x0000561cff19f8b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Implement this function\n    return .failure(0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpb0saua81/tmpb0saua81.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5be506c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5be1fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5be1fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5be1fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb0saua81                        0x0000555b7671084c <unavailable> + 6220

    5    libc.so.6                          0x00002ba5be6f2460 __libc_start_main +
    245

    6    tmpb0saua81                        0x0000555b76710389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let lowercase = txt.filter { $0.isLowercase }\n\
    \    let odd = lowercase.filter { $0.asciiValue! % 2 == 1 }\n    return .failure(odd.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp3og5s6gn/tmp3og5s6gn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b842bad0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b842b7c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b842b7c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b842b7c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3og5s6gn                        0x000056233562850b <unavailable> + 9483

    5    libc.so.6                          0x00002b842bcbc460 __libc_start_main +
    245

    6    tmp3og5s6gn                        0x00005623356278b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.filter { $0.asciiValue! % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpexcpl43f.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpexcpl43f.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let lowercase = txt.filter { $0.isLowercase }\n\
    \    return .failure(lowercase.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpddikiqhk/tmpddikiqhk.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ba25adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ba22a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ba22a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ba22a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpddikiqhk                        0x000056264bff62d3 <unavailable> + 8915

    5    libc.so.6                          0x00002b6ba2799460 __libc_start_main +
    245

    6    tmpddikiqhk                        0x000056264bff57b9 <unavailable> + 6073

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let words = txt.split(separator: \" \").map(String.init) as?\
    \ [String] {\n        return .success(words)\n    } else if let words = txt.split(separator:\
    \ \",\").map(String.init) as? [String] {\n        return .success(words)\n   \
    \ } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp_m21qp6p/tmp_m21qp6p.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3d51b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3d4eadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3d4ead988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3d4eac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_m21qp6p                        0x00005633f86dccbe <unavailable> + 7358

    5    libc.so.6                          0x00002ab3d53a2460 __libc_start_main +
    245

    6    tmp_m21qp6p                        0x00005633f86dc649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let count = txt.filter { $0.isLowercase && $0.asciiValue!\
    \ % 2 == 1 }.count\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpe9kqe82n/tmpe9kqe82n.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab32abf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab32a8eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab32a8ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab32a8ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9kqe82n                        0x0000558e2286550b <unavailable> + 9483

    5    libc.so.6                          0x00002ab32ade3460 __libc_start_main +
    245

    6    tmpe9kqe82n                        0x0000558e228648b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpeor7ql95.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpeor7ql95.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let odd_letters = txt.filter { $0.isLowercase &&\
    \ $0.asciiValue! % 2 == 1 }\n    return .failure(odd_letters.count)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpch6820si/tmpch6820si.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac45e2a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac45df98b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac45df98988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac45df977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpch6820si                        0x0000555c8f73350b <unavailable> + 9483

    5    libc.so.6                          0x00002ac45e48d460 __libc_start_main +
    245

    6    tmpch6820si                        0x0000555c8f7328b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let words2\
    \ = txt.split(separator: \",\")\n    if words2.count > 1 {\n        return .success(words2.map\
    \ { String($0) })\n    }\n    let count = txt.lowercased().filter { $0 >= \"a\"\
    \ && $0 <= \"z\" }.count\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpvdv3prot/tmpvdv3prot.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbf6182c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbf5e79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbf5e79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbf5e787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvdv3prot                        0x000055defc0ac3f3 <unavailable> + 9203

    5    libc.so.6                          0x00002abbf636e460 __libc_start_main +
    245

    6    tmpvdv3prot                        0x000055defc0ab8d9 <unavailable> + 6361

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpeor7ql95.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpeor7ql95.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpj1l2o_pg/tmpj1l2o_pg.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67955cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67952c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67952c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67952c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1l2o_pg                        0x000055a1e70a184c <unavailable> + 6220

    5    libc.so.6                          0x00002b67957b9460 __libc_start_main +
    245

    6    tmpj1l2o_pg                        0x000055a1e70a1389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.filter { $0.asciiValue! % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpexcpl43f.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpexcpl43f.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map(String.init))\n    }\n    let commas =\
    \ txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map(String.init))\n\
    \    }\n    let odd_letters = txt.lowercased().filter { $0.isLetter && $0.asciiValue!\
    \ % 2 == 1 }\n    return .failure(odd_letters.count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp7sod_cou/tmp7sod_cou.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba910deac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba910ae1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba910ae1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba910ae07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7sod_cou                        0x000055faab76355b <unavailable> + 9563

    5    libc.so.6                          0x00002ba910fd6460 __libc_start_main +
    245

    6    tmp7sod_cou                        0x000055faab762909 <unavailable> + 6409

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.filter { $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp9kr3bc6p.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp9kr3bc6p.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.filter { $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp9kr3bc6p.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp9kr3bc6p.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0\
    \ >= \"a\" && $0 <= \"z\" }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpf8hezzzp.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpf8hezzzp.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let words = txt.split(separator: \" \").map(String.init) as?\
    \ [String] {\n        return .success(words)\n    } else if let words = txt.split(separator:\
    \ \",\").map(String.init) as? [String] {\n        return .success(words)\n   \
    \ } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp_m21qp6p/tmp_m21qp6p.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3d51b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3d4eadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3d4ead988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3d4eac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_m21qp6p                        0x00005633f86dccbe <unavailable> + 7358

    5    libc.so.6                          0x00002ab3d53a2460 __libc_start_main +
    245

    6    tmp_m21qp6p                        0x00005633f86dc649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let words = txt.split(separator: \" \").map(String.init) as?\
    \ [String] {\n        return .success(words)\n    } else if let words = txt.split(separator:\
    \ \",\").map(String.init) as? [String] {\n        return .success(words)\n   \
    \ } else {\n        return .failure(txt.lowercased().filter { $0 >= \"a\" && $0\
    \ <= \"z\" }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp2gvcnjk8/tmp2gvcnjk8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38e0e07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38e0afeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38e0afe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38e0afd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2gvcnjk8                        0x00005654a92bdcbe <unavailable> + 7358

    5    libc.so.6                          0x00002b38e0ff3460 __libc_start_main +
    245

    6    tmp2gvcnjk8                        0x00005654a92bd649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Implement\n    return .failure(0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpiihvqj3s/tmpiihvqj3s.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09adddbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09adad2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09adad2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09adad17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiihvqj3s                        0x000055e8c36a684c <unavailable> + 6220

    5    libc.so.6                          0x00002b09adfc7460 __libc_start_main +
    245

    6    tmpiihvqj3s                        0x000055e8c36a6389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpj1l2o_pg/tmpj1l2o_pg.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67955cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67952c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67952c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67952c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1l2o_pg                        0x000055a1e70a184c <unavailable> + 6220

    5    libc.so.6                          0x00002b67957b9460 __libc_start_main +
    245

    6    tmpj1l2o_pg                        0x000055a1e70a1389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpj1l2o_pg/tmpj1l2o_pg.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67955cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67952c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67952c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67952c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1l2o_pg                        0x000055a1e70a184c <unavailable> + 6220

    5    libc.so.6                          0x00002b67957b9460 __libc_start_main +
    245

    6    tmpj1l2o_pg                        0x000055a1e70a1389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.filter { $0.asciiValue! % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpexcpl43f.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpexcpl43f.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter({ $0.isLetter\
    \ }).filter({ $0.unicodeScalars.first!.value % 2 == 1 }).count)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpf9nr62lr.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpf9nr62lr.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0\
    \ >= \"a\" && $0 <= \"z\" }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpf8hezzzp.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpf8hezzzp.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpeor7ql95.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpeor7ql95.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let odd = txt.lowercased().filter { $0.isLetter\
    \ && $0.asciiValue! % 2 == 1 }.count\n    return .failure(odd)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpy05dga92/tmpy05dga92.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abdc6b37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abdc682eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abdc682e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abdc682d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy05dga92                        0x00005579797d155b <unavailable> + 9563

    5    libc.so.6                          0x00002abdc6d23460 __libc_start_main +
    245

    6    tmpy05dga92                        0x00005579797d0909 <unavailable> + 6409

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let words = txt.split(separator: \" \").map(String.init) as?\
    \ [String] {\n        return .success(words)\n    } else if let words = txt.split(separator:\
    \ \",\").map(String.init) as? [String] {\n        return .success(words)\n   \
    \ } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp_m21qp6p/tmp_m21qp6p.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3d51b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3d4eadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3d4ead988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3d4eac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_m21qp6p                        0x00005633f86dccbe <unavailable> + 7358

    5    libc.so.6                          0x00002ab3d53a2460 __libc_start_main +
    245

    6    tmp_m21qp6p                        0x00005633f86dc649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let index = txt.firstIndex(of: \" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if let index = txt.firstIndex(of: \",\"\
    ) {\n        return .success(txt.split(separator: \",\").map(String.init))\n \
    \   } else {\n        return .failure(txt.lowercased().filter { $0.isLetter }.count\
    \ % 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp2p81_324/tmp2p81_324.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5d9228c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5d8f1fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5d8f1f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5d8f1e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2p81_324                        0x0000563689827403 <unavailable> + 9219

    5    libc.so.6                          0x00002ac5d9414460 __libc_start_main +
    245

    6    tmp2p81_324                        0x00005636898268e9 <unavailable> + 6377

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.components(separatedBy: \" \")\n    if words.count\
    \ > 1 {\n        return .success(words)\n    }\n    let commas = txt.components(separatedBy:\
    \ \",\")\n    if commas.count > 1 {\n        return .success(commas)\n    }\n\
    \    let count = txt.filter { $0.isLowercase && $0.asciiValue! % 2 == 1 }.count\n\
    \    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpi39ws4zn.swift:9:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpi39ws4zn.swift:13:22: error: value of type 'String'\
    \ has no member 'components'\n    let commas = txt.components(separatedBy: \"\
    ,\")\n                 ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        var count = 0\n        for c in txt.lowercased()\
    \ {\n            if (Int(c.asciiValue!) - Int(\"a\".asciiValue!)) % 2 == 1 {\n\
    \                count += 1\n            }\n        }\n        return .failure(count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpm0sn3c34.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpm0sn3c34.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n/tmp/tmpm0sn3c34.swift:16:46:\
    \ error: value of type 'String' has no member 'asciiValue'\n            if (Int(c.asciiValue!)\
    \ - Int(\"a\".asciiValue!)) % 2 == 1 {\n                                     \
    \    ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.filter { $0.asciiValue! % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpexcpl43f.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpexcpl43f.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let words = txt.split(separator: \" \").map(String.init) as?\
    \ [String] {\n        return .success(words)\n    } else if let words = txt.split(separator:\
    \ \",\").map(String.init) as? [String] {\n        return .success(words)\n   \
    \ } else {\n        return .failure(txt.lowercased().filter { $0.isLetter }.filter\
    \ { $0.asciiValue! % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp737fnnqd/tmp737fnnqd.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac677dcec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac677ac5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac677ac5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac677ac47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp737fnnqd                        0x00005643b8a46cbe <unavailable> + 7358

    5    libc.so.6                          0x00002ac677fba460 __libc_start_main +
    245

    6    tmp737fnnqd                        0x00005643b8a46649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Implement\n    return .failure(0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpiihvqj3s/tmpiihvqj3s.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09adddbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09adad2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09adad2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09adad17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiihvqj3s                        0x000055e8c36a684c <unavailable> + 6220

    5    libc.so.6                          0x00002b09adfc7460 __libc_start_main +
    245

    6    tmpiihvqj3s                        0x000055e8c36a6389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.components(separatedBy: \" \")\n    if words.count\
    \ > 1 {\n        return .success(words)\n    }\n    let commas = txt.components(separatedBy:\
    \ \",\")\n    if commas.count > 1 {\n        return .success(commas)\n    }\n\
    \    let odd_letters = txt.filter { $0.isLowercase && $0.asciiValue! % 2 == 1\
    \ }\n    return .failure(odd_letters.count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmprxczi7vx.swift:9:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmprxczi7vx.swift:13:22: error: value of type 'String'\
    \ has no member 'components'\n    let commas = txt.components(separatedBy: \"\
    ,\")\n                 ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.components(separatedBy: \" \")\n    if words.count\
    \ > 1 {\n        return .success(words)\n    }\n    let commas = txt.components(separatedBy:\
    \ \",\")\n    if commas.count > 1 {\n        return .success(commas)\n    }\n\
    \    var count = 0\n    for c in txt.lowercased() {\n        if c >= \"a\" &&\
    \ c <= \"z\" {\n            let index = Int(c.asciiValue!) - Int(\"a\".asciiValue!)\n\
    \            if index % 2 == 1 {\n                count += 1\n            }\n\
    \        }\n    }\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpk4x3b476.swift:9:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpk4x3b476.swift:13:22: error: value of type 'String'\
    \ has no member 'components'\n    let commas = txt.components(separatedBy: \"\
    ,\")\n                 ~~~ ^~~~~~~~~~\n/tmp/tmpk4x3b476.swift:20:54: error: value\
    \ of type 'String' has no member 'asciiValue'\n            let index = Int(c.asciiValue!)\
    \ - Int(\"a\".asciiValue!)\n                                                 ~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let odd_letters = txt.filter { $0.isLowercase &&\
    \ $0.asciiValue! % 2 == 1 }\n    return .failure(odd_letters.count)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpch6820si/tmpch6820si.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac45e2a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac45df98b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac45df98988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac45df977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpch6820si                        0x0000555c8f73350b <unavailable> + 9483

    5    libc.so.6                          0x00002ac45e48d460 __libc_start_main +
    245

    6    tmpch6820si                        0x0000555c8f7328b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let lower = txt.lowercased()\n    let odds = lower.filter\
    \ { $0.unicodeScalars.first!.value % 2 == 1 }\n    return .failure(odds.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpnhhf3d_v/tmpnhhf3d_v.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba64532c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba64229b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba64229988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba642287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnhhf3d_v                        0x000055985469467b <unavailable> + 9851

    5    libc.so.6                          0x00002aba6471e460 __libc_start_main +
    245

    6    tmpnhhf3d_v                        0x0000559854693a29 <unavailable> + 6697

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.filter { $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp9kr3bc6p.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp9kr3bc6p.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0\
    \ >= \"a\" && $0 <= \"z\" }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpf8hezzzp.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpf8hezzzp.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp5_d6zhjj/tmp5_d6zhjj.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b60a9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b60794b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b60794988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b607937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5_d6zhjj                        0x000055e8021d284c <unavailable> + 6220

    5    libc.so.6                          0x00002b0b60c89460 __libc_start_main +
    245

    6    tmp5_d6zhjj                        0x000055e8021d2389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let words2\
    \ = txt.split(separator: \",\")\n    if words2.count > 1 {\n        return .success(words2.map\
    \ { String($0) })\n    }\n    let odd = txt.filter { $0.isLowercase && $0.asciiValue!\
    \ % 2 == 1 }.count\n    return .failure(odd)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpn0_edteu/tmpn0_edteu.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91b0f3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91b0c31b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91b0c31988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91b0c307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0_edteu                        0x00005592ab60250b <unavailable> + 9483

    5    libc.so.6                          0x00002b91b1126460 __libc_start_main +
    245

    6    tmpn0_edteu                        0x00005592ab6018b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpeor7ql95.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpeor7ql95.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.filter { $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp9kr3bc6p.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp9kr3bc6p.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.components(separatedBy: \" \")\n    if words.count\
    \ > 1 {\n        return .success(words)\n    }\n    let chars = txt.components(separatedBy:\
    \ \",\")\n    if chars.count > 1 {\n        return .success(chars)\n    }\n  \
    \  let count = txt.filter { $0.isLowercase && $0.asciiValue! % 2 == 1 }.count\n\
    \    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp8ew15nh_.swift:9:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmp8ew15nh_.swift:13:21: error: value of type 'String'\
    \ has no member 'components'\n    let chars = txt.components(separatedBy: \",\"\
    )\n                ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let _ = txt.range(of: \" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if let _ = txt.range(of: \",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0\
    \ >= \"a\" && $0 <= \"z\" }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp_yb2hz40.swift:9:20: error: value of type 'String' has no member\
    \ 'range'\n    if let _ = txt.range(of: \" \") {\n               ~~~ ^~~~~\n/tmp/tmp_yb2hz40.swift:10:29:\
    \ error: value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n                        ~~~ ^~~~~~~~~~\n/tmp/tmp_yb2hz40.swift:11:27:\
    \ error: value of type 'String' has no member 'range'\n    } else if let _ = txt.range(of:\
    \ \",\") {\n                      ~~~ ^~~~~\n/tmp/tmp_yb2hz40.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.components(separatedBy: \" \")\n    if words.count\
    \ > 1 {\n        return .success(words)\n    }\n    let letters = txt.components(separatedBy:\
    \ \",\")\n    if letters.count > 1 {\n        return .success(letters)\n    }\n\
    \    let count = txt.lowercased().filter { $0.isLetter }.reduce(0) { $1.unicodeScalars.first!.value\
    \ % 2 == 1 ? $0 + 1 : $0 }\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmparpfmlgv.swift:9:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmparpfmlgv.swift:13:23: error: value of type 'String'\
    \ has no member 'components'\n    let letters = txt.components(separatedBy: \"\
    ,\")\n                  ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let odd_letters = txt.filter { $0.isLowercase &&\
    \ $0.asciiValue! % 2 == 1 }\n    return .failure(odd_letters.count)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpch6820si/tmpch6820si.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac45e2a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac45df98b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac45df98988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac45df977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpch6820si                        0x0000555c8f73350b <unavailable> + 9483

    5    libc.so.6                          0x00002ac45e48d460 __libc_start_main +
    245

    6    tmpch6820si                        0x0000555c8f7328b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.filter { $0.asciiValue! % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpexcpl43f.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpexcpl43f.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let lower = txt.lowercased()\n    var count = 0\n\
    \    for (i, c) in lower.enumerated() {\n        if c.asciiValue! % 2 == i % 2\
    \ {\n            count += 1\n        }\n    }\n    return .failure(count)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp_jekqks_/tmp_jekqks_.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba44fd93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba44fa8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba44fa8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba44fa897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jekqks_                        0x000055f72c012523 <unavailable> + 9507

    5    libc.so.6                          0x00002ba44ff7f460 __libc_start_main +
    245

    6    tmp_jekqks_                        0x000055f72c011a09 <unavailable> + 6665

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let split = txt.split(separator: \" \").map(String.init) as?\
    \ [String] {\n        return .success(split)\n    } else if let split = txt.split(separator:\
    \ \",\").map(String.init) as? [String] {\n        return .success(split)\n   \
    \ } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpth_km69c/tmpth_km69c.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab935681c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab935378b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab935378988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9353777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpth_km69c                        0x0000561a9ac81cbe <unavailable> + 7358

    5    libc.so.6                          0x00002ab93586d460 __libc_start_main +
    245

    6    tmpth_km69c                        0x0000561a9ac81649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.reduce(0) { $1.unicodeScalars.first!.value - 97 + $0 })\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpidb0eblw.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpidb0eblw.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n/tmp/tmpidb0eblw.swift:14:102:\
    \ error: cannot convert value of type 'UInt32' to expected argument type 'Int'\n\
    \        return .failure(txt.lowercased().filter { $0.isLetter }.reduce(0) { $1.unicodeScalars.first!.value\
    \ - 97 + $0 })\n                                                             \
    \                                        ^\n                                 \
    \                                           Int(                          )\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Implement me\n    return .failure(0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp87oemked/tmp87oemked.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b091a697c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b091a38eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b091a38e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b091a38d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp87oemked                        0x0000564fc303684c <unavailable> + 6220

    5    libc.so.6                          0x00002b091a883460 __libc_start_main +
    245

    6    tmp87oemked                        0x0000564fc3036389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Implement\n    return .failure(0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpiihvqj3s/tmpiihvqj3s.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09adddbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09adad2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09adad2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09adad17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiihvqj3s                        0x000055e8c36a684c <unavailable> + 6220

    5    libc.so.6                          0x00002b09adfc7460 __libc_start_main +
    245

    6    tmpiihvqj3s                        0x000055e8c36a6389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let _ = txt.range(of: \" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if let _ = txt.range(of: \",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0\
    \ >= \"a\" && $0 <= \"z\" }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp_yb2hz40.swift:9:20: error: value of type 'String' has no member\
    \ 'range'\n    if let _ = txt.range(of: \" \") {\n               ~~~ ^~~~~\n/tmp/tmp_yb2hz40.swift:10:29:\
    \ error: value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n                        ~~~ ^~~~~~~~~~\n/tmp/tmp_yb2hz40.swift:11:27:\
    \ error: value of type 'String' has no member 'range'\n    } else if let _ = txt.range(of:\
    \ \",\") {\n                      ~~~ ^~~~~\n/tmp/tmp_yb2hz40.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.components(separatedBy: \" \")\n    if words.count\
    \ > 1 {\n        return .success(words)\n    }\n    let chars = txt.components(separatedBy:\
    \ \",\")\n    if chars.count > 1 {\n        return .success(chars)\n    }\n  \
    \  var count = 0\n    for c in txt.lowercased() {\n        if c >= \"a\" && c\
    \ <= \"z\" {\n            let index = Int(c.asciiValue! - \"a\".asciiValue!)\n\
    \            if index % 2 == 1 {\n                count += 1\n            }\n\
    \        }\n    }\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpz56qcxlo.swift:9:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpz56qcxlo.swift:13:21: error: value of type 'String'\
    \ has no member 'components'\n    let chars = txt.components(separatedBy: \",\"\
    )\n                ~~~ ^~~~~~~~~~\n/tmp/tmpz56qcxlo.swift:20:49: error: value\
    \ of type 'String' has no member 'asciiValue'\n            let index = Int(c.asciiValue!\
    \ - \"a\".asciiValue!)\n                                            ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0\
    \ >= \"a\" && $0 <= \"z\" }.enumerated().filter { $0.offset % 2 == 0 }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp1zkdmhdh.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp1zkdmhdh.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter({ $0\
    \ >= \"a\" && $0 <= \"z\" }).enumerated().filter({ $0.offset % 2 == 0 }).count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp9uqwh7te.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp9uqwh7te.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let lower = txt.lowercased()\n    let odd = lower.filter\
    \ { $0.isLetter && $0.unicodeScalars.first!.value % 2 == 1 }\n    return .failure(odd.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpbowvt44x/tmpbowvt44x.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d66763c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d6645ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d6645a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d664597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbowvt44x                        0x000055e2bf75b6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b3d6694f460 __libc_start_main +
    245

    6    tmpbowvt44x                        0x000055e2bf75aa79 <unavailable> + 6777

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let lowercase = txt.lowercased()\n    let odd =\
    \ lowercase.filter { $0.isLetter && $0.asciiValue! % 2 == 1 }\n    return .failure(odd.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpxxefg3ju/tmpxxefg3ju.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4252bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad424fb5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad424fb5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad424fb47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxxefg3ju                        0x000055998b84755b <unavailable> + 9563

    5    libc.so.6                          0x00002ad4254aa460 __libc_start_main +
    245

    6    tmpxxefg3ju                        0x000055998b846909 <unavailable> + 6409

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpj1l2o_pg/tmpj1l2o_pg.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67955cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67952c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67952c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67952c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1l2o_pg                        0x000055a1e70a184c <unavailable> + 6220

    5    libc.so.6                          0x00002b67957b9460 __libc_start_main +
    245

    6    tmpj1l2o_pg                        0x000055a1e70a1389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpj1l2o_pg/tmpj1l2o_pg.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67955cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67952c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67952c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67952c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1l2o_pg                        0x000055a1e70a184c <unavailable> + 6220

    5    libc.so.6                          0x00002b67957b9460 __libc_start_main +
    245

    6    tmpj1l2o_pg                        0x000055a1e70a1389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    return .failure(txt.lowercased().filter { $0 >=\
    \ \"a\" && $0 <= \"z\" }.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpn5mjte_s/tmpn5mjte_s.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba275c4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba275941b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba275941988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2759407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn5mjte_s                        0x000056450c6023f3 <unavailable> + 9203

    5    libc.so.6                          0x00002ba275e36460 __libc_start_main +
    245

    6    tmpn5mjte_s                        0x000056450c6018d9 <unavailable> + 6361

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let lowercase = txt.filter { $0.isLowercase }\n\
    \    return .failure(lowercase.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpddikiqhk/tmpddikiqhk.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ba25adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ba22a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ba22a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ba22a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpddikiqhk                        0x000056264bff62d3 <unavailable> + 8915

    5    libc.so.6                          0x00002b6ba2799460 __libc_start_main +
    245

    6    tmpddikiqhk                        0x000056264bff57b9 <unavailable> + 6073

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let odd_letters = txt.filter { $0.isLowercase &&\
    \ $0.asciiValue! % 2 == 1 }\n    return .failure(odd_letters.count)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpch6820si/tmpch6820si.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac45e2a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac45df98b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac45df98988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac45df977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpch6820si                        0x0000555c8f73350b <unavailable> + 9483

    5    libc.so.6                          0x00002ac45e48d460 __libc_start_main +
    245

    6    tmpch6820si                        0x0000555c8f7328b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpeor7ql95.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpeor7ql95.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let index = txt.firstIndex(of: \" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if let index = txt.firstIndex(of: \"\
    ,\") {\n        return .success(txt.split(separator: \",\").map { String($0) })\n\
    \    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter }.filter\
    \ { $0.asciiValue! % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpl5qhw0wy/tmpl5qhw0wy.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88231d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8822ecbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8822ecb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8822eca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl5qhw0wy                        0x000056311e29a59b <unavailable> + 9627

    5    libc.so.6                          0x00002b88233c0460 __libc_start_main +
    245

    6    tmpl5qhw0wy                        0x000056311e299949 <unavailable> + 6473

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.filter { $0.asciiValue! % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpexcpl43f.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpexcpl43f.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let words = txt.split(separator: \" \").map(String.init) as?\
    \ [String] {\n        return .success(words)\n    } else if let words = txt.split(separator:\
    \ \",\").map(String.init) as? [String] {\n        return .success(words)\n   \
    \ } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp_m21qp6p/tmp_m21qp6p.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3d51b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3d4eadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3d4ead988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3d4eac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_m21qp6p                        0x00005633f86dccbe <unavailable> + 7358

    5    libc.so.6                          0x00002ab3d53a2460 __libc_start_main +
    245

    6    tmp_m21qp6p                        0x00005633f86dc649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let words = txt.split(separator: \" \").map(String.init) as?\
    \ [String] {\n        return .success(words)\n    } else if let words = txt.split(separator:\
    \ \",\").map(String.init) as? [String] {\n        return .success(words)\n   \
    \ } else {\n        return .failure(txt.lowercased().filter { $0.isLetter }.filter\
    \ { $0.asciiValue! % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp737fnnqd/tmp737fnnqd.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac677dcec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac677ac5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac677ac5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac677ac47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp737fnnqd                        0x00005643b8a46cbe <unavailable> + 7358

    5    libc.so.6                          0x00002ac677fba460 __libc_start_main +
    245

    6    tmp737fnnqd                        0x00005643b8a46649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.filter { $0.asciiValue! % 2 == 1 }.count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpd4agqa3j/tmpd4agqa3j.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe9a1acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe99ea3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe99ea3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe99ea27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd4agqa3j                        0x00005600b34c555b <unavailable> + 9563

    5    libc.so.6                          0x00002afe9a398460 __libc_start_main +
    245

    6    tmpd4agqa3j                        0x00005600b34c4909 <unavailable> + 6409

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let count = txt.lowercased().filter { $0.isLetter\
    \ && $0.asciiValue! % 2 == 1 }.count\n    return .failure(count)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp0wa3p5bw/tmp0wa3p5bw.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b598e8dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b598e5d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b598e5d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b598e5d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wa3p5bw                        0x0000558ab470a55b <unavailable> + 9563

    5    libc.so.6                          0x00002b598eacb460 __libc_start_main +
    245

    6    tmp0wa3p5bw                        0x0000558ab4709909 <unavailable> + 6409

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.filter { $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp9kr3bc6p.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp9kr3bc6p.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.filter { $0.asciiValue! % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpexcpl43f.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpexcpl43f.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let odds = txt.filter { $0.isLowercase && $0.asciiValue!\
    \ % 2 == 1 }.count\n    return .failure(odds)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpi15q5rcn/tmpi15q5rcn.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adae4822c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adae4519b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adae4519988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adae45187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi15q5rcn                        0x00005613bfe8750b <unavailable> + 9483

    5    libc.so.6                          0x00002adae4a0e460 __libc_start_main +
    245

    6    tmpi15q5rcn                        0x00005613bfe868b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter{ $0.isLetter\
    \ }.filter{ $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmphg3z422z.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmphg3z422z.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpj1l2o_pg/tmpj1l2o_pg.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67955cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67952c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67952c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67952c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1l2o_pg                        0x000055a1e70a184c <unavailable> + 6220

    5    libc.so.6                          0x00002b67957b9460 __libc_start_main +
    245

    6    tmpj1l2o_pg                        0x000055a1e70a1389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Implement this function\n    return .success([])\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpa9wudjkq/tmpa9wudjkq.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b520b5e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b520b2dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b520b2dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b520b2db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa9wudjkq                        0x000055e30c47184c <unavailable> + 6220

    5    libc.so.6                          0x00002b520b7d1460 __libc_start_main +
    245

    6    tmpa9wudjkq                        0x000055e30c471389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.reduce(0) { $1.unicodeScalars.first!.value - 97 + $0 })\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpidb0eblw.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpidb0eblw.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n/tmp/tmpidb0eblw.swift:14:102:\
    \ error: cannot convert value of type 'UInt32' to expected argument type 'Int'\n\
    \        return .failure(txt.lowercased().filter { $0.isLetter }.reduce(0) { $1.unicodeScalars.first!.value\
    \ - 97 + $0 })\n                                                             \
    \                                        ^\n                                 \
    \                                           Int(                          )\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let odd_letters = txt.lowercased().filter { $0.isLetter\
    \ && $0.asciiValue! % 2 == 1 }\n    return .failure(odd_letters.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpda8i007h/tmpda8i007h.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92cba79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92cb770b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92cb770988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92cb76f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpda8i007h                        0x00005577aa8b255b <unavailable> + 9563

    5    libc.so.6                          0x00002b92cbc65460 __libc_start_main +
    245

    6    tmpda8i007h                        0x00005577aa8b1909 <unavailable> + 6409

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .success([])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpkdei2ed5/tmpkdei2ed5.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac219557c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac21924eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac21924e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac21924d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkdei2ed5                        0x0000560804ff984c <unavailable> + 6220

    5    libc.so.6                          0x00002ac219743460 __libc_start_main +
    245

    6    tmpkdei2ed5                        0x0000560804ff9389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.filter { $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp9kr3bc6p.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp9kr3bc6p.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.filter { $0.asciiValue! % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpexcpl43f.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpexcpl43f.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let words = txt.split(separator: \" \").map(String.init) as?\
    \ [String] {\n        return .success(words)\n    } else if let words = txt.split(separator:\
    \ \",\").map(String.init) as? [String] {\n        return .success(words)\n   \
    \ } else {\n        return .failure(txt.filter({ $0.isLowercase }).count)\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpeiwttvok/tmpeiwttvok.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af34207bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af341d72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af341d72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af341d717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeiwttvok                        0x000055ad08aa9cbe <unavailable> + 7358

    5    libc.so.6                          0x00002af342267460 __libc_start_main +
    245

    6    tmpeiwttvok                        0x000055ad08aa9649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Implement me\n    return .failure(0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp87oemked/tmp87oemked.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b091a697c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b091a38eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b091a38e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b091a38d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp87oemked                        0x0000564fc303684c <unavailable> + 6220

    5    libc.so.6                          0x00002b091a883460 __libc_start_main +
    245

    6    tmp87oemked                        0x0000564fc3036389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let odd_letters = txt.filter { $0.isLetter && $0.isLowercase\
    \ && $0.asciiValue! % 2 == 1 }\n    return .failure(odd_letters.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmppkeroq9i/tmppkeroq9i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cef560c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cef257b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cef257988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cef2567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppkeroq9i                        0x000055df619b355b <unavailable> + 9563

    5    libc.so.6                          0x00002b1cef74c460 __libc_start_main +
    245

    6    tmppkeroq9i                        0x000055df619b2909 <unavailable> + 6409

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.map { $0.asciiValue! - 97 }.filter { $0 % 2 == 1 }.count)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpfux5jvx1.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpfux5jvx1.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.components(separatedBy: \" \")\n    if words.count\
    \ > 1 {\n        return .success(words)\n    }\n    let letters = txt.components(separatedBy:\
    \ \",\")\n    if letters.count > 1 {\n        return .success(letters)\n    }\n\
    \    let count = txt.lowercased().filter { $0.isLetter }.filter { $0.unicodeScalars.first!.value\
    \ % 2 == 1 }.count\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp9sihnf8l.swift:9:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmp9sihnf8l.swift:13:23: error: value of type 'String'\
    \ has no member 'components'\n    let letters = txt.components(separatedBy: \"\
    ,\")\n                  ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.filter { $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp9kr3bc6p.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp9kr3bc6p.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // Your code here\n    return .failure(0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpn91me9bh/tmpn91me9bh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b502c872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b502c569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b502c569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b502c5687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn91me9bh                        0x000056061a5b684c <unavailable> + 6220

    5    libc.so.6                          0x00002b502ca5e460 __libc_start_main +
    245

    6    tmpn91me9bh                        0x000056061a5b6389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.components(separatedBy: \" \")\n    if words.count\
    \ > 1 {\n        return .success(words)\n    }\n    let chars = txt.components(separatedBy:\
    \ \",\")\n    if chars.count > 1 {\n        return .success(chars)\n    }\n  \
    \  var count = 0\n    for char in txt {\n        if char.isLowercase {\n     \
    \       let index = Int(char.asciiValue!) - Int(UnicodeScalar(\"a\").value)\n\
    \            if index % 2 == 1 {\n                count += 1\n            }\n\
    \        }\n    }\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp79cgmcky.swift:9:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmp79cgmcky.swift:13:21: error: value of type 'String'\
    \ has no member 'components'\n    let chars = txt.components(separatedBy: \",\"\
    )\n                ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.components(separatedBy: \" \")\n    if words.count\
    \ > 1 {\n        return .success(words)\n    }\n    let chars = txt.components(separatedBy:\
    \ \",\")\n    if chars.count > 1 {\n        return .success(chars)\n    }\n  \
    \  let count = txt.filter { $0.isLowercase && $0.unicodeScalars.first!.value %\
    \ 2 == 1 }.count\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpkwga43xt.swift:9:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpkwga43xt.swift:13:21: error: value of type 'String'\
    \ has no member 'components'\n    let chars = txt.components(separatedBy: \",\"\
    )\n                ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.components(separatedBy: .whitespaces)\n    if words.count\
    \ > 0 {\n        return .success(words)\n    }\n    let commas = txt.components(separatedBy:\
    \ \",\")\n    if commas.count > 0 {\n        return .success(commas)\n    }\n\
    \    var count = 0\n    for c in txt.lowercased() {\n        if c.isLetter {\n\
    \            if c.asciiValue! % 2 == 1 {\n                count += 1\n       \
    \     }\n        }\n    }\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp5n1g4kn4.swift:9:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: .whitespaces)\n  \
    \              ~~~ ^~~~~~~~~~\n/tmp/tmp5n1g4kn4.swift:9:46: error: cannot infer\
    \ contextual base in reference to member 'whitespaces'\n    let words = txt.components(separatedBy:\
    \ .whitespaces)\n                                            ~^~~~~~~~~~~\n/tmp/tmp5n1g4kn4.swift:13:22:\
    \ error: value of type 'String' has no member 'components'\n    let commas = txt.components(separatedBy:\
    \ \",\")\n                 ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.filter { $0.asciiValue! % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpexcpl43f.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpexcpl43f.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Implement\n    return .failure(0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpiihvqj3s/tmpiihvqj3s.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09adddbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09adad2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09adad2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09adad17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiihvqj3s                        0x000055e8c36a684c <unavailable> + 6220

    5    libc.so.6                          0x00002b09adfc7460 __libc_start_main +
    245

    6    tmpiihvqj3s                        0x000055e8c36a6389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commas\
    \ = txt.split(separator: \",\")\n    if commas.count > 1 {\n        return .success(commas.map\
    \ { String($0) })\n    }\n    let odd_letters = txt.filter { $0.isLetter && $0.lowercased()\
    \ == $0 && $0.asciiValue! % 2 == 1 }\n    return .failure(odd_letters.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmprpqjfhrl.swift:17:67: error: binary operator '==' cannot be applied\
    \ to operands of type 'String' and 'String.Element' (aka 'Character')\n    let\
    \ odd_letters = txt.filter { $0.isLetter && $0.lowercased() == $0 && $0.asciiValue!\
    \ % 2 == 1 }\n                                                  ~~~~~~~~~~~~~~~\
    \ ^  ~~\n/tmp/tmprpqjfhrl.swift:17:67: note: overloads for '==' exist with these\
    \ partially matching parameter lists: (Character, Character), (String, String)\n\
    \    let odd_letters = txt.filter { $0.isLetter && $0.lowercased() == $0 && $0.asciiValue!\
    \ % 2 == 1 }\n                                                               \
    \   ^\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0\
    \ >= \"a\" && $0 <= \"z\" }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpf8hezzzp.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpf8hezzzp.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let words = txt.split(separator: \" \").map(String.init) as?\
    \ [String] {\n        return .success(words)\n    } else if let words = txt.split(separator:\
    \ \",\").map(String.init) as? [String] {\n        return .success(words)\n   \
    \ } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp_m21qp6p/tmp_m21qp6p.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3d51b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3d4eadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3d4ead988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3d4eac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_m21qp6p                        0x00005633f86dccbe <unavailable> + 7358

    5    libc.so.6                          0x00002ab3d53a2460 __libc_start_main +
    245

    6    tmp_m21qp6p                        0x00005633f86dc649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660011833
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Implement this function\n    return .failure(0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpb0saua81/tmpb0saua81.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5be506c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5be1fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5be1fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5be1fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb0saua81                        0x0000555b7671084c <unavailable> + 6220

    5    libc.so.6                          0x00002ba5be6f2460 __libc_start_main +
    245

    6    tmpb0saua81                        0x0000555b76710389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyfc5142q.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyfc5142q.swift:12:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.components(separatedBy: \" \")\n    if words.count\
    \ > 1 {\n        return .success(words)\n    }\n    let commas = txt.components(separatedBy:\
    \ \",\")\n    if commas.count > 1 {\n        return .success(commas)\n    }\n\
    \    let count = txt.filter { $0.isLowercase && $0.unicodeScalars.first!.value\
    \ % 2 == 1 }.count\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpgfukfl28.swift:9:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpgfukfl28.swift:13:22: error: value of type 'String'\
    \ has no member 'components'\n    let commas = txt.components(separatedBy: \"\
    ,\")\n                 ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011833
