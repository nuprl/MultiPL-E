language: swift
name: HumanEval_34_unique
results:
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var u = [Int]()\n    for i in l {\n        if !u.contains(i) {\n\
    \            u.append(i)\n        }\n    }\n    return u.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmppvw0gvqo/tmppvw0gvqo.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabd38f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabd35edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabd35ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabd35ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvw0gvqo                        0x000055a52f3925e5 <unavailable> + 5605

    5    libc.so.6                          0x00002aabd3ae2460 __libc_start_main +
    245

    6    tmppvw0gvqo                        0x000055a52f392199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmppvw0gvqo/tmppvw0gvqo.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabd38f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabd35edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabd35ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabd35ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvw0gvqo                        0x000055a52f3925e5 <unavailable> + 5605

    5    libc.so.6                          0x00002aabd3ae2460 __libc_start_main +
    245

    6    tmppvw0gvqo                        0x000055a52f392199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmppvw0gvqo/tmppvw0gvqo.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabd38f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabd35edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabd35ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabd35ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvw0gvqo                        0x000055a52f3925e5 <unavailable> + 5605

    5    libc.so.6                          0x00002aabd3ae2460 __libc_start_main +
    245

    6    tmppvw0gvqo                        0x000055a52f392199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for i in l {\n        if !uniqueList.contains(i)\
    \ {\n            uniqueList.append(i)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var u = [Int]()\n    for x in l {\n        if !u.contains(x) {\n\
    \            u.append(x)\n        }\n    }\n    return u.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var u = [Int]()\n    for x in l {\n        if !u.contains(x) {\n\
    \            u.append(x)\n        }\n    }\n    return u.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmppvw0gvqo/tmppvw0gvqo.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabd38f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabd35edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabd35ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabd35ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvw0gvqo                        0x000055a52f3925e5 <unavailable> + 5605

    5    libc.so.6                          0x00002aabd3ae2460 __libc_start_main +
    245

    6    tmppvw0gvqo                        0x000055a52f392199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var list = l\n    list.sort()\n    var result: [Int] = []\n   \
    \ var previous = -1\n    for i in list {\n        if i != previous {\n       \
    \     result.append(i)\n        }\n        previous = i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var u = [Int]()\n    for i in l {\n        if !u.contains(i) {\n\
    \            u.append(i)\n        }\n    }\n    return u.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var set = Set<Int>()\n    for i in l {\n        set.insert(i)\n\
    \    }\n    return Array(set).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmppvw0gvqo/tmppvw0gvqo.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabd38f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabd35edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabd35ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabd35ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvw0gvqo                        0x000055a52f3925e5 <unavailable> + 5605

    5    libc.so.6                          0x00002aabd3ae2460 __libc_start_main +
    245

    6    tmppvw0gvqo                        0x000055a52f392199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmppvw0gvqo/tmppvw0gvqo.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabd38f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabd35edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabd35ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabd35ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvw0gvqo                        0x000055a52f3925e5 <unavailable> + 5605

    5    libc.so.6                          0x00002aabd3ae2460 __libc_start_main +
    245

    6    tmppvw0gvqo                        0x000055a52f392199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmppvw0gvqo/tmppvw0gvqo.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabd38f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabd35edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabd35ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabd35ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvw0gvqo                        0x000055a52f3925e5 <unavailable> + 5605

    5    libc.so.6                          0x00002aabd3ae2460 __libc_start_main +
    245

    6    tmppvw0gvqo                        0x000055a52f392199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen: [Int:Bool] = [:]\n    return l.filter { seen.updateValue(true,\
    \ forKey: $0) == nil }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpqnq_kfs5/tmpqnq_kfs5.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74b6c00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74b68f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74b68f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74b68f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqnq_kfs5                        0x0000563e5192f625 <unavailable> + 5669

    5    libc.so.6                          0x00002b74b6dec460 __libc_start_main +
    245

    6    tmpqnq_kfs5                        0x0000563e5192f1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmppvw0gvqo/tmppvw0gvqo.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabd38f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabd35edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabd35ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabd35ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvw0gvqo                        0x000055a52f3925e5 <unavailable> + 5605

    5    libc.so.6                          0x00002aabd3ae2460 __libc_start_main +
    245

    6    tmppvw0gvqo                        0x000055a52f392199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for i in l {\n        if !uniqueList.contains(i)\
    \ {\n            uniqueList.append(i)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmppvw0gvqo/tmppvw0gvqo.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabd38f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabd35edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabd35ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabd35ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvw0gvqo                        0x000055a52f3925e5 <unavailable> + 5605

    5    libc.so.6                          0x00002aabd3ae2460 __libc_start_main +
    245

    6    tmppvw0gvqo                        0x000055a52f392199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var set = Set<Int>()\n    for i in l {\n        set.insert(i)\n\
    \    }\n    return Array(set).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var u = [Int]()\n    for i in l {\n        if !u.contains(i) {\n\
    \            u.append(i)\n        }\n    }\n    return u.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen: [Int:Bool] = [:]\n    return l.filter { seen.updateValue(true,\
    \ forKey: $0) == nil }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpqnq_kfs5/tmpqnq_kfs5.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74b6c00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74b68f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74b68f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74b68f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqnq_kfs5                        0x0000563e5192f625 <unavailable> + 5669

    5    libc.so.6                          0x00002b74b6dec460 __libc_start_main +
    245

    6    tmpqnq_kfs5                        0x0000563e5192f1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var set = Set<Int>()\n    for i in l {\n        set.insert(i)\n\
    \    }\n    return Array(set).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen: [Int:Bool] = [:]\n    return l.filter { seen.updateValue(true,\
    \ forKey: $0) == nil }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpqnq_kfs5/tmpqnq_kfs5.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74b6c00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74b68f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74b68f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74b68f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqnq_kfs5                        0x0000563e5192f625 <unavailable> + 5669

    5    libc.so.6                          0x00002b74b6dec460 __libc_start_main +
    245

    6    tmpqnq_kfs5                        0x0000563e5192f1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var u = [Int]()\n    for i in l {\n        if !u.contains(i) {\n\
    \            u.append(i)\n        }\n    }\n    return u.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var u = [Int]()\n    for i in l {\n        if !u.contains(i) {\n\
    \            u.append(i)\n        }\n    }\n    return u.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    let unique = Array(Set(l))\n    return unique.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var u = [Int]()\n    for x in l {\n        if !u.contains(x) {\n\
    \            u.append(x)\n        }\n    }\n    return u.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var set = Set<Int>()\n    for i in l {\n        set.insert(i)\n\
    \    }\n    return Array(set).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var unique = [Int]()\n    for i in l {\n        if !unique.contains(i)\
    \ {\n            unique.append(i)\n        }\n    }\n    return unique.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for i in l {\n        if !uniqueList.contains(i)\
    \ {\n            uniqueList.append(i)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for i in l {\n        if !uniqueList.contains(i)\
    \ {\n            uniqueList.append(i)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var s = Set<Int>()\n    for i in l {\n        s.insert(i)\n   \
    \ }\n    return Array(s).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var unique = [Int]()\n    for i in l {\n        if !unique.contains(i)\
    \ {\n            unique.append(i)\n        }\n    }\n    return unique.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var m = [Int: Int]()\n    for i in l {\n        m[i] = 1\n    }\n\
    \    return Array(m.keys).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var unique = [Int]()\n    for i in l {\n        if !unique.contains(i)\
    \ {\n            unique.append(i)\n        }\n    }\n    return unique.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var u = [Int]()\n    for i in l {\n        if !u.contains(i) {\n\
    \            u.append(i)\n        }\n    }\n    return u.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var u = [Int]()\n    for item in l {\n        if !u.contains(item)\
    \ {\n            u.append(item)\n        }\n    }\n    return u.sorted()\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var set = Set<Int>()\n    for i in l {\n        set.insert(i)\n\
    \    }\n    return set.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var list = l\n    list.sort()\n    return list.reduce([]) {\n \
    \       if $0.last != $1 {\n            return $0 + [$1]\n        } else {\n \
    \           return $0\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for i in l {\n        if !uniqueList.contains(i)\
    \ {\n            uniqueList.append(i)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var u = [Int]()\n    for x in l {\n        if !u.contains(x) {\n\
    \            u.append(x)\n        }\n    }\n    return u.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmppvw0gvqo/tmppvw0gvqo.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabd38f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabd35edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabd35ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabd35ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvw0gvqo                        0x000055a52f3925e5 <unavailable> + 5605

    5    libc.so.6                          0x00002aabd3ae2460 __libc_start_main +
    245

    6    tmppvw0gvqo                        0x000055a52f392199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var u = [Int]()\n    for i in l {\n        if !u.contains(i) {\n\
    \            u.append(i)\n        }\n    }\n    return u.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmppvw0gvqo/tmppvw0gvqo.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabd38f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabd35edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabd35ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabd35ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvw0gvqo                        0x000055a52f3925e5 <unavailable> + 5605

    5    libc.so.6                          0x00002aabd3ae2460 __libc_start_main +
    245

    6    tmppvw0gvqo                        0x000055a52f392199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var list = l\n    list.sort()\n    var result: [Int] = []\n   \
    \ var last: Int?\n    for i in list {\n        if i != last {\n            result.append(i)\n\
    \            last = i\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var set = Set<Int>()\n    for i in l {\n        set.insert(i)\n\
    \    }\n    return Array(set).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = Set<Int>()\n    return l.filter {\n        if seen.contains($0)\
    \ {\n            return false\n        } else {\n            seen.insert($0)\n\
    \            return true\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpoyeopzna/tmpoyeopzna.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e83268c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e82f5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e82f5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e82f5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoyeopzna                        0x000055f66c6f7635 <unavailable> + 5685

    5    libc.so.6                          0x00002b0e83454460 __libc_start_main +
    245

    6    tmpoyeopzna                        0x000055f66c6f71e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var list = l\n    list.sort()\n    var result: [Int] = []\n   \
    \ for i in list {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = Set<Int>()\n    return l.filter { x in\n        if seen.contains(x)\
    \ {\n            return false\n        } else {\n            seen.insert(x)\n\
    \            return true\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpej_c9i4h/tmpej_c9i4h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d822ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d81fe3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d81fe3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d81fe27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpej_c9i4h                        0x00005563cc358635 <unavailable> + 5685

    5    libc.so.6                          0x00002b6d824d8460 __libc_start_main +
    245

    6    tmpej_c9i4h                        0x00005563cc3581e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for i in l {\n        if !uniqueList.contains(i)\
    \ {\n            uniqueList.append(i)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmppvw0gvqo/tmppvw0gvqo.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabd38f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabd35edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabd35ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabd35ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvw0gvqo                        0x000055a52f3925e5 <unavailable> + 5605

    5    libc.so.6                          0x00002aabd3ae2460 __libc_start_main +
    245

    6    tmppvw0gvqo                        0x000055a52f392199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmppvw0gvqo/tmppvw0gvqo.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabd38f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabd35edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabd35ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabd35ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvw0gvqo                        0x000055a52f3925e5 <unavailable> + 5605

    5    libc.so.6                          0x00002aabd3ae2460 __libc_start_main +
    245

    6    tmppvw0gvqo                        0x000055a52f392199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var unique = [Int]()\n    for i in l {\n        if !unique.contains(i)\
    \ {\n            unique.append(i)\n        }\n    }\n    return unique.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var list = l\n    list.sort()\n    var last = list[0]\n    var\
    \ i = 1\n    while i < list.count {\n        if list[i] == last {\n          \
    \  list.removeAtIndex(i)\n        } else {\n            last = list[i]\n     \
    \       i += 1\n        }\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmp93nb4x1o.swift:10:18: error: value of type '[Int]' has no member\
    \ 'removeAtIndex'\n            list.removeAtIndex(i)\n            ~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var u = [Int]()\n    for x in l {\n        if !u.contains(x) {\n\
    \            u.append(x)\n        }\n    }\n    return u.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for i in l {\n        if !uniqueList.contains(i)\
    \ {\n            uniqueList.append(i)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    let u = Array(Set(l))\n    return u.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmppvw0gvqo/tmppvw0gvqo.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabd38f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabd35edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabd35ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabd35ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvw0gvqo                        0x000055a52f3925e5 <unavailable> + 5605

    5    libc.so.6                          0x00002aabd3ae2460 __libc_start_main +
    245

    6    tmppvw0gvqo                        0x000055a52f392199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var set = Set<Int>()\n    for i in l {\n        set.insert(i)\n\
    \    }\n    return Array(set).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var s = Set<Int>()\n    for i in l {\n        s.insert(i)\n   \
    \ }\n    return Array(s).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var s = Set<Int>()\n    for i in l {\n        s.insert(i)\n   \
    \ }\n    return Array(s).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var u = [Int]()\n    for i in l {\n        if !u.contains(i) {\n\
    \            u.append(i)\n        }\n    }\n    return u.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = Set<Int>()\n    return l.filter { x in\n        if seen.contains(x)\
    \ {\n            return false\n        } else {\n            seen.insert(x)\n\
    \            return true\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpej_c9i4h/tmpej_c9i4h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d822ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d81fe3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d81fe3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d81fe27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpej_c9i4h                        0x00005563cc358635 <unavailable> + 5685

    5    libc.so.6                          0x00002b6d824d8460 __libc_start_main +
    245

    6    tmpej_c9i4h                        0x00005563cc3581e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmppvw0gvqo/tmppvw0gvqo.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabd38f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabd35edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabd35ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabd35ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvw0gvqo                        0x000055a52f3925e5 <unavailable> + 5605

    5    libc.so.6                          0x00002aabd3ae2460 __libc_start_main +
    245

    6    tmppvw0gvqo                        0x000055a52f392199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for i in l {\n        if !uniqueList.contains(i)\
    \ {\n            uniqueList.append(i)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var u = [Int]()\n    for x in l {\n        if !u.contains(x) {\n\
    \            u.append(x)\n        }\n    }\n    return u.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmppvw0gvqo/tmppvw0gvqo.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabd38f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabd35edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabd35ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabd35ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvw0gvqo                        0x000055a52f3925e5 <unavailable> + 5605

    5    libc.so.6                          0x00002aabd3ae2460 __libc_start_main +
    245

    6    tmppvw0gvqo                        0x000055a52f392199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var unique = [Int]()\n    for i in l {\n        if !unique.contains(i)\
    \ {\n            unique.append(i)\n        }\n    }\n    return unique.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen: [Int:Bool] = [:]\n    return l.filter { seen.updateValue(true,\
    \ forKey: $0) == nil }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpqnq_kfs5/tmpqnq_kfs5.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74b6c00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74b68f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74b68f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74b68f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqnq_kfs5                        0x0000563e5192f625 <unavailable> + 5669

    5    libc.so.6                          0x00002b74b6dec460 __libc_start_main +
    245

    6    tmpqnq_kfs5                        0x0000563e5192f1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var unique = [Int]()\n    for i in l {\n        if !unique.contains(i)\
    \ {\n            unique.append(i)\n        }\n    }\n    return unique.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for i in l {\n        if !uniqueList.contains(i)\
    \ {\n            uniqueList.append(i)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    let sorted = l.sorted()\n    var result: [Int] = []\n    for i\
    \ in sorted {\n        if result.isEmpty || result.last! != i {\n            result.append(i)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var unique = [Int]()\n    for i in l {\n        if !unique.contains(i)\
    \ {\n            unique.append(i)\n        }\n    }\n    return unique.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmppvw0gvqo/tmppvw0gvqo.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabd38f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabd35edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabd35ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabd35ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvw0gvqo                        0x000055a52f3925e5 <unavailable> + 5605

    5    libc.so.6                          0x00002aabd3ae2460 __libc_start_main +
    245

    6    tmppvw0gvqo                        0x000055a52f392199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen: [Int:Bool] = [:]\n    return l.filter { seen.updateValue(true,\
    \ forKey: $0) == nil }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpqnq_kfs5/tmpqnq_kfs5.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74b6c00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74b68f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74b68f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74b68f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqnq_kfs5                        0x0000563e5192f625 <unavailable> + 5669

    5    libc.so.6                          0x00002b74b6dec460 __libc_start_main +
    245

    6    tmpqnq_kfs5                        0x0000563e5192f1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var list = l\n    list.sort()\n    var result: [Int] = []\n   \
    \ for i in list {\n        if result.last != i {\n            result.append(i)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmppvw0gvqo/tmppvw0gvqo.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabd38f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabd35edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabd35ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabd35ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvw0gvqo                        0x000055a52f3925e5 <unavailable> + 5605

    5    libc.so.6                          0x00002aabd3ae2460 __libc_start_main +
    245

    6    tmppvw0gvqo                        0x000055a52f392199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var s = Set<Int>()\n    for i in l {\n        s.insert(i)\n   \
    \ }\n    return Array(s).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return l.reduce([]) {\n        if !$0.contains($1) {\n        \
    \    return $0 + [$1]\n        } else {\n            return $0\n        }\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmp7n98nc0o/tmp7n98nc0o.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3a095ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3a0651b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3a0651988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3a06507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7n98nc0o                        0x000055a063030555 <unavailable> + 5461

    5    libc.so.6                          0x00002ab3a0b46460 __libc_start_main +
    245

    6    tmp7n98nc0o                        0x000055a063030109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList: [Int] = []\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmppvw0gvqo/tmppvw0gvqo.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabd38f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabd35edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabd35ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabd35ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvw0gvqo                        0x000055a52f3925e5 <unavailable> + 5605

    5    libc.so.6                          0x00002aabd3ae2460 __libc_start_main +
    245

    6    tmppvw0gvqo                        0x000055a52f392199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var set = Set<Int>()\n    for i in l {\n        set.insert(i)\n\
    \    }\n    return Array(set).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmppvw0gvqo/tmppvw0gvqo.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabd38f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabd35edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabd35ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabd35ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvw0gvqo                        0x000055a52f3925e5 <unavailable> + 5605

    5    libc.so.6                          0x00002aabd3ae2460 __libc_start_main +
    245

    6    tmppvw0gvqo                        0x000055a52f392199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniq = [Int]()\n    for x in l {\n        if !uniq.contains(x)\
    \ {\n            uniq.append(x)\n        }\n    }\n    return uniq.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for i in l {\n        if !uniqueList.contains(i)\
    \ {\n            uniqueList.append(i)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmppvw0gvqo/tmppvw0gvqo.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabd38f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabd35edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabd35ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabd35ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvw0gvqo                        0x000055a52f3925e5 <unavailable> + 5605

    5    libc.so.6                          0x00002aabd3ae2460 __libc_start_main +
    245

    6    tmppvw0gvqo                        0x000055a52f392199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var unique = [Int]()\n    for i in l {\n        if !unique.contains(i)\
    \ {\n            unique.append(i)\n        }\n    }\n    return unique.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmppvw0gvqo/tmppvw0gvqo.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabd38f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabd35edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabd35ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabd35ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvw0gvqo                        0x000055a52f3925e5 <unavailable> + 5605

    5    libc.so.6                          0x00002aabd3ae2460 __libc_start_main +
    245

    6    tmppvw0gvqo                        0x000055a52f392199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen: [Int:Bool] = [:]\n    return l.filter { seen.updateValue(true,\
    \ forKey: $0) == nil }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpqnq_kfs5/tmpqnq_kfs5.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74b6c00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74b68f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74b68f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74b68f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqnq_kfs5                        0x0000563e5192f625 <unavailable> + 5669

    5    libc.so.6                          0x00002b74b6dec460 __libc_start_main +
    245

    6    tmpqnq_kfs5                        0x0000563e5192f1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var unique = [Int]()\n    for i in l {\n        if !unique.contains(i)\
    \ {\n            unique.append(i)\n        }\n    }\n    return unique.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmppvw0gvqo/tmppvw0gvqo.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabd38f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabd35edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabd35ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabd35ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvw0gvqo                        0x000055a52f3925e5 <unavailable> + 5605

    5    libc.so.6                          0x00002aabd3ae2460 __libc_start_main +
    245

    6    tmppvw0gvqo                        0x000055a52f392199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList: [Int] = []\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmppvw0gvqo/tmppvw0gvqo.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabd38f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabd35edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabd35ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabd35ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvw0gvqo                        0x000055a52f3925e5 <unavailable> + 5605

    5    libc.so.6                          0x00002aabd3ae2460 __libc_start_main +
    245

    6    tmppvw0gvqo                        0x000055a52f392199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for i in l {\n        if !uniqueList.contains(i)\
    \ {\n            uniqueList.append(i)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var set = Set<Int>()\n    for i in l {\n        set.insert(i)\n\
    \    }\n    return Array(set).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for i in l {\n        if !uniqueList.contains(i)\
    \ {\n            uniqueList.append(i)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = Set<Int>()\n    return l.filter { x in\n        if seen.contains(x)\
    \ {\n            return false\n        } else {\n            seen.insert(x)\n\
    \            return true\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpej_c9i4h/tmpej_c9i4h.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d822ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d81fe3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d81fe3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d81fe27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpej_c9i4h                        0x00005563cc358635 <unavailable> + 5685

    5    libc.so.6                          0x00002b6d824d8460 __libc_start_main +
    245

    6    tmpej_c9i4h                        0x00005563cc3581e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var set = Set<Int>()\n    for i in l {\n        set.insert(i)\n\
    \    }\n    return Array(set).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    let uniqueList = Array(Set(l))\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmppvw0gvqo/tmppvw0gvqo.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabd38f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabd35edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabd35ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabd35ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvw0gvqo                        0x000055a52f3925e5 <unavailable> + 5605

    5    libc.so.6                          0x00002aabd3ae2460 __libc_start_main +
    245

    6    tmppvw0gvqo                        0x000055a52f392199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList: [Int] = []\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var u = [Int]()\n    for i in l {\n        if !u.contains(i) {\n\
    \            u.append(i)\n        }\n    }\n    return u.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\nfunc unique(l: [Int]) ->\
    \ [Int] {\n    var uniqueList = [Int]()\n    for i in l {\n        if !uniqueList.contains(i)\
    \ {\n            uniqueList.append(i)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013663
