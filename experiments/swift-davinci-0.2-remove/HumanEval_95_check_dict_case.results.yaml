language: swift
name: HumanEval_95_check_dict_case
results:
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.isEmpty {\n\
    \        return false\n    }\n    var lower = true\n    var upper = true\n   \
    \ for (key, _) in dict {\n        if key.lowercased() != key {\n            lower\
    \ = false\n        }\n        if key.uppercased() != key {\n            upper\
    \ = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpm34kkof2/tmpm34kkof2.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a71d9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a71a91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a71a91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a71a907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm34kkof2                        0x000056517c1cbbc0 <unavailable> + 7104

    5    libc.so.6                          0x00002b8a71f86460 __libc_start_main +
    245

    6    tmpm34kkof2                        0x000056517c1cb3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ false\n    var upper_case = false\n    for (key, _) in dict {\n        if key.lowercased()\
    \ == key {\n            lower_case = true\n        } else if key.uppercased()\
    \ == key {\n            upper_case = true\n        }\n    }\n    return lower_case\
    \ && upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpxd47tyqs/tmpxd47tyqs.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4535b9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4535891b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4535891988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45358907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxd47tyqs                        0x0000556356f027a3 <unavailable> + 6051

    5    libc.so.6                          0x00002b4535d86460 __libc_start_main +
    245

    6    tmpxd47tyqs                        0x0000556356f02359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key != key.lowercased()\
    \ {\n            lower = false\n        }\n        if key != key.uppercased()\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp8nmg41ql/tmp8nmg41ql.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de9933c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de962ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de962a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de96297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8nmg41ql                        0x0000562130aacbd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b3de9b1f460 __libc_start_main +
    245

    6    tmp8nmg41ql                        0x0000562130aac3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        lower = lower && key.lowercased()\
    \ == key\n        upper = upper && key.uppercased() == key\n    }\n    return\
    \ lower || upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp4ec61tgb/tmp4ec61tgb.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b630e69dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b630e394b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b630e394988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b630e3937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ec61tgb                        0x00005649484adbd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b630e889460 __libc_start_main +
    245

    6    tmp4ec61tgb                        0x00005649484ad3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        lower_case\
    \ = lower_case && key.lowercased() == key\n        upper_case = upper_case &&\
    \ key.uppercased() == key\n    }\n    return lower_case || upper_case\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp7uh3_nvg/tmp7uh3_nvg.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1f98ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1f95e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1f95e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1f95e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7uh3_nvg                        0x00005558a90cfbd0 <unavailable> + 7120

    5    libc.so.6                          0x00002ac1f9ad7460 __libc_start_main +
    245

    6    tmp7uh3_nvg                        0x00005558a90cf3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for (key, _) in dict {\n        lower = lower && key.lowercased()\
    \ == key\n        upper = upper && key.uppercased() == key\n    }\n    return\
    \ lower || upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpigjpz1iw/tmpigjpz1iw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e04b8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e04886b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e04886988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e048857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpigjpz1iw                        0x0000560d9f57db70 <unavailable> + 7024

    5    libc.so.6                          0x00002b9e04d7b460 __libc_start_main +
    245

    6    tmpigjpz1iw                        0x0000560d9f57d359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.count ==\
    \ 0 {\n        return false\n    }\n    var lower = true\n    var upper = true\n\
    \    for (key, _) in dict {\n        if key.lowercased() != key {\n          \
    \  lower = false\n        }\n        if key.uppercased() != key {\n          \
    \  upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpfn50h2a8/tmpfn50h2a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4acc5e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4acc2dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4acc2da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4acc2d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfn50h2a8                        0x0000562f20d4ebc0 <unavailable> + 7104

    5    libc.so.6                          0x00002b4acc7cf460 __libc_start_main +
    245

    6    tmpfn50h2a8                        0x0000562f20d4e3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.isEmpty {\n\
    \        return false\n    }\n    var lower = true\n    var upper = true\n   \
    \ for (key, _) in dict {\n        lower = lower && key.lowercased() == key\n \
    \       upper = upper && key.uppercased() == key\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp_8g8az52/tmp_8g8az52.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a768bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a765b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a765b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a765b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_8g8az52                        0x000055f6eea32bc0 <unavailable> + 7104

    5    libc.so.6                          0x00002b6a76aa8460 __libc_start_main +
    245

    6    tmp_8g8az52                        0x000055f6eea323a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpw_bsnt62/tmpw_bsnt62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0909cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09099beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09099be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09099bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_bsnt62                        0x00005632ade6ebd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0909eb3460 __libc_start_main +
    245

    6    tmpw_bsnt62                        0x00005632ade6e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        lower_case\
    \ = lower_case && key.lowercased() == key\n        upper_case = upper_case &&\
    \ key.uppercased() == key\n    }\n    return lower_case || upper_case\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp7uh3_nvg/tmp7uh3_nvg.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1f98ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1f95e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1f95e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1f95e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7uh3_nvg                        0x00005558a90cfbd0 <unavailable> + 7120

    5    libc.so.6                          0x00002ac1f9ad7460 __libc_start_main +
    245

    6    tmp7uh3_nvg                        0x00005558a90cf3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        lower = lower && key.lowercased()\
    \ == key\n        upper = upper && key.uppercased() == key\n    }\n    return\
    \ lower || upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp4ec61tgb/tmp4ec61tgb.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b630e69dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b630e394b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b630e394988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b630e3937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ec61tgb                        0x00005649484adbd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b630e889460 __libc_start_main +
    245

    6    tmp4ec61tgb                        0x00005649484ad3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case_keys\
    \ = true\n    var upper_case_keys = true\n    for key in dict.keys {\n       \
    \ if key.lowercased() != key {\n            lower_case_keys = false\n        }\n\
    \        if key.uppercased() != key {\n            upper_case_keys = false\n \
    \       }\n    }\n    return lower_case_keys || upper_case_keys\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpd5onzhsp/tmpd5onzhsp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10ec7b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10ec4aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10ec4ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10ec4ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd5onzhsp                        0x0000560c46d92bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b10ec9a3460 __libc_start_main +
    245

    6    tmpd5onzhsp                        0x0000560c46d923b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpw_bsnt62/tmpw_bsnt62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0909cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09099beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09099be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09099bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_bsnt62                        0x00005632ade6ebd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0909eb3460 __libc_start_main +
    245

    6    tmpw_bsnt62                        0x00005632ade6e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for (key, _) in dict {\n        lower = lower && key.lowercased()\
    \ == key\n        upper = upper && key.uppercased() == key\n    }\n    return\
    \ lower || upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpigjpz1iw/tmpigjpz1iw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e04b8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e04886b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e04886988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e048857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpigjpz1iw                        0x0000560d9f57db70 <unavailable> + 7024

    5    libc.so.6                          0x00002b9e04d7b460 __libc_start_main +
    245

    6    tmpigjpz1iw                        0x0000560d9f57d359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var upper = true\n\
    \    var lower = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return upper || lower\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpypuzpksc/tmpypuzpksc.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6285515c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b628520cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b628520c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b628520b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpypuzpksc                        0x0000560d13c8bbd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b6285701460 __libc_start_main +
    245

    6    tmpypuzpksc                        0x0000560d13c8b3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case_keys\
    \ = true\n    var upper_case_keys = true\n    for key in dict.keys {\n       \
    \ if key.lowercased() != key {\n            lower_case_keys = false\n        }\n\
    \        if key.uppercased() != key {\n            upper_case_keys = false\n \
    \       }\n    }\n    return lower_case_keys || upper_case_keys\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpd5onzhsp/tmpd5onzhsp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10ec7b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10ec4aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10ec4ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10ec4ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd5onzhsp                        0x0000560c46d92bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b10ec9a3460 __libc_start_main +
    245

    6    tmpd5onzhsp                        0x0000560c46d923b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for (key, _) in dict {\n        lower = lower && key.isLowercase\n\
    \        upper = upper && key.isUppercase\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpq30bk78l.swift:10:30: error: value of type 'String' has no member\
    \ 'isLowercase'\n        lower = lower && key.isLowercase\n                  \
    \       ~~~ ^~~~~~~~~~~\n/tmp/tmpq30bk78l.swift:11:30: error: value of type 'String'\
    \ has no member 'isUppercase'\n        upper = upper && key.isUppercase\n    \
    \                     ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.isEmpty {\n\
    \        return false\n    }\n    var is_lower = false\n    var is_upper = false\n\
    \    for key in dict.keys {\n        if key.lowercased() == key {\n          \
    \  is_lower = true\n        }\n        if key.uppercased() == key {\n        \
    \    is_upper = true\n        }\n    }\n    return is_lower || is_upper\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpucif9ial/tmpucif9ial.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc8c058c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc8bd4fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc8bd4f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc8bd4e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucif9ial                        0x000055da24483a25 <unavailable> + 6693

    5    libc.so.6                          0x00002abc8c244460 __libc_start_main +
    245

    6    tmpucif9ial                        0x000055da24483409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lowerCase = true\n\
    \    var upperCase = true\n    for key in dict.keys {\n        lowerCase = lowerCase\
    \ && key.lowercased() == key\n        upperCase = upperCase && key.uppercased()\
    \ == key\n    }\n    return lowerCase || upperCase\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpj237x9v3/tmpj237x9v3.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf8093c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf7d8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf7d8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf7d897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj237x9v3                        0x0000563812f28bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002adbf827f460 __libc_start_main +
    245

    6    tmpj237x9v3                        0x0000563812f283b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpw_bsnt62/tmpw_bsnt62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0909cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09099beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09099be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09099bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_bsnt62                        0x00005632ade6ebd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0909eb3460 __libc_start_main +
    245

    6    tmpw_bsnt62                        0x00005632ade6e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        lower_case\
    \ = lower_case && key.lowercased() == key\n        upper_case = upper_case &&\
    \ key.uppercased() == key\n    }\n    return lower_case || upper_case\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp7uh3_nvg/tmp7uh3_nvg.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1f98ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1f95e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1f95e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1f95e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7uh3_nvg                        0x00005558a90cfbd0 <unavailable> + 7120

    5    libc.so.6                          0x00002ac1f9ad7460 __libc_start_main +
    245

    6    tmp7uh3_nvg                        0x00005558a90cf3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var upper = true\n\
    \    var lower = true\n    for key in dict.keys {\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n    }\n    return upper || lower\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp5kzj29vo/tmp5kzj29vo.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7680983c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b768067ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b768067a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76806797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5kzj29vo                        0x000055c40101dbd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7680b6f460 __libc_start_main +
    245

    6    tmp5kzj29vo                        0x000055c40101d3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case_keys\
    \ = true\n    var upper_case_keys = true\n    for key in dict.keys {\n       \
    \ if key.lowercased() != key {\n            lower_case_keys = false\n        }\n\
    \        if key.uppercased() != key {\n            upper_case_keys = false\n \
    \       }\n    }\n    return lower_case_keys || upper_case_keys\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpd5onzhsp/tmpd5onzhsp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10ec7b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10ec4aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10ec4ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10ec4ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd5onzhsp                        0x0000560c46d92bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b10ec9a3460 __libc_start_main +
    245

    6    tmpd5onzhsp                        0x0000560c46d923b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.isEmpty {\n\
    \        return false\n    }\n    var lower = true\n    var upper = true\n   \
    \ for (key, _) in dict {\n        if key.lowercased() != key {\n            lower\
    \ = false\n        }\n        if key.uppercased() != key {\n            upper\
    \ = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpm34kkof2/tmpm34kkof2.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a71d9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a71a91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a71a91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a71a907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm34kkof2                        0x000056517c1cbbc0 <unavailable> + 7104

    5    libc.so.6                          0x00002b8a71f86460 __libc_start_main +
    245

    6    tmpm34kkof2                        0x000056517c1cb3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        lower = lower && key.lowercased()\
    \ == key\n        upper = upper && key.uppercased() == key\n    }\n    return\
    \ lower || upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp4ec61tgb/tmp4ec61tgb.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b630e69dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b630e394b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b630e394988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b630e3937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ec61tgb                        0x00005649484adbd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b630e889460 __libc_start_main +
    245

    6    tmp4ec61tgb                        0x00005649484ad3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for (key, _) in dict {\n        lower = lower && key.lowercased()\
    \ == key\n        upper = upper && key.uppercased() == key\n    }\n    return\
    \ lower || upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpigjpz1iw/tmpigjpz1iw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e04b8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e04886b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e04886988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e048857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpigjpz1iw                        0x0000560d9f57db70 <unavailable> + 7024

    5    libc.so.6                          0x00002b9e04d7b460 __libc_start_main +
    245

    6    tmpigjpz1iw                        0x0000560d9f57d359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_keys =\
    \ 0\n    var upper_keys = 0\n    for key in dict.keys {\n        if key.lowercased()\
    \ == key {\n            lower_keys += 1\n        } else if key.uppercased() ==\
    \ key {\n            upper_keys += 1\n        }\n    }\n    return lower_keys\
    \ == dict.count || upper_keys == dict.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpny9fmihm/tmpny9fmihm.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26fe0d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26fddd0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26fddd0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26fddcf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpny9fmihm                        0x000056210d163c10 <unavailable> + 7184

    5    libc.so.6                          0x00002b26fe2c5460 __libc_start_main +
    245

    6    tmpny9fmihm                        0x000056210d1633f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for (key, _) in dict {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpfp9l4hhb/tmpfp9l4hhb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b298d0bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b298cdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b298cdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b298cdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfp9l4hhb                        0x0000555ec2bf8b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b298d2a6460 __libc_start_main +
    245

    6    tmpfp9l4hhb                        0x0000555ec2bf8359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for (key, _) in dict {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp_cz9pr_2/tmp_cz9pr_2.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7dab167c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7daae5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7daae5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7daae5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_cz9pr_2                        0x0000564c11683b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b7dab353460 __libc_start_main +
    245

    6    tmp_cz9pr_2                        0x0000564c11683359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    let lower_keys =\
    \ dict.keys.filter { $0.lowercased() == $0 }\n    let upper_keys = dict.keys.filter\
    \ { $0.uppercased() == $0 }\n    return lower_keys.count == dict.count || upper_keys.count\
    \ == dict.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpo39bcrx0/tmpo39bcrx0.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b497bf76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b497bc6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b497bc6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b497bc6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo39bcrx0                        0x000055a9accabbe0 <unavailable> + 7136

    5    libc.so.6                          0x00002b497c162460 __libc_start_main +
    245

    6    tmpo39bcrx0                        0x000055a9accab3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for (key, _) in dict {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp_cz9pr_2/tmp_cz9pr_2.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7dab167c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7daae5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7daae5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7daae5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_cz9pr_2                        0x0000564c11683b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b7dab353460 __libc_start_main +
    245

    6    tmp_cz9pr_2                        0x0000564c11683359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for (key, _) in dict {\n        lower_case\
    \ = lower_case && key.lowercased() == key\n        upper_case = upper_case &&\
    \ key.uppercased() == key\n    }\n    return lower_case || upper_case\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmprm90cr2i/tmprm90cr2i.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5313d26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5313a1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5313a1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5313a1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprm90cr2i                        0x000055bb18a35b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b5313f12460 __libc_start_main +
    245

    6    tmprm90cr2i                        0x000055bb18a35359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpw_bsnt62/tmpw_bsnt62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0909cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09099beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09099be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09099bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_bsnt62                        0x00005632ade6ebd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0909eb3460 __libc_start_main +
    245

    6    tmpw_bsnt62                        0x00005632ade6e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpw_bsnt62/tmpw_bsnt62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0909cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09099beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09099be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09099bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_bsnt62                        0x00005632ade6ebd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0909eb3460 __libc_start_main +
    245

    6    tmpw_bsnt62                        0x00005632ade6e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.count ==\
    \ 0 {\n        return false\n    }\n    var is_lower = false\n    var is_upper\
    \ = false\n    for key in dict.keys {\n        if key.lowercased() == key {\n\
    \            is_lower = true\n        }\n        if key.uppercased() == key {\n\
    \            is_upper = true\n        }\n    }\n    return is_lower == is_upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp63mk4h2u/tmp63mk4h2u.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2ea6bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2ea3b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2ea3b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2ea3b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp63mk4h2u                        0x0000556b968b7843 <unavailable> + 6211

    5    libc.so.6                          0x00002af2ea8a9460 __libc_start_main +
    245

    6    tmp63mk4h2u                        0x0000556b968b73f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for (key, _) in dict {\n        lower_case\
    \ = lower_case && key.lowercased() == key\n        upper_case = upper_case &&\
    \ key.uppercased() == key\n    }\n    return lower_case || upper_case\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmprm90cr2i/tmprm90cr2i.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5313d26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5313a1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5313a1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5313a1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprm90cr2i                        0x000055bb18a35b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b5313f12460 __libc_start_main +
    245

    6    tmprm90cr2i                        0x000055bb18a35359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpw_bsnt62/tmpw_bsnt62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0909cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09099beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09099be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09099bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_bsnt62                        0x00005632ade6ebd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0909eb3460 __libc_start_main +
    245

    6    tmpw_bsnt62                        0x00005632ade6e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.isEmpty {\n\
    \        return false\n    }\n    var lower = true\n    var upper = true\n   \
    \ for (key, _) in dict {\n        lower = lower && key.lowercased() == key\n \
    \       upper = upper && key.uppercased() == key\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp_8g8az52/tmp_8g8az52.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a768bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a765b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a765b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a765b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_8g8az52                        0x000055f6eea32bc0 <unavailable> + 7104

    5    libc.so.6                          0x00002b6a76aa8460 __libc_start_main +
    245

    6    tmp_8g8az52                        0x000055f6eea323a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpe8kjikq_/tmpe8kjikq_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4e0c74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4e096bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4e096b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4e096a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8kjikq_                        0x0000560560724523 <unavailable> + 5411

    5    libc.so.6                          0x00002ab4e0e60460 __libc_start_main +
    245

    6    tmpe8kjikq_                        0x00005605607240d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpw_bsnt62/tmpw_bsnt62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0909cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09099beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09099be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09099bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_bsnt62                        0x00005632ade6ebd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0909eb3460 __libc_start_main +
    245

    6    tmpw_bsnt62                        0x00005632ade6e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpw_bsnt62/tmpw_bsnt62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0909cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09099beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09099be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09099bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_bsnt62                        0x00005632ade6ebd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0909eb3460 __libc_start_main +
    245

    6    tmpw_bsnt62                        0x00005632ade6e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for (key, _) in dict {\n        lower = lower && key.lowercased()\
    \ == key\n        upper = upper && key.uppercased() == key\n    }\n    return\
    \ lower || upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpigjpz1iw/tmpigjpz1iw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e04b8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e04886b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e04886988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e048857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpigjpz1iw                        0x0000560d9f57db70 <unavailable> + 7024

    5    libc.so.6                          0x00002b9e04d7b460 __libc_start_main +
    245

    6    tmpigjpz1iw                        0x0000560d9f57d359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpw_bsnt62/tmpw_bsnt62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0909cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09099beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09099be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09099bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_bsnt62                        0x00005632ade6ebd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0909eb3460 __libc_start_main +
    245

    6    tmpw_bsnt62                        0x00005632ade6e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for (key, _) in dict {\n        lower = lower && key.lowercased()\
    \ == key\n        upper = upper && key.uppercased() == key\n    }\n    return\
    \ lower || upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpigjpz1iw/tmpigjpz1iw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e04b8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e04886b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e04886988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e048857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpigjpz1iw                        0x0000560d9f57db70 <unavailable> + 7024

    5    libc.so.6                          0x00002b9e04d7b460 __libc_start_main +
    245

    6    tmpigjpz1iw                        0x0000560d9f57d359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case_keys\
    \ = true\n    var upper_case_keys = true\n    for key in dict.keys {\n       \
    \ if key.lowercased() != key {\n            lower_case_keys = false\n        }\n\
    \        if key.uppercased() != key {\n            upper_case_keys = false\n \
    \       }\n    }\n    return lower_case_keys || upper_case_keys\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpd5onzhsp/tmpd5onzhsp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10ec7b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10ec4aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10ec4ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10ec4ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd5onzhsp                        0x0000560c46d92bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b10ec9a3460 __libc_start_main +
    245

    6    tmpd5onzhsp                        0x0000560c46d923b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        lower = lower && key.isLowercase\n\
    \        upper = upper && key.isUppercase\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5aeyy59p.swift:10:30: error: value of type 'String' has no member\
    \ 'isLowercase'\n        lower = lower && key.isLowercase\n                  \
    \       ~~~ ^~~~~~~~~~~\n/tmp/tmp5aeyy59p.swift:11:30: error: value of type 'String'\
    \ has no member 'isUppercase'\n        upper = upper && key.isUppercase\n    \
    \                     ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpw_bsnt62/tmpw_bsnt62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0909cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09099beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09099be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09099bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_bsnt62                        0x00005632ade6ebd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0909eb3460 __libc_start_main +
    245

    6    tmpw_bsnt62                        0x00005632ade6e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpw_bsnt62/tmpw_bsnt62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0909cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09099beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09099be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09099bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_bsnt62                        0x00005632ade6ebd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0909eb3460 __libc_start_main +
    245

    6    tmpw_bsnt62                        0x00005632ade6e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.count ==\
    \ 0 {\n        return false\n    }\n    var is_lower = false\n    var is_upper\
    \ = false\n    for (key, _) in dict {\n        if key.lowercased() == key {\n\
    \            is_lower = true\n        }\n        if key.uppercased() == key {\n\
    \            is_upper = true\n        }\n    }\n    return is_lower || is_upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpz2om7qj2/tmpz2om7qj2.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89368fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89365f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89365f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89365f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz2om7qj2                        0x00005562bd7d49c5 <unavailable> + 6597

    5    libc.so.6                          0x00002b8936ae9460 __libc_start_main +
    245

    6    tmpz2om7qj2                        0x00005562bd7d43a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_keys =\
    \ 0\n    var upper_keys = 0\n    for key in dict.keys {\n        if key.lowercased()\
    \ == key {\n            lower_keys += 1\n        } else if key.uppercased() ==\
    \ key {\n            upper_keys += 1\n        }\n    }\n    if lower_keys == dict.count\
    \ || upper_keys == dict.count {\n        return true\n    } else {\n        return\
    \ false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpwkfabsyt/tmpwkfabsyt.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae294d6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae294a61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae294a61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae294a607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwkfabsyt                        0x00005589806bbc10 <unavailable> + 7184

    5    libc.so.6                          0x00002ae294f56460 __libc_start_main +
    245

    6    tmpwkfabsyt                        0x00005589806bb3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var all_lower = true\n\
    \    var all_upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            all_lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            all_upper = false\n        }\n    }\n    return all_lower\
    \ || all_upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpit44qefp/tmpit44qefp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2b1856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2b154db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2b154d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2b154c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit44qefp                        0x000055e1b324cbd0 <unavailable> + 7120

    5    libc.so.6                          0x00002ba2b1a42460 __libc_start_main +
    245

    6    tmpit44qefp                        0x000055e1b324c3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpw_bsnt62/tmpw_bsnt62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0909cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09099beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09099be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09099bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_bsnt62                        0x00005632ade6ebd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0909eb3460 __libc_start_main +
    245

    6    tmpw_bsnt62                        0x00005632ade6e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for (key, _) in dict {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp_cz9pr_2/tmp_cz9pr_2.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7dab167c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7daae5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7daae5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7daae5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_cz9pr_2                        0x0000564c11683b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b7dab353460 __libc_start_main +
    245

    6    tmp_cz9pr_2                        0x0000564c11683359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for (key, _) in dict {\n        lower = lower && key.lowercased()\
    \ == key\n        upper = upper && key.uppercased() == key\n    }\n    return\
    \ lower || upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpigjpz1iw/tmpigjpz1iw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e04b8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e04886b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e04886988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e048857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpigjpz1iw                        0x0000560d9f57db70 <unavailable> + 7024

    5    libc.so.6                          0x00002b9e04d7b460 __libc_start_main +
    245

    6    tmpigjpz1iw                        0x0000560d9f57d359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for (key, _) in dict {\n        lower = lower && key.lowercased()\
    \ == key\n        upper = upper && key.uppercased() == key\n    }\n    return\
    \ lower || upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpigjpz1iw/tmpigjpz1iw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e04b8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e04886b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e04886988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e048857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpigjpz1iw                        0x0000560d9f57db70 <unavailable> + 7024

    5    libc.so.6                          0x00002b9e04d7b460 __libc_start_main +
    245

    6    tmpigjpz1iw                        0x0000560d9f57d359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for (key, _) in dict {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpfp9l4hhb/tmpfp9l4hhb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b298d0bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b298cdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b298cdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b298cdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfp9l4hhb                        0x0000555ec2bf8b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b298d2a6460 __libc_start_main +
    245

    6    tmpfp9l4hhb                        0x0000555ec2bf8359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        lower_case\
    \ = lower_case && key.lowercased() == key\n        upper_case = upper_case &&\
    \ key.uppercased() == key\n    }\n    return lower_case || upper_case\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp7uh3_nvg/tmp7uh3_nvg.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1f98ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1f95e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1f95e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1f95e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7uh3_nvg                        0x00005558a90cfbd0 <unavailable> + 7120

    5    libc.so.6                          0x00002ac1f9ad7460 __libc_start_main +
    245

    6    tmp7uh3_nvg                        0x00005558a90cf3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for (key, _) in dict {\n        lower = lower && key.lowercased()\
    \ == key\n        upper = upper && key.uppercased() == key\n    }\n    return\
    \ lower || upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpigjpz1iw/tmpigjpz1iw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e04b8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e04886b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e04886988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e048857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpigjpz1iw                        0x0000560d9f57db70 <unavailable> + 7024

    5    libc.so.6                          0x00002b9e04d7b460 __libc_start_main +
    245

    6    tmpigjpz1iw                        0x0000560d9f57d359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.count ==\
    \ 0 {\n        return false\n    }\n    var lower = true\n    var upper = true\n\
    \    for (key, _) in dict {\n        if key.lowercased() != key {\n          \
    \  lower = false\n        }\n        if key.uppercased() != key {\n          \
    \  upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpfn50h2a8/tmpfn50h2a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4acc5e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4acc2dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4acc2da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4acc2d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfn50h2a8                        0x0000562f20d4ebc0 <unavailable> + 7104

    5    libc.so.6                          0x00002b4acc7cf460 __libc_start_main +
    245

    6    tmpfn50h2a8                        0x0000562f20d4e3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for (key, _) in dict {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp_cz9pr_2/tmp_cz9pr_2.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7dab167c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7daae5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7daae5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7daae5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_cz9pr_2                        0x0000564c11683b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b7dab353460 __libc_start_main +
    245

    6    tmp_cz9pr_2                        0x0000564c11683359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for (key, _) in dict {\n        lower = lower && key.isLowercase\n\
    \        upper = upper && key.isUppercase\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpq30bk78l.swift:10:30: error: value of type 'String' has no member\
    \ 'isLowercase'\n        lower = lower && key.isLowercase\n                  \
    \       ~~~ ^~~~~~~~~~~\n/tmp/tmpq30bk78l.swift:11:30: error: value of type 'String'\
    \ has no member 'isUppercase'\n        upper = upper && key.isUppercase\n    \
    \                     ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.count ==\
    \ 0 {\n        return false\n    }\n    var lower = true\n    var upper = true\n\
    \    for (key, _) in dict {\n        if key.lowercased() != key {\n          \
    \  lower = false\n        }\n        if key.uppercased() != key {\n          \
    \  upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpfn50h2a8/tmpfn50h2a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4acc5e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4acc2dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4acc2da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4acc2d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfn50h2a8                        0x0000562f20d4ebc0 <unavailable> + 7104

    5    libc.so.6                          0x00002b4acc7cf460 __libc_start_main +
    245

    6    tmpfn50h2a8                        0x0000562f20d4e3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for (key, _) in dict {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpfp9l4hhb/tmpfp9l4hhb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b298d0bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b298cdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b298cdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b298cdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfp9l4hhb                        0x0000555ec2bf8b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b298d2a6460 __libc_start_main +
    245

    6    tmpfp9l4hhb                        0x0000555ec2bf8359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_keys =\
    \ true\n    var upper_keys = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_keys = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_keys = false\n        }\n    }\n    return lower_keys\
    \ || upper_keys\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpau9ut65y/tmpau9ut65y.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0078818c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b007850fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b007850f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b007850e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpau9ut65y                        0x0000558b456adbd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0078a04460 __libc_start_main +
    245

    6    tmpau9ut65y                        0x0000558b456ad3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for (key, _) in dict {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpfp9l4hhb/tmpfp9l4hhb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b298d0bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b298cdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b298cdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b298cdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfp9l4hhb                        0x0000555ec2bf8b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b298d2a6460 __libc_start_main +
    245

    6    tmpfp9l4hhb                        0x0000555ec2bf8359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpw_bsnt62/tmpw_bsnt62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0909cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09099beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09099be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09099bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_bsnt62                        0x00005632ade6ebd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0909eb3460 __libc_start_main +
    245

    6    tmpw_bsnt62                        0x00005632ade6e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.isEmpty {\n\
    \        return false\n    }\n    var is_lower = false\n    var is_upper = false\n\
    \    for (key, _) in dict {\n        if key.lowercased() == key {\n          \
    \  is_lower = true\n        }\n        if key.uppercased() == key {\n        \
    \    is_upper = true\n        }\n    }\n    return is_lower && is_upper\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3awe_uek/tmp3awe_uek.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c8e5b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c8e2a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c8e2a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c8e2a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3awe_uek                        0x0000563358c407f3 <unavailable> + 6131

    5    libc.so.6                          0x00002b4c8e79d460 __libc_start_main +
    245

    6    tmp3awe_uek                        0x0000563358c403a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for (key, _) in dict {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp_cz9pr_2/tmp_cz9pr_2.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7dab167c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7daae5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7daae5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7daae5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_cz9pr_2                        0x0000564c11683b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b7dab353460 __libc_start_main +
    245

    6    tmp_cz9pr_2                        0x0000564c11683359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.count ==\
    \ 0 {\n        return false\n    }\n    var lower_case = true\n    var upper_case\
    \ = true\n    for key in dict.keys {\n        if key.lowercased() != key {\n \
    \           lower_case = false\n        }\n        if key.uppercased() != key\
    \ {\n            upper_case = false\n        }\n    }\n    return lower_case ||\
    \ upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpejaqi2tr/tmpejaqi2tr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6140fabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6140ca2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6140ca2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6140ca17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpejaqi2tr                        0x000055efcc534c10 <unavailable> + 7184

    5    libc.so.6                          0x00002b6141197460 __libc_start_main +
    245

    6    tmpejaqi2tr                        0x000055efcc5343f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var result = true\n\
    \    if dict.count == 0 {\n        result = false\n    } else {\n        var upper\
    \ = true\n        var lower = true\n        for (key, _) in dict {\n         \
    \   if key.lowercased() != key {\n                lower = false\n            }\n\
    \            if key.uppercased() != key {\n                upper = false\n   \
    \         }\n        }\n        if upper == false && lower == false {\n      \
    \      result = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpjhispbv6/tmpjhispbv6.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bfb369c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bfb060b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bfb060988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bfb05f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjhispbv6                        0x000055fe742c3bc0 <unavailable> + 7104

    5    libc.so.6                          0x00002b6bfb555460 __libc_start_main +
    245

    6    tmpjhispbv6                        0x000055fe742c33a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for (key, _) in dict {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpfp9l4hhb/tmpfp9l4hhb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b298d0bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b298cdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b298cdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b298cdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfp9l4hhb                        0x0000555ec2bf8b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b298d2a6460 __libc_start_main +
    245

    6    tmpfp9l4hhb                        0x0000555ec2bf8359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        lower = lower && key.lowercased()\
    \ == key\n        upper = upper && key.uppercased() == key\n    }\n    return\
    \ lower || upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp4ec61tgb/tmp4ec61tgb.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b630e69dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b630e394b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b630e394988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b630e3937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ec61tgb                        0x00005649484adbd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b630e889460 __libc_start_main +
    245

    6    tmp4ec61tgb                        0x00005649484ad3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.isEmpty {\n\
    \        return false\n    }\n    var is_lower = false\n    var is_upper = false\n\
    \    for key in dict.keys {\n        if key.lowercased() == key {\n          \
    \  is_lower = true\n        }\n        if key.uppercased() == key {\n        \
    \    is_upper = true\n        }\n    }\n    return is_lower || is_upper\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpucif9ial/tmpucif9ial.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc8c058c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc8bd4fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc8bd4f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc8bd4e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucif9ial                        0x000055da24483a25 <unavailable> + 6693

    5    libc.so.6                          0x00002abc8c244460 __libc_start_main +
    245

    6    tmpucif9ial                        0x000055da24483409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var upper = true\n\
    \    var lower = true\n    for key in dict.keys {\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n    }\n    return upper || lower\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp5kzj29vo/tmp5kzj29vo.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7680983c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b768067ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b768067a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76806797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5kzj29vo                        0x000055c40101dbd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7680b6f460 __libc_start_main +
    245

    6    tmp5kzj29vo                        0x000055c40101d3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.count ==\
    \ 0 {\n        return false\n    }\n    var lower = true\n    var upper = true\n\
    \    for (key, _) in dict {\n        if key.lowercased() != key {\n          \
    \  lower = false\n        }\n        if key.uppercased() != key {\n          \
    \  upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpfn50h2a8/tmpfn50h2a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4acc5e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4acc2dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4acc2da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4acc2d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfn50h2a8                        0x0000562f20d4ebc0 <unavailable> + 7104

    5    libc.so.6                          0x00002b4acc7cf460 __libc_start_main +
    245

    6    tmpfn50h2a8                        0x0000562f20d4e3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for (key, _) in dict {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpfp9l4hhb/tmpfp9l4hhb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b298d0bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b298cdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b298cdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b298cdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfp9l4hhb                        0x0000555ec2bf8b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b298d2a6460 __libc_start_main +
    245

    6    tmpfp9l4hhb                        0x0000555ec2bf8359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.isEmpty {\n\
    \        return false\n    }\n    var lower = true\n    var upper = true\n   \
    \ for (key, _) in dict {\n        lower = lower && key.lowercased() == key\n \
    \       upper = upper && key.uppercased() == key\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp_8g8az52/tmp_8g8az52.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a768bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a765b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a765b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a765b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_8g8az52                        0x000055f6eea32bc0 <unavailable> + 7104

    5    libc.so.6                          0x00002b6a76aa8460 __libc_start_main +
    245

    6    tmp_8g8az52                        0x000055f6eea323a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpw_bsnt62/tmpw_bsnt62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0909cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09099beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09099be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09099bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_bsnt62                        0x00005632ade6ebd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0909eb3460 __libc_start_main +
    245

    6    tmpw_bsnt62                        0x00005632ade6e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpw_bsnt62/tmpw_bsnt62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0909cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09099beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09099be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09099bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_bsnt62                        0x00005632ade6ebd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0909eb3460 __libc_start_main +
    245

    6    tmpw_bsnt62                        0x00005632ade6e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        lower = lower && key.lowercased()\
    \ == key\n        upper = upper && key.uppercased() == key\n    }\n    return\
    \ lower || upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp4ec61tgb/tmp4ec61tgb.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b630e69dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b630e394b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b630e394988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b630e3937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ec61tgb                        0x00005649484adbd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b630e889460 __libc_start_main +
    245

    6    tmp4ec61tgb                        0x00005649484ad3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    let lower = dict.keys.filter\
    \ { $0.lowercased() == $0 }\n    let upper = dict.keys.filter { $0.uppercased()\
    \ == $0 }\n    return lower.count == dict.count || upper.count == dict.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpb7q8w9hu/tmpb7q8w9hu.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6f9f31c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6f9c28b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6f9c28988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6f9c277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7q8w9hu                        0x000055e8cc468be0 <unavailable> + 7136

    5    libc.so.6                          0x00002ba6fa11d460 __libc_start_main +
    245

    6    tmpb7q8w9hu                        0x000055e8cc4683c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.count ==\
    \ 0 {\n        return false\n    }\n    var lower = true\n    var upper = true\n\
    \    for (key, _) in dict {\n        lower = lower && key.lowercased() == key\n\
    \        upper = upper && key.uppercased() == key\n    }\n    return lower ||\
    \ upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpfnzs0t2k/tmpfnzs0t2k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c44e0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c44b04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c44b04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c44b037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfnzs0t2k                        0x0000560d16d7cbc0 <unavailable> + 7104

    5    libc.so.6                          0x00002b3c44ff9460 __libc_start_main +
    245

    6    tmpfnzs0t2k                        0x0000560d16d7c3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_keys =\
    \ 0\n    var upper_keys = 0\n    for key in dict.keys {\n        if key.lowercased()\
    \ == key {\n            lower_keys += 1\n        } else if key.uppercased() ==\
    \ key {\n            upper_keys += 1\n        }\n    }\n    return lower_keys\
    \ == dict.count || upper_keys == dict.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpny9fmihm/tmpny9fmihm.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26fe0d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26fddd0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26fddd0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26fddcf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpny9fmihm                        0x000056210d163c10 <unavailable> + 7184

    5    libc.so.6                          0x00002b26fe2c5460 __libc_start_main +
    245

    6    tmpny9fmihm                        0x000056210d1633f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_keys =\
    \ true\n    var upper_keys = true\n    for key in dict.keys {\n        lower_keys\
    \ = lower_keys && key.lowercased() == key\n        upper_keys = upper_keys &&\
    \ key.uppercased() == key\n    }\n    return lower_keys || upper_keys\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpzkjo_rxr/tmpzkjo_rxr.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c93a72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c93769b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c93769988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c937687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzkjo_rxr                        0x000055f025f6bbd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0c93c5e460 __libc_start_main +
    245

    6    tmpzkjo_rxr                        0x000055f025f6b3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpw_bsnt62/tmpw_bsnt62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0909cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09099beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09099be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09099bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_bsnt62                        0x00005632ade6ebd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0909eb3460 __libc_start_main +
    245

    6    tmpw_bsnt62                        0x00005632ade6e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpw_bsnt62/tmpw_bsnt62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0909cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09099beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09099be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09099bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_bsnt62                        0x00005632ade6ebd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0909eb3460 __libc_start_main +
    245

    6    tmpw_bsnt62                        0x00005632ade6e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        lower = lower && key.lowercased()\
    \ == key\n        upper = upper && key.uppercased() == key\n    }\n    return\
    \ lower || upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp4ec61tgb/tmp4ec61tgb.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b630e69dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b630e394b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b630e394988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b630e3937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ec61tgb                        0x00005649484adbd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b630e889460 __libc_start_main +
    245

    6    tmp4ec61tgb                        0x00005649484ad3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.count ==\
    \ 0 {\n        return false\n    }\n    var lower = true\n    var upper = true\n\
    \    for key in dict.keys {\n        if key.lowercased() != key {\n          \
    \  lower = false\n        }\n        if key.uppercased() != key {\n          \
    \  upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpa_x89ecy/tmpa_x89ecy.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab92496ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab924665b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab924665988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9246647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa_x89ecy                        0x0000560d7529fc10 <unavailable> + 7184

    5    libc.so.6                          0x00002ab924b5a460 __libc_start_main +
    245

    6    tmpa_x89ecy                        0x0000560d7529f3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        lower = lower && key.lowercased()\
    \ == key\n        upper = upper && key.uppercased() == key\n    }\n    return\
    \ lower || upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp4ec61tgb/tmp4ec61tgb.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b630e69dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b630e394b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b630e394988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b630e3937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ec61tgb                        0x00005649484adbd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b630e889460 __libc_start_main +
    245

    6    tmp4ec61tgb                        0x00005649484ad3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        lower = lower && key.lowercased()\
    \ == key\n        upper = upper && key.uppercased() == key\n    }\n    return\
    \ lower || upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp4ec61tgb/tmp4ec61tgb.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b630e69dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b630e394b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b630e394988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b630e3937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ec61tgb                        0x00005649484adbd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b630e889460 __libc_start_main +
    245

    6    tmp4ec61tgb                        0x00005649484ad3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for (key, _) in dict {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpfp9l4hhb/tmpfp9l4hhb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b298d0bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b298cdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b298cdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b298cdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfp9l4hhb                        0x0000555ec2bf8b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b298d2a6460 __libc_start_main +
    245

    6    tmpfp9l4hhb                        0x0000555ec2bf8359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for (key, _) in dict {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpfp9l4hhb/tmpfp9l4hhb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b298d0bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b298cdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b298cdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b298cdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfp9l4hhb                        0x0000555ec2bf8b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b298d2a6460 __libc_start_main +
    245

    6    tmpfp9l4hhb                        0x0000555ec2bf8359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.isEmpty {\n\
    \        return false\n    }\n    var lower = true\n    var upper = true\n   \
    \ for (key, _) in dict {\n        lower = lower && key.lowercased() == key\n \
    \       upper = upper && key.uppercased() == key\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp_8g8az52/tmp_8g8az52.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a768bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a765b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a765b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a765b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_8g8az52                        0x000055f6eea32bc0 <unavailable> + 7104

    5    libc.so.6                          0x00002b6a76aa8460 __libc_start_main +
    245

    6    tmp_8g8az52                        0x000055f6eea323a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case_keys\
    \ = true\n    var upper_case_keys = true\n    for key in dict.keys {\n       \
    \ if key.lowercased() != key {\n            lower_case_keys = false\n        }\n\
    \        if key.uppercased() != key {\n            upper_case_keys = false\n \
    \       }\n    }\n    return lower_case_keys || upper_case_keys\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpd5onzhsp/tmpd5onzhsp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10ec7b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10ec4aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10ec4ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10ec4ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd5onzhsp                        0x0000560c46d92bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b10ec9a3460 __libc_start_main +
    245

    6    tmpd5onzhsp                        0x0000560c46d923b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.isEmpty {\n\
    \        return false\n    }\n    var lower = true\n    var upper = true\n   \
    \ for (key, _) in dict {\n        if key.lowercased() != key {\n            lower\
    \ = false\n        }\n        if key.uppercased() != key {\n            upper\
    \ = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpm34kkof2/tmpm34kkof2.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a71d9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a71a91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a71a91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a71a907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm34kkof2                        0x000056517c1cbbc0 <unavailable> + 7104

    5    libc.so.6                          0x00002b8a71f86460 __libc_start_main +
    245

    6    tmpm34kkof2                        0x000056517c1cb3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.count ==\
    \ 0 {\n        return false\n    }\n    var lower = true\n    var upper = true\n\
    \    for (key, _) in dict {\n        if key.lowercased() != key {\n          \
    \  lower = false\n        }\n        if key.uppercased() != key {\n          \
    \  upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpfn50h2a8/tmpfn50h2a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4acc5e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4acc2dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4acc2da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4acc2d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfn50h2a8                        0x0000562f20d4ebc0 <unavailable> + 7104

    5    libc.so.6                          0x00002b4acc7cf460 __libc_start_main +
    245

    6    tmpfn50h2a8                        0x0000562f20d4e3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lowerCase = true\n\
    \    var upperCase = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lowerCase = false\n        }\n        if key.uppercased()\
    \ != key {\n            upperCase = false\n        }\n    }\n    return lowerCase\
    \ || upperCase\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpo8ndqf6h/tmpo8ndqf6h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f9ef8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f9ec84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f9ec84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f9ec837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo8ndqf6h                        0x000055753f87bbd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b3f9f179460 __libc_start_main +
    245

    6    tmpo8ndqf6h                        0x000055753f87b3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpw_bsnt62/tmpw_bsnt62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0909cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09099beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09099be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09099bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_bsnt62                        0x00005632ade6ebd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0909eb3460 __libc_start_main +
    245

    6    tmpw_bsnt62                        0x00005632ade6e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for (key, _) in dict {\n        lower = lower && key.lowercased()\
    \ == key\n        upper = upper && key.uppercased() == key\n    }\n    return\
    \ lower || upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpigjpz1iw/tmpigjpz1iw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e04b8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e04886b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e04886988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e048857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpigjpz1iw                        0x0000560d9f57db70 <unavailable> + 7024

    5    libc.so.6                          0x00002b9e04d7b460 __libc_start_main +
    245

    6    tmpigjpz1iw                        0x0000560d9f57d359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_keys =\
    \ 0\n    var upper_keys = 0\n    for key in dict.keys {\n        if key.lowercased()\
    \ == key {\n            lower_keys += 1\n        } else if key.uppercased() ==\
    \ key {\n            upper_keys += 1\n        }\n    }\n    return lower_keys\
    \ == dict.count || upper_keys == dict.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpny9fmihm/tmpny9fmihm.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26fe0d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26fddd0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26fddd0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26fddcf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpny9fmihm                        0x000056210d163c10 <unavailable> + 7184

    5    libc.so.6                          0x00002b26fe2c5460 __libc_start_main +
    245

    6    tmpny9fmihm                        0x000056210d1633f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpw_bsnt62/tmpw_bsnt62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0909cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09099beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09099be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09099bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_bsnt62                        0x00005632ade6ebd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0909eb3460 __libc_start_main +
    245

    6    tmpw_bsnt62                        0x00005632ade6e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for (key, _) in dict {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpfp9l4hhb/tmpfp9l4hhb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b298d0bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b298cdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b298cdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b298cdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfp9l4hhb                        0x0000555ec2bf8b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b298d2a6460 __libc_start_main +
    245

    6    tmpfp9l4hhb                        0x0000555ec2bf8359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: 0
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.isEmpty {\n\
    \        return false\n    }\n    var is_lower = false\n    var is_upper = false\n\
    \    for (key, _) in dict {\n        if key.lowercased() == key {\n          \
    \  is_lower = true\n        }\n        if key.uppercased() == key {\n        \
    \    is_upper = true\n        }\n    }\n    return is_lower != is_upper\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpw_bsnt62/tmpw_bsnt62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0909cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09099beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09099be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09099bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_bsnt62                        0x00005632ade6ebd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0909eb3460 __libc_start_main +
    245

    6    tmpw_bsnt62                        0x00005632ade6e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lowerCase = true\n\
    \    var upperCase = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lowerCase = false\n        }\n        if key.uppercased()\
    \ != key {\n            upperCase = false\n        }\n    }\n    return lowerCase\
    \ || upperCase\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpo8ndqf6h/tmpo8ndqf6h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f9ef8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f9ec84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f9ec84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f9ec837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo8ndqf6h                        0x000055753f87bbd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b3f9f179460 __libc_start_main +
    245

    6    tmpo8ndqf6h                        0x000055753f87b3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for (key, _) in dict {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp_cz9pr_2/tmp_cz9pr_2.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7dab167c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7daae5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7daae5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7daae5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_cz9pr_2                        0x0000564c11683b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b7dab353460 __libc_start_main +
    245

    6    tmp_cz9pr_2                        0x0000564c11683359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpw_bsnt62/tmpw_bsnt62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0909cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09099beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09099be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09099bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_bsnt62                        0x00005632ade6ebd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0909eb3460 __libc_start_main +
    245

    6    tmpw_bsnt62                        0x00005632ade6e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpw_bsnt62/tmpw_bsnt62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0909cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09099beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09099be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09099bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_bsnt62                        0x00005632ade6ebd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0909eb3460 __libc_start_main +
    245

    6    tmpw_bsnt62                        0x00005632ade6e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for (key, _) in dict {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp_cz9pr_2/tmp_cz9pr_2.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7dab167c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7daae5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7daae5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7daae5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_cz9pr_2                        0x0000564c11683b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b7dab353460 __libc_start_main +
    245

    6    tmp_cz9pr_2                        0x0000564c11683359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var is_lower = false\n\
    \    var is_upper = false\n    for (key, _) in dict {\n        if key.lowercased()\
    \ == key {\n            is_lower = true\n        }\n        if key.uppercased()\
    \ == key {\n            is_upper = true\n        }\n    }\n    return is_lower\
    \ || is_upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpf52p5u2_/tmpf52p5u2_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76a1c4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76a1941b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76a1941988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76a19407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf52p5u2_                        0x00005602f83e9975 <unavailable> + 6517

    5    libc.so.6                          0x00002b76a1e36460 __libc_start_main +
    245

    6    tmpf52p5u2_                        0x00005602f83e9359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lowerCase = true\n\
    \    var upperCase = true\n    for key in dict.keys {\n        lowerCase = lowerCase\
    \ && key.lowercased() == key\n        upperCase = upperCase && key.uppercased()\
    \ == key\n    }\n    return lowerCase || upperCase\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpj237x9v3/tmpj237x9v3.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf8093c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf7d8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf7d8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf7d897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj237x9v3                        0x0000563812f28bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002adbf827f460 __libc_start_main +
    245

    6    tmpj237x9v3                        0x0000563812f283b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lowerCase = true\n\
    \    var upperCase = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lowerCase = false\n        }\n        if key.uppercased()\
    \ != key {\n            upperCase = false\n        }\n    }\n    return lowerCase\
    \ || upperCase\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpo8ndqf6h/tmpo8ndqf6h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f9ef8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f9ec84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f9ec84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f9ec837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo8ndqf6h                        0x000055753f87bbd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b3f9f179460 __libc_start_main +
    245

    6    tmpo8ndqf6h                        0x000055753f87b3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.isEmpty {\n\
    \        return false\n    }\n    var lower = true\n    var upper = true\n   \
    \ for (key, _) in dict {\n        if key.lowercased() != key {\n            lower\
    \ = false\n        }\n        if key.uppercased() != key {\n            upper\
    \ = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpm34kkof2/tmpm34kkof2.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a71d9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a71a91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a71a91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a71a907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm34kkof2                        0x000056517c1cbbc0 <unavailable> + 7104

    5    libc.so.6                          0x00002b8a71f86460 __libc_start_main +
    245

    6    tmpm34kkof2                        0x000056517c1cb3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var upper = true\n\
    \    var lower = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return upper || lower\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpypuzpksc/tmpypuzpksc.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6285515c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b628520cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b628520c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b628520b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpypuzpksc                        0x0000560d13c8bbd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b6285701460 __libc_start_main +
    245

    6    tmpypuzpksc                        0x0000560d13c8b3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        lower = lower && key.isLowercase\n\
    \        upper = upper && key.isUppercase\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5aeyy59p.swift:10:30: error: value of type 'String' has no member\
    \ 'isLowercase'\n        lower = lower && key.isLowercase\n                  \
    \       ~~~ ^~~~~~~~~~~\n/tmp/tmp5aeyy59p.swift:11:30: error: value of type 'String'\
    \ has no member 'isUppercase'\n        upper = upper && key.isUppercase\n    \
    \                     ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for (key, _) in dict {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpfp9l4hhb/tmpfp9l4hhb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b298d0bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b298cdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b298cdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b298cdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfp9l4hhb                        0x0000555ec2bf8b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b298d2a6460 __libc_start_main +
    245

    6    tmpfp9l4hhb                        0x0000555ec2bf8359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for (key, _) in dict {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpfp9l4hhb/tmpfp9l4hhb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b298d0bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b298cdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b298cdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b298cdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfp9l4hhb                        0x0000555ec2bf8b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b298d2a6460 __libc_start_main +
    245

    6    tmpfp9l4hhb                        0x0000555ec2bf8359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.count ==\
    \ 0 {\n        return false\n    }\n    var lower = true\n    var upper = true\n\
    \    for (key, _) in dict {\n        if key.lowercased() != key {\n          \
    \  lower = false\n        }\n        if key.uppercased() != key {\n          \
    \  upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpfn50h2a8/tmpfn50h2a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4acc5e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4acc2dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4acc2da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4acc2d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfn50h2a8                        0x0000562f20d4ebc0 <unavailable> + 7104

    5    libc.so.6                          0x00002b4acc7cf460 __libc_start_main +
    245

    6    tmpfn50h2a8                        0x0000562f20d4e3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpe8kjikq_/tmpe8kjikq_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4e0c74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4e096bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4e096b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4e096a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8kjikq_                        0x0000560560724523 <unavailable> + 5411

    5    libc.so.6                          0x00002ab4e0e60460 __libc_start_main +
    245

    6    tmpe8kjikq_                        0x00005605607240d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpw_bsnt62/tmpw_bsnt62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0909cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09099beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09099be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09099bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_bsnt62                        0x00005632ade6ebd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0909eb3460 __libc_start_main +
    245

    6    tmpw_bsnt62                        0x00005632ade6e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.isEmpty {\n\
    \        return false\n    }\n    let lower = dict.keys.filter({$0 == $0.lowercased()})\n\
    \    let upper = dict.keys.filter({$0 == $0.uppercased()})\n    return lower.count\
    \ == dict.count || upper.count == dict.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpo9o_n6o7/tmpo9o_n6o7.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9885bd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98858ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98858cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98858cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9o_n6o7                        0x0000556d05e60c30 <unavailable> + 7216

    5    libc.so.6                          0x00002b9885dc1460 __libc_start_main +
    245

    6    tmpo9o_n6o7                        0x0000556d05e60419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpw_bsnt62/tmpw_bsnt62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0909cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09099beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09099be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09099bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_bsnt62                        0x00005632ade6ebd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0909eb3460 __libc_start_main +
    245

    6    tmpw_bsnt62                        0x00005632ade6e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    let lowercase = dict.keys.filter\
    \ { $0.lowercased() == $0 }\n    let uppercase = dict.keys.filter { $0.uppercased()\
    \ == $0 }\n    return lowercase.count == dict.count || uppercase.count == dict.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpyttd74ij/tmpyttd74ij.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8904962c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8904659b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8904659988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89046587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyttd74ij                        0x000055fc37e7abe0 <unavailable> + 7136

    5    libc.so.6                          0x00002b8904b4e460 __libc_start_main +
    245

    6    tmpyttd74ij                        0x000055fc37e7a3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var is_lower = false\n\
    \    var is_upper = false\n    for (key, _) in dict {\n        if key.lowercased()\
    \ == key {\n            is_lower = true\n        }\n        if key.uppercased()\
    \ == key {\n            is_upper = true\n        }\n    }\n    return is_lower\
    \ || is_upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpf52p5u2_/tmpf52p5u2_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76a1c4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76a1941b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76a1941988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76a19407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf52p5u2_                        0x00005602f83e9975 <unavailable> + 6517

    5    libc.so.6                          0x00002b76a1e36460 __libc_start_main +
    245

    6    tmpf52p5u2_                        0x00005602f83e9359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for (key, _) in dict {\n        lower = lower && key.lowercased()\
    \ == key\n        upper = upper && key.uppercased() == key\n    }\n    return\
    \ lower || upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpigjpz1iw/tmpigjpz1iw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e04b8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e04886b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e04886988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e048857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpigjpz1iw                        0x0000560d9f57db70 <unavailable> + 7024

    5    libc.so.6                          0x00002b9e04d7b460 __libc_start_main +
    245

    6    tmpigjpz1iw                        0x0000560d9f57d359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for (key, _) in dict {\n        lower = lower && key.lowercased()\
    \ == key\n        upper = upper && key.uppercased() == key\n    }\n    return\
    \ lower || upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpigjpz1iw/tmpigjpz1iw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e04b8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e04886b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e04886988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e048857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpigjpz1iw                        0x0000560d9f57db70 <unavailable> + 7024

    5    libc.so.6                          0x00002b9e04d7b460 __libc_start_main +
    245

    6    tmpigjpz1iw                        0x0000560d9f57d359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for (key, _) in dict {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpfp9l4hhb/tmpfp9l4hhb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b298d0bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b298cdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b298cdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b298cdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfp9l4hhb                        0x0000555ec2bf8b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b298d2a6460 __libc_start_main +
    245

    6    tmpfp9l4hhb                        0x0000555ec2bf8359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var upper = true\n\
    \    var lower = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return upper || lower\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpypuzpksc/tmpypuzpksc.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6285515c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b628520cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b628520c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b628520b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpypuzpksc                        0x0000560d13c8bbd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b6285701460 __libc_start_main +
    245

    6    tmpypuzpksc                        0x0000560d13c8b3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_keys =\
    \ 0\n    var upper_keys = 0\n    for key in dict.keys {\n        if key.lowercased()\
    \ == key {\n            lower_keys += 1\n        } else if key.uppercased() ==\
    \ key {\n            upper_keys += 1\n        }\n    }\n    return lower_keys\
    \ == dict.count || upper_keys == dict.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpny9fmihm/tmpny9fmihm.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26fe0d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26fddd0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26fddd0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26fddcf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpny9fmihm                        0x000056210d163c10 <unavailable> + 7184

    5    libc.so.6                          0x00002b26fe2c5460 __libc_start_main +
    245

    6    tmpny9fmihm                        0x000056210d1633f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.count ==\
    \ 0 {\n        return false\n    }\n    var lower = true\n    var upper = true\n\
    \    for (key, _) in dict {\n        if key.lowercased() != key {\n          \
    \  lower = false\n        }\n        if key.uppercased() != key {\n          \
    \  upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpfn50h2a8/tmpfn50h2a8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4acc5e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4acc2dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4acc2da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4acc2d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfn50h2a8                        0x0000562f20d4ebc0 <unavailable> + 7104

    5    libc.so.6                          0x00002b4acc7cf460 __libc_start_main +
    245

    6    tmpfn50h2a8                        0x0000562f20d4e3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        lower = lower && key.lowercased()\
    \ == key\n        upper = upper && key.uppercased() == key\n    }\n    return\
    \ lower || upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp4ec61tgb/tmp4ec61tgb.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b630e69dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b630e394b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b630e394988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b630e3937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ec61tgb                        0x00005649484adbd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b630e889460 __libc_start_main +
    245

    6    tmp4ec61tgb                        0x00005649484ad3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.isEmpty {\n\
    \        return false\n    }\n    var lower = true\n    var upper = true\n   \
    \ for (key, _) in dict {\n        if key.lowercased() != key {\n            lower\
    \ = false\n        }\n        if key.uppercased() != key {\n            upper\
    \ = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpm34kkof2/tmpm34kkof2.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a71d9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a71a91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a71a91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a71a907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm34kkof2                        0x000056517c1cbbc0 <unavailable> + 7104

    5    libc.so.6                          0x00002b8a71f86460 __libc_start_main +
    245

    6    tmpm34kkof2                        0x000056517c1cb3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.count ==\
    \ 0 {\n        return false\n    }\n    let keys = dict.keys\n    let lower =\
    \ keys.filter { $0.lowercased() == $0 }\n    let upper = keys.filter { $0.uppercased()\
    \ == $0 }\n    return lower.count == keys.count || upper.count == keys.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp9ecxlcc3/tmp9ecxlcc3.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5466f8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5466c83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5466c83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5466c827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9ecxlcc3                        0x0000555c0b2a7c40 <unavailable> + 7232

    5    libc.so.6                          0x00002b5467178460 __libc_start_main +
    245

    6    tmp9ecxlcc3                        0x0000555c0b2a7429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key\
    \ != key.lowercased() {\n            lower_case = false\n        }\n        if\
    \ key != key.uppercased() {\n            upper_case = false\n        }\n    }\n\
    \    return lower_case || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\"\
    \ : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpg53jrj4j/tmpg53jrj4j.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe3690ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe36605b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe36605988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe366047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg53jrj4j                        0x0000560f3780bbd0 <unavailable> + 7120

    5    libc.so.6                          0x00002afe36afa460 __libc_start_main +
    245

    6    tmpg53jrj4j                        0x0000560f3780b3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for (key, _) in dict {\n        if key != key.lowercased()\
    \ {\n            lower = false\n        }\n        if key != key.uppercased()\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpmft10wi5/tmpmft10wi5.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c3628dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c35f84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c35f84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c35f837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmft10wi5                        0x0000562d065a8b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4c36479460 __libc_start_main +
    245

    6    tmpmft10wi5                        0x0000562d065a8359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        lower_case\
    \ = lower_case && key.lowercased() == key\n        upper_case = upper_case &&\
    \ key.uppercased() == key\n    }\n    return lower_case || upper_case\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp7uh3_nvg/tmp7uh3_nvg.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1f98ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1f95e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1f95e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1f95e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7uh3_nvg                        0x00005558a90cfbd0 <unavailable> + 7120

    5    libc.so.6                          0x00002ac1f9ad7460 __libc_start_main +
    245

    6    tmp7uh3_nvg                        0x00005558a90cf3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case_keys\
    \ = true\n    var upper_case_keys = true\n    for key in dict.keys {\n       \
    \ if key.lowercased() != key {\n            lower_case_keys = false\n        }\n\
    \        if key.uppercased() != key {\n            upper_case_keys = false\n \
    \       }\n    }\n    return lower_case_keys || upper_case_keys\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpd5onzhsp/tmpd5onzhsp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10ec7b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10ec4aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10ec4ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10ec4ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd5onzhsp                        0x0000560c46d92bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b10ec9a3460 __libc_start_main +
    245

    6    tmpd5onzhsp                        0x0000560c46d923b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_keys =\
    \ 0\n    var upper_keys = 0\n    for key in dict.keys {\n        if key.lowercased()\
    \ == key {\n            lower_keys += 1\n        } else if key.uppercased() ==\
    \ key {\n            upper_keys += 1\n        }\n    }\n    return (lower_keys\
    \ == dict.count || upper_keys == dict.count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp4q5tg_37/tmp4q5tg_37.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f15b73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f1586ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f1586a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f158697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4q5tg_37                        0x000055a923599c10 <unavailable> + 7184

    5    libc.so.6                          0x00002b4f15d5f460 __libc_start_main +
    245

    6    tmp4q5tg_37                        0x000055a9235993f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        lower = lower && key.isLowercase\n\
    \        upper = upper && key.isUppercase\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5aeyy59p.swift:10:30: error: value of type 'String' has no member\
    \ 'isLowercase'\n        lower = lower && key.isLowercase\n                  \
    \       ~~~ ^~~~~~~~~~~\n/tmp/tmp5aeyy59p.swift:11:30: error: value of type 'String'\
    \ has no member 'isUppercase'\n        upper = upper && key.isUppercase\n    \
    \                     ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpw_bsnt62/tmpw_bsnt62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0909cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09099beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09099be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09099bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_bsnt62                        0x00005632ade6ebd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0909eb3460 __libc_start_main +
    245

    6    tmpw_bsnt62                        0x00005632ade6e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for (key, _) in dict {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpfp9l4hhb/tmpfp9l4hhb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b298d0bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b298cdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b298cdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b298cdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfp9l4hhb                        0x0000555ec2bf8b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b298d2a6460 __libc_start_main +
    245

    6    tmpfp9l4hhb                        0x0000555ec2bf8359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for (key, _) in dict {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpfp9l4hhb/tmpfp9l4hhb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b298d0bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b298cdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b298cdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b298cdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfp9l4hhb                        0x0000555ec2bf8b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b298d2a6460 __libc_start_main +
    245

    6    tmpfp9l4hhb                        0x0000555ec2bf8359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        lower_case\
    \ = lower_case && key.lowercased() == key\n        upper_case = upper_case &&\
    \ key.uppercased() == key\n    }\n    return lower_case || upper_case\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp7uh3_nvg/tmp7uh3_nvg.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1f98ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1f95e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1f95e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1f95e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7uh3_nvg                        0x00005558a90cfbd0 <unavailable> + 7120

    5    libc.so.6                          0x00002ac1f9ad7460 __libc_start_main +
    245

    6    tmp7uh3_nvg                        0x00005558a90cf3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpw_bsnt62/tmpw_bsnt62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0909cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09099beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09099be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09099bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_bsnt62                        0x00005632ade6ebd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0909eb3460 __libc_start_main +
    245

    6    tmpw_bsnt62                        0x00005632ade6e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpw_bsnt62/tmpw_bsnt62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0909cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09099beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09099be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09099bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_bsnt62                        0x00005632ade6ebd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0909eb3460 __libc_start_main +
    245

    6    tmpw_bsnt62                        0x00005632ade6e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for (key, _) in dict {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpfp9l4hhb/tmpfp9l4hhb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b298d0bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b298cdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b298cdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b298cdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfp9l4hhb                        0x0000555ec2bf8b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b298d2a6460 __libc_start_main +
    245

    6    tmpfp9l4hhb                        0x0000555ec2bf8359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case_keys\
    \ = true\n    var upper_case_keys = true\n    for key in dict.keys {\n       \
    \ if key.lowercased() != key {\n            lower_case_keys = false\n        }\n\
    \        if key.uppercased() != key {\n            upper_case_keys = false\n \
    \       }\n    }\n    return lower_case_keys || upper_case_keys\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpd5onzhsp/tmpd5onzhsp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10ec7b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10ec4aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10ec4ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10ec4ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd5onzhsp                        0x0000560c46d92bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b10ec9a3460 __libc_start_main +
    245

    6    tmpd5onzhsp                        0x0000560c46d923b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lowerCase = true\n\
    \    var upperCase = true\n    for (key, _) in dict {\n        if key.lowercased()\
    \ != key {\n            lowerCase = false\n        }\n        if key.uppercased()\
    \ != key {\n            upperCase = false\n        }\n    }\n    return lowerCase\
    \ || upperCase\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp9_z1tqiq/tmp9_z1tqiq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9722ccdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b97229c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b97229c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97229c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9_z1tqiq                        0x0000555b98868b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b9722eb9460 __libc_start_main +
    245

    6    tmp9_z1tqiq                        0x0000555b98868359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lowerCase = true\n\
    \    var upperCase = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lowerCase = false\n        }\n        if key.uppercased()\
    \ != key {\n            upperCase = false\n        }\n    }\n    return lowerCase\
    \ || upperCase\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpo8ndqf6h/tmpo8ndqf6h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f9ef8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f9ec84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f9ec84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f9ec837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo8ndqf6h                        0x000055753f87bbd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b3f9f179460 __libc_start_main +
    245

    6    tmpo8ndqf6h                        0x000055753f87b3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        lower = lower && key.lowercased()\
    \ == key\n        upper = upper && key.uppercased() == key\n    }\n    return\
    \ lower || upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp4ec61tgb/tmp4ec61tgb.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b630e69dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b630e394b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b630e394988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b630e3937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ec61tgb                        0x00005649484adbd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b630e889460 __libc_start_main +
    245

    6    tmp4ec61tgb                        0x00005649484ad3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.isEmpty {\n\
    \        return false\n    }\n    var lower_case = true\n    var upper_case =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lower_case = false\n        }\n        if key.uppercased() != key {\n\
    \            upper_case = false\n        }\n    }\n    return lower_case || upper_case\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpir3p4jwp/tmpir3p4jwp.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f1bf84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f1bc7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f1bc7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f1bc7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpir3p4jwp                        0x000055b559395bc0 <unavailable> + 7104

    5    libc.so.6                          0x00002b0f1c170460 __libc_start_main +
    245

    6    tmpir3p4jwp                        0x000055b5593953a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for (key, _) in dict {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpfp9l4hhb/tmpfp9l4hhb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b298d0bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b298cdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b298cdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b298cdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfp9l4hhb                        0x0000555ec2bf8b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b298d2a6460 __libc_start_main +
    245

    6    tmpfp9l4hhb                        0x0000555ec2bf8359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpw_bsnt62/tmpw_bsnt62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0909cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09099beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09099be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09099bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_bsnt62                        0x00005632ade6ebd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0909eb3460 __libc_start_main +
    245

    6    tmpw_bsnt62                        0x00005632ade6e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpw_bsnt62/tmpw_bsnt62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0909cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09099beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09099be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09099bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_bsnt62                        0x00005632ade6ebd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0909eb3460 __libc_start_main +
    245

    6    tmpw_bsnt62                        0x00005632ade6e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        lower = lower && key.isLowercase\n\
    \        upper = upper && key.isUppercase\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5aeyy59p.swift:10:30: error: value of type 'String' has no member\
    \ 'isLowercase'\n        lower = lower && key.isLowercase\n                  \
    \       ~~~ ^~~~~~~~~~~\n/tmp/tmp5aeyy59p.swift:11:30: error: value of type 'String'\
    \ has no member 'isUppercase'\n        upper = upper && key.isUppercase\n    \
    \                     ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpe8kjikq_/tmpe8kjikq_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4e0c74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4e096bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4e096b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4e096a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8kjikq_                        0x0000560560724523 <unavailable> + 5411

    5    libc.so.6                          0x00002ab4e0e60460 __libc_start_main +
    245

    6    tmpe8kjikq_                        0x00005605607240d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower_case =\
    \ true\n    var upper_case = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower_case = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper_case = false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpw_bsnt62/tmpw_bsnt62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0909cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09099beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09099be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09099bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_bsnt62                        0x00005632ade6ebd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b0909eb3460 __libc_start_main +
    245

    6    tmpw_bsnt62                        0x00005632ade6e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    var lower = true\n\
    \    var upper = true\n    for key in dict.keys {\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3vpedv6v/tmp3vpedv6v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6a10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f69e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f69e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f69e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vpedv6v                        0x000055b8faab3bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b7f6a2f7460 __libc_start_main +
    245

    6    tmp3vpedv6v                        0x000055b8faab33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660011578
