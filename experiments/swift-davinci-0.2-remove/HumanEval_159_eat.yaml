name: HumanEval_159_eat
language: swift
prompt: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
  \ of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n\
  /// you should return an array of [ total number of eaten carrots after your meals,\n\
  /// the number of carrots left after your meals ]\n/// if there are not enough remaining\
  \ carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n\
  /// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n\
  /// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining\
  \ : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n\
  /// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n\
  /// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) ==\
  \ [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
  \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
  \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
  \ 4, need: 5, remaining: 1) == [5, 0])"
completions: ["    let total = number + remaining\n    let eaten = total - need\n\
    \    return [eaten, total - eaten]", "    let eaten = min(number + remaining,\
    \ need)\n    return [eaten, remaining - (eaten - number)]", "    let total = number\
    \ + remaining\n    if total >= need {\n        return [need, total - need]\n \
    \   } else {\n        return [total, 0]\n    }", "    let total = number + remaining\n\
    \    let eaten = total >= need ? need : total\n    return [eaten, total - eaten]",
  "    let carrots = number + remaining\n    let eaten = carrots >= need ? need :\
    \ carrots\n    return [eaten, carrots - eaten]", "    let carrots = number + remaining\n\
    \    let eaten = carrots >= need ? need : carrots\n    return [eaten, carrots\
    \ - eaten]", "    let total = number + remaining\n    let eaten = total >= need\
    \ ? need : total\n    return [eaten, total - eaten]", "    let total = number\
    \ + remaining\n    return [total, total < need ? 0 : total - need]", '    return
    [number + min(need, remaining), max(0, remaining - need)]', "    let eaten = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [eaten, left]", "    let carrots = number + remaining\n    return carrots >=\
    \ need ? [need, carrots - need] : [carrots, 0]", "    let total = number + remaining\n\
    \    let eaten = total >= need ? need : total\n    return [eaten, total - eaten]",
  "    let eaten = min(number + remaining, need)\n    return [eaten, eaten - need]",
  "    var result = [number, remaining]\n    if number < need {\n        result[0]\
    \ += remaining\n        result[1] = 0\n    } else {\n        result[1] = remaining\
    \ - (need - number)\n    }\n    return result", "    let eaten = number + min(need,\
    \ remaining)\n    let left = max(0, remaining - need)\n    return [eaten, left]",
  "    let eaten = min(number + remaining, need)\n    return [eaten, eaten - need]",
  "    let total = number + remaining\n    let left = total - need\n    return left\
    \ >= 0 ? [need, left] : [total, 0]", "    let total = number + remaining\n   \
    \ let eaten = total >= need ? need : total\n    return [eaten, total - eaten]",
  "    let total = number + remaining\n    let eaten = total >= need ? need : total\n\
    \    return [eaten, total - eaten]", "    let eaten = min(number + remaining,\
    \ need)\n    return [eaten, eaten - need]", "    let total = number + remaining\n\
    \    let eaten = total >= need ? need : total\n    return [eaten, total - eaten]",
  "    let carrots = number + remaining\n    let eaten = carrots > need ? need : carrots\n\
    \    return [eaten, carrots - eaten]", "    var eaten = number\n    var left =\
    \ remaining\n    if number + remaining >= need {\n        eaten += need\n    \
    \    left -= need\n    } else {\n        eaten += remaining\n        left = 0\n\
    \    }\n    return [eaten, left]", "    let total = number + remaining\n    let\
    \ eaten = total >= need ? need : total\n    return [eaten, total - eaten]", " \
    \   let total = number + remaining\n    if total >= need {\n        return [need,\
    \ total - need]\n    } else {\n        return [total, 0]\n    }", "    let carrots\
    \ = number + remaining\n    let eaten = carrots >= need ? need : carrots\n   \
    \ return [eaten, carrots - eaten]", "    let total = number + remaining\n    let\
    \ eaten = total >= need ? need : total\n    return [eaten, total - eaten]", " \
    \   var result = [Int]()\n    if number + remaining < need {\n        result.append(number\
    \ + remaining)\n        result.append(0)\n    } else {\n        result.append(need)\n\
    \        result.append(number + remaining - need)\n    }\n    return result",
  "    let eaten = min(number + remaining, need)\n    return [eaten, eaten - need]",
  "    var result = [number, remaining]\n    if number + remaining >= need {\n   \
    \     result[0] = need\n        result[1] = number + remaining - need\n    } else\
    \ {\n        result[0] = number + remaining\n        result[1] = 0\n    }\n  \
    \  return result", "    let eaten = min(number + remaining, need)\n    return\
    \ [eaten, need - eaten]", "    let total = number + remaining\n    let eaten =\
    \ total > need ? need : total\n    return [eaten, total - eaten]", "    var result\
    \ = [number, remaining]\n    if need > remaining {\n        result[0] += remaining\n\
    \        result[1] = 0\n    } else {\n        result[0] += need\n        result[1]\
    \ -= need\n    }\n    return result", "    let total = number + remaining\n  \
    \  let eaten = total >= need ? need : total\n    return [eaten, total - eaten]",
  "    let carrotsEaten = min(number + remaining, need)\n    let carrotsLeft = remaining\
    \ - (carrotsEaten - number)\n    return [carrotsEaten, carrotsLeft]", "    let\
    \ total = number + remaining\n    let eaten = total > need ? need : total\n  \
    \  return [eaten, total - eaten]", "    let total = number + remaining\n    let\
    \ eaten = total >= need ? need : total\n    return [eaten, total - eaten]", " \
    \   let eaten = min(number + remaining, need)\n    return [eaten, eaten - need]",
  "    let total = number + remaining\n    if total >= need {\n        return [need,\
    \ total - need]\n    } else {\n        return [total, 0]\n    }", "    let total\
    \ = number + remaining\n    let eaten = total > need ? need : total\n    return\
    \ [eaten, total - eaten]", "    let total = number + remaining\n    if total >=\
    \ need {\n        return [need, total - need]\n    } else {\n        return [total,\
    \ 0]\n    }", "    let eaten = min(number + remaining, need)\n    return [eaten,\
    \ eaten - need]", "    var result = [number, remaining]\n    if remaining >= need\
    \ {\n        result[0] += need\n        result[1] -= need\n    } else {\n    \
    \    result[0] += remaining\n        result[1] = 0\n    }\n    return result",
  "    let total = number + remaining\n    let eaten = total >= need ? need : total\n\
    \    return [eaten, total - eaten]", "    if number + remaining < need {\n   \
    \     return [number + remaining, 0]\n    } else {\n        return [need, number\
    \ + remaining - need]\n    }", "    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]", "    let\
    \ eaten = min(number + remaining, need)\n    return [eaten, eaten - need]", " \
    \   let total = number + remaining\n    let eaten = total >= need ? need : total\n\
    \    return [eaten, total - eaten]", "    let total = number + remaining\n   \
    \ let eaten = total >= need ? need : total\n    return [eaten, total - eaten]",
  "    let total = number + remaining\n    let eaten = total >= need ? need : total\n\
    \    return [eaten, total - eaten]", "    let eaten = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [eaten, left]", "    let\
    \ total = number + remaining\n    let eaten = total >= need ? need : total\n \
    \   return [eaten, total - eaten]", "    let eaten = min(number + remaining, need)\n\
    \    return [eaten, remaining - (eaten - number)]", "    if number + remaining\
    \ >= need {\n        return [need, number + remaining - need]\n    } else {\n\
    \        return [number + remaining, 0]\n    }", "    let total = number + remaining\n\
    \    let eaten = total > need ? need : total\n    return [eaten, total - eaten]",
  "    let eaten = min(number + remaining, need)\n    return [eaten, eaten - need]",
  "    let eaten = min(number + remaining, need)\n    return [eaten, eaten - need]",
  "    let eaten = number + min(need, remaining)\n    let left = max(0, remaining\
    \ - need)\n    return [eaten, left]", "    let total = number + remaining\n  \
    \  let eaten = total >= need ? need : total\n    return [eaten, total - eaten]",
  "    let eaten = min(number + remaining, need)\n    return [eaten, eaten - need]",
  "    let eaten = number + min(need, remaining)\n    let left = max(0, remaining\
    \ - need)\n    return [eaten, left]", "    let eaten = min(number + remaining,\
    \ need)\n    return [eaten, eaten - need]", "    let total = number + remaining\n\
    \    let eaten = total > need ? need : total\n    return [eaten, total - eaten]",
  "    let eaten = number + min(need, remaining)\n    let left = max(0, remaining\
    \ - need)\n    return [eaten, left]", "    let total = number + remaining\n  \
    \  let eaten = total >= need ? need : total\n    return [eaten, total - eaten]",
  "    let total = number + remaining\n    let eaten = total >= need ? need : total\n\
    \    return [eaten, total - eaten]", "    var result = [number, remaining]\n \
    \   if number + remaining >= need {\n        result[0] = need\n        result[1]\
    \ = number + remaining - need\n    } else {\n        result[0] = number + remaining\n\
    \        result[1] = 0\n    }\n    return result", "    let total = number + remaining\n\
    \    let eaten = total < need ? total : need\n    return [eaten, total - eaten]",
  "    let eaten = min(number + remaining, need)\n    return [eaten, eaten - need]",
  "    let eaten = min(number + remaining, need)\n    return [eaten, eaten - need]",
  "    let eaten = min(number + remaining, need)\n    return [eaten, eaten - need]",
  "    let eaten = min(number + remaining, need)\n    return [eaten, eaten - need]",
  "    let carrots = number + remaining\n    if carrots >= need {\n        return\
    \ [need, carrots - need]\n    } else {\n        return [carrots, 0]\n    }", " \
    \   let total = number + remaining\n    let eaten = total >= need ? need : total\n\
    \    return [eaten, total - eaten]", "    let eaten = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [eaten, left]", "    var\
    \ eaten = number\n    var left = remaining\n    if number + remaining < need {\n\
    \        eaten += remaining\n        left = 0\n    } else {\n        eaten +=\
    \ need\n        left -= need\n    }\n    return [eaten, left]", '    return [number
    + min(need, remaining), max(0, remaining - need)]', "    let eaten = number +\
    \ min(need, remaining)\n    let left = max(0, remaining - need)\n    return [eaten,\
    \ left]", "    let eaten = min(number + remaining, need)\n    return [eaten, eaten\
    \ - need]", "    var eaten = number\n    var left = remaining\n    if number +\
    \ remaining >= need {\n        eaten += need\n        left -= need\n    } else\
    \ {\n        eaten += remaining\n        left = 0\n    }\n    return [eaten, left]",
  "    let eaten = min(number + remaining, need)\n    return [eaten, eaten - need]",
  "    let eaten = min(number + remaining, need)\n    return [eaten, eaten - need]",
  "    let eaten = min(number + remaining, need)\n    return [eaten, need - eaten]",
  "    let total = number + remaining\n    let eaten = total >= need ? need : total\n\
    \    return [eaten, total - eaten]", "    let total = number + remaining\n   \
    \ let eaten = total >= need ? need : total\n    return [eaten, total - eaten]",
  "    var total = number + remaining\n    if total >= need {\n        return [need,\
    \ total - need]\n    } else {\n        return [total, 0]\n    }", "    let total\
    \ = number + remaining\n    let eaten = total >= need ? need : total\n    return\
    \ [eaten, total - eaten]", "    let eaten = number + min(need, remaining)\n  \
    \  let left = max(0, remaining - need)\n    return [eaten, left]", "    let eaten\
    \ = min(number + remaining, need)\n    return [eaten, eaten - need]", "    let\
    \ eaten = number + min(need, remaining)\n    let left = max(0, remaining - need)\n\
    \    return [eaten, left]", "    let total = number + remaining\n    return [total,\
    \ total >= need ? total - need : 0]", "    let total = number + remaining\n  \
    \  let eaten = min(total, need)\n    let left = total - eaten\n    return [eaten,\
    \ left]", "    let eaten = number + min(need, remaining)\n    let left = max(0,\
    \ remaining - need)\n    return [eaten, left]", "    let eaten = min(number +\
    \ remaining, need)\n    return [eaten, eaten - need]", "    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]", "    let eaten = min(number + remaining, need)\n    return\
    \ [eaten, eaten - need]", "    let eaten = min(number + remaining, need)\n   \
    \ return [eaten, max(0, remaining - (need - number))]", "    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]", "    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]", "    let eaten = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [eaten, left]", '    return [number + min(need, remaining), max(0, remaining
    - need)]', "    let total = number + remaining\n    let eaten = total > need ?\
    \ need : total\n    return [eaten, total - eaten]", "    let total = number +\
    \ remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]", "    let eaten = min(number + remaining, need)\n    return\
    \ [eaten, eaten - need]", "    let eaten = min(number + remaining, need)\n   \
    \ return [eaten, eaten - need]", "    let eaten = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [eaten, left]", '    return
    [number + min(need, remaining), max(0, remaining - need)]', "    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]", "    let eaten = min(number + remaining, need)\n    return\
    \ [eaten, eaten - need]", "    var result = [number, remaining]\n    if number\
    \ + remaining >= need {\n        result[0] = need\n        result[1] = number\
    \ + remaining - need\n    } else {\n        result[0] = number + remaining\n \
    \       result[1] = 0\n    }\n    return result", "    var number = number\n \
    \   var remaining = remaining\n    var result = [number, remaining]\n    if number\
    \ + remaining < need {\n        result[0] = number + remaining\n        result[1]\
    \ = 0\n    } else {\n        result[0] = need\n        result[1] = remaining -\
    \ (need - number)\n    }\n    return result", "    let total = number + remaining\n\
    \    let eaten = total >= need ? need : total\n    return [eaten, total - eaten]",
  "    let total = number + remaining\n    let eaten = total >= need ? need : total\n\
    \    return [eaten, total - eaten]", "    let total = number + remaining\n   \
    \ let eaten = total >= need ? need : total\n    return [eaten, total - eaten]",
  "    let eaten = min(number + remaining, need)\n    return [eaten, eaten - need]",
  "    let total = number + remaining\n    let eaten = total >= need ? need : total\n\
    \    return [eaten, total - eaten]", "    let eaten = min(number + remaining,\
    \ need)\n    return [eaten, eaten - need]", "    let total = number + remaining\n\
    \    let eaten = total < need ? total : need\n    return [eaten, total - eaten]",
  "    if number + remaining < need {\n        return [number + remaining, 0]\n  \
    \  } else {\n        return [need, number + remaining - need]\n    }", "    var\
    \ result = [Int]()\n    if number + remaining >= need {\n        result.append(need)\n\
    \        result.append(number + remaining - need)\n    } else {\n        result.append(number\
    \ + remaining)\n        result.append(0)\n    }\n    return result", "    var\
    \ result = [number, remaining]\n    if number + remaining >= need {\n        result[0]\
    \ = need\n        result[1] = remaining - (need - number)\n    } else {\n    \
    \    result[0] = number + remaining\n        result[1] = 0\n    }\n    return\
    \ result", "    let eaten = min(number + remaining, need)\n    return [eaten,\
    \ eaten - need]", "    let total = number + remaining\n    let eaten = total >=\
    \ need ? need : total\n    return [eaten, total - eaten]", "    let total = number\
    \ + remaining\n    return [total, total >= need ? total - need : 0]", "    let\
    \ total = number + remaining\n    let eaten = total > need ? need : total\n  \
    \  return [eaten, total - eaten]", "    let total = number + remaining\n    let\
    \ eaten = total < need ? total : need\n    return [eaten, total - eaten]", " \
    \   var eaten = number\n    var left = remaining\n    if left >= need {\n    \
    \    eaten += need\n        left -= need\n    } else {\n        eaten += left\n\
    \        left = 0\n    }\n    return [eaten, left]", "    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]", "    let eaten = min(number\
    \ + remaining, need)\n    return [eaten, eaten - need]", "    let total = number\
    \ + remaining\n    if total >= need {\n        return [need, total - need]\n \
    \   } else {\n        return [total, 0]\n    }", "    let eaten = number + min(need,\
    \ remaining)\n    let left = max(0, remaining - need)\n    return [eaten, left]",
  "    let eaten = min(number + remaining, need)\n    return [eaten, eaten - need]",
  "    var result = [number, remaining]\n    if number + remaining < need {\n    \
    \    result[0] = number + remaining\n        result[1] = 0\n    } else {\n   \
    \     result[0] = need\n        result[1] = remaining - (need - number)\n    }\n\
    \    return result", "    let carrots = number + remaining\n    let eaten = carrots\
    \ > need ? need : carrots\n    return [eaten, carrots - eaten]", "    let carrots\
    \ = number + remaining\n    let eaten = carrots >= need ? need : carrots\n   \
    \ return [eaten, carrots - eaten]", "    let eaten = min(number + remaining, need)\n\
    \    return [eaten, eaten - need]", "    let eaten = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [eaten, left]", "    let\
    \ eaten = min(number + remaining, need)\n    return [eaten, eaten - need]", " \
    \   let total = number + remaining\n    let eaten = total > need ? need : total\n\
    \    return [eaten, total - eaten]", "    let total = number + remaining\n   \
    \ let eaten = total >= need ? need : total\n    return [eaten, total - eaten]",
  "    let eaten = number + min(need, remaining)\n    let left = max(0, remaining\
    \ - need)\n    return [eaten, left]", "    let eaten = min(number + remaining,\
    \ need)\n    return [eaten, eaten - need]", "    let eaten = min(number + remaining,\
    \ need)\n    return [eaten, eaten - need]", "    let eaten = min(number + remaining,\
    \ need)\n    return [eaten, max(0, eaten - need)]", "    var result = [Int]()\n\
    \    if number + remaining < need {\n        result.append(number + remaining)\n\
    \        result.append(0)\n    } else {\n        result.append(need)\n       \
    \ result.append(number + remaining - need)\n    }\n    return result", "    let\
    \ eaten = min(number + remaining, need)\n    return [eaten, eaten - need]", " \
    \   let total = number + remaining\n    let eaten = total >= need ? need : total\n\
    \    return [eaten, total - eaten]", "    var result = [number, remaining]\n \
    \   if need > remaining {\n        result[0] += remaining\n        result[1] =\
    \ 0\n    } else {\n        result[0] += need\n        result[1] -= need\n    }\n\
    \    return result", "    var result = [number, remaining]\n    if number + remaining\
    \ < need {\n        result[0] = number + remaining\n        result[1] = 0\n  \
    \  } else {\n        result[0] = need\n        result[1] = remaining - (need -\
    \ number)\n    }\n    return result", "    let eaten = min(number + remaining,\
    \ need)\n    return [eaten, remaining - (eaten - number)]", "    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]", "    let eaten = min(number + remaining, need)\n    return\
    \ [eaten, eaten - need]", "    let eaten = min(need, remaining)\n    return [number\
    \ + eaten, remaining - eaten]", "    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]", "    var\
    \ carrots = remaining + number\n    if carrots >= need {\n        return [need,\
    \ carrots - need]\n    } else {\n        return [carrots, 0]\n    }", "    let\
    \ total = number + remaining\n    let eaten = total >= need ? need : total\n \
    \   return [eaten, total - eaten]", "    let eaten = min(number + remaining, need)\n\
    \    return [eaten, need - eaten]", "    if number + remaining >= need {\n   \
    \     return [need, number + remaining - need]\n    } else {\n        return [number\
    \ + remaining, 0]\n    }", "    let eaten = number + min(need, remaining)\n  \
    \  let left = max(0, remaining - need)\n    return [eaten, left]", "    let total\
    \ = number + remaining\n    let eaten = total >= need ? need : total\n    return\
    \ [eaten, total - eaten]", "    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]", "    let\
    \ eaten = number + min(need, remaining)\n    let left = max(0, remaining - need)\n\
    \    return [eaten, left]", "    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]", "    let\
    \ total = number + remaining\n    let eaten = total >= need ? need : total\n \
    \   return [eaten, total - eaten]", "    let eaten = min(number + remaining, need)\n\
    \    return [eaten, eaten - need]", "    let eaten = min(number + remaining, need)\n\
    \    return [eaten, eaten - need]", "    let eaten = min(number + remaining, need)\n\
    \    return [eaten, eaten - need]", "    var result = [number, remaining]\n  \
    \  if number + remaining < need {\n        result[0] = number + remaining\n  \
    \      result[1] = 0\n    } else {\n        result[0] = need\n        result[1]\
    \ = remaining - (need - number)\n    }\n    return result", "    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]", "    let total = number + remaining\n    if total >= need {\n\
    \        return [need, total - need]\n    } else {\n        return [total, 0]\n\
    \    }", "    let total = number + remaining\n    return [total, total >= need\
    \ ? total - need : 0]", "    let eaten = min(number + remaining, need)\n    return\
    \ [eaten, eaten - need]", "    let eaten = min(number + remaining, need)\n   \
    \ return [eaten, eaten - need]", "    let total = number + remaining\n    let\
    \ eaten = total >= need ? need : total\n    return [eaten, total - eaten]", " \
    \   let total = number + remaining\n    let eaten = total >= need ? need : total\n\
    \    return [eaten, total - eaten]", "    let eaten = min(number + remaining,\
    \ need)\n    return [eaten, eaten - need]", "    let total = number + remaining\n\
    \    let left = total - need\n    return [left, left < 0 ? 0 : left]", "    let\
    \ eaten = min(number + remaining, need)\n    return [eaten, eaten - need]", " \
    \   let eaten = min(number + remaining, need)\n    return [eaten, eaten - need]",
  "    let total = number + remaining\n    let eaten = total >= need ? need : total\n\
    \    return [eaten, total - eaten]", "    let total = number + remaining\n   \
    \ let eaten = total > need ? need : total\n    return [eaten, total - eaten]",
  "    let carrots = number + remaining\n    return carrots >= need ? [need, carrots\
    \ - need] : [carrots, 0]", '    return [number + min(need, remaining), max(0,
    remaining - need)]', "    let eaten = min(number + remaining, need)\n    return\
    \ [eaten, eaten - need]", "    var eaten = number\n    var left = remaining\n\
    \    if number + remaining < need {\n        eaten += remaining\n        left\
    \ = 0\n    } else {\n        eaten += need\n        left -= need\n    }\n    return\
    \ [eaten, left]", "    let eaten = min(number + remaining, need)\n    return [eaten,\
    \ remaining - (eaten - number)]", "    let eaten = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [eaten, left]", "    let\
    \ eaten = min(number + remaining, need)\n    return [eaten, remaining - (eaten\
    \ - number)]", "    let eaten = number + min(need, remaining)\n    let left =\
    \ max(0, remaining - need)\n    return [eaten, left]", "    let total = number\
    \ + remaining\n    if total < need {\n        return [total, 0]\n    }\n    return\
    \ [need, total - need]", "    let total = number + remaining\n    let eaten =\
    \ total >= need ? need : total\n    return [eaten, total - eaten]", "    let eaten\
    \ = number + min(need, remaining)\n    let left = max(0, remaining - need)\n \
    \   return [eaten, left]", "    var eaten = number\n    var left = remaining\n\
    \    if left >= need {\n        eaten += need\n        left -= need\n    } else\
    \ {\n        eaten += left\n        left = 0\n    }\n    return [eaten, left]",
  "    let eaten = min(number + remaining, need)\n    return [eaten, remaining - (eaten\
    \ - number)]", "    let total = number + remaining\n    let eaten = total < need\
    \ ? total : need\n    return [eaten, total - eaten]", "    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]", "    let eaten = min(number + remaining, need)\n    return\
    \ [eaten, eaten - need]", "    if number + remaining < need {\n        return\
    \ [number + remaining, 0]\n    } else {\n        return [need, number + remaining\
    \ - need]\n    }", "    let eaten = min(number + remaining, need)\n    return\
    \ [eaten, eaten - need]", "    let eaten = min(number + remaining, need)\n   \
    \ return [eaten, eaten - need]"]
stop_tokens:
- "\n}"
