name: HumanEval_65_circular_shift
language: swift
prompt: "\n/// Circular shift the digits of the integer x, shift the digits right\
  \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
  \ return digits reversed.\nfunc circular_shift(x: Int, shift: Int) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(circular_shift(x: 100, shift: 2) == \"001\"\
  )\nassert(circular_shift(x: 12, shift: 2) == \"12\")\nassert(circular_shift(x: 97,\
  \ shift: 8) == \"79\")\nassert(circular_shift(x: 12, shift: 1) == \"21\")\nassert(circular_shift(x:\
  \ 11, shift: 101) == \"11\")"
completions: ["    let digits = String(x)\n    if shift > digits.count {\n       \
    \ return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   let digits = String(x)\n    let length = digits.characters.count\n    if shift\
    \ > length {\n        return String(digits.characters.reverse())\n    }\n    let\
    \ start = digits.index(digits.startIndex, offsetBy: shift)\n    let end = digits.index(digits.endIndex,\
    \ offsetBy: -shift)\n    let shifted = digits.substring(from: start) + digits.substring(to:\
    \ end)\n    return shifted", "    var x = x\n    var shift = shift\n    var result\
    \ = \"\"\n    var digits = 0\n    while x > 0 {\n        x /= 10\n        digits\
    \ += 1\n    }\n    shift %= digits\n    if shift == 0 {\n        return String(x)\n\
    \    }\n    x = x / Int(pow(10, Double(shift)))\n    while x > 0 {\n        result\
    \ += String(x % 10)\n        x /= 10\n    }\n    return result", "    let digits\
    \ = String(x)\n    let length = digits.characters.count\n    if shift >= length\
    \ {\n        return String(digits.characters.reverse())\n    }\n    let start\
    \ = digits.startIndex.advancedBy(shift)\n    let end = digits.endIndex\n    let\
    \ shifted = digits.substringWithRange(start..<end) + digits.substringToIndex(start)\n\
    \    return shifted", "    var x = x\n    var digits = [Int]()\n    while x >\
    \ 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        return String(digits.reverse())\n    }\n    let shifted = digits[digits.count\
    \ - shift ..< digits.count] + digits[0 ..< digits.count - shift]\n    return String(shifted)",
  "    var digits = String(x)\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits[..<index]\n    let suffix = digits[index...]\n    return\
    \ String(suffix + prefix)", "    var str = String(x)\n    if shift > str.characters.count\
    \ {\n        return String(str.characters.reverse())\n    }\n    let index = str.startIndex.advancedBy(shift)\n\
    \    str.insert(str.removeAtIndex(index), atIndex: str.startIndex)\n    return\
    \ str", "    let digits = String(x)\n    let len = digits.characters.count\n \
    \   if shift >= len {\n        return String(digits.characters.reverse())\n  \
    \  }\n    let index = digits.startIndex.advancedBy(shift)\n    let prefix = digits.substringToIndex(index)\n\
    \    let suffix = digits.substringFromIndex(index)\n    return suffix + prefix",
  "    var s = String(x)\n    if shift > s.count {\n        return String(s.reversed())\n\
    \    }\n    let i = s.index(s.startIndex, offsetBy: shift)\n    let j = s.index(s.endIndex,\
    \ offsetBy: -shift)\n    return String(s[i..<j])", "    let s = String(x)\n  \
    \  let n = s.characters.count\n    if shift >= n {\n        return String(s.characters.reverse())\n\
    \    }\n    let i = s.startIndex\n    let j = s.startIndex.advancedBy(shift)\n\
    \    let k = s.startIndex.advancedBy(n)\n    return s[j..<k] + s[i..<j]", "  \
    \  let digits = String(x)\n    let length = digits.characters.count\n    if shift\
    \ > length {\n        return String(digits.characters.reverse())\n    }\n    let\
    \ index = digits.startIndex.advancedBy(shift)\n    let prefix = digits.substringToIndex(index)\n\
    \    let suffix = digits.substringFromIndex(index)\n    return suffix + prefix",
  "    var x = x\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ String(digits.reverse())\n    }\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return String(shifted)", "    var x_str = String(x)\n\
    \    if shift > x_str.count {\n        return String(x_str.reversed())\n    }\n\
    \    let index = x_str.index(x_str.startIndex, offsetBy: shift)\n    let prefix\
    \ = x_str[..<index]\n    let suffix = x_str[index...]\n    return String(suffix\
    \ + prefix)", "    var x = x\n    var shift = shift\n    var digits = [Int]()\n\
    \    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n  \
    \  shift %= digits.count\n    return digits.suffix(shift).reversed().map(String.init).joined()\
    \ + digits.prefix(digits.count - shift).reversed().map(String.init).joined()",
  "    let s = String(x)\n    let n = s.characters.count\n    let m = shift % n\n\
    \    let i = s.index(s.startIndex, offsetBy: m)\n    let j = s.index(s.startIndex,\
    \ offsetBy: n)\n    return s[i..<j] + s[s.startIndex..<i]", "    var digits =\
    \ String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits.prefix(upTo: index)\n    let suffix = digits.suffix(from:\
    \ index)\n    return String(suffix + prefix)", "    var x = x\n    var shift =\
    \ shift\n    var digits = [Int]()\n    var result = \"\"\n    while x > 0 {\n\
    \        digits.append(x % 10)\n        x /= 10\n    }\n    shift %= digits.count\n\
    \    for i in 0..<digits.count {\n        result += String(digits[(i + shift)\
    \ % digits.count])\n    }\n    return result", "    let digits = String(x)\n \
    \   let n = digits.count\n    if shift > n {\n        return String(digits.reversed())\n\
    \    }\n    let left = digits.index(digits.startIndex, offsetBy: shift)\n    let\
    \ right = digits.index(digits.startIndex, offsetBy: n)\n    return String(digits[left..<right]\
    \ + digits[digits.startIndex..<left])", "    var digits = String(x)\n    if shift\
    \ > digits.count {\n        return String(digits.reversed())\n    }\n    let index\
    \ = digits.index(digits.startIndex, offsetBy: shift)\n    let prefix = digits.prefix(upTo:\
    \ index)\n    let suffix = digits.suffix(from: index)\n    return String(suffix\
    \ + prefix)", "    var s = String(x)\n    if shift > s.characters.count {\n  \
    \      return String(s.characters.reverse())\n    }\n    let index = s.startIndex.advancedBy(shift)\n\
    \    s.insert(s.removeAtIndex(index), atIndex: s.startIndex)\n    return s", " \
    \   let digits = String(x)\n    let len = digits.characters.count\n    let shift\
    \ = shift % len\n    let start = digits.startIndex\n    let end = digits.index(start,\
    \ offsetBy: shift)\n    let prefix = digits.substring(to: end)\n    let suffix\
    \ = digits.substring(from: end)\n    return suffix + prefix", "    var digits\
    \ = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ digits.append(contentsOf: digits[..<index])\n    digits.removeSubrange(..<index)\n\
    \    return digits", "    var x = x\n    var digits = [Int]()\n    while x > 0\
    \ {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        return String(digits.reverse())\n    }\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return String(shifted)", "    var digits = String(x)\n\
    \    if shift > digits.count {\n        return String(digits.reversed())\n   \
    \ }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n    digits.append(contentsOf:\
    \ digits[..<index])\n    digits.removeSubrange(..<index)\n    return digits",
  "    let digits = String(x)\n    let n = digits.characters.count\n    if shift >=\
    \ n {\n        return String(digits.characters.reverse())\n    }\n    let left\
    \ = digits.substringToIndex(digits.startIndex.advancedBy(shift))\n    let right\
    \ = digits.substringFromIndex(digits.startIndex.advancedBy(shift))\n    return\
    \ right + left", "    var x = x\n    var shift = shift\n    var digits = [Int]()\n\
    \    var result = \"\"\n    while x > 0 {\n        digits.append(x % 10)\n   \
    \     x /= 10\n    }\n    if shift > digits.count {\n        shift = digits.count\n\
    \    }\n    for i in 0..<digits.count {\n        result += String(digits[(i +\
    \ shift) % digits.count])\n    }\n    return result", "    let s = String(x)\n\
    \    let n = s.characters.count\n    if shift >= n {\n        return String(s.characters.reverse())\n\
    \    }\n    let start = s.startIndex\n    let end = s.startIndex.advancedBy(shift)\n\
    \    let prefix = s.substringToIndex(end)\n    let suffix = s.substringFromIndex(end)\n\
    \    return suffix + prefix", "    var x = x\n    var shift = shift\n    var digits\
    \ = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    shift %= digits.count\n    return digits.reversed().map { String($0)\
    \ }.joined()", "    let digits = String(x)\n    let n = digits.characters.count\n\
    \    if shift > n {\n        return String(digits.characters.reverse())\n    }\n\
    \    let i = n - shift\n    let a = digits.startIndex.advancedBy(i)\n    let b\
    \ = digits.endIndex\n    let c = digits.startIndex\n    let d = digits.startIndex.advancedBy(i)\n\
    \    return digits.substringWithRange(a..<b) + digits.substringWithRange(c..<d)",
  "    let digits = String(x)\n    let n = digits.characters.count\n    if shift >=\
    \ n {\n        return String(digits.characters.reverse())\n    }\n    let left\
    \ = digits.substringToIndex(digits.startIndex.advancedBy(shift))\n    let right\
    \ = digits.substringFromIndex(digits.startIndex.advancedBy(shift))\n    return\
    \ right + left", "    var x = x\n    var shift = shift\n    var digits = [Int]()\n\
    \    var result = \"\"\n    while x > 0 {\n        digits.append(x % 10)\n   \
    \     x /= 10\n    }\n    if shift > digits.count {\n        digits.reverse()\n\
    \    } else {\n        digits = digits.rotate(shift)\n    }\n    for digit in\
    \ digits {\n        result += String(digit)\n    }\n    return result", "    let\
    \ digits = String(x)\n    let n = digits.characters.count\n    let shift = shift\
    \ % n\n    let prefix = digits.substringToIndex(digits.startIndex.advancedBy(shift))\n\
    \    let suffix = digits.substringFromIndex(digits.startIndex.advancedBy(shift))\n\
    \    return suffix + prefix", "    let digits = String(x)\n    let length = digits.characters.count\n\
    \    if shift > length {\n        return String(digits.characters.reverse())\n\
    \    }\n    let index = digits.startIndex.advancedBy(shift)\n    let prefix =\
    \ digits.substringToIndex(index)\n    let suffix = digits.substringFromIndex(index)\n\
    \    return suffix + prefix", "    var x_str = String(x)\n    if shift > x_str.characters.count\
    \ {\n        return String(x_str.characters.reverse())\n    }\n    let index =\
    \ x_str.startIndex.advancedBy(shift)\n    let prefix = x_str.substringToIndex(index)\n\
    \    let suffix = x_str.substringFromIndex(index)\n    return suffix + prefix",
  "    let s = String(x)\n    let n = s.characters.count\n    if shift >= n {\n  \
    \      return String(s.characters.reverse())\n    }\n    let i = s.startIndex\n\
    \    let j = s.startIndex.advancedBy(shift)\n    let a = s.substringWithRange(i..<j)\n\
    \    let b = s.substringWithRange(j..<s.endIndex)\n    return b + a", "    var\
    \ x = x\n    var result = \"\"\n    var shift = shift\n    while x > 0 {\n   \
    \     result += String(x % 10)\n        x /= 10\n        shift -= 1\n    }\n \
    \   while shift > 0 {\n        result += \"0\"\n        shift -= 1\n    }\n  \
    \  return String(result.characters.reverse())", "    var x = x\n    var result\
    \ = \"\"\n    var digits = 0\n    var reversed = false\n    while x > 0 {\n  \
    \      result = String(x % 10) + result\n        x /= 10\n        digits += 1\n\
    \        if digits == shift {\n            reversed = true\n        }\n    }\n\
    \    if reversed {\n        return result\n    } else {\n        return String(result.characters.reverse())\n\
    \    }", "    let s = String(x)\n    let n = s.characters.count\n    if shift\
    \ >= n {\n        return String(s.characters.reverse())\n    }\n    let i = s.index(s.startIndex,\
    \ offsetBy: shift)\n    return s.substring(from: i) + s.substring(to: i)", " \
    \   var x = x\n    var shift = shift\n    var result = \"\"\n    var digits =\
    \ 0\n    while x > 0 {\n        x /= 10\n        digits += 1\n    }\n    shift\
    \ %= digits\n    if shift == 0 {\n        return String(x)\n    }\n    if shift\
    \ < 0 {\n        shift += digits\n    }\n    var power = 1\n    for _ in 0..<shift\
    \ {\n        power *= 10\n    }\n    x = x % power * 10 + x / power\n    return\
    \ String(x)", "    var digits = String(x)\n    if shift > digits.characters.count\
    \ {\n        return String(digits.characters.reverse())\n    }\n    let index\
    \ = digits.startIndex.advancedBy(shift)\n    let prefix = digits.substringToIndex(index)\n\
    \    let suffix = digits.substringFromIndex(index)\n    return suffix + prefix",
  "    var digits = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits.prefix(upTo: index)\n    let suffix = digits.suffix(from:\
    \ index)\n    return String(suffix + prefix)", "    var x = x\n    var digits\
    \ = [Int]()\n    var result = \"\"\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        for i\
    \ in 0..<digits.count {\n            result += String(digits[digits.count - i\
    \ - 1])\n        }\n    } else {\n        for i in 0..<digits.count {\n      \
    \      result += String(digits[(digits.count - shift + i) % digits.count])\n \
    \       }\n    }\n    return result", "    var x = x\n    var shift = shift\n\
    \    var digits = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n\
    \        x /= 10\n    }\n    if shift > digits.count {\n        return String(digits.reverse())\n\
    \    }\n    shift %= digits.count\n    return String(digits[shift..<digits.count]\
    \ + digits[0..<shift])", "    let s = String(x)\n    let n = s.count\n    if shift\
    \ >= n {\n        return String(s.reversed())\n    }\n    let a = s.index(s.startIndex,\
    \ offsetBy: shift)\n    let b = s.index(s.endIndex, offsetBy: -shift)\n    return\
    \ String(s[a..<b])", "    var digits = String(x)\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    digits.append(contentsOf: digits[..<index])\n    return\
    \ String(digits[index...])", "    var digits = String(x)\n    var result = \"\"\
    \n    if shift > digits.count {\n        for c in digits.reversed() {\n      \
    \      result.append(c)\n        }\n    } else {\n        let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n        result = digits[index...] + digits[..<index]\n   \
    \ }\n    return result", "    var s = String(x)\n    if shift > s.count {\n  \
    \      return String(s.reversed())\n    }\n    let index = s.index(s.startIndex,\
    \ offsetBy: shift)\n    s.append(s.substring(to: index))\n    s.removeSubrange(s.startIndex..<index)\n\
    \    return s", "    var digits = String(x)\n    if shift > digits.count {\n \
    \       return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    digits.append(contentsOf: digits[..<index])\n    digits.removeSubrange(..<index)\n\
    \    return digits", "    var x = x\n    var shift = shift\n    var digits = [Int]()\n\
    \    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n  \
    \  shift %= digits.count\n    if shift == 0 {\n        return digits.map({String($0)}).joined(separator:\
    \ \"\")\n    }\n    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n\
    \    return shifted.map({String($0)}).joined(separator: \"\")", "    var x_str\
    \ = String(x)\n    if shift > x_str.count {\n        return String(x_str.reversed())\n\
    \    }\n    let x_str_arr = Array(x_str)\n    let x_str_arr_shifted = Array(x_str_arr[shift..<x_str_arr.count]\
    \ + x_str_arr[0..<shift])\n    return String(x_str_arr_shifted)", "    let digits\
    \ = String(x)\n    let n = digits.characters.count\n    if shift >= n {\n    \
    \    return String(digits.characters.reverse())\n    }\n    let i = digits.startIndex.advancedBy(shift)\n\
    \    let j = digits.endIndex\n    let y = digits.substringWithRange(i..<j) + digits.substringToIndex(i)\n\
    \    return y", "    var digits = String(x)\n    if shift >= digits.count {\n\
    \        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   var x = x\n    var result = \"\"\n    var shift = shift\n    while x > 0 {\n\
    \        result = String(x % 10) + result\n        x /= 10\n    }\n    if shift\
    \ > result.characters.count {\n        return String(result.characters.reverse())\n\
    \    }\n    let index = result.startIndex.advancedBy(shift)\n    return String(result.substringFromIndex(index))\
    \ + String(result.substringToIndex(index))", "    var x = x\n    var shift = shift\n\
    \    var digits = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n\
    \        x /= 10\n    }\n    if shift > digits.count {\n        return String(digits.reverse())\n\
    \    }\n    for _ in 0..<shift {\n        let digit = digits.removeLast()\n  \
    \      digits.insert(digit, atIndex: 0)\n    }\n    return String(digits)", " \
    \   var digits = Array(String(x))\n    let n = digits.count\n    if shift > n\
    \ {\n        return String(digits.reverse())\n    }\n    for _ in 0..<shift {\n\
    \        let last = digits.removeLast()\n        digits.insert(last, atIndex:\
    \ 0)\n    }\n    return String(digits)", "    var digits = String(x)\n    if shift\
    \ > digits.count {\n        return String(digits.reversed())\n    }\n    let index\
    \ = digits.index(digits.startIndex, offsetBy: shift)\n    digits.append(contentsOf:\
    \ digits[..<index])\n    digits.removeSubrange(..<index)\n    return digits",
  "    var x = x\n    var shift = shift\n    var digits = \"\"\n    while x > 0 {\n\
    \        digits.append(Character(String(x % 10)))\n        x /= 10\n    }\n  \
    \  if shift > digits.count {\n        return String(digits.reversed())\n    }\n\
    \    let index = digits.index(digits.startIndex, offsetBy: shift)\n    return\
    \ String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    if shift >= digits.count {\n        return String(digits.reversed())\n  \
    \  }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n    return\
    \ String(digits[index...] + digits[..<index])", "    let s = String(x)\n    let\
    \ n = s.characters.count\n    if shift >= n {\n        return String(s.characters.reverse())\n\
    \    }\n    let i = s.index(s.startIndex, offsetBy: shift)\n    return s.substring(from:\
    \ i) + s.substring(to: i)", "    var x = x\n    var result = \"\"\n    var digits\
    \ = 0\n    while x > 0 {\n        result = String(x % 10) + result\n        x\
    \ /= 10\n        digits += 1\n    }\n    if shift > digits {\n        return result\n\
    \    }\n    let shift = shift % digits\n    return result.substringFromIndex(result.startIndex.advancedBy(shift))\
    \ + result.substringToIndex(result.startIndex.advancedBy(shift))", "    var digits\
    \ = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ digits.append(contentsOf: digits[..<index])\n    digits.removeSubrange(..<index)\n\
    \    return digits", "    var x = x\n    var shift = shift\n    var digits = [Int]()\n\
    \    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n  \
    \  if shift > digits.count {\n        return String(digits.reverse())\n    }\n\
    \    shift %= digits.count\n    return String(digits[shift..<digits.count] + digits[0..<shift])",
  "    var x = x\n    var result = \"\"\n    var digits = 0\n    while x > 0 {\n \
    \       x /= 10\n        digits += 1\n    }\n    if shift >= digits {\n      \
    \  return String(x.reverse())\n    }\n    x = x.reverse()\n    for _ in 0..<shift\
    \ {\n        result += String(x % 10)\n        x /= 10\n    }\n    result += String(x.reverse())\n\
    \    return result", "    let digits = String(x)\n    let len = digits.characters.count\n\
    \    if shift > len {\n        return String(digits.characters.reverse())\n  \
    \  }\n    let start = digits.index(digits.startIndex, offsetBy: shift)\n    let\
    \ end = digits.index(digits.endIndex, offsetBy: -shift)\n    return digits.substring(from:\
    \ start) + digits.substring(to: end)", "    let s = String(x)\n    let n = s.characters.count\n\
    \    if shift >= n {\n        return String(s.characters.reverse())\n    }\n \
    \   let i = s.startIndex\n    let j = s.startIndex.advancedBy(shift)\n    let\
    \ k = s.startIndex.advancedBy(n)\n    return s[j..<k] + s[i..<j]", "    let s\
    \ = String(x)\n    let n = s.characters.count\n    if shift >= n {\n        return\
    \ String(s.characters.reverse())\n    }\n    let start = s.startIndex\n    let\
    \ end = s.startIndex.advancedBy(shift)\n    let a = s.substringFromIndex(end)\n\
    \    let b = s.substringToIndex(end)\n    return a + b", "    var digits = String(x)\n\
    \    if shift > digits.count {\n        return String(digits.reversed())\n   \
    \ }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n    digits.append(contentsOf:\
    \ digits[..<index])\n    digits.removeSubrange(..<index)\n    return digits",
  "    var digits = String(x)\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits[..<index]\n    let suffix = digits[index...]\n    return\
    \ String(suffix + prefix)", "    var x = x\n    var s = String(x)\n    var shift\
    \ = shift\n    if shift > s.characters.count {\n        s = String(s.characters.reverse())\n\
    \    } else {\n        for _ in 0..<shift {\n            let last = s.characters.last!\n\
    \            s.removeAtIndex(s.endIndex.predecessor())\n            s.insert(last,\
    \ atIndex: s.startIndex)\n        }\n    }\n    return s", "    var s = String(x)\n\
    \    if shift > s.count {\n        return String(s.reversed())\n    }\n    let\
    \ index = s.index(s.startIndex, offsetBy: shift)\n    let prefix = s.prefix(upTo:\
    \ index)\n    let suffix = s.suffix(from: index)\n    return String(suffix + prefix)",
  "    var x = x\n    var shift = shift\n    var result = \"\"\n    var digits = 0\n\
    \    var temp = x\n    while temp > 0 {\n        digits += 1\n        temp /=\
    \ 10\n    }\n    if shift > digits {\n        for _ in 0..<digits {\n        \
    \    result += String(x % 10)\n            x /= 10\n        }\n    } else {\n\
    \        for _ in 0..<shift {\n            x *= 10\n            x += x / (10 ^\
    \ digits)\n            x %= 10 ^ digits\n        }\n        result = String(x)\n\
    \    }\n    return result", "    var digits = String(x)\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits.prefix(upTo: index)\n    let suffix\
    \ = digits.suffix(from: index)\n    return String(suffix + prefix)", "    var\
    \ x = x\n    var shift = shift\n    var digits = \"\"\n    while x > 0 {\n   \
    \     digits.append(String(x % 10))\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits[..<index]\n    let suffix = digits[index...]\n\
    \    return String(suffix + prefix)", "    let str = String(x)\n    let len =\
    \ str.characters.count\n    if shift >= len {\n        return String(str.characters.reverse())\n\
    \    }\n    let start = str.startIndex\n    let end = str.startIndex.advancedBy(shift)\n\
    \    let prefix = str.substringToIndex(end)\n    let suffix = str.substringFromIndex(end)\n\
    \    return suffix + prefix", "    let digits = String(x)\n    let length = digits.characters.count\n\
    \    if shift >= length {\n        return String(digits.characters.reverse())\n\
    \    }\n    let index = digits.startIndex.advancedBy(shift)\n    let prefix =\
    \ digits.substringToIndex(index)\n    let suffix = digits.substringFromIndex(index)\n\
    \    return suffix + prefix", "    let digits = String(x)\n    let len = digits.characters.count\n\
    \    if shift > len {\n        return String(digits.characters.reverse())\n  \
    \  }\n    let start = digits.index(digits.startIndex, offsetBy: shift)\n    let\
    \ end = digits.index(digits.endIndex, offsetBy: -shift)\n    return String(digits[start..<end])",
  "    let s = String(x)\n    if shift > s.count {\n        return String(s.reversed())\n\
    \    }\n    let i = s.index(s.startIndex, offsetBy: shift)\n    return String(s[i...]\
    \ + s[..<i])", "    let digits = String(x)\n    let n = digits.characters.count\n\
    \    if shift >= n {\n        return String(digits.characters.reverse())\n   \
    \ }\n    let left = digits.substringToIndex(digits.startIndex.advancedBy(shift))\n\
    \    let right = digits.substringFromIndex(digits.startIndex.advancedBy(shift))\n\
    \    return right + left", "    let s = String(x)\n    let n = s.characters.count\n\
    \    if shift > n {\n        return String(s.characters.reverse())\n    }\n  \
    \  let i = s.index(s.startIndex, offsetBy: shift)\n    return s.substring(from:\
    \ i) + s.substring(to: i)", "    var str = String(x)\n    if shift > str.characters.count\
    \ {\n        return String(str.characters.reverse())\n    }\n    let index = str.startIndex.advancedBy(shift)\n\
    \    str.insert(str.removeAtIndex(index), atIndex: str.startIndex)\n    return\
    \ str", "    var x = x\n    var result = \"\"\n    var shift = shift\n    while\
    \ x > 0 {\n        let digit = x % 10\n        result = String(digit) + result\n\
    \        x /= 10\n    }\n    if shift > result.characters.count {\n        return\
    \ String(result.characters.reverse())\n    }\n    let index = result.startIndex.advancedBy(shift)\n\
    \    return result.substringFromIndex(index) + result.substringToIndex(index)",
  "    var x = x\n    var shift = shift\n    var digits = [Int]()\n    while x > 0\
    \ {\n        digits.append(x % 10)\n        x /= 10\n    }\n    shift %= digits.count\n\
    \    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n    return\
    \ shifted.map { String($0) }.joined()", "    let digits = String(x)\n    let n\
    \ = digits.characters.count\n    if shift >= n {\n        return String(digits.characters.reverse())\n\
    \    }\n    let left = digits.substringToIndex(digits.startIndex.advancedBy(shift))\n\
    \    let right = digits.substringFromIndex(digits.startIndex.advancedBy(shift))\n\
    \    return right + left", "    var x = x\n    var shift = shift\n    var result\
    \ = \"\"\n    var digits = 0\n    while x > 0 {\n        x /= 10\n        digits\
    \ += 1\n    }\n    if shift > digits {\n        shift = digits\n    }\n    x =\
    \ x * Int(pow(10.0, Double(shift)))\n    x += x\n    while shift > 0 {\n     \
    \   result += String(x % 10)\n        x /= 10\n        shift -= 1\n    }\n   \
    \ return result", "    var digits = String(x)\n    if shift > digits.count {\n\
    \        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    digits.append(contentsOf: digits[..<index])\n    digits.removeSubrange(..<index)\n\
    \    return digits", "    var digits = String(x)\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    digits.append(contentsOf: digits[..<index])\n    digits.removeSubrange(..<index)\n\
    \    return digits", "    var x = x\n    var shift = shift\n    var digits = \"\
    \"\n    while x > 0 {\n        digits.append(Character(String(x % 10)))\n    \
    \    x /= 10\n    }\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    let digits_count = digits.characters.count\n    if shift >= digits_count\
    \ {\n        return String(digits.characters.reverse())\n    }\n    let left =\
    \ digits.substringToIndex(digits.startIndex.advancedBy(shift))\n    let right\
    \ = digits.substringFromIndex(digits.startIndex.advancedBy(shift))\n    return\
    \ right + left", "    let s = String(x)\n    let n = s.characters.count\n    if\
    \ shift > n {\n        return String(s.characters.reverse())\n    }\n    let i\
    \ = s.index(s.startIndex, offsetBy: shift)\n    return s.substring(from: i) +\
    \ s.substring(to: i)", "    var x = x\n    var shift = shift\n    var result =\
    \ \"\"\n    var digit = 0\n    var digits = 0\n    var reversed = false\n    var\
    \ negative = false\n    if x < 0 {\n        negative = true\n        x = -x\n\
    \    }\n    if shift > 0 {\n        while x > 0 {\n            digit = x % 10\n\
    \            x /= 10\n            result = String(digit) + result\n          \
    \  digits += 1\n        }\n        if shift > digits {\n            shift = shift\
    \ % digits\n            reversed = true\n        }\n        if shift > 0 {\n \
    \           let prefix = result[0..<shift]\n            let suffix = result[shift..<result.count]\n\
    \            result = suffix + prefix\n        }\n        if reversed {\n    \
    \        result = String(result.reversed())\n        }\n    }\n    if negative\
    \ {\n        result = \"-\" + result\n    }\n    return result", "    let x_str\
    \ = String(x)\n    let len = x_str.characters.count\n    let shift = shift % len\n\
    \    let shift_str = x_str.substringFromIndex(x_str.startIndex.advancedBy(shift))\n\
    \    let shift_str_rev = shift_str.characters.reverse()\n    let x_str_rev = x_str.characters.reverse()\n\
    \    let x_str_rev_shift = x_str_rev.substringFromIndex(x_str_rev.startIndex.advancedBy(shift))\n\
    \    let x_str_rev_shift_rev = x_str_rev_shift.characters.reverse()\n    return\
    \ shift_str_rev + x_str_rev_shift_rev", "    var digits = String(x)\n    if shift\
    \ > digits.count {\n        return String(digits.reversed())\n    }\n    let index\
    \ = digits.index(digits.startIndex, offsetBy: shift)\n    digits.append(contentsOf:\
    \ digits[..<index])\n    digits.removeSubrange(..<index)\n    return digits",
  "    let digits = String(x)\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    var digits = String(x)\n\
    \    if shift > digits.count {\n        return String(digits.reversed())\n   \
    \ }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n    digits.append(contentsOf:\
    \ digits[..<index])\n    digits.removeSubrange(..<index)\n    return digits",
  "    let s = String(x)\n    let n = s.characters.count\n    if shift >= n {\n  \
    \      return String(s.characters.reverse())\n    }\n    let i = s.index(s.startIndex,\
    \ offsetBy: shift)\n    return s.substring(from: i) + s.substring(to: i)", " \
    \   let digits = String(x)\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let left = digits.index(digits.startIndex, offsetBy: shift)\n    let\
    \ right = digits.index(digits.endIndex, offsetBy: -shift)\n    return String(digits[left..<right])",
  "    var s = String(x)\n    if shift > s.characters.count {\n        return String(s.characters.reverse())\n\
    \    }\n    let index = s.startIndex.advancedBy(shift)\n    s.insert(s.removeAtIndex(index),\
    \ atIndex: s.startIndex)\n    return s", "    let digits = String(x)\n    let\
    \ length = digits.characters.count\n    let shift = shift % length\n    let left\
    \ = digits.substringToIndex(digits.startIndex.advancedBy(shift))\n    let right\
    \ = digits.substringFromIndex(digits.startIndex.advancedBy(shift))\n    return\
    \ right + left", "    let s = String(x)\n    let n = s.characters.count\n    if\
    \ shift >= n {\n        return String(s.characters.reverse())\n    }\n    let\
    \ i = s.index(s.startIndex, offsetBy: shift)\n    return s.substring(from: i)\
    \ + s.substring(to: i)", "    var x = x\n    var digits = [Int]()\n    while x\
    \ > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift >=\
    \ digits.count {\n        return digits.reverse().map { String($0) }.joinWithSeparator(\"\
    \")\n    }\n    var result = digits.reverse()\n    for _ in 0..<shift {\n    \
    \    result.append(result.removeAtIndex(0))\n    }\n    return result.map { String($0)\
    \ }.joinWithSeparator(\"\")", "    let digits = String(x)\n    let n = digits.characters.count\n\
    \    if shift >= n {\n        return String(digits.characters.reverse())\n   \
    \ }\n    let left = digits.substringToIndex(digits.startIndex.advancedBy(shift))\n\
    \    let right = digits.substringFromIndex(digits.startIndex.advancedBy(shift))\n\
    \    return right + left", "    var digits = String(x)\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    digits.append(contentsOf: digits[..<index])\n    digits.removeSubrange(..<index)\n\
    \    return digits", "    var x_str = String(x)\n    if shift > x_str.characters.count\
    \ {\n        return String(x_str.characters.reverse())\n    }\n    let index =\
    \ x_str.startIndex.advancedBy(shift)\n    let prefix = x_str.substringToIndex(index)\n\
    \    let suffix = x_str.substringFromIndex(index)\n    return suffix + prefix",
  "    var x = x\n    var result = \"\"\n    var shift = shift\n    while x > 0 {\n\
    \        result += String(x % 10)\n        x /= 10\n        shift -= 1\n    }\n\
    \    while shift > 0 {\n        result += \"0\"\n        shift -= 1\n    }\n \
    \   return String(result.characters.reverse())", "    var x_str = String(x)\n\
    \    if shift > x_str.characters.count {\n        return String(x_str.characters.reverse())\n\
    \    }\n    let index = x_str.startIndex.advancedBy(shift)\n    x_str.insert(x_str.removeAtIndex(index),\
    \ atIndex: x_str.startIndex)\n    return x_str", "    var x = x\n    var shift\
    \ = shift\n    var digits = [Int]()\n    var result = \"\"\n    while x > 0 {\n\
    \        digits.append(x % 10)\n        x /= 10\n    }\n    shift %= digits.count\n\
    \    for i in 0..<digits.count {\n        result += String(digits[(i + shift)\
    \ % digits.count])\n    }\n    return result", "    var x = x\n    var digits\
    \ = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    if shift > digits.count {\n        return String(digits.reverse())\n\
    \    }\n    for _ in 0..<shift {\n        let digit = digits.removeLast()\n  \
    \      digits.insert(digit, atIndex: 0)\n    }\n    return String(digits)", " \
    \   var digits = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ digits.append(contentsOf: digits[..<index])\n    digits.removeSubrange(..<index)\n\
    \    return digits", "    var result = \"\"\n    var x = x\n    var shift = shift\n\
    \    while x > 0 {\n        result = String(x % 10) + result\n        x /= 10\n\
    \    }\n    if shift > result.characters.count {\n        return String(result.characters.reverse())\n\
    \    }\n    var left = result.substringToIndex(result.startIndex.advancedBy(shift))\n\
    \    var right = result.substringFromIndex(result.startIndex.advancedBy(shift))\n\
    \    return right + left", "    let n = String(x).characters.count\n    let s\
    \ = shift % n\n    let d = String(x).characters.reverse()\n    let a = d[d.startIndex..<d.startIndex.advancedBy(s)]\n\
    \    let b = d[d.startIndex.advancedBy(s)..<d.endIndex]\n    return String(b +\
    \ a).characters.reverse()", "    var x = x\n    var shift = shift\n    var digits\
    \ = [Int]()\n    var result = \"\"\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        shift\
    \ = digits.count\n    }\n    for i in 0..<digits.count {\n        result += String(digits[(i\
    \ + shift) % digits.count])\n    }\n    return result", "    var x = x\n    var\
    \ shift = shift\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ String(digits.reverse())\n    }\n    shift %= digits.count\n    let shifted\
    \ = digits[shift..<digits.count] + digits[0..<shift]\n    return String(shifted)",
  "    var x = x\n    var shift = shift\n    var result = \"\"\n    var digit = 0\n\
    \    var digit_count = 0\n    while x > 0 {\n        digit = x % 10\n        x\
    \ /= 10\n        if shift > 0 {\n            shift -= 1\n        } else {\n  \
    \          result += String(digit)\n            digit_count += 1\n        }\n\
    \    }\n    if shift > 0 {\n        for _ in 0..<shift {\n            result +=\
    \ String(digit)\n            digit_count += 1\n        }\n    }\n    if digit_count\
    \ > 1 {\n        result += \"_\"\n    }\n    return result", "    var x = x\n\
    \    var digits: [Int] = []\n    while x > 0 {\n        digits.append(x % 10)\n\
    \        x /= 10\n    }\n    if shift > digits.count {\n        return String(digits.reverse())\n\
    \    }\n    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n \
    \   return String(shifted)", "    var x = x\n    var shift = shift\n    var digits\
    \ = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    if shift > digits.count {\n        return String(digits.reverse())\n\
    \    }\n    shift %= digits.count\n    return String(digits[shift..<digits.count]\
    \ + digits[0..<shift])", "    var digits = String(x)\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    digits.append(contentsOf: digits[..<index])\n    digits.removeSubrange(..<index)\n\
    \    return digits", "    var x = x\n    var shift = shift\n    var result = \"\
    \"\n    var digits = 0\n    while x > 0 {\n        x /= 10\n        digits +=\
    \ 1\n    }\n    if shift > digits {\n        shift = digits\n    }\n    for _\
    \ in 0..<shift {\n        result = String(x % 10) + result\n        x /= 10\n\
    \    }\n    while x > 0 {\n        result += String(x % 10)\n        x /= 10\n\
    \    }\n    return result", "    let digits = String(x)\n    let length = digits.characters.count\n\
    \    if shift >= length {\n        return String(digits.characters.reverse())\n\
    \    }\n    let start = digits.startIndex.advancedBy(shift)\n    let end = digits.endIndex\n\
    \    let shifted = digits.substringWithRange(start..<end) + digits.substringToIndex(start)\n\
    \    return shifted", "    let digits = String(x)\n    let n = digits.characters.count\n\
    \    if shift >= n {\n        return String(digits.characters.reverse())\n   \
    \ }\n    let left = digits.substringToIndex(digits.startIndex.advancedBy(shift))\n\
    \    let right = digits.substringFromIndex(digits.startIndex.advancedBy(shift))\n\
    \    return right + left", "    var digits = String(x)\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    digits.append(contentsOf: digits[..<index])\n    digits.removeSubrange(..<index)\n\
    \    return digits", "    var digits = String(x)\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    digits.append(contentsOf: digits[..<index])\n    digits.removeSubrange(..<index)\n\
    \    return digits", "    var x_str = String(x)\n    if shift > x_str.characters.count\
    \ {\n        return String(x_str.characters.reverse())\n    }\n    let index =\
    \ x_str.startIndex.advancedBy(shift)\n    let prefix = x_str.substringToIndex(index)\n\
    \    let suffix = x_str.substringFromIndex(index)\n    return suffix + prefix",
  "    let s = String(x)\n    let n = s.characters.count\n    if shift >= n {\n  \
    \      return String(s.characters.reverse())\n    }\n    let i = s.index(s.startIndex,\
    \ offsetBy: shift)\n    return s.substring(from: i) + s.substring(to: i)", " \
    \   let str = String(x)\n    let len = str.characters.count\n    if shift >= len\
    \ {\n        return String(str.characters.reverse())\n    }\n    let index = str.index(str.startIndex,\
    \ offsetBy: shift)\n    let suffix = str.substring(from: index)\n    let prefix\
    \ = str.substring(to: index)\n    return suffix + prefix", "    var digits = String(x)\n\
    \    if shift > digits.count {\n        return String(digits.reversed())\n   \
    \ }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n    let\
    \ prefix = digits.prefix(upTo: index)\n    let suffix = digits.suffix(from: index)\n\
    \    return String(suffix + prefix)", "    var digits = String(x)\n    if shift\
    \ > digits.count {\n        return String(digits.reversed())\n    }\n    let index\
    \ = digits.index(digits.startIndex, offsetBy: shift)\n    digits.append(contentsOf:\
    \ digits[..<index])\n    digits.removeSubrange(..<index)\n    return digits",
  "    var digits = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits.prefix(upTo: index)\n    let suffix = digits.suffix(from:\
    \ index)\n    return String(suffix + prefix)", "    var x = x\n    var shift =\
    \ shift\n    var digits = [Int]()\n    var result = \"\"\n    while x > 0 {\n\
    \        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        shift = digits.count\n    }\n    for i in 0..<digits.count {\n  \
    \      result += String(digits[(i + shift) % digits.count])\n    }\n    return\
    \ result", "    let digits = String(x)\n    let n = digits.characters.count\n\
    \    if shift > n {\n        return String(digits.characters.reverse())\n    }\n\
    \    let left = digits.substringToIndex(digits.startIndex.advancedBy(shift))\n\
    \    let right = digits.substringFromIndex(digits.startIndex.advancedBy(shift))\n\
    \    return right + left", "    let digits = String(x)\n    let length = digits.characters.count\n\
    \    if shift > length {\n        return String(digits.characters.reverse())\n\
    \    }\n    let index = digits.startIndex.advancedBy(shift)\n    let prefix =\
    \ digits.substringToIndex(index)\n    let suffix = digits.substringFromIndex(index)\n\
    \    return suffix + prefix", "    var digits = String(x)\n    if shift >= digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    digits.append(contentsOf: digits[..<index])\n    digits.removeSubrange(..<index)\n\
    \    return digits", "    var x = x\n    var result = \"\"\n    var shift = shift\n\
    \    while x > 0 {\n        result = String(x % 10) + result\n        x /= 10\n\
    \    }\n    if shift > result.characters.count {\n        return String(result.characters.reverse())\n\
    \    }\n    let index = result.startIndex.advancedBy(shift)\n    return result.substringFromIndex(index)\
    \ + result.substringToIndex(index)", "    var x = x\n    var shift = shift\n \
    \   var digits = [Int]()\n    var result = \"\"\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        shift\
    \ = digits.count\n    }\n    for i in 0..<digits.count {\n        result += String(digits[(i\
    \ + shift) % digits.count])\n    }\n    return result", "    var x = x\n    var\
    \ digits = [Int]()\n    var result = \"\"\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        digits.reverse()\n\
    \    } else {\n        digits = digits.rotate(shift)\n    }\n    for digit in\
    \ digits {\n        result += String(digit)\n    }\n    return result", "    var\
    \ digits = String(x)\n    if shift > digits.characters.count {\n        return\
    \ String(digits.characters.reverse())\n    }\n    let index = digits.startIndex.advancedBy(shift)\n\
    \    digits.insert(contentsOf: digits.substringToIndex(index).characters, at:\
    \ digits.endIndex)\n    digits.removeSubrange(digits.startIndex..<index)\n   \
    \ return digits", "    let x_str = String(x)\n    let x_len = x_str.characters.count\n\
    \    let shift_mod = shift % x_len\n    let x_str_rev = String(x_str.characters.reverse())\n\
    \    let x_str_rev_shifted = x_str_rev.substringWithRange(Range<String.Index>(start:\
    \ x_str_rev.startIndex.advancedBy(shift_mod), end: x_str_rev.endIndex))\n    let\
    \ x_str_shifted = String(x_str_rev_shifted.characters.reverse())\n    return x_str_shifted",
  "    let digits = String(x)\n    let n = digits.characters.count\n    if shift >=\
    \ n {\n        return String(digits.characters.reverse())\n    }\n    let i =\
    \ n - shift\n    let left = digits.substringToIndex(digits.startIndex.advancedBy(i))\n\
    \    let right = digits.substringFromIndex(digits.startIndex.advancedBy(i))\n\
    \    return right + left", "    var digits = String(x)\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits.prefix(upTo: index)\n    let suffix\
    \ = digits.suffix(from: index)\n    return String(suffix + prefix)", "    let\
    \ digits = String(x)\n    let length = digits.characters.count\n    if shift >=\
    \ length {\n        return String(digits.characters.reverse())\n    }\n    let\
    \ index = digits.startIndex.advancedBy(shift)\n    let left = digits.substringToIndex(index)\n\
    \    let right = digits.substringFromIndex(index)\n    return right + left", " \
    \   let s = String(x)\n    let n = s.characters.count\n    if shift >= n {\n \
    \       return String(s.characters.reverse())\n    }\n    let i = s.startIndex\n\
    \    let j = s.startIndex.advancedBy(shift)\n    let k = s.startIndex.advancedBy(n)\n\
    \    return s[j..<k] + s[i..<j]", "    let digits = String(x)\n    let len = digits.characters.count\n\
    \    if shift > len {\n        return String(digits.characters.reverse())\n  \
    \  }\n    let start = digits.index(digits.startIndex, offsetBy: shift)\n    let\
    \ end = digits.index(digits.endIndex, offsetBy: -shift)\n    return String(digits[start..<end])",
  "    var digits = String(x)\n    let length = digits.characters.count\n    if shift\
    \ >= length {\n        return String(digits.characters.reverse())\n    }\n   \
    \ let index = digits.startIndex.advancedBy(shift)\n    digits.insert(contentsOf:\
    \ digits.characters.suffix(shift).reverse(), at: digits.startIndex)\n    digits.removeSubrange(index..<digits.endIndex)\n\
    \    return digits", "    let digits = String(x)\n    let length = digits.characters.count\n\
    \    let shift = shift % length\n    let left = digits.substringToIndex(digits.startIndex.advancedBy(shift))\n\
    \    let right = digits.substringFromIndex(digits.startIndex.advancedBy(shift))\n\
    \    return right + left", "    var x_str = String(x)\n    if shift > x_str.count\
    \ {\n        return String(x_str.reversed())\n    }\n    let index = x_str.index(x_str.startIndex,\
    \ offsetBy: shift)\n    let prefix = x_str[x_str.startIndex..<index]\n    let\
    \ suffix = x_str[index..<x_str.endIndex]\n    return suffix + prefix", "    var\
    \ digits = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ digits.append(contentsOf: digits[..<index])\n    digits.removeSubrange(..<index)\n\
    \    return digits", "    var digits = String(x)\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    digits.append(contentsOf: digits[..<index])\n    digits.removeSubrange(..<index)\n\
    \    return digits", "    var x = x\n    var digits = [Int]()\n    var result\
    \ = \"\"\n    var shift = shift\n    while x > 0 {\n        digits.append(x %\
    \ 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        shift =\
    \ digits.count\n    }\n    for i in 0..<shift {\n        result += String(digits[digits.count\
    \ - shift + i])\n    }\n    for i in shift..<digits.count {\n        result +=\
    \ String(digits[i - shift])\n    }\n    return result", "    let s = String(x)\n\
    \    let n = s.characters.count\n    if shift >= n {\n        return String(s.characters.reverse())\n\
    \    }\n    let i = s.index(s.startIndex, offsetBy: shift)\n    return s.substring(from:\
    \ i) + s.substring(to: i)", "    let s = String(x)\n    let l = s.characters.count\n\
    \    if shift > l {\n        return String(s.characters.reverse())\n    }\n  \
    \  let i = s.index(s.startIndex, offsetBy: shift)\n    return s.substring(from:\
    \ i) + s.substring(to: i)", "    var digits = String(x)\n    if shift >= digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits[..<index]\n    let suffix = digits[index...]\n\
    \    return String(suffix + prefix)", "    var digits = Array(String(x).characters)\n\
    \    var result = \"\"\n    if shift > digits.count {\n        for i in 0..<digits.count\
    \ {\n            result += String(digits[digits.count - 1 - i])\n        }\n \
    \   } else {\n        for i in 0..<digits.count {\n            result += String(digits[(i\
    \ + shift) % digits.count])\n        }\n    }\n    return result", "    var x\
    \ = x\n    var result = \"\"\n    var digits = 0\n    while x > 0 {\n        result\
    \ = String(x % 10) + result\n        x /= 10\n        digits += 1\n    }\n   \
    \ if shift >= digits {\n        return String(result.reversed())\n    }\n    let\
    \ shift_result = result[result.index(result.startIndex, offsetBy: shift)..<result.endIndex]\
    \ + result[result.startIndex..<result.index(result.startIndex, offsetBy: shift)]\n\
    \    return String(shift_result)", "    var digits = String(x)\n    if shift >\
    \ digits.count {\n        return String(digits.reversed())\n    }\n    let index\
    \ = digits.index(digits.startIndex, offsetBy: shift)\n    digits.append(contentsOf:\
    \ digits[..<index])\n    digits.removeSubrange(..<index)\n    return digits",
  "    var x = x\n    var shift = shift\n    var result = \"\"\n    var digit = 0\n\
    \    var i = 0\n    while x > 0 {\n        digit = x % 10\n        x /= 10\n \
    \       result = String(digit) + result\n        i += 1\n    }\n    if shift >\
    \ i {\n        return result\n    }\n    let left = result.substring(to: result.index(result.startIndex,\
    \ offsetBy: shift))\n    let right = result.substring(from: result.index(result.startIndex,\
    \ offsetBy: shift))\n    return right + left", "    var digits = String(x)\n \
    \   let len = digits.characters.count\n    if shift > len {\n        return String(digits.characters.reverse())\n\
    \    }\n    let index = digits.startIndex.advancedBy(shift)\n    digits.insert(contentsOf:\
    \ digits.characters.prefix(shift).reverse(), at: digits.startIndex)\n    digits.removeSubrange(digits.startIndex..<index)\n\
    \    return digits", "    var digits = String(x)\n    if shift > digits.characters.count\
    \ {\n        return String(digits.characters.reverse())\n    }\n    let index\
    \ = digits.startIndex.advancedBy(shift)\n    digits.insert(contentsOf: digits.substringToIndex(index).characters,\
    \ at: digits.endIndex)\n    digits.removeSubrange(digits.startIndex..<index)\n\
    \    return digits", "    var x = x\n    var digits = [Int]()\n    while x > 0\
    \ {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        return String(digits.reverse())\n    }\n    digits = digits.rotate(shift)\n\
    \    return digits.map { String($0) }.reduce(\"\", combine: +)", "    let digits\
    \ = String(x)\n    let n = digits.characters.count\n    if shift >= n {\n    \
    \    return String(digits.characters.reverse())\n    }\n    let start = digits.startIndex.advancedBy(shift)\n\
    \    let end = digits.endIndex\n    let suffix = digits.substringWithRange(start..<end)\n\
    \    let prefix = digits.substringToIndex(start)\n    return suffix + prefix",
  "    let digits = String(x)\n    let len = digits.characters.count\n    let shift\
    \ = shift % len\n    let prefix = digits.substringToIndex(digits.startIndex.advancedBy(shift))\n\
    \    let suffix = digits.substringFromIndex(digits.startIndex.advancedBy(shift))\n\
    \    return suffix + prefix", "    var x = x\n    var shift = shift\n    var digits\
    \ = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    if shift > digits.count {\n        return String(digits.reverse())\n\
    \    }\n    shift %= digits.count\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return String(shifted)", "    var x = x\n    var shift\
    \ = shift\n    var result = \"\"\n    var digit = 0\n    var count = 0\n    while\
    \ x > 0 {\n        digit = x % 10\n        x /= 10\n        count += 1\n     \
    \   result = String(digit) + result\n    }\n    if shift > count {\n        return\
    \ result\n    }\n    let left = result[result.startIndex..<result.startIndex.advancedBy(shift)]\n\
    \    let right = result[result.startIndex.advancedBy(shift)..<result.endIndex]\n\
    \    return right + left", "    var digits = String(x)\n    if shift > digits.characters.count\
    \ {\n        return String(digits.characters.reverse())\n    }\n    let index\
    \ = digits.startIndex.advancedBy(shift)\n    digits.insert(contentsOf: digits.substringToIndex(index).characters,\
    \ at: digits.endIndex)\n    digits.removeSubrange(digits.startIndex..<index)\n\
    \    return digits", "    let s = String(x)\n    let n = s.characters.count\n\
    \    if shift >= n {\n        return String(s.characters.reverse())\n    }\n \
    \   let i = s.startIndex\n    let j = s.startIndex.advancedBy(shift)\n    let\
    \ k = s.startIndex.advancedBy(n)\n    return s[j..<k] + s[i..<j]", "    let s\
    \ = String(x)\n    let len = s.characters.count\n    if shift >= len {\n     \
    \   return String(s.characters.reverse())\n    }\n    let start = s.startIndex\n\
    \    let end = s.startIndex.advancedBy(shift)\n    let prefix = s.substringWithRange(start..<end)\n\
    \    let suffix = s.substringWithRange(end..<s.endIndex)\n    return suffix +\
    \ prefix", "    var x = x\n    var digits = [Int]()\n    while x > 0 {\n     \
    \   digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        return String(digits.reverse())\n    }\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return String(shifted)", "    let s = String(x)\n \
    \   let n = s.characters.count\n    if shift >= n {\n        return String(s.characters.reverse())\n\
    \    }\n    let i = s.index(s.startIndex, offsetBy: shift)\n    return s.substring(from:\
    \ i) + s.substring(to: i)", "    var x = x\n    var shift = shift\n    var result\
    \ = \"\"\n    var digit = 0\n    var digits = 0\n    var reversed = false\n  \
    \  var n = x\n    while n > 0 {\n        n /= 10\n        digits += 1\n    }\n\
    \    if shift > digits {\n        shift = digits\n        reversed = true\n  \
    \  }\n    for _ in 0..<shift {\n        digit = x % 10\n        x /= 10\n    \
    \    result = String(digit) + result\n    }\n    if reversed {\n        result\
    \ = String(x) + result\n    } else {\n        result += String(x)\n    }\n   \
    \ return result", "    var x = x\n    var shift = shift\n    var digits = [Int]()\n\
    \    var result = \"\"\n    while x > 0 {\n        digits.append(x % 10)\n   \
    \     x /= 10\n    }\n    shift %= digits.count\n    for i in 0..<digits.count\
    \ {\n        result += String(digits[(i + shift) % digits.count])\n    }\n   \
    \ return result", "    var digits = String(x)\n    if shift > digits.count {\n\
    \        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    digits.append(contentsOf: digits[..<index])\n    digits.removeSubrange(..<index)\n\
    \    return digits", "    var digits = String(x)\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    digits.append(contentsOf: digits[..<index])\n    digits.removeSubrange(..<index)\n\
    \    return digits", "    var x = x\n    var shift = shift\n    var digits = [Int]()\n\
    \    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n  \
    \  if shift > digits.count {\n        return String(digits.reverse())\n    }\n\
    \    shift %= digits.count\n    return String(digits[shift..<digits.count] + digits[0..<shift])",
  "    let digits = String(x)\n    let len = digits.characters.count\n    if shift\
    \ >= len {\n        return String(digits.characters.reverse())\n    }\n    let\
    \ start = digits.startIndex.advancedBy(shift)\n    let end = digits.endIndex\n\
    \    let range = start..<end\n    let right = digits.substringWithRange(range)\n\
    \    let left = digits.substringToIndex(start)\n    return right + left", "  \
    \  var x = x\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    var result = \"\"\n    for i in 0..<digits.count\
    \ {\n        result += String(digits[(i + shift) % digits.count])\n    }\n   \
    \ return result", "    var x = x\n    var digits = [Int]()\n    while x > 0 {\n\
    \        digits.append(x % 10)\n        x /= 10\n    }\n    var result = \"\"\n\
    \    for i in 0..<digits.count {\n        let index = (i + shift) % digits.count\n\
    \        result += String(digits[index])\n    }\n    return result", "    var\
    \ s = String(x)\n    if shift >= s.characters.count {\n        return String(s.characters.reverse())\n\
    \    }\n    let i = s.startIndex.advancedBy(shift)\n    let j = s.endIndex\n \
    \   s.insert(s[i], atIndex: j)\n    s.removeAtIndex(i)\n    return s", "    var\
    \ x_str = String(x)\n    if shift > x_str.characters.count {\n        return String(x_str.characters.reverse())\n\
    \    }\n    let index = x_str.startIndex.advancedBy(shift)\n    let prefix = x_str.substringToIndex(index)\n\
    \    let suffix = x_str.substringFromIndex(index)\n    return suffix + prefix",
  "    let s = String(x)\n    if shift > s.characters.count {\n        return String(s.characters.reverse())\n\
    \    }\n    let i = s.startIndex.advancedBy(shift)\n    return s.substringFromIndex(i)\
    \ + s.substringToIndex(i)", "    var digits = String(x)\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits.prefix(upTo: index)\n    let suffix\
    \ = digits.suffix(from: index)\n    return String(suffix + prefix)", "    var\
    \ s = String(x)\n    if shift > s.count {\n        return String(s.reversed())\n\
    \    }\n    let index = s.index(s.startIndex, offsetBy: shift)\n    let prefix\
    \ = s.prefix(upTo: index)\n    let suffix = s.suffix(from: index)\n    return\
    \ String(suffix + prefix)", "    var digits = String(x)\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits.prefix(upTo: index)\n    let suffix\
    \ = digits.suffix(from: index)\n    return String(suffix + prefix)", "    var\
    \ x = x\n    var shift = shift\n    var digits = [Int]()\n    var result = \"\"\
    \n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n \
    \   if shift > digits.count {\n        shift = digits.count\n    }\n    for i\
    \ in 0..<digits.count {\n        result += String(digits[(i + shift) % digits.count])\n\
    \    }\n    return result", "    let s = String(x)\n    let n = s.characters.count\n\
    \    if shift >= n {\n        return String(s.characters.reverse())\n    }\n \
    \   let left = s.substringToIndex(s.startIndex.advancedBy(shift))\n    let right\
    \ = s.substringFromIndex(s.startIndex.advancedBy(shift))\n    return right + left",
  "    let x_str = String(x)\n    let x_len = x_str.characters.count\n    if shift\
    \ > x_len {\n        return String(x_str.characters.reverse())\n    }\n    let\
    \ x_shift = x_str.substringFromIndex(x_str.startIndex.advancedBy(shift))\n   \
    \ let x_pre = x_str.substringToIndex(x_str.startIndex.advancedBy(shift))\n   \
    \ return x_shift + x_pre", "    var x_str = String(x)\n    if shift > x_str.count\
    \ {\n        return String(x_str.reversed())\n    }\n    let index = x_str.index(x_str.startIndex,\
    \ offsetBy: shift)\n    let left = x_str[index...]\n    let right = x_str[..<index]\n\
    \    return String(left + right)", "    let digits = String(x)\n    let n = digits.characters.count\n\
    \    if shift >= n {\n        return String(digits.characters.reverse())\n   \
    \ }\n    let left = digits.substringToIndex(digits.startIndex.advancedBy(shift))\n\
    \    let right = digits.substringFromIndex(digits.startIndex.advancedBy(shift))\n\
    \    return right + left", "    var x = x\n    var shift = shift\n    var result\
    \ = \"\"\n    var digit = 0\n    while x > 0 {\n        digit = x % 10\n     \
    \   x /= 10\n        result = String(digit) + result\n    }\n    if shift > result.characters.count\
    \ {\n        return String(result.characters.reverse())\n    }\n    let index\
    \ = result.startIndex.advancedBy(shift)\n    return result.substringFromIndex(index)\
    \ + result.substringToIndex(index)", "    var digits = String(x)\n    if shift\
    \ > digits.count {\n        return String(digits.reversed())\n    }\n    let index\
    \ = digits.index(digits.startIndex, offsetBy: shift)\n    digits.append(contentsOf:\
    \ digits[..<index])\n    digits.removeSubrange(..<index)\n    return digits",
  "    var digits = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ digits.append(contentsOf: digits[..<index])\n    digits.removeSubrange(..<index)\n\
    \    return digits", "    var x = x\n    var digits = [Int]()\n    var result\
    \ = \"\"\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    if shift > digits.count {\n        digits.reverse()\n    } else {\n\
    \        let shift = shift % digits.count\n        digits = Array(digits[shift..<digits.count])\
    \ + Array(digits[0..<shift])\n    }\n    for digit in digits {\n        result\
    \ += String(digit)\n    }\n    return result", "    var x = x\n    var shift =\
    \ shift\n    var result = \"\"\n    var digit = 0\n    var count = 0\n    while\
    \ x > 0 {\n        digit = x % 10\n        x /= 10\n        count += 1\n     \
    \   if shift > 0 {\n            shift -= 1\n        } else {\n            result\
    \ += String(digit)\n        }\n    }\n    if shift > 0 {\n        result = String(result.characters.reverse())\n\
    \    }\n    return result", "    let s = String(x)\n    let n = s.characters.count\n\
    \    if shift > n {\n        return String(s.characters.reverse())\n    }\n  \
    \  let i = s.index(s.startIndex, offsetBy: shift)\n    return s.substring(from:\
    \ i) + s.substring(to: i)", "    let s = String(x)\n    if shift >= s.count {\n\
    \        return String(s.reversed())\n    }\n    let i = s.index(s.startIndex,\
    \ offsetBy: shift)\n    return String(s[i...] + s[..<i])", "    let str = String(x)\n\
    \    let len = str.characters.count\n    if shift >= len {\n        return String(str.characters.reverse())\n\
    \    }\n    let start = str.startIndex\n    let end = str.startIndex.advancedBy(shift)\n\
    \    let range = start..<end\n    let prefix = str.substringWithRange(range)\n\
    \    let suffix = str.substringFromIndex(end)\n    return suffix + prefix", " \
    \   var digits = String(x)\n    var result = \"\"\n    if shift > digits.count\
    \ {\n        result = String(digits.reversed())\n    } else {\n        let index\
    \ = digits.index(digits.startIndex, offsetBy: shift)\n        result = String(digits[index..<digits.endIndex])\
    \ + String(digits[digits.startIndex..<index])\n    }\n    return result", "  \
    \  var x = x\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ String(digits.reverse())\n    }\n    let shifted = digits[digits.count - shift..<digits.count]\
    \ + digits[0..<digits.count - shift]\n    return String(shifted.reverse())", " \
    \   let s = String(x)\n    let n = s.characters.count\n    if shift >= n {\n \
    \       return String(s.characters.reverse())\n    }\n    let i = s.startIndex\n\
    \    let j = s.startIndex.advancedBy(shift)\n    let k = s.startIndex.advancedBy(n)\n\
    \    return s[j..<k] + s[i..<j]", "    var x = x\n    var digits = [Int]()\n \
    \   while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n   \
    \ if shift > digits.count {\n        return digits.reverse().map({String($0)}).joinWithSeparator(\"\
    \")\n    }\n    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n\
    \    return shifted.map({String($0)}).joinWithSeparator(\"\")", "    let digits\
    \ = String(x)\n    let len = digits.characters.count\n    let shift = shift %\
    \ len\n    let left = digits.substringToIndex(digits.startIndex.advancedBy(shift))\n\
    \    let right = digits.substringFromIndex(digits.startIndex.advancedBy(shift))\n\
    \    return right + left", "    let s = String(x)\n    if shift >= s.characters.count\
    \ {\n        return String(s.characters.reverse())\n    }\n    let index = s.startIndex.advancedBy(shift)\n\
    \    return s.substringFromIndex(index) + s.substringToIndex(index)", "    let\
    \ s = String(x)\n    let n = s.characters.count\n    if shift > n {\n        return\
    \ String(s.characters.reverse())\n    }\n    let i = s.index(s.startIndex, offsetBy:\
    \ shift)\n    return s.substring(from: i) + s.substring(to: i)"]
stop_tokens:
- "\n}"
