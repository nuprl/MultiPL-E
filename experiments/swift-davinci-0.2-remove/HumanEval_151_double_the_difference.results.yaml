language: swift
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbb57a275.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(num * num)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpyxkcgred.swift:9:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpc5_w5p5o/tmpc5_w5p5o.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e0ec50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e0e947b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e0e947988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e0e9467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5_w5p5o                        0x0000557b62d06692 <unavailable> + 5778

    5    libc.so.6                          0x00002b5e0ee3c460 __libc_start_main +
    245

    6    tmpc5_w5p5o                        0x0000557b62d06259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for number in lst {\n        if number > 0 &&\
    \ number.truncatingRemainder(dividingBy: 1) == 0 {\n            sum += Int(pow(number,\
    \ 2))\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9ktf4xuj.swift:9:24: error: cannot find 'pow' in scope\n      \
    \      sum += Int(pow(number, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpc5_w5p5o/tmpc5_w5p5o.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e0ec50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e0e947b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e0e947988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e0e9467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5_w5p5o                        0x0000557b62d06692 <unavailable> + 5778

    5    libc.so.6                          0x00002b5e0ee3c460 __libc_start_main +
    245

    6    tmpc5_w5p5o                        0x0000557b62d06259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n\
    \            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9d41otdy.swift:8:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n\
    \            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9d41otdy.swift:8:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i)\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpossm3m60/tmpossm3m60.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff8c8b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff8c5abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff8c5ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff8c5aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpossm3m60                        0x000055f49618e692 <unavailable> + 5778

    5    libc.so.6                          0x00002aff8caa0460 __libc_start_main +
    245

    6    tmpossm3m60                        0x000055f49618e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpc5_w5p5o/tmpc5_w5p5o.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e0ec50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e0e947b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e0e947988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e0e9467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5_w5p5o                        0x0000557b62d06692 <unavailable> + 5778

    5    libc.so.6                          0x00002b5e0ee3c460 __libc_start_main +
    245

    6    tmpc5_w5p5o                        0x0000557b62d06259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp0_yxkp0f/tmp0_yxkp0f.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3db29bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3db26b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3db26b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3db26b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0_yxkp0f                        0x000055cf79567692 <unavailable> + 5778

    5    libc.so.6                          0x00002b3db2ba6460 __libc_start_main +
    245

    6    tmp0_yxkp0f                        0x000055cf79567259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num < 0 {\n    \
    \        continue\n        }\n        if num % 2 == 0 {\n            continue\n\
    \        }\n        sum += Int(num)\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbop1l8sj.swift:11:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 0 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i)\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpossm3m60/tmpossm3m60.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff8c8b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff8c5abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff8c5ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff8c5aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpossm3m60                        0x000055f49618e692 <unavailable> + 5778

    5    libc.so.6                          0x00002aff8caa0460 __libc_start_main +
    245

    6    tmpossm3m60                        0x000055f49618e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n\
    \            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9d41otdy.swift:8:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbb57a275.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpc5_w5p5o/tmpc5_w5p5o.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e0ec50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e0e947b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e0e947988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e0e9467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5_w5p5o                        0x0000557b62d06692 <unavailable> + 5778

    5    libc.so.6                          0x00002b5e0ee3c460 __libc_start_main +
    245

    6    tmpc5_w5p5o                        0x0000557b62d06259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(num * num)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpyxkcgred.swift:9:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpj3rywjqg.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n\
    \            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9d41otdy.swift:8:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num) * Int(num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp8zpk77qm/tmp8zpk77qm.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6daecb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dae9abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dae9ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dae9aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zpk77qm                        0x000055a200355692 <unavailable> + 5778

    5    libc.so.6                          0x00002b6daeea0460 __libc_start_main +
    245

    6    tmp8zpk77qm                        0x000055a200355259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n\
    \            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9d41otdy.swift:8:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i)\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpossm3m60/tmpossm3m60.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff8c8b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff8c5abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff8c5ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff8c5aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpossm3m60                        0x000055f49618e692 <unavailable> + 5778

    5    libc.so.6                          0x00002aff8caa0460 __libc_start_main +
    245

    6    tmpossm3m60                        0x000055f49618e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i) * Int(i)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpn0a5uc5w/tmpn0a5uc5w.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b826e7ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b826e4e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b826e4e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b826e4e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0a5uc5w                        0x00005632a9b3e692 <unavailable> + 5778

    5    libc.so.6                          0x00002b826e9d8460 __libc_start_main +
    245

    6    tmpn0a5uc5w                        0x00005632a9b3e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n\
    \            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9d41otdy.swift:8:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpyq417rq8/tmpyq417rq8.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69c9b92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69c9889b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69c9889988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69c98887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyq417rq8                        0x000055d7ba359692 <unavailable> + 5778

    5    libc.so.6                          0x00002b69c9d7e460 __libc_start_main +
    245

    6    tmpyq417rq8                        0x000055d7ba359259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbb57a275.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbb57a275.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n\
    \            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9d41otdy.swift:8:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpj3rywjqg.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpc5_w5p5o/tmpc5_w5p5o.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e0ec50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e0e947b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e0e947988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e0e9467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5_w5p5o                        0x0000557b62d06692 <unavailable> + 5778

    5    libc.so.6                          0x00002b5e0ee3c460 __libc_start_main +
    245

    6    tmpc5_w5p5o                        0x0000557b62d06259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i)\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpossm3m60/tmpossm3m60.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff8c8b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff8c5abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff8c5ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff8c5aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpossm3m60                        0x000055f49618e692 <unavailable> + 5778

    5    libc.so.6                          0x00002aff8caa0460 __libc_start_main +
    245

    6    tmpossm3m60                        0x000055f49618e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpc5_w5p5o/tmpc5_w5p5o.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e0ec50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e0e947b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e0e947988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e0e9467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5_w5p5o                        0x0000557b62d06692 <unavailable> + 5778

    5    libc.so.6                          0x00002b5e0ee3c460 __libc_start_main +
    245

    6    tmpc5_w5p5o                        0x0000557b62d06259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i)\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpossm3m60/tmpossm3m60.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff8c8b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff8c5abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff8c5ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff8c5aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpossm3m60                        0x000055f49618e692 <unavailable> + 5778

    5    libc.so.6                          0x00002aff8caa0460 __libc_start_main +
    245

    6    tmpossm3m60                        0x000055f49618e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbb57a275.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i) * Int(i)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpn0a5uc5w/tmpn0a5uc5w.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b826e7ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b826e4e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b826e4e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b826e4e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0a5uc5w                        0x00005632a9b3e692 <unavailable> + 5778

    5    libc.so.6                          0x00002b826e9d8460 __libc_start_main +
    245

    6    tmpn0a5uc5w                        0x00005632a9b3e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for item in lst {\n        if item > 0 && item.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if item % 2 == 1 {\n                sum += Int(item *\
    \ item)\n            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmph8zvkaim.swift:9:21: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if item % 2 == 1 {\n  \
    \                  ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i)\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpossm3m60/tmpossm3m60.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff8c8b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff8c5abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff8c5ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff8c5aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpossm3m60                        0x000055f49618e692 <unavailable> + 5778

    5    libc.so.6                          0x00002aff8caa0460 __libc_start_main +
    245

    6    tmpossm3m60                        0x000055f49618e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp0_yxkp0f/tmp0_yxkp0f.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3db29bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3db26b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3db26b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3db26b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0_yxkp0f                        0x000055cf79567692 <unavailable> + 5778

    5    libc.so.6                          0x00002b3db2ba6460 __libc_start_main +
    245

    6    tmp0_yxkp0f                        0x000055cf79567259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num) * Int(num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp8zpk77qm/tmp8zpk77qm.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6daecb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dae9abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dae9ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dae9aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zpk77qm                        0x000055a200355692 <unavailable> + 5778

    5    libc.so.6                          0x00002b6daeea0460 __libc_start_main +
    245

    6    tmp8zpk77qm                        0x000055a200355259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpj3rywjqg.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpc5_w5p5o/tmpc5_w5p5o.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e0ec50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e0e947b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e0e947988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e0e9467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5_w5p5o                        0x0000557b62d06692 <unavailable> + 5778

    5    libc.so.6                          0x00002b5e0ee3c460 __libc_start_main +
    245

    6    tmpc5_w5p5o                        0x0000557b62d06259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i)\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpossm3m60/tmpossm3m60.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff8c8b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff8c5abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff8c5ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff8c5aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpossm3m60                        0x000055f49618e692 <unavailable> + 5778

    5    libc.so.6                          0x00002aff8caa0460 __libc_start_main +
    245

    6    tmpossm3m60                        0x000055f49618e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbb57a275.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum: Int = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i) * Int(i)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmph9fqkr2y/tmph9fqkr2y.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32b1d8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32b1a84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32b1a84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32b1a837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph9fqkr2y                        0x0000555de873d692 <unavailable> + 5778

    5    libc.so.6                          0x00002b32b1f79460 __libc_start_main +
    245

    6    tmph9fqkr2y                        0x0000555de873d259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += i * i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpy41r718e.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpy41r718e.swift:9:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i * i\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n\
    \            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9d41otdy.swift:8:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i)\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpossm3m60/tmpossm3m60.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff8c8b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff8c5abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff8c5ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff8c5aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpossm3m60                        0x000055f49618e692 <unavailable> + 5778

    5    libc.so.6                          0x00002aff8caa0460 __libc_start_main +
    245

    6    tmpossm3m60                        0x000055f49618e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbb57a275.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp0_yxkp0f/tmp0_yxkp0f.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3db29bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3db26b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3db26b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3db26b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0_yxkp0f                        0x000055cf79567692 <unavailable> + 5778

    5    libc.so.6                          0x00002b3db2ba6460 __libc_start_main +
    245

    6    tmp0_yxkp0f                        0x000055cf79567259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var result = 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            result += Int(i * i)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbb57a275.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i) * Int(i)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpn0a5uc5w/tmpn0a5uc5w.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b826e7ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b826e4e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b826e4e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b826e4e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0a5uc5w                        0x00005632a9b3e692 <unavailable> + 5778

    5    libc.so.6                          0x00002b826e9d8460 __libc_start_main +
    245

    6    tmpn0a5uc5w                        0x00005632a9b3e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbb57a275.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpn0d8p3db/tmpn0d8p3db.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2db7a2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2db7722b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2db7722988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2db77217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0d8p3db                        0x0000559db8b713e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b2db7c17460 __libc_start_main +
    245

    6    tmpn0d8p3db                        0x0000559db8b70fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpyq417rq8/tmpyq417rq8.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69c9b92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69c9889b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69c9889988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69c98887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyq417rq8                        0x000055d7ba359692 <unavailable> + 5778

    5    libc.so.6                          0x00002b69c9d7e460 __libc_start_main +
    245

    6    tmpyq417rq8                        0x000055d7ba359259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num < 0 || num.truncatingRemainder(dividingBy:\
    \ 1) != 0 {\n            continue\n        }\n        if num % 2 == 1 {\n    \
    \        sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpzmtvxa_h.swift:11:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 {\n        \
    \    sum += Int(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp7bwvkk6u/tmp7bwvkk6u.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3640fc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3640cb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3640cb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3640cb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7bwvkk6u                        0x000055997573d5e2 <unavailable> + 5602

    5    libc.so.6                          0x00002b36411ae460 __libc_start_main +
    245

    6    tmp7bwvkk6u                        0x000055997573d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpn0d8p3db/tmpn0d8p3db.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2db7a2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2db7722b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2db7722988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2db77217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0d8p3db                        0x0000559db8b713e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b2db7c17460 __libc_start_main +
    245

    6    tmpn0d8p3db                        0x0000559db8b70fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbb57a275.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpc5_w5p5o/tmpc5_w5p5o.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e0ec50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e0e947b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e0e947988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e0e9467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5_w5p5o                        0x0000557b62d06692 <unavailable> + 5778

    5    libc.so.6                          0x00002b5e0ee3c460 __libc_start_main +
    245

    6    tmpc5_w5p5o                        0x0000557b62d06259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpc5_w5p5o/tmpc5_w5p5o.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e0ec50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e0e947b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e0e947988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e0e9467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5_w5p5o                        0x0000557b62d06692 <unavailable> + 5778

    5    libc.so.6                          0x00002b5e0ee3c460 __libc_start_main +
    245

    6    tmpc5_w5p5o                        0x0000557b62d06259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp0_yxkp0f/tmp0_yxkp0f.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3db29bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3db26b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3db26b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3db26b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0_yxkp0f                        0x000055cf79567692 <unavailable> + 5778

    5    libc.so.6                          0x00002b3db2ba6460 __libc_start_main +
    245

    6    tmp0_yxkp0f                        0x000055cf79567259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i)\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpossm3m60/tmpossm3m60.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff8c8b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff8c5abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff8c5ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff8c5aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpossm3m60                        0x000055f49618e692 <unavailable> + 5778

    5    libc.so.6                          0x00002aff8caa0460 __libc_start_main +
    245

    6    tmpossm3m60                        0x000055f49618e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i)\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpossm3m60/tmpossm3m60.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff8c8b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff8c5abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff8c5ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff8c5aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpossm3m60                        0x000055f49618e692 <unavailable> + 5778

    5    libc.so.6                          0x00002aff8caa0460 __libc_start_main +
    245

    6    tmpossm3m60                        0x000055f49618e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for number in lst {\n        if number.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(pow(number, 2))\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmphh3pacs3.swift:9:24: error: cannot find 'pow' in scope\n      \
    \      sum += Int(pow(number, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpc5_w5p5o/tmpc5_w5p5o.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e0ec50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e0e947b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e0e947988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e0e9467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5_w5p5o                        0x0000557b62d06692 <unavailable> + 5778

    5    libc.so.6                          0x00002b5e0ee3c460 __libc_start_main +
    245

    6    tmpc5_w5p5o                        0x0000557b62d06259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbb57a275.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num >= 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(num * num)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpmpq5e3ee.swift:9:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpn0d8p3db/tmpn0d8p3db.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2db7a2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2db7722b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2db7722988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2db77217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0d8p3db                        0x0000559db8b713e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b2db7c17460 __libc_start_main +
    245

    6    tmpn0d8p3db                        0x0000559db8b70fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i)\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpossm3m60/tmpossm3m60.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff8c8b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff8c5abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff8c5ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff8c5aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpossm3m60                        0x000055f49618e692 <unavailable> + 5778

    5    libc.so.6                          0x00002aff8caa0460 __libc_start_main +
    245

    6    tmpossm3m60                        0x000055f49618e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpj3rywjqg.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpn0d8p3db/tmpn0d8p3db.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2db7a2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2db7722b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2db7722988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2db77217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0d8p3db                        0x0000559db8b713e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b2db7c17460 __libc_start_main +
    245

    6    tmpn0d8p3db                        0x0000559db8b70fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpn0d8p3db/tmpn0d8p3db.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2db7a2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2db7722b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2db7722988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2db77217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0d8p3db                        0x0000559db8b713e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b2db7c17460 __libc_start_main +
    245

    6    tmpn0d8p3db                        0x0000559db8b70fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i) * Int(i)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpn0a5uc5w/tmpn0a5uc5w.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b826e7ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b826e4e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b826e4e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b826e4e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0a5uc5w                        0x00005632a9b3e692 <unavailable> + 5778

    5    libc.so.6                          0x00002b826e9d8460 __libc_start_main +
    245

    6    tmpn0a5uc5w                        0x00005632a9b3e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i) * Int(i)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpn0a5uc5w/tmpn0a5uc5w.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b826e7ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b826e4e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b826e4e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b826e4e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0a5uc5w                        0x00005632a9b3e692 <unavailable> + 5778

    5    libc.so.6                          0x00002b826e9d8460 __libc_start_main +
    245

    6    tmpn0a5uc5w                        0x00005632a9b3e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n\
    \            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9d41otdy.swift:8:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbb57a275.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n\
    \            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9d41otdy.swift:8:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpc5_w5p5o/tmpc5_w5p5o.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e0ec50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e0e947b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e0e947988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e0e9467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5_w5p5o                        0x0000557b62d06692 <unavailable> + 5778

    5    libc.so.6                          0x00002b5e0ee3c460 __libc_start_main +
    245

    6    tmpc5_w5p5o                        0x0000557b62d06259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num < 0 {\n    \
    \        continue\n        }\n        if num % 2 == 0 {\n            continue\n\
    \        }\n        sum += Int(num)\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbop1l8sj.swift:11:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 0 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n\
    \            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9d41otdy.swift:8:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbb57a275.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpn0d8p3db/tmpn0d8p3db.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2db7a2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2db7722b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2db7722988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2db77217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0d8p3db                        0x0000559db8b713e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b2db7c17460 __libc_start_main +
    245

    6    tmpn0d8p3db                        0x0000559db8b70fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n\
    \            sum += Int(num) * Int(num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpegrkts2h.swift:8:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbb57a275.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpyq417rq8/tmpyq417rq8.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69c9b92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69c9889b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69c9889988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69c98887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyq417rq8                        0x000055d7ba359692 <unavailable> + 5778

    5    libc.so.6                          0x00002b69c9d7e460 __libc_start_main +
    245

    6    tmpyq417rq8                        0x000055d7ba359259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n\
    \            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9d41otdy.swift:8:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num < 0 {\n    \
    \        continue\n        }\n        if num % 2 == 0 {\n            continue\n\
    \        }\n        sum += Int(num)\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbop1l8sj.swift:11:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 0 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpc5_w5p5o/tmpc5_w5p5o.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e0ec50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e0e947b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e0e947988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e0e9467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5_w5p5o                        0x0000557b62d06692 <unavailable> + 5778

    5    libc.so.6                          0x00002b5e0ee3c460 __libc_start_main +
    245

    6    tmpc5_w5p5o                        0x0000557b62d06259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num) * Int(num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp8zpk77qm/tmp8zpk77qm.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6daecb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dae9abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dae9ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dae9aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zpk77qm                        0x000055a200355692 <unavailable> + 5778

    5    libc.so.6                          0x00002b6daeea0460 __libc_start_main +
    245

    6    tmp8zpk77qm                        0x000055a200355259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp0_yxkp0f/tmp0_yxkp0f.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3db29bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3db26b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3db26b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3db26b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0_yxkp0f                        0x000055cf79567692 <unavailable> + 5778

    5    libc.so.6                          0x00002b3db2ba6460 __libc_start_main +
    245

    6    tmp0_yxkp0f                        0x000055cf79567259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n\
    \            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9d41otdy.swift:8:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n\
    \            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9d41otdy.swift:8:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num) * Int(num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp8zpk77qm/tmp8zpk77qm.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6daecb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dae9abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dae9ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dae9aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zpk77qm                        0x000055a200355692 <unavailable> + 5778

    5    libc.so.6                          0x00002b6daeea0460 __libc_start_main +
    245

    6    tmp8zpk77qm                        0x000055a200355259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbb57a275.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbb57a275.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpc5_w5p5o/tmpc5_w5p5o.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e0ec50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e0e947b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e0e947988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e0e9467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5_w5p5o                        0x0000557b62d06692 <unavailable> + 5778

    5    libc.so.6                          0x00002b5e0ee3c460 __libc_start_main +
    245

    6    tmpc5_w5p5o                        0x0000557b62d06259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n\
    \            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9d41otdy.swift:8:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpc5_w5p5o/tmpc5_w5p5o.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e0ec50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e0e947b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e0e947988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e0e9467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5_w5p5o                        0x0000557b62d06692 <unavailable> + 5778

    5    libc.so.6                          0x00002b5e0ee3c460 __libc_start_main +
    245

    6    tmpc5_w5p5o                        0x0000557b62d06259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i % 2 ==\
    \ 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiaimp4pk.swift:8:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 == 1 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i)\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpossm3m60/tmpossm3m60.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff8c8b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff8c5abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff8c5ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff8c5aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpossm3m60                        0x000055f49618e692 <unavailable> + 5778

    5    libc.so.6                          0x00002aff8caa0460 __libc_start_main +
    245

    6    tmpossm3m60                        0x000055f49618e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num) * Int(num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp8zpk77qm/tmp8zpk77qm.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6daecb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dae9abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dae9ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dae9aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zpk77qm                        0x000055a200355692 <unavailable> + 5778

    5    libc.so.6                          0x00002b6daeea0460 __libc_start_main +
    245

    6    tmp8zpk77qm                        0x000055a200355259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpc5_w5p5o/tmpc5_w5p5o.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e0ec50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e0e947b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e0e947988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e0e9467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5_w5p5o                        0x0000557b62d06692 <unavailable> + 5778

    5    libc.so.6                          0x00002b5e0ee3c460 __libc_start_main +
    245

    6    tmpc5_w5p5o                        0x0000557b62d06259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i)\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpossm3m60/tmpossm3m60.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff8c8b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff8c5abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff8c5ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff8c5aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpossm3m60                        0x000055f49618e692 <unavailable> + 5778

    5    libc.so.6                          0x00002aff8caa0460 __libc_start_main +
    245

    6    tmpossm3m60                        0x000055f49618e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n\
    \            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9d41otdy.swift:8:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n\
    \            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9d41otdy.swift:8:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num) * Int(num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp8zpk77qm/tmp8zpk77qm.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6daecb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dae9abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dae9ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dae9aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zpk77qm                        0x000055a200355692 <unavailable> + 5778

    5    libc.so.6                          0x00002b6daeea0460 __libc_start_main +
    245

    6    tmp8zpk77qm                        0x000055a200355259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num) * Int(num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp8zpk77qm/tmp8zpk77qm.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6daecb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dae9abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dae9ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dae9aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zpk77qm                        0x000055a200355692 <unavailable> + 5778

    5    libc.so.6                          0x00002b6daeea0460 __libc_start_main +
    245

    6    tmp8zpk77qm                        0x000055a200355259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num) * Int(num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp8zpk77qm/tmp8zpk77qm.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6daecb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dae9abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dae9ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dae9aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zpk77qm                        0x000055a200355692 <unavailable> + 5778

    5    libc.so.6                          0x00002b6daeea0460 __libc_start_main +
    245

    6    tmp8zpk77qm                        0x000055a200355259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpc5_w5p5o/tmpc5_w5p5o.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e0ec50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e0e947b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e0e947988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e0e9467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5_w5p5o                        0x0000557b62d06692 <unavailable> + 5778

    5    libc.so.6                          0x00002b5e0ee3c460 __libc_start_main +
    245

    6    tmpc5_w5p5o                        0x0000557b62d06259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num) * Int(num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp8zpk77qm/tmp8zpk77qm.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6daecb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dae9abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dae9ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dae9aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zpk77qm                        0x000055a200355692 <unavailable> + 5778

    5    libc.so.6                          0x00002b6daeea0460 __libc_start_main +
    245

    6    tmp8zpk77qm                        0x000055a200355259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpn0d8p3db/tmpn0d8p3db.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2db7a2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2db7722b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2db7722988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2db77217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0d8p3db                        0x0000559db8b713e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b2db7c17460 __libc_start_main +
    245

    6    tmpn0d8p3db                        0x0000559db8b70fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i)\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpossm3m60/tmpossm3m60.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff8c8b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff8c5abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff8c5ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff8c5aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpossm3m60                        0x000055f49618e692 <unavailable> + 5778

    5    libc.so.6                          0x00002aff8caa0460 __libc_start_main +
    245

    6    tmpossm3m60                        0x000055f49618e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num) * Int(num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp8zpk77qm/tmp8zpk77qm.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6daecb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dae9abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dae9ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dae9aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zpk77qm                        0x000055a200355692 <unavailable> + 5778

    5    libc.so.6                          0x00002b6daeea0460 __libc_start_main +
    245

    6    tmp8zpk77qm                        0x000055a200355259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i)\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpossm3m60/tmpossm3m60.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff8c8b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff8c5abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff8c5ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff8c5aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpossm3m60                        0x000055f49618e692 <unavailable> + 5778

    5    libc.so.6                          0x00002aff8caa0460 __libc_start_main +
    245

    6    tmpossm3m60                        0x000055f49618e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i % 2 ==\
    \ 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiaimp4pk.swift:8:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 == 1 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpc5_w5p5o/tmpc5_w5p5o.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e0ec50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e0e947b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e0e947988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e0e9467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5_w5p5o                        0x0000557b62d06692 <unavailable> + 5778

    5    libc.so.6                          0x00002b5e0ee3c460 __libc_start_main +
    245

    6    tmpc5_w5p5o                        0x0000557b62d06259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if i % 2 != 0 {\n                sum += Int(i) * Int(i)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpusfkrt00.swift:9:18: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if i % 2 != 0 {\n     \
    \            ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i)\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpossm3m60/tmpossm3m60.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff8c8b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff8c5abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff8c5ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff8c5aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpossm3m60                        0x000055f49618e692 <unavailable> + 5778

    5    libc.so.6                          0x00002aff8caa0460 __libc_start_main +
    245

    6    tmpossm3m60                        0x000055f49618e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpc5_w5p5o/tmpc5_w5p5o.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e0ec50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e0e947b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e0e947988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e0e9467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5_w5p5o                        0x0000557b62d06692 <unavailable> + 5778

    5    libc.so.6                          0x00002b5e0ee3c460 __libc_start_main +
    245

    6    tmpc5_w5p5o                        0x0000557b62d06259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if i % 2 != 0 {\n                sum += Int(i * i)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpg21420en.swift:9:18: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if i % 2 != 0 {\n     \
    \            ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpyq417rq8/tmpyq417rq8.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69c9b92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69c9889b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69c9889988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69c98887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyq417rq8                        0x000055d7ba359692 <unavailable> + 5778

    5    libc.so.6                          0x00002b69c9d7e460 __libc_start_main +
    245

    6    tmpyq417rq8                        0x000055d7ba359259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num < 0 {\n    \
    \        continue\n        }\n        if num % 2 == 0 {\n            continue\n\
    \        }\n        sum += Int(num)\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbop1l8sj.swift:11:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 0 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpc5_w5p5o/tmpc5_w5p5o.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e0ec50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e0e947b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e0e947988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e0e9467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5_w5p5o                        0x0000557b62d06692 <unavailable> + 5778

    5    libc.so.6                          0x00002b5e0ee3c460 __libc_start_main +
    245

    6    tmpc5_w5p5o                        0x0000557b62d06259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n\
    \            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9d41otdy.swift:8:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpc5_w5p5o/tmpc5_w5p5o.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e0ec50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e0e947b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e0e947988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e0e9467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5_w5p5o                        0x0000557b62d06692 <unavailable> + 5778

    5    libc.so.6                          0x00002b5e0ee3c460 __libc_start_main +
    245

    6    tmpc5_w5p5o                        0x0000557b62d06259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    // YOUR CODE HERE\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpk46jqmfy/tmpk46jqmfy.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5328821c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5328518b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5328518988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53285177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk46jqmfy                        0x000056516d5083e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b5328a0d460 __libc_start_main +
    245

    6    tmpk46jqmfy                        0x000056516d507fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if i % 2 != 0 {\n                sum += Int(i) * Int(i)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpusfkrt00.swift:9:18: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if i % 2 != 0 {\n     \
    \            ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n\
    \            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9d41otdy.swift:8:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i)\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpossm3m60/tmpossm3m60.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff8c8b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff8c5abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff8c5ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff8c5aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpossm3m60                        0x000055f49618e692 <unavailable> + 5778

    5    libc.so.6                          0x00002aff8caa0460 __libc_start_main +
    245

    6    tmpossm3m60                        0x000055f49618e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n\
    \            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9d41otdy.swift:8:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbb57a275.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpn0d8p3db/tmpn0d8p3db.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2db7a2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2db7722b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2db7722988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2db77217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0d8p3db                        0x0000559db8b713e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b2db7c17460 __libc_start_main +
    245

    6    tmpn0d8p3db                        0x0000559db8b70fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbb57a275.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpc5_w5p5o/tmpc5_w5p5o.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e0ec50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e0e947b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e0e947988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e0e9467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5_w5p5o                        0x0000557b62d06692 <unavailable> + 5778

    5    libc.so.6                          0x00002b5e0ee3c460 __libc_start_main +
    245

    6    tmpc5_w5p5o                        0x0000557b62d06259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n\
    \            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9d41otdy.swift:8:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbb57a275.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n\
    \            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9d41otdy.swift:8:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpn0d8p3db/tmpn0d8p3db.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2db7a2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2db7722b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2db7722988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2db77217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0d8p3db                        0x0000559db8b713e2 <unavailable> + 5090

    5    libc.so.6                          0x00002b2db7c17460 __libc_start_main +
    245

    6    tmpn0d8p3db                        0x0000559db8b70fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n\
    \            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9d41otdy.swift:8:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbb57a275.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpc5_w5p5o/tmpc5_w5p5o.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e0ec50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e0e947b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e0e947988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e0e9467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5_w5p5o                        0x0000557b62d06692 <unavailable> + 5778

    5    libc.so.6                          0x00002b5e0ee3c460 __libc_start_main +
    245

    6    tmpc5_w5p5o                        0x0000557b62d06259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num) * Int(num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp8zpk77qm/tmp8zpk77qm.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6daecb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dae9abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dae9ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dae9aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zpk77qm                        0x000055a200355692 <unavailable> + 5778

    5    libc.so.6                          0x00002b6daeea0460 __libc_start_main +
    245

    6    tmp8zpk77qm                        0x000055a200355259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbb57a275.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num) * Int(num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp8zpk77qm/tmp8zpk77qm.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6daecb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dae9abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dae9ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dae9aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zpk77qm                        0x000055a200355692 <unavailable> + 5778

    5    libc.so.6                          0x00002b6daeea0460 __libc_start_main +
    245

    6    tmp8zpk77qm                        0x000055a200355259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpc5_w5p5o/tmpc5_w5p5o.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e0ec50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e0e947b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e0e947988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e0e9467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5_w5p5o                        0x0000557b62d06692 <unavailable> + 5778

    5    libc.so.6                          0x00002b5e0ee3c460 __libc_start_main +
    245

    6    tmpc5_w5p5o                        0x0000557b62d06259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for item in lst {\n        if item.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(item * item)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i)\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpossm3m60/tmpossm3m60.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff8c8b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff8c5abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff8c5ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff8c5aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpossm3m60                        0x000055f49618e692 <unavailable> + 5778

    5    libc.so.6                          0x00002aff8caa0460 __libc_start_main +
    245

    6    tmpossm3m60                        0x000055f49618e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbb57a275.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n\
    \            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9d41otdy.swift:8:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i)\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpossm3m60/tmpossm3m60.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff8c8b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff8c5abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff8c5ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff8c5aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpossm3m60                        0x000055f49618e692 <unavailable> + 5778

    5    libc.so.6                          0x00002aff8caa0460 __libc_start_main +
    245

    6    tmpossm3m60                        0x000055f49618e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i)\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpossm3m60/tmpossm3m60.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff8c8b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff8c5abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff8c5ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff8c5aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpossm3m60                        0x000055f49618e692 <unavailable> + 5778

    5    libc.so.6                          0x00002aff8caa0460 __libc_start_main +
    245

    6    tmpossm3m60                        0x000055f49618e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbb57a275.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i)\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpossm3m60/tmpossm3m60.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff8c8b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff8c5abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff8c5ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff8c5aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpossm3m60                        0x000055f49618e692 <unavailable> + 5778

    5    libc.so.6                          0x00002aff8caa0460 __libc_start_main +
    245

    6    tmpossm3m60                        0x000055f49618e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if num % 2 == 1 {\n                sum += Int(num * num)\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpyxkcgred.swift:9:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpc5_w5p5o/tmpc5_w5p5o.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e0ec50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e0e947b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e0e947988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e0e9467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5_w5p5o                        0x0000557b62d06692 <unavailable> + 5778

    5    libc.so.6                          0x00002b5e0ee3c460 __libc_start_main +
    245

    6    tmpc5_w5p5o                        0x0000557b62d06259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i) * Int(i)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpn0a5uc5w/tmpn0a5uc5w.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b826e7ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b826e4e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b826e4e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b826e4e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0a5uc5w                        0x00005632a9b3e692 <unavailable> + 5778

    5    libc.so.6                          0x00002b826e9d8460 __libc_start_main +
    245

    6    tmpn0a5uc5w                        0x00005632a9b3e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbb57a275.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(i) * Int(i)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmpn0a5uc5w/tmpn0a5uc5w.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b826e7ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b826e4e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b826e4e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b826e4e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0a5uc5w                        0x00005632a9b3e692 <unavailable> + 5778

    5    libc.so.6                          0x00002b826e9d8460 __libc_start_main +
    245

    6    tmpn0a5uc5w                        0x00005632a9b3e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n\
    \            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9d41otdy.swift:8:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(num) * Int(num)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp8zpk77qm/tmp8zpk77qm.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6daecb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dae9abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dae9ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dae9aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zpk77qm                        0x000055a200355692 <unavailable> + 5778

    5    libc.so.6                          0x00002b6daeea0460 __libc_start_main +
    245

    6    tmp8zpk77qm                        0x000055a200355259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n\
    \            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9d41otdy.swift:8:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbb57a275.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n\
    \            sum += Int(num * num)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9d41otdy.swift:8:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 {\n        \
    \    sum += Int(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp7bwvkk6u/tmp7bwvkk6u.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3640fc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3640cb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3640cb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3640cb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7bwvkk6u                        0x000055997573d5e2 <unavailable> + 5602

    5    libc.so.6                          0x00002b36411ae460 __libc_start_main +
    245

    6    tmp7bwvkk6u                        0x000055997573d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbb57a275.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// If the input list is empty, return 0.\nfunc double_the_difference(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n   \
    \         sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbb57a275.swift:8:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659978502
