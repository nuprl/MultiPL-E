language: swift
name: HumanEval_5_intersperse
results:
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n    \
    \    result.append(numbers[i])\n        if i < numbers.count - 1 {\n         \
    \   result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (i, n) in numbers.enumerated()\
    \ {\n        result.append(n)\n        if i < numbers.count - 1 {\n          \
    \  result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    if numbers.count <= 1 {\n        return numbers\n    } else {\n\
    \        return [numbers[0], delimeter] + intersperse(Array(numbers[1..<numbers.count]),\
    \ delimeter: delimeter)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpt9euds8a.swift:7:53: error: missing argument label 'numbers:' in\
    \ call\n        return [numbers[0], delimeter] + intersperse(Array(numbers[1..<numbers.count]),\
    \ delimeter: delimeter)\n                                                    ^\n\
    \                                                     numbers: \n"
  stdout: ''
  timestamp: 1659978907
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n    \
    \    result.append(numbers[i])\n        if i != numbers.count - 1 {\n        \
    \    result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n    \
    \    result.append(numbers[i])\n        if i < numbers.count - 1 {\n         \
    \   result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (i, n) in numbers.enumerated()\
    \ {\n        result.append(n)\n        if i < numbers.count - 1 {\n          \
    \  result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n    \
    \    result.append(numbers[i])\n        if i < numbers.count - 1 {\n         \
    \   result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (i, number) in numbers.enumerate()\
    \ {\n        result.append(number)\n        if i < numbers.count - 1 {\n     \
    \       result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp5ta9yx43.swift:5:32: error: value of type '[Int]' has no member\
    \ 'enumerate'\n    for (i, number) in numbers.enumerate() {\n                \
    \       ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978907
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in 0..<numbers.count-1 {\n  \
    \      result.append(numbers[i])\n        result.append(delimeter)\n    }\n  \
    \  result.append(numbers[numbers.count-1])\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7) == []\
    \ as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) == [5, 8,\
    \ 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2) == [2,\
    \ 2, 2, 2, 2])"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b17dec06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17de8fd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b17de8fd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b17de8fd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b17de8fcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp5s1xnmpa                        0x00005602087e5a16 <unavailable> + 6678

    6    tmp5s1xnmpa                        0x00005602087e5552 <unavailable> + 5458

    7    libc.so.6                          0x00002b17dedf2460 __libc_start_main +
    245

    8    tmp5s1xnmpa                        0x00005602087e5259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n    \
    \    result.append(numbers[i])\n        if i < numbers.count - 1 {\n         \
    \   result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n    \
    \    result.append(numbers[i])\n        if i < numbers.count - 1 {\n         \
    \   result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n    \
    \    result.append(numbers[i])\n        if i < numbers.count - 1 {\n         \
    \   result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (i, number) in numbers.enumerate()\
    \ {\n        result.append(number)\n        if i < numbers.count - 1 {\n     \
    \       result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp5ta9yx43.swift:5:32: error: value of type '[Int]' has no member\
    \ 'enumerate'\n    for (i, number) in numbers.enumerate() {\n                \
    \       ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978907
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n    \
    \    result.append(numbers[i])\n        if i < numbers.count - 1 {\n         \
    \   result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, element) in numbers.enumerated()\
    \ {\n        result.append(element)\n        if index < numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    if numbers.count == 0 {\n        return []\n    } else if numbers.count\
    \ == 1 {\n        return numbers\n    } else {\n        return [numbers[0], delimeter]\
    \ + intersperse(Array(numbers[1..<numbers.count]), delimeter: delimeter)\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(intersperse(numbers: [] as [Int],\
    \ delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter:\
    \ 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter:\
    \ 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpg83tj8mq.swift:9:53: error: missing argument label 'numbers:' in\
    \ call\n        return [numbers[0], delimeter] + intersperse(Array(numbers[1..<numbers.count]),\
    \ delimeter: delimeter)\n                                                    ^\n\
    \                                                     numbers: \n"
  stdout: ''
  timestamp: 1659978907
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result = [Int]()\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n    \
    \    result.append(numbers[i])\n        if i != numbers.count - 1 {\n        \
    \    result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for number in numbers {\n        result.append(number)\n\
    \        result.append(delimeter)\n    }\n    result.removeLast()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:870: Fatal error: Can''t remove
    last element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002b48a9dfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48a9af3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b48a9af3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b48a9af313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b48a9af2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b48a9bf4c1d <unavailable> + 2489373

    6    tmpgv1u8c__                        0x0000561676330a72 <unavailable> + 6770

    7    tmpgv1u8c__                        0x0000561676330572 <unavailable> + 5490

    8    libc.so.6                          0x00002b48a9fe8460 __libc_start_main +
    245

    9    tmpgv1u8c__                        0x0000561676330279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result = [Int]()\n    for (i, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if i < numbers.count - 1 {\n     \
    \       result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n    \
    \    result.append(numbers[i])\n        if i < numbers.count - 1 {\n         \
    \   result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n    \
    \    result.append(numbers[i])\n        if i < numbers.count - 1 {\n         \
    \   result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n    \
    \    result.append(numbers[i])\n        if i != numbers.count - 1 {\n        \
    \    result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result = [Int]()\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    if numbers.count == 0 {\n        return []\n    } else if numbers.count\
    \ == 1 {\n        return numbers\n    } else {\n        return [numbers[0], delimeter]\
    \ + intersperse(Array(numbers[1..<numbers.count]), delimeter: delimeter)\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(intersperse(numbers: [] as [Int],\
    \ delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter:\
    \ 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter:\
    \ 2) == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpg83tj8mq.swift:9:53: error: missing argument label 'numbers:' in\
    \ call\n        return [numbers[0], delimeter] + intersperse(Array(numbers[1..<numbers.count]),\
    \ delimeter: delimeter)\n                                                    ^\n\
    \                                                     numbers: \n"
  stdout: ''
  timestamp: 1659978907
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result = [Int]()\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    if numbers.count <= 1 {\n        return numbers\n    }\n    var\
    \ result = [Int]()\n    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n\
    \        result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n    \
    \    result.append(numbers[i])\n        if i < numbers.count - 1 {\n         \
    \   result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n    \
    \    result.append(numbers[i])\n        if i < numbers.count - 1 {\n         \
    \   result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n    \
    \    result.append(numbers[i])\n        if i != numbers.count - 1 {\n        \
    \    result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (i, n) in numbers.enumerated()\
    \ {\n        result.append(n)\n        if i < numbers.count - 1 {\n          \
    \  result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (i, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if i < numbers.count - 1 {\n     \
    \       result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n    \
    \    result.append(numbers[i])\n        if i < numbers.count - 1 {\n         \
    \   result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    if numbers.count <= 1 {\n        return numbers\n    }\n    var\
    \ result = [Int]()\n    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n\
    \        result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for number in numbers {\n        result.append(number)\n\
    \        result.append(delimeter)\n    }\n    result.removeLast()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:870: Fatal error: Can''t remove
    last element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002b48a9dfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48a9af3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b48a9af3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b48a9af313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b48a9af2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b48a9bf4c1d <unavailable> + 2489373

    6    tmpgv1u8c__                        0x0000561676330a72 <unavailable> + 6770

    7    tmpgv1u8c__                        0x0000561676330572 <unavailable> + 5490

    8    libc.so.6                          0x00002b48a9fe8460 __libc_start_main +
    245

    9    tmpgv1u8c__                        0x0000561676330279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (i, n) in numbers.enumerated()\
    \ {\n        result.append(n)\n        if i < numbers.count - 1 {\n          \
    \  result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result = [Int]()\n    for (i, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if i != numbers.count - 1 {\n    \
    \        result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (i, number) in numbers.enumerate()\
    \ {\n        result.append(number)\n        if i < numbers.count - 1 {\n     \
    \       result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp5ta9yx43.swift:5:32: error: value of type '[Int]' has no member\
    \ 'enumerate'\n    for (i, number) in numbers.enumerate() {\n                \
    \       ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978907
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (i, number) in numbers.enumerate()\
    \ {\n        result.append(number)\n        if i < numbers.count - 1 {\n     \
    \       result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp5ta9yx43.swift:5:32: error: value of type '[Int]' has no member\
    \ 'enumerate'\n    for (i, number) in numbers.enumerate() {\n                \
    \       ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978907
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n    \
    \    result.append(numbers[i])\n        if i < numbers.count - 1 {\n         \
    \   result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n    \
    \    result.append(numbers[i])\n        if i != numbers.count - 1 {\n        \
    \    result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in 0..<numbers.count {\n      \
    \  result.append(numbers[i])\n        if i < numbers.count - 1 {\n           \
    \ result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7) == []\
    \ as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) == [5, 8,\
    \ 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2) == [2,\
    \ 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result = [Int]()\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (i, number) in numbers.enumerate()\
    \ {\n        result.append(number)\n        if i < numbers.count - 1 {\n     \
    \       result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp5ta9yx43.swift:5:32: error: value of type '[Int]' has no member\
    \ 'enumerate'\n    for (i, number) in numbers.enumerate() {\n                \
    \       ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978907
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in 0..<numbers.count {\n      \
    \  result.append(numbers[i])\n        if i != numbers.count - 1 {\n          \
    \  result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    guard let first = numbers.first else { return [] }\n    return\
    \ [first] + numbers.dropFirst().flatMap { [delimeter, $0] }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7) == []\
    \ as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) == [5, 8,\
    \ 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2) == [2,\
    \ 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n    \
    \    result.append(numbers[i])\n        if i != numbers.count - 1 {\n        \
    \    result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n    \
    \    result.append(numbers[i])\n        if i != numbers.count - 1 {\n        \
    \    result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result = [Int]()\n    for (i, n) in numbers.enumerated() {\n\
    \        result.append(n)\n        if i < numbers.count - 1 {\n            result.append(delimeter)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for number in numbers {\n        result.append(number)\n\
    \        result.append(delimeter)\n    }\n    result.removeLast()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:870: Fatal error: Can''t remove
    last element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002b48a9dfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48a9af3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b48a9af3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b48a9af313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b48a9af2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b48a9bf4c1d <unavailable> + 2489373

    6    tmpgv1u8c__                        0x0000561676330a72 <unavailable> + 6770

    7    tmpgv1u8c__                        0x0000561676330572 <unavailable> + 5490

    8    libc.so.6                          0x00002b48a9fe8460 __libc_start_main +
    245

    9    tmpgv1u8c__                        0x0000561676330279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (i, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if i < numbers.count - 1 {\n     \
    \       result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n    \
    \    result.append(numbers[i])\n        if i < numbers.count - 1 {\n         \
    \   result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (i, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if i < numbers.count - 1 {\n     \
    \       result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    if numbers.count <= 1 {\n        return numbers\n    }\n    var\
    \ result = [Int]()\n    for i in 0..<numbers.count-1 {\n        result.append(numbers[i])\n\
    \        result.append(delimeter)\n    }\n    result.append(numbers[numbers.count-1])\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    var first = true\n    for number in\
    \ numbers {\n        if first {\n            first = false\n        } else {\n\
    \            result.append(delimeter)\n        }\n        result.append(number)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result = [Int]()\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (i, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if i < numbers.count - 1 {\n     \
    \       result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result = [Int]()\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (i, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if i != numbers.count - 1 {\n    \
    \        result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result = [Int]()\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (i, n) in numbers.enumerated()\
    \ {\n        result.append(n)\n        if i < numbers.count - 1 {\n          \
    \  result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n    \
    \    result.append(numbers[i])\n        if i != numbers.count - 1 {\n        \
    \    result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n    \
    \    result.append(numbers[i])\n        if i < numbers.count - 1 {\n         \
    \   result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    if numbers.count <= 1 {\n        return numbers\n    }\n    var\
    \ result = [Int]()\n    for i in 0..<numbers.count-1 {\n        result.append(numbers[i])\n\
    \        result.append(delimeter)\n    }\n    result.append(numbers[numbers.count-1])\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n    \
    \    result.append(numbers[i])\n        if i != numbers.count - 1 {\n        \
    \    result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n    \
    \    if i > 0 {\n            result.append(delimeter)\n        }\n        result.append(numbers[i])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result = [Int]()\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (i, n) in numbers.enumerated()\
    \ {\n        result.append(n)\n        if i < numbers.count - 1 {\n          \
    \  result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (i, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if i < numbers.count - 1 {\n     \
    \       result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (i, n) in numbers.enumerated()\
    \ {\n        result.append(n)\n        if i < numbers.count - 1 {\n          \
    \  result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    if numbers.count <= 1 {\n        return numbers\n    }\n    return\
    \ [numbers[0], delimeter] + intersperse(numbers: Array(numbers[1..<numbers.count]),\
    \ delimeter: delimeter)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfunc intersperse(numbers: [Int], delimeter: Int) ->\
    \ [Int] {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
