language: swift
name: HumanEval_102_choose_num
results:
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 {\n        return\
    \ x\n    } else if x + 1 == y {\n        return -1\n    } else {\n        return\
    \ choose_num(x: x + 1, y: y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpahhk_ahw/tmpahhk_ahw.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fb75d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fb72ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fb72cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fb72cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpahhk_ahw                        0x00005614c702724d <unavailable> + 4685

    5    libc.so.6                          0x00002b7fb77c1460 __libc_start_main +
    245

    6    tmpahhk_ahw                        0x00005614c7026ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return -1\n\
    \    }\n    for i in stride(from: y, through: x, by: -2) {\n        return i\n\
    \    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp7toq83yl/tmp7toq83yl.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b02a69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b02760b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b02760988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b0275f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7toq83yl                        0x000055fd3800f3ed <unavailable> + 5101

    5    libc.so.6                          0x00002b7b02c55460 __libc_start_main +
    245

    6    tmp7toq83yl                        0x000055fd3800f099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return -1\n\
    \    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x\
    \ + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpssf6ke9j.swift:13:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659978902
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 {\n        return\
    \ x\n    } else if x + 1 == y {\n        return -1\n    } else {\n        return\
    \ choose_num(x: x + 1, y: y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpahhk_ahw/tmpahhk_ahw.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fb75d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fb72ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fb72cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fb72cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpahhk_ahw                        0x00005614c702724d <unavailable> + 4685

    5    libc.so.6                          0x00002b7fb77c1460 __libc_start_main +
    245

    6    tmpahhk_ahw                        0x00005614c7026ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 {\n        return\
    \ x\n    } else if x + 1 == y {\n        return -1\n    } else {\n        return\
    \ choose_num(x: x + 1, y: y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpahhk_ahw/tmpahhk_ahw.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fb75d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fb72ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fb72cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fb72cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpahhk_ahw                        0x00005614c702724d <unavailable> + 4685

    5    libc.so.6                          0x00002b7fb77c1460 __libc_start_main +
    245

    6    tmpahhk_ahw                        0x00005614c7026ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var num = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            num = i\n        }\n    }\n    return\
    \ num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f09239c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f08f30561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7f08f30286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7f08f3013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7f08f2fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmphp6itomo                        0x000055ea6ccc47f0 <unavailable> + 6128

    6    tmphp6itomo                        0x000055ea6ccc4350 <unavailable> + 4944

    7    libc.so.6                          0x00002b7f09425460 __libc_start_main +
    245

    8    tmphp6itomo                        0x000055ea6ccc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            return i\n        }\n    }\n    return -1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpxulsuhsr/tmpxulsuhsr.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada156b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada153adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada153ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada153ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxulsuhsr                        0x00005570b543b33d <unavailable> + 4925

    5    libc.so.6                          0x00002ada158a2460 __libc_start_main +
    245

    6    tmpxulsuhsr                        0x00005570b543afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return -1\n\
    \    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x\
    \ + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpssf6ke9j.swift:13:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659978902
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return -1\n\
    \    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x\
    \ + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpssf6ke9j.swift:13:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659978902
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var num = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            num = i\n        }\n    }\n    return\
    \ num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f09239c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f08f30561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7f08f30286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7f08f3013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7f08f2fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmphp6itomo                        0x000055ea6ccc47f0 <unavailable> + 6128

    6    tmphp6itomo                        0x000055ea6ccc4350 <unavailable> + 4944

    7    libc.so.6                          0x00002b7f09425460 __libc_start_main +
    245

    8    tmphp6itomo                        0x000055ea6ccc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 {\n        return\
    \ x\n    } else if x + 1 == y {\n        return -1\n    } else {\n        return\
    \ choose_num(x: x + 1, y: y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpahhk_ahw/tmpahhk_ahw.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fb75d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fb72ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fb72cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fb72cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpahhk_ahw                        0x00005614c702724d <unavailable> + 4685

    5    libc.so.6                          0x00002b7fb77c1460 __libc_start_main +
    245

    6    tmpahhk_ahw                        0x00005614c7026ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: 0
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return -1\n\
    \    }\n    var result = y\n    while result >= x {\n        if result % 2 ==\
    \ 0 {\n            return result\n        }\n        result -= 1\n    }\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return -1\n\
    \    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x\
    \ + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpssf6ke9j.swift:13:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659978902
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var max_even = -1\n    for i in\
    \ x...y {\n        if i % 2 == 0 {\n            max_even = i\n        }\n    }\n\
    \    return max_even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b788f58dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b788f284561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b788f284286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b788f28413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b788f283bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxley6vbe                        0x0000564ef53917f0 <unavailable> + 6128

    6    tmpxley6vbe                        0x0000564ef5391350 <unavailable> + 4944

    7    libc.so.6                          0x00002b788f779460 __libc_start_main +
    245

    8    tmpxley6vbe                        0x0000564ef5390fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return -1\n\
    \    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x\
    \ + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpssf6ke9j.swift:13:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659978902
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return -1\n\
    \    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x\
    \ + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpssf6ke9j.swift:13:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659978902
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return -1\n\
    \    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x\
    \ + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpssf6ke9j.swift:13:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659978902
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return -1\n\
    \    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x\
    \ + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpssf6ke9j.swift:13:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659978902
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return -1\n\
    \    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x\
    \ + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpssf6ke9j.swift:13:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659978902
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            return i\n        }\n    }\n    return -1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpxulsuhsr/tmpxulsuhsr.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada156b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada153adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada153ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada153ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxulsuhsr                        0x00005570b543b33d <unavailable> + 4925

    5    libc.so.6                          0x00002ada158a2460 __libc_start_main +
    245

    6    tmpxulsuhsr                        0x00005570b543afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var num = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            num = i\n        }\n    }\n    return\
    \ num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f09239c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f08f30561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7f08f30286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7f08f3013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7f08f2fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmphp6itomo                        0x000055ea6ccc47f0 <unavailable> + 6128

    6    tmphp6itomo                        0x000055ea6ccc4350 <unavailable> + 4944

    7    libc.so.6                          0x00002b7f09425460 __libc_start_main +
    245

    8    tmphp6itomo                        0x000055ea6ccc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 {\n        return\
    \ x\n    } else if x + 1 == y {\n        return -1\n    } else {\n        return\
    \ choose_num(x + 1, y: y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpxsxj498c.swift:12:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659978902
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 {\n        return\
    \ x\n    } else if x + 1 <= y {\n        return x + 1\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp1xm7yji1/tmp1xm7yji1.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ba6679c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ba6370b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ba6370988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ba636f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1xm7yji1                        0x0000559024dfc24d <unavailable> + 4685

    5    libc.so.6                          0x00002b5ba6865460 __libc_start_main +
    245

    6    tmp1xm7yji1                        0x0000559024dfbef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 {\n        return\
    \ x\n    } else if x + 1 == y {\n        return -1\n    } else {\n        return\
    \ choose_num(x: x + 1, y: y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpahhk_ahw/tmpahhk_ahw.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fb75d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fb72ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fb72cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fb72cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpahhk_ahw                        0x00005614c702724d <unavailable> + 4685

    5    libc.so.6                          0x00002b7fb77c1460 __libc_start_main +
    245

    6    tmpahhk_ahw                        0x00005614c7026ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return -1\n\
    \    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x\
    \ + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpssf6ke9j.swift:13:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659978902
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return -1\n\
    \    }\n    var result = x\n    while result <= y {\n        if result % 2 ==\
    \ 0 {\n            return result\n        }\n        result += 1\n    }\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpyyrbbjxm/tmpyyrbbjxm.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada7bda4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada7ba9bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada7ba9b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada7ba9a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyyrbbjxm                        0x00005595f9a6424d <unavailable> + 4685

    5    libc.so.6                          0x00002ada7bf90460 __libc_start_main +
    245

    6    tmpyyrbbjxm                        0x00005595f9a63ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return -1\n\
    \    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x\
    \ + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpssf6ke9j.swift:13:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659978902
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return -1\n\
    \    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x\
    \ + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpssf6ke9j.swift:13:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659978902
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return -1\n\
    \    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x\
    \ + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpssf6ke9j.swift:13:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659978902
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 {\n        return\
    \ x\n    } else if x + 1 == y {\n        return -1\n    } else {\n        return\
    \ choose_num(x: x + 1, y: y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpahhk_ahw/tmpahhk_ahw.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fb75d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fb72ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fb72cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fb72cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpahhk_ahw                        0x00005614c702724d <unavailable> + 4685

    5    libc.so.6                          0x00002b7fb77c1460 __libc_start_main +
    245

    6    tmpahhk_ahw                        0x00005614c7026ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 {\n        return\
    \ x\n    } else if x + 1 == y {\n        return -1\n    } else {\n        return\
    \ choose_num(x: x + 1, y: y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpahhk_ahw/tmpahhk_ahw.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fb75d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fb72ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fb72cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fb72cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpahhk_ahw                        0x00005614c702724d <unavailable> + 4685

    5    libc.so.6                          0x00002b7fb77c1460 __libc_start_main +
    245

    6    tmpahhk_ahw                        0x00005614c7026ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: 0
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return -1\n\
    \    }\n    var num = y\n    while num >= x {\n        if num % 2 == 0 {\n   \
    \         return num\n        }\n        num -= 1\n    }\n    return -1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x % 2 ==\
    \ 0 {\n        result = x\n    } else {\n        result = x + 1\n    }\n    if\
    \ result > y {\n        return -1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpcpstifwd/tmpcpstifwd.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4dabc59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dab950b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dab950988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dab94f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpstifwd                        0x000055a50fe6b24d <unavailable> + 4685

    5    libc.so.6                          0x00002b4dabe45460 __libc_start_main +
    245

    6    tmpcpstifwd                        0x000055a50fe6aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return -1\n\
    \    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x\
    \ + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpssf6ke9j.swift:13:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659978902
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 {\n        return\
    \ x\n    } else if x + 1 == y {\n        return -1\n    } else {\n        return\
    \ choose_num(x + 1, y: y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpxsxj498c.swift:12:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659978902
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: 0
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return -1\n\
    \    }\n    var result = -1\n    for i in x...y {\n        if i % 2 == 0 {\n \
    \           result = i\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 {\n        return\
    \ x\n    } else if y % 2 == 0 {\n        return y\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmptrspg_yw/tmptrspg_yw.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3312532c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3312229b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3312229988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33122287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptrspg_yw                        0x00005629ae5cd24d <unavailable> + 4685

    5    libc.so.6                          0x00002b331271e460 __libc_start_main +
    245

    6    tmptrspg_yw                        0x00005629ae5ccef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var num = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            num = i\n        }\n    }\n    return\
    \ num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f09239c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f08f30561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7f08f30286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7f08f3013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7f08f2fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmphp6itomo                        0x000055ea6ccc47f0 <unavailable> + 6128

    6    tmphp6itomo                        0x000055ea6ccc4350 <unavailable> + 4944

    7    libc.so.6                          0x00002b7f09425460 __libc_start_main +
    245

    8    tmphp6itomo                        0x000055ea6ccc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return -1\n\
    \    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x\
    \ + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpssf6ke9j.swift:13:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659978902
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return -1\n\
    \    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x\
    \ + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpssf6ke9j.swift:13:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659978902
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return -1\n\
    \    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x\
    \ + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpssf6ke9j.swift:13:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659978902
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: 0
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return -1\n\
    \    }\n    var result = -1\n    for i in x...y {\n        if i % 2 == 0 {\n \
    \           result = i\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var maxEven = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            maxEven = i\n        }\n    }\n    return\
    \ maxEven\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aaee19f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaee16e9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aaee16e9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aaee16e913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aaee16e8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpu3w53l6v                        0x000056180f4d67f0 <unavailable> + 6128

    6    tmpu3w53l6v                        0x000056180f4d6350 <unavailable> + 4944

    7    libc.so.6                          0x00002aaee1bde460 __libc_start_main +
    245

    8    tmpu3w53l6v                        0x000056180f4d5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 {\n        return\
    \ x\n    } else if x + 1 <= y {\n        return x + 1\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp1xm7yji1/tmp1xm7yji1.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ba6679c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ba6370b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ba6370988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ba636f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1xm7yji1                        0x0000559024dfc24d <unavailable> + 4685

    5    libc.so.6                          0x00002b5ba6865460 __libc_start_main +
    245

    6    tmp1xm7yji1                        0x0000559024dfbef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 {\n        return\
    \ x\n    } else if y % 2 == 0 {\n        return y\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmptrspg_yw/tmptrspg_yw.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3312532c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3312229b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3312229988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33122287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptrspg_yw                        0x00005629ae5cd24d <unavailable> + 4685

    5    libc.so.6                          0x00002b331271e460 __libc_start_main +
    245

    6    tmptrspg_yw                        0x00005629ae5ccef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return -1\n\
    \    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x\
    \ + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpssf6ke9j.swift:13:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659978902
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var num = -1\n    if x % 2 == 0\
    \ {\n        num = x\n    } else {\n        num = x + 1\n    }\n    for i in num...y\
    \ {\n        if i % 2 == 0 {\n            num = i\n        }\n    }\n    return\
    \ num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b6781294c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6780f8b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6780f8b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6780f8b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6780f8abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp9cfjgk5d                        0x00005639afe928c9 <unavailable> + 6345

    6    tmp9cfjgk5d                        0x00005639afe92350 <unavailable> + 4944

    7    libc.so.6                          0x00002b6781480460 __libc_start_main +
    245

    8    tmp9cfjgk5d                        0x00005639afe91fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var maxEven = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            maxEven = i\n        }\n    }\n    return\
    \ maxEven\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aaee19f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaee16e9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aaee16e9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aaee16e913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aaee16e8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpu3w53l6v                        0x000056180f4d67f0 <unavailable> + 6128

    6    tmpu3w53l6v                        0x000056180f4d6350 <unavailable> + 4944

    7    libc.so.6                          0x00002aaee1bde460 __libc_start_main +
    245

    8    tmpu3w53l6v                        0x000056180f4d5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return -1\n\
    \    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x\
    \ + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpssf6ke9j.swift:13:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659978902
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: 0
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return -1\n\
    \    }\n    var maxEven = -1\n    for i in x...y {\n        if i % 2 == 0 {\n\
    \            maxEven = i\n        }\n    }\n    return maxEven\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return -1\n\
    \    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n  \
    \      return y\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmppw4bt45g/tmppw4bt45g.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51082ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5107fc3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5107fc3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5107fc27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppw4bt45g                        0x000056463704124d <unavailable> + 4685

    5    libc.so.6                          0x00002b51084b8460 __libc_start_main +
    245

    6    tmppw4bt45g                        0x0000564637040ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 {\n        return\
    \ x\n    } else if x + 1 <= y {\n        return x + 1\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp1xm7yji1/tmp1xm7yji1.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ba6679c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ba6370b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ba6370988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ba636f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1xm7yji1                        0x0000559024dfc24d <unavailable> + 4685

    5    libc.so.6                          0x00002b5ba6865460 __libc_start_main +
    245

    6    tmp1xm7yji1                        0x0000559024dfbef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var num = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            num = i\n        }\n    }\n    return\
    \ num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f09239c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f08f30561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7f08f30286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7f08f3013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7f08f2fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmphp6itomo                        0x000055ea6ccc47f0 <unavailable> + 6128

    6    tmphp6itomo                        0x000055ea6ccc4350 <unavailable> + 4944

    7    libc.so.6                          0x00002b7f09425460 __libc_start_main +
    245

    8    tmphp6itomo                        0x000055ea6ccc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var num = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            num = i\n        }\n    }\n    return\
    \ num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f09239c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f08f30561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7f08f30286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7f08f3013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7f08f2fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmphp6itomo                        0x000055ea6ccc47f0 <unavailable> + 6128

    6    tmphp6itomo                        0x000055ea6ccc4350 <unavailable> + 4944

    7    libc.so.6                          0x00002b7f09425460 __libc_start_main +
    245

    8    tmphp6itomo                        0x000055ea6ccc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abd00755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd0044c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd0044c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd0044c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd0044bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv4utqpa6                        0x000055a54ed677f0 <unavailable> + 6128

    6    tmpv4utqpa6                        0x000055a54ed67350 <unavailable> + 4944

    7    libc.so.6                          0x00002abd00941460 __libc_start_main +
    245

    8    tmpv4utqpa6                        0x000055a54ed66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978903
