language: swift
name: HumanEval_114_minSubArraySum
results:
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums {\n\
    \        currentSum += num\n        minSum = min(minSum, currentSum)\n       \
    \ currentSum = max(currentSum, 0)\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpubroasav/tmpubroasav.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55335cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55332c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55332c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55332c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubroasav                        0x00005637b00c757a <unavailable> + 5498

    5    libc.so.6                          0x00002b55337b6460 __libc_start_main +
    245

    6    tmpubroasav                        0x00005637b00c71c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for i in 0..<nums.count {\n\
    \        sum += nums[i]\n        minSum = min(minSum, sum)\n        if sum > 0\
    \ {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for i in 0..<nums.count {\n\
    \        sum += nums[i]\n        minSum = min(minSum, sum)\n        if sum > 0\
    \ {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums {\n\
    \        currentSum += num\n        minSum = min(minSum, currentSum)\n       \
    \ currentSum = max(currentSum, 0)\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpubroasav/tmpubroasav.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55335cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55332c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55332c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55332c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubroasav                        0x00005637b00c757a <unavailable> + 5498

    5    libc.so.6                          0x00002b55337b6460 __libc_start_main +
    245

    6    tmpubroasav                        0x00005637b00c71c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    guard nums.count > 0 else { return 0 }\n    var minSum = nums[0]\n  \
    \  var currSum = nums[0]\n    for i in 1..<nums.count {\n        currSum = min(nums[i],\
    \ currSum + nums[i])\n        minSum = min(minSum, currSum)\n    }\n    return\
    \ minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    guard nums.count > 0 else { return 0 }\n    var minSum = Int.max\n  \
    \  var sum = 0\n    for num in nums {\n        sum += num\n        minSum = min(minSum,\
    \ sum)\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums {\n\
    \        currentSum += num\n        minSum = min(minSum, currentSum)\n       \
    \ currentSum = min(currentSum, 0)\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums {\n\
    \        currentSum += num\n        minSum = min(minSum, currentSum)\n       \
    \ currentSum = max(currentSum, 0)\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpubroasav/tmpubroasav.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55335cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55332c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55332c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55332c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubroasav                        0x00005637b00c757a <unavailable> + 5498

    5    libc.so.6                          0x00002b55337b6460 __libc_start_main +
    245

    6    tmpubroasav                        0x00005637b00c71c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums {\n\
    \        currentSum += num\n        minSum = min(minSum, currentSum)\n       \
    \ currentSum = max(currentSum, 0)\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpubroasav/tmpubroasav.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55335cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55332c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55332c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55332c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubroasav                        0x00005637b00c757a <unavailable> + 5498

    5    libc.so.6                          0x00002b55337b6460 __libc_start_main +
    245

    6    tmpubroasav                        0x00005637b00c71c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    guard nums.count > 0 else { return 0 }\n    var minSum = nums[0]\n  \
    \  var currentSum = nums[0]\n    for i in 1..<nums.count {\n        currentSum\
    \ = min(currentSum + nums[i], nums[i])\n        minSum = min(minSum, currentSum)\n\
    \    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for i in 0..<nums.count {\n\
    \        sum += nums[i]\n        minSum = min(minSum, sum)\n        if sum > 0\
    \ {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums {\n\
    \        currentSum += num\n        minSum = min(minSum, currentSum)\n       \
    \ currentSum = max(currentSum, 0)\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpubroasav/tmpubroasav.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55335cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55332c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55332c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55332c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubroasav                        0x00005637b00c757a <unavailable> + 5498

    5    libc.so.6                          0x00002b55337b6460 __libc_start_main +
    245

    6    tmpubroasav                        0x00005637b00c71c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums {\n\
    \        currentSum += num\n        minSum = min(minSum, currentSum)\n       \
    \ currentSum = max(currentSum, 0)\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpubroasav/tmpubroasav.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55335cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55332c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55332c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55332c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubroasav                        0x00005637b00c757a <unavailable> + 5498

    5    libc.so.6                          0x00002b55337b6460 __libc_start_main +
    245

    6    tmpubroasav                        0x00005637b00c71c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums {\n\
    \        currentSum += num\n        minSum = min(minSum, currentSum)\n       \
    \ currentSum = max(currentSum, 0)\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpubroasav/tmpubroasav.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55335cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55332c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55332c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55332c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubroasav                        0x00005637b00c757a <unavailable> + 5498

    5    libc.so.6                          0x00002b55337b6460 __libc_start_main +
    245

    6    tmpubroasav                        0x00005637b00c71c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums {\n\
    \        currentSum += num\n        minSum = min(minSum, currentSum)\n       \
    \ currentSum = max(currentSum, 0)\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpubroasav/tmpubroasav.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55335cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55332c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55332c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55332c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubroasav                        0x00005637b00c757a <unavailable> + 5498

    5    libc.so.6                          0x00002b55337b6460 __libc_start_main +
    245

    6    tmpubroasav                        0x00005637b00c71c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var currSum = 0\n    for num in nums {\n  \
    \      currSum += num\n        minSum = min(minSum, currSum)\n        currSum\
    \ = min(currSum, 0)\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n      \
    \  sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n     \
    \       sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014047
