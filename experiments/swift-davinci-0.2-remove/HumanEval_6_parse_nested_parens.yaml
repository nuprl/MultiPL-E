name: HumanEval_6_parse_nested_parens
language: swift
prompt: "\n/// Input to this function is a string represented multiple groups for\
  \ nested parentheses separated by spaces.\n/// For each of the group, output the\
  \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
  \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
  \ -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()())\
  \ ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
  \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
  \ \"(()(())((())))\") == [4])"
completions: ["    var paren_stack = Stack<Character>()\n    var max_depth = 0\n \
    \   var depths = [Int]()\n    var depth = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            paren_stack.push(char)\n            depth\
    \ += 1\n            if depth > max_depth {\n                max_depth = depth\n\
    \            }\n        } else if char == \")\" {\n            paren_stack.pop()\n\
    \            depths.append(depth)\n            depth -= 1\n        }\n    }\n\
    \    return depths", "    var max_nested_levels = [Int]()\n    let paren_groups\
    \ = paren_string.components(separatedBy: \" \")\n    for paren_group in paren_groups\
    \ {\n        var current_nested_level = 0\n        var max_nested_level = 0\n\
    \        for char in paren_group {\n            if char == \"(\" {\n         \
    \       current_nested_level += 1\n            } else if char == \")\" {\n   \
    \             current_nested_level -= 1\n            }\n            if current_nested_level\
    \ > max_nested_level {\n                max_nested_level = current_nested_level\n\
    \            }\n        }\n        max_nested_levels.append(max_nested_level)\n\
    \    }\n    return max_nested_levels", "    var max_depth = 0\n    var depth =\
    \ 0\n    var result = [Int]()\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            depth += 1\n            max_depth = max(max_depth, depth)\n\
    \        } else if char == \")\" {\n            depth -= 1\n        } else if\
    \ char == \" \" {\n            result.append(max_depth)\n            max_depth\
    \ = 0\n            depth = 0\n        }\n    }\n    result.append(max_depth)\n\
    \    return result", "    var max_depth = 0\n    var depth = 0\n    var result\
    \ = [Int]()\n    for char in paren_string {\n        if char == \"(\" {\n    \
    \        depth += 1\n            max_depth = max(max_depth, depth)\n        }\
    \ else if char == \")\" {\n            depth -= 1\n        } else if char == \"\
    \ \" {\n            result.append(max_depth)\n            max_depth = 0\n    \
    \        depth = 0\n        }\n    }\n    result.append(max_depth)\n    return\
    \ result", "    var result = [Int]()\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        var count = 0\n     \
    \   var max_count = 0\n        for paren in paren_group {\n            if paren\
    \ == \"(\" {\n                count += 1\n            } else if paren == \")\"\
    \ {\n                count -= 1\n            }\n            if count > max_count\
    \ {\n                max_count = count\n            }\n        }\n        result.append(max_count)\n\
    \    }\n    return result", "    var paren_stack = Stack<Character>()\n    var\
    \ max_depth = 0\n    var depth = 0\n    var max_depths = [Int]()\n    \n    for\
    \ char in paren_string {\n        if char == \"(\" {\n            paren_stack.push(char)\n\
    \            depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == \")\" {\n            if paren_stack.isEmpty()\
    \ {\n                max_depths.append(max_depth)\n                max_depth =\
    \ 0\n                depth = 0\n            } else {\n                paren_stack.pop()\n\
    \                depth -= 1\n            }\n        }\n    }\n    return max_depths",
  "    var max_nesting = 0\n    var current_nesting = 0\n    var max_nesting_list\
    \ = [Int]()\n    for char in paren_string {\n        if char == \"(\" {\n    \
    \        current_nesting += 1\n            if current_nesting > max_nesting {\n\
    \                max_nesting = current_nesting\n            }\n        } else\
    \ if char == \")\" {\n            current_nesting -= 1\n            if current_nesting\
    \ == 0 {\n                max_nesting_list.append(max_nesting)\n             \
    \   max_nesting = 0\n            }\n        }\n    }\n    return max_nesting_list",
  "    var paren_stack = Stack<Character>()\n    var max_depth = 0\n    var depth\
    \ = 0\n    var max_depths = [Int]()\n    \n    for char in paren_string {\n  \
    \      if char == \"(\" {\n            paren_stack.push(char)\n            depth\
    \ += 1\n            if depth > max_depth {\n                max_depth = depth\n\
    \            }\n        } else if char == \")\" {\n            paren_stack.pop()\n\
    \            depth -= 1\n            if paren_stack.isEmpty() {\n            \
    \    max_depths.append(max_depth)\n                max_depth = 0\n           \
    \     depth = 0\n            }\n        }\n    }\n    \n    return max_depths",
  "    let groups = paren_string.components(separatedBy: \" \")\n    var result =\
    \ [Int]()\n    for group in groups {\n        var count = 0\n        var max_count\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       count += 1\n            } else if char == \")\" {\n                count\
    \ -= 1\n            }\n            if count > max_count {\n                max_count\
    \ = count\n            }\n        }\n        result.append(max_count)\n    }\n\
    \    return result", "    var max_depth = 0\n    var curr_depth = 0\n    var result\
    \ = [Int]()\n    for char in paren_string {\n        if char == \"(\" {\n    \
    \        curr_depth += 1\n            max_depth = max(max_depth, curr_depth)\n\
    \        } else if char == \")\" {\n            curr_depth -= 1\n        } else\
    \ if char == \" \" {\n            result.append(max_depth)\n            max_depth\
    \ = 0\n            curr_depth = 0\n        }\n    }\n    result.append(max_depth)\n\
    \    return result", "    var max_level = 0\n    var level = 0\n    var result\
    \ = [Int]()\n    for paren in paren_string {\n        if paren == \"(\" {\n  \
    \          level += 1\n            max_level = max(max_level, level)\n       \
    \ } else if paren == \")\" {\n            level -= 1\n        } else if paren\
    \ == \" \" {\n            result.append(max_level)\n            max_level = 0\n\
    \            level = 0\n        }\n    }\n    result.append(max_level)\n    return\
    \ result", "    var result = [Int]()\n    var current_level = 0\n    var max_level\
    \ = 0\n    for char in paren_string {\n        if char == \"(\" {\n          \
    \  current_level += 1\n            max_level = max(max_level, current_level)\n\
    \        } else if char == \")\" {\n            current_level -= 1\n        }\
    \ else if char == \" \" {\n            result.append(max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result.append(max_level)\n\
    \    return result", "    var paren_array = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_array = [Int]()\n    for paren in paren_array {\n\
    \        var max_nesting = 0\n        var current_nesting = 0\n        for char\
    \ in paren {\n            if char == \"(\" {\n                current_nesting\
    \ += 1\n            } else if char == \")\" {\n                current_nesting\
    \ -= 1\n            }\n            if current_nesting > max_nesting {\n      \
    \          max_nesting = current_nesting\n            }\n        }\n        max_nesting_array.append(max_nesting)\n\
    \    }\n    return max_nesting_array", "    var result = [Int]()\n    let paren_groups\
    \ = paren_string.components(separatedBy: \" \")\n    for paren_group in paren_groups\
    \ {\n        var max_nesting = 0\n        var current_nesting = 0\n        for\
    \ paren in paren_group {\n            if paren == \"(\" {\n                current_nesting\
    \ += 1\n            } else if paren == \")\" {\n                current_nesting\
    \ -= 1\n            }\n            if current_nesting > max_nesting {\n      \
    \          max_nesting = current_nesting\n            }\n        }\n        result.append(max_nesting)\n\
    \    }\n    return result", "    var max_nesting_levels = [Int]()\n    let paren_groups\
    \ = paren_string.components(separatedBy: \" \")\n    for paren_group in paren_groups\
    \ {\n        var max_level = 0\n        var current_level = 0\n        for char\
    \ in paren_group {\n            if char == \"(\" {\n                current_level\
    \ += 1\n            } else if char == \")\" {\n                current_level -=\
    \ 1\n            }\n            if current_level > max_level {\n             \
    \   max_level = current_level\n            }\n        }\n        max_nesting_levels.append(max_level)\n\
    \    }\n    return max_nesting_levels", "    var result = [Int]()\n    let paren_groups\
    \ = paren_string.components(separatedBy: \" \")\n    for group in paren_groups\
    \ {\n        var max_depth = 0\n        var current_depth = 0\n        for char\
    \ in group {\n            if char == \"(\" {\n                current_depth +=\
    \ 1\n                if current_depth > max_depth {\n                    max_depth\
    \ = current_depth\n                }\n            } else if char == \")\" {\n\
    \                current_depth -= 1\n            }\n        }\n        result.append(max_depth)\n\
    \    }\n    return result", "    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting = [Int]()\n    for group in paren_groups {\n   \
    \     var nesting_count = 0\n        var max_nesting_count = 0\n        for char\
    \ in group {\n            if char == \"(\" {\n                nesting_count +=\
    \ 1\n            } else if char == \")\" {\n                nesting_count -= 1\n\
    \            }\n            if nesting_count > max_nesting_count {\n         \
    \       max_nesting_count = nesting_count\n            }\n        }\n        max_nesting.append(max_nesting_count)\n\
    \    }\n    return max_nesting", "    var result = [Int]()\n    var paren_stack\
    \ = Stack<Character>()\n    var max_depth = 0\n    var current_depth = 0\n   \
    \ for paren in paren_string {\n        if paren == \"(\" {\n            paren_stack.push(paren)\n\
    \            current_depth += 1\n            if current_depth > max_depth {\n\
    \                max_depth = current_depth\n            }\n        } else if paren\
    \ == \")\" {\n            paren_stack.pop()\n            current_depth -= 1\n\
    \        }\n    }\n    result.append(max_depth)\n    return result", "    var\
    \ result = [Int]()\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in paren_groups {\n        var max_level = 0\n       \
    \ var level = 0\n        for char in group {\n            if char == \"(\" {\n\
    \                level += 1\n            } else if char == \")\" {\n         \
    \       level -= 1\n            }\n            if level > max_level {\n      \
    \          max_level = level\n            }\n        }\n        result.append(max_level)\n\
    \    }\n    return result", "    var max_nesting = 0\n    var nesting_count =\
    \ 0\n    var result = [Int]()\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            nesting_count += 1\n            if nesting_count > max_nesting\
    \ {\n                max_nesting = nesting_count\n            }\n        } else\
    \ if char == \")\" {\n            nesting_count -= 1\n        } else if char ==\
    \ \" \" {\n            result.append(max_nesting)\n            max_nesting = 0\n\
    \            nesting_count = 0\n        }\n    }\n    result.append(max_nesting)\n\
    \    return result", "    var result = [Int]()\n    var paren_stack = Stack<Character>()\n\
    \    var max_depth = 0\n    var curr_depth = 0\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            paren_stack.push(char)\n            curr_depth\
    \ += 1\n            if curr_depth > max_depth {\n                max_depth = curr_depth\n\
    \            }\n        } else if char == \")\" {\n            paren_stack.pop()\n\
    \            curr_depth -= 1\n        } else if char == \" \" {\n            result.append(max_depth)\n\
    \            max_depth = 0\n            curr_depth = 0\n        }\n    }\n   \
    \ result.append(max_depth)\n    return result", "    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting = [Int]()\n    for paren_group in paren_groups {\n\
    \        var current_nesting = 0\n        var max_nesting_in_group = 0\n     \
    \   for char in paren_group {\n            if char == \"(\" {\n              \
    \  current_nesting += 1\n            } else if char == \")\" {\n             \
    \   current_nesting -= 1\n            }\n            if current_nesting > max_nesting_in_group\
    \ {\n                max_nesting_in_group = current_nesting\n            }\n \
    \       }\n        max_nesting.append(max_nesting_in_group)\n    }\n    return\
    \ max_nesting", "    var result = [Int]()\n    var current_level = 0\n    var\
    \ max_level = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            current_level += 1\n            max_level = max(max_level, current_level)\n\
    \        } else if char == \")\" {\n            current_level -= 1\n        }\
    \ else if char == \" \" {\n            result.append(max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result.append(max_level)\n\
    \    return result", "    var paren_stack: [Character] = []\n    var max_depth:\
    \ [Int] = []\n    var current_depth = 0\n    var current_max = 0\n    for char\
    \ in paren_string {\n        if char == \"(\" {\n            paren_stack.append(char)\n\
    \            current_depth += 1\n            if current_depth > current_max {\n\
    \                current_max = current_depth\n            }\n        } else if\
    \ char == \")\" {\n            paren_stack.popLast()\n            current_depth\
    \ -= 1\n        } else if char == \" \" {\n            max_depth.append(current_max)\n\
    \            current_max = 0\n            current_depth = 0\n        }\n    }\n\
    \    return max_depth", "    var paren_array = paren_string.components(separatedBy:\
    \ \" \")\n    var result = [Int]()\n    for paren in paren_array {\n        var\
    \ max_level = 0\n        var level = 0\n        for char in paren {\n        \
    \    if char == \"(\" {\n                level += 1\n            } else if char\
    \ == \")\" {\n                level -= 1\n            }\n            if level\
    \ > max_level {\n                max_level = level\n            }\n        }\n\
    \        result.append(max_level)\n    }\n    return result", "    var paren_stack\
    \ = Stack<Character>()\n    var max_depth = 0\n    var depths = [Int]()\n    var\
    \ current_depth = 0\n    \n    for char in paren_string {\n        if char ==\
    \ \"(\" {\n            paren_stack.push(char)\n            current_depth += 1\n\
    \            if current_depth > max_depth {\n                max_depth = current_depth\n\
    \            }\n        } else if char == \")\" {\n            paren_stack.pop()\n\
    \            depths.append(current_depth)\n            current_depth -= 1\n  \
    \      }\n    }\n    \n    return depths", "    var max_nesting_levels = [Int]()\n\
    \    var current_nesting_level = 0\n    var max_nesting_level = 0\n    var is_nested\
    \ = false\n    for char in paren_string {\n        if char == \"(\" {\n      \
    \      current_nesting_level += 1\n            is_nested = true\n        } else\
    \ if char == \")\" {\n            current_nesting_level -= 1\n        } else if\
    \ char == \" \" {\n            if is_nested {\n                max_nesting_levels.append(max_nesting_level)\n\
    \                max_nesting_level = 0\n                is_nested = false\n  \
    \          }\n        }\n        max_nesting_level = max(max_nesting_level, current_nesting_level)\n\
    \    }\n    return max_nesting_levels", "    var max_depth = 0\n    var current_depth\
    \ = 0\n    var result = [Int]()\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        } else if char == \")\" {\n            current_depth\
    \ -= 1\n        } else if char == \" \" {\n            result.append(max_depth)\n\
    \            max_depth = 0\n            current_depth = 0\n        }\n    }\n\
    \    result.append(max_depth)\n    return result", "    var paren_stack = Stack<Character>()\n\
    \    var max_depth = 0\n    var depth = 0\n    var max_depths = [Int]()\n    \n\
    \    for char in paren_string {\n        if char == \"(\" {\n            paren_stack.push(char)\n\
    \            depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == \")\" {\n            paren_stack.pop()\n\
    \            depth -= 1\n            if paren_stack.isEmpty() {\n            \
    \    max_depths.append(max_depth)\n                max_depth = 0\n           \
    \     depth = 0\n            }\n        }\n    }\n    \n    return max_depths",
  "    var stack = Stack<Character>()\n    var max_depth = 0\n    var current_depth\
    \ = 0\n    var result = [Int]()\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            stack.push(char)\n            current_depth += 1\n \
    \           if current_depth > max_depth {\n                max_depth = current_depth\n\
    \            }\n        } else if char == \")\" {\n            stack.pop()\n \
    \           current_depth -= 1\n        } else if char == \" \" {\n          \
    \  result.append(max_depth)\n            max_depth = 0\n            current_depth\
    \ = 0\n        }\n    }\n    result.append(max_depth)\n    return result", " \
    \   var result = [Int]()\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        var paren_stack = Stack<Character>()\n\
    \        var max_depth = 0\n        var depth = 0\n        for paren in paren_group\
    \ {\n            if paren == \"(\" {\n                depth += 1\n           \
    \     if depth > max_depth {\n                    max_depth = depth\n        \
    \        }\n                paren_stack.push(paren)\n            } else if paren\
    \ == \")\" {\n                depth -= 1\n                paren_stack.pop()\n\
    \            }\n        }\n        result.append(max_depth)\n    }\n    return\
    \ result", "    var result = [Int]()\n    var max_depth = 0\n    var current_depth\
    \ = 0\n    for char in paren_string {\n        if char == \"(\" {\n          \
    \  current_depth += 1\n            if current_depth > max_depth {\n          \
    \      max_depth = current_depth\n            }\n        } else if char == \"\
    )\" {\n            current_depth -= 1\n        } else if char == \" \" {\n   \
    \         result.append(max_depth)\n            max_depth = 0\n            current_depth\
    \ = 0\n        }\n    }\n    result.append(max_depth)\n    return result", " \
    \   var paren_stack = Stack<Character>()\n    var max_depth = 0\n    var depth\
    \ = 0\n    var max_depths = [Int]()\n    \n    for char in paren_string {\n  \
    \      if char == \"(\" {\n            paren_stack.push(char)\n            depth\
    \ += 1\n            if depth > max_depth {\n                max_depth = depth\n\
    \            }\n        } else if char == \")\" {\n            paren_stack.pop()\n\
    \            depth -= 1\n            if paren_stack.isEmpty() {\n            \
    \    max_depths.append(max_depth)\n                max_depth = 0\n           \
    \     depth = 0\n            }\n        }\n    }\n    \n    return max_depths",
  "    var max_depth = 0\n    var depth = 0\n    var depth_array = [Int]()\n    for\
    \ char in paren_string {\n        if char == \"(\" {\n            depth += 1\n\
    \            if depth > max_depth {\n                max_depth = depth\n     \
    \       }\n        } else if char == \")\" {\n            depth -= 1\n       \
    \ } else if char == \" \" {\n            depth_array.append(max_depth)\n     \
    \       max_depth = 0\n            depth = 0\n        }\n    }\n    depth_array.append(max_depth)\n\
    \    return depth_array", "    var max_nesting_levels = [Int]()\n    var current_nesting_level\
    \ = 0\n    var max_nesting_level = 0\n    for char in paren_string {\n       \
    \ if char == \"(\" {\n            current_nesting_level += 1\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        } else if char == \")\" {\n            current_nesting_level\
    \ -= 1\n        } else if char == \" \" {\n            max_nesting_levels.append(max_nesting_level)\n\
    \            max_nesting_level = 0\n            current_nesting_level = 0\n  \
    \      }\n    }\n    max_nesting_levels.append(max_nesting_level)\n    return\
    \ max_nesting_levels", "    var paren_stack = Stack<Character>()\n    var max_depth\
    \ = 0\n    var depth = 0\n    var max_depths = [Int]()\n    \n    for char in\
    \ paren_string {\n        if char == \"(\" {\n            paren_stack.push(char)\n\
    \            depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == \")\" {\n            paren_stack.pop()\n\
    \            depth -= 1\n            if paren_stack.isEmpty() {\n            \
    \    max_depths.append(max_depth)\n                max_depth = 0\n           \
    \     depth = 0\n            }\n        }\n    }\n    \n    return max_depths",
  "    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var max_nesting = 0\n        var\
    \ current_nesting = 0\n        for char in group {\n            if char == \"\
    (\" {\n                current_nesting += 1\n            } else if char == \"\
    )\" {\n                current_nesting -= 1\n            }\n            if current_nesting\
    \ > max_nesting {\n                max_nesting = current_nesting\n           \
    \ }\n        }\n        result.append(max_nesting)\n    }\n    return result",
  "    var max_depth = [Int]()\n    var depth = 0\n    var max_depth_so_far = 0\n\
    \    for char in paren_string {\n        if char == \"(\" {\n            depth\
    \ += 1\n            if depth > max_depth_so_far {\n                max_depth_so_far\
    \ = depth\n            }\n        } else if char == \")\" {\n            depth\
    \ -= 1\n        } else if char == \" \" {\n            max_depth.append(max_depth_so_far)\n\
    \            max_depth_so_far = 0\n            depth = 0\n        }\n    }\n \
    \   max_depth.append(max_depth_so_far)\n    return max_depth", "    var max_nesting\
    \ = 0\n    var nesting_count = 0\n    var result = [Int]()\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            nesting_count += 1\n            if\
    \ nesting_count > max_nesting {\n                max_nesting = nesting_count\n\
    \            }\n        } else if char == \")\" {\n            nesting_count -=\
    \ 1\n        } else if char == \" \" {\n            result.append(max_nesting)\n\
    \            max_nesting = 0\n            nesting_count = 0\n        }\n    }\n\
    \    result.append(max_nesting)\n    return result", "    var max_depth = 0\n\
    \    var depth = 0\n    var result = [Int]()\n    for char in paren_string {\n\
    \        if char == \"(\" {\n            depth += 1\n            max_depth = max(max_depth,\
    \ depth)\n        } else if char == \")\" {\n            depth -= 1\n        }\
    \ else if char == \" \" {\n            result.append(max_depth)\n            max_depth\
    \ = 0\n            depth = 0\n        }\n    }\n    result.append(max_depth)\n\
    \    return result", "    var result = [Int]()\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        var max_depth = 0\n \
    \       var depth = 0\n        for char in paren_group {\n            if char\
    \ == \"(\" {\n                depth += 1\n                if depth > max_depth\
    \ {\n                    max_depth = depth\n                }\n            } else\
    \ if char == \")\" {\n                depth -= 1\n            }\n        }\n \
    \       result.append(max_depth)\n    }\n    return result", "    var paren_stack\
    \ = Stack<Character>()\n    var max_depth = 0\n    var current_depth = 0\n   \
    \ var depths = [Int]()\n    for char in paren_string {\n        if char == \"\
    (\" {\n            paren_stack.push(char)\n            current_depth += 1\n  \
    \          if current_depth > max_depth {\n                max_depth = current_depth\n\
    \            }\n        } else if char == \")\" {\n            paren_stack.pop()\n\
    \            current_depth -= 1\n            if paren_stack.isEmpty() {\n    \
    \            depths.append(max_depth)\n                max_depth = 0\n       \
    \         current_depth = 0\n            }\n        }\n    }\n    return depths",
  "    var result = [Int]()\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        var max_depth = 0\n \
    \       var depth = 0\n        for paren in paren_group {\n            if paren\
    \ == \"(\" {\n                depth += 1\n            } else if paren == \")\"\
    \ {\n                depth -= 1\n            }\n            if depth > max_depth\
    \ {\n                max_depth = depth\n            }\n        }\n        result.append(max_depth)\n\
    \    }\n    return result", "    var max_nesting_levels = [Int]()\n    let paren_groups\
    \ = paren_string.components(separatedBy: \" \")\n    for paren_group in paren_groups\
    \ {\n        var nesting_level = 0\n        var max_nesting_level = 0\n      \
    \  for paren in paren_group {\n            if paren == \"(\" {\n             \
    \   nesting_level += 1\n            } else if paren == \")\" {\n             \
    \   nesting_level -= 1\n            }\n            if nesting_level > max_nesting_level\
    \ {\n                max_nesting_level = nesting_level\n            }\n      \
    \  }\n        max_nesting_levels.append(max_nesting_level)\n    }\n    return\
    \ max_nesting_levels", "    var result = [Int]()\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        var max_depth = 0\n \
    \       var depth = 0\n        for char in paren_group {\n            if char\
    \ == \"(\" {\n                depth += 1\n                if depth > max_depth\
    \ {\n                    max_depth = depth\n                }\n            } else\
    \ if char == \")\" {\n                depth -= 1\n            }\n        }\n \
    \       result.append(max_depth)\n    }\n    return result", "    var paren_stack\
    \ = Stack<Character>()\n    var max_depth = 0\n    var current_depth = 0\n   \
    \ var output = [Int]()\n    for char in paren_string {\n        if char == \"\
    (\" {\n            paren_stack.push(char)\n            current_depth += 1\n  \
    \          if current_depth > max_depth {\n                max_depth = current_depth\n\
    \            }\n        } else if char == \")\" {\n            if paren_stack.isEmpty()\
    \ {\n                print(\"Error: mismatched parentheses\")\n              \
    \  return []\n            } else {\n                paren_stack.pop()\n      \
    \          current_depth -= 1\n            }\n        } else if char == \" \"\
    \ {\n            output.append(max_depth)\n            max_depth = 0\n       \
    \     current_depth = 0\n        }\n    }\n    output.append(max_depth)\n    return\
    \ output", "    var paren_stack = Stack<Character>()\n    var max_depth_stack\
    \ = Stack<Int>()\n    var max_depth = 0\n    var max_depth_array = [Int]()\n \
    \   \n    for char in paren_string {\n        if char == \"(\" {\n           \
    \ paren_stack.push(char)\n            max_depth += 1\n            max_depth_stack.push(max_depth)\n\
    \        } else if char == \")\" {\n            paren_stack.pop()\n          \
    \  max_depth_array.append(max_depth_stack.pop()!)\n            max_depth -= 1\n\
    \        }\n    }\n    \n    return max_depth_array", "    var max_depth = 0\n\
    \    var depth = 0\n    var max_depths = [Int]()\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            depth += 1\n            if depth\
    \ > max_depth {\n                max_depth = depth\n            }\n        } else\
    \ if char == \")\" {\n            depth -= 1\n            if depth == 0 {\n  \
    \              max_depths.append(max_depth)\n                max_depth = 0\n \
    \           }\n        }\n    }\n    return max_depths", "    var max_nesting_levels\
    \ = [Int]()\n    let paren_groups = paren_string.components(separatedBy: \" \"\
    )\n    for paren_group in paren_groups {\n        var nesting_level = 0\n    \
    \    var max_nesting_level = 0\n        for paren in paren_group {\n         \
    \   if paren == \"(\" {\n                nesting_level += 1\n            } else\
    \ if paren == \")\" {\n                nesting_level -= 1\n            }\n   \
    \         if nesting_level > max_nesting_level {\n                max_nesting_level\
    \ = nesting_level\n            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels", "    var result = [Int]()\n    let paren_groups\
    \ = paren_string.split(separator: \" \")\n    for paren_group in paren_groups\
    \ {\n        var max_depth = 0\n        var current_depth = 0\n        for paren\
    \ in paren_group {\n            if paren == \"(\" {\n                current_depth\
    \ += 1\n            } else if paren == \")\" {\n                current_depth\
    \ -= 1\n            }\n            if current_depth > max_depth {\n          \
    \      max_depth = current_depth\n            }\n        }\n        result.append(max_depth)\n\
    \    }\n    return result", "    var result = [Int]()\n    var stack = [Int]()\n\
    \    var max_depth = 0\n    for char in paren_string {\n        if char == \"\
    (\" {\n            stack.append(1)\n            max_depth += 1\n        } else\
    \ if char == \")\" {\n            stack.removeLast()\n            if stack.isEmpty\
    \ {\n                result.append(max_depth)\n                max_depth = 0\n\
    \            }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var paren_stack = Stack<Character>()\n    var max_depth = 0\n    var current_depth\
    \ = 0\n    for char in paren_string {\n        if char == \"(\" {\n          \
    \  paren_stack.push(char)\n            current_depth += 1\n            if current_depth\
    \ > max_depth {\n                max_depth = current_depth\n            }\n  \
    \      } else if char == \")\" {\n            paren_stack.pop()\n            current_depth\
    \ -= 1\n        } else if char == \" \" {\n            result.append(max_depth)\n\
    \            max_depth = 0\n            current_depth = 0\n        }\n    }\n\
    \    result.append(max_depth)\n    return result", "    var result = [Int]()\n\
    \    var current_level = 0\n    var max_level = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            current_level += 1\n            max_level\
    \ = max(max_level, current_level)\n        } else if char == \")\" {\n       \
    \     current_level -= 1\n        } else if char == \" \" {\n            result.append(max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result.append(max_level)\n    return result", "    var paren_array = paren_string.components(separatedBy:\
    \ \" \")\n    var result = [Int]()\n    for paren in paren_array {\n        var\
    \ max_level = 0\n        var current_level = 0\n        for char in paren {\n\
    \            if char == \"(\" {\n                current_level += 1\n        \
    \    } else if char == \")\" {\n                current_level -= 1\n         \
    \   }\n            if current_level > max_level {\n                max_level =\
    \ current_level\n            }\n        }\n        result.append(max_level)\n\
    \    }\n    return result", "    var max_nesting_levels = [Int]()\n    var current_nesting_level\
    \ = 0\n    var max_nesting_level = 0\n    for char in paren_string {\n       \
    \ if char == \"(\" {\n            current_nesting_level += 1\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        } else if char == \")\" {\n            current_nesting_level\
    \ -= 1\n        } else if char == \" \" {\n            max_nesting_levels.append(max_nesting_level)\n\
    \            max_nesting_level = 0\n            current_nesting_level = 0\n  \
    \      }\n    }\n    max_nesting_levels.append(max_nesting_level)\n    return\
    \ max_nesting_levels", "    var max_depth = 0\n    var depth = 0\n    var result\
    \ = [Int]()\n    for char in paren_string {\n        if char == \"(\" {\n    \
    \        depth += 1\n            max_depth = max(max_depth, depth)\n        }\
    \ else if char == \")\" {\n            depth -= 1\n        } else if char == \"\
    \ \" {\n            result.append(max_depth)\n            max_depth = 0\n    \
    \        depth = 0\n        }\n    }\n    result.append(max_depth)\n    return\
    \ result", "    var max_nesting = 0\n    var nesting_levels = [Int]()\n    var\
    \ nesting_level = 0\n    for char in paren_string {\n        if char == \"(\"\
    \ {\n            nesting_level += 1\n            if nesting_level > max_nesting\
    \ {\n                max_nesting = nesting_level\n            }\n        } else\
    \ if char == \")\" {\n            nesting_levels.append(nesting_level)\n     \
    \       nesting_level -= 1\n        }\n    }\n    return nesting_levels", "  \
    \  var result = [Int]()\n    var current_level = 0\n    var max_level = 0\n  \
    \  for char in paren_string {\n        if char == \"(\" {\n            current_level\
    \ += 1\n            max_level = max(max_level, current_level)\n        } else\
    \ if char == \")\" {\n            current_level -= 1\n        } else if char ==\
    \ \" \" {\n            result.append(max_level)\n            max_level = 0\n \
    \           current_level = 0\n        }\n    }\n    result.append(max_level)\n\
    \    return result", "    var paren_stack = Stack<Character>()\n    var max_depth\
    \ = 0\n    var depths = [Int]()\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            paren_stack.push(char)\n            max_depth += 1\n\
    \        } else if char == \")\" {\n            paren_stack.pop()\n          \
    \  max_depth -= 1\n        } else if char == \" \" {\n            depths.append(max_depth)\n\
    \            max_depth = 0\n        }\n    }\n    depths.append(max_depth)\n \
    \   return depths", "    var max_depth = 0\n    var depth = 0\n    var result\
    \ = [Int]()\n    for char in paren_string {\n        if char == \"(\" {\n    \
    \        depth += 1\n            max_depth = max(max_depth, depth)\n        }\
    \ else if char == \")\" {\n            depth -= 1\n        } else if char == \"\
    \ \" {\n            result.append(max_depth)\n            max_depth = 0\n    \
    \        depth = 0\n        }\n    }\n    result.append(max_depth)\n    return\
    \ result", "    var max_nesting_levels = [Int]()\n    var current_nesting_level\
    \ = 0\n    var max_nesting_level = 0\n    for char in paren_string {\n       \
    \ if char == \"(\" {\n            current_nesting_level += 1\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        } else if char == \")\" {\n            current_nesting_level\
    \ -= 1\n        } else if char == \" \" {\n            max_nesting_levels.append(max_nesting_level)\n\
    \            max_nesting_level = 0\n            current_nesting_level = 0\n  \
    \      }\n    }\n    max_nesting_levels.append(max_nesting_level)\n    return\
    \ max_nesting_levels", "    var max_nesting_levels = [Int]()\n    var current_nesting_level\
    \ = 0\n    var max_nesting_level = 0\n    var is_paren_open = false\n    for char\
    \ in paren_string {\n        if char == \"(\" {\n            is_paren_open = true\n\
    \            current_nesting_level += 1\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        } else if char == \")\" {\n            is_paren_open =\
    \ false\n            current_nesting_level -= 1\n        } else if char == \"\
    \ \" && !is_paren_open {\n            max_nesting_levels.append(max_nesting_level)\n\
    \            max_nesting_level = 0\n            current_nesting_level = 0\n  \
    \      }\n    }\n    max_nesting_levels.append(max_nesting_level)\n    return\
    \ max_nesting_levels", "    var result = [Int]()\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in paren_groups {\n        var max_depth = 0\n       \
    \ var depth = 0\n        for char in group {\n            if char == \"(\" {\n\
    \                depth += 1\n            } else if char == \")\" {\n         \
    \       depth -= 1\n            }\n            if depth > max_depth {\n      \
    \          max_depth = depth\n            }\n        }\n        result.append(max_depth)\n\
    \    }\n    return result", "    var result = [Int]()\n    var paren_stack = [Character]()\n\
    \    var current_level = 0\n    var max_level = 0\n    for paren in paren_string\
    \ {\n        if paren == \"(\" {\n            paren_stack.append(paren)\n    \
    \        current_level += 1\n            if current_level > max_level {\n    \
    \            max_level = current_level\n            }\n        } else if paren\
    \ == \")\" {\n            if paren_stack.last == \"(\" {\n                paren_stack.removeLast()\n\
    \                current_level -= 1\n            } else {\n                print(\"\
    Invalid input\")\n                return []\n            }\n        } else {\n\
    \            if paren_stack.isEmpty {\n                result.append(max_level)\n\
    \                max_level = 0\n                current_level = 0\n          \
    \  } else {\n                print(\"Invalid input\")\n                return\
    \ []\n            }\n        }\n    }\n    if paren_stack.isEmpty {\n        result.append(max_level)\n\
    \    } else {\n        print(\"Invalid input\")\n        return []\n    }\n  \
    \  return result", "    var result = [Int]()\n    var paren_stack = Stack<Character>()\n\
    \    var max_depth = 0\n    var current_depth = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            paren_stack.push(char)\n        \
    \    current_depth += 1\n            if current_depth > max_depth {\n        \
    \        max_depth = current_depth\n            }\n        } else if char == \"\
    )\" {\n            if paren_stack.isEmpty() {\n                result.append(0)\n\
    \                max_depth = 0\n                current_depth = 0\n          \
    \  } else {\n                paren_stack.pop()\n                current_depth\
    \ -= 1\n            }\n        } else if char == \" \" {\n            result.append(max_depth)\n\
    \            max_depth = 0\n            current_depth = 0\n        }\n    }\n\
    \    result.append(max_depth)\n    return result", "    var levels = [Int]()\n\
    \    var current_level = 0\n    var max_level = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            current_level += 1\n            max_level\
    \ = max(max_level, current_level)\n        } else if char == \")\" {\n       \
    \     current_level -= 1\n        } else if char == \" \" {\n            levels.append(max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    levels.append(max_level)\n    return levels", "    var max_nesting_levels\
    \ = [Int]()\n    let paren_groups = paren_string.components(separatedBy: \" \"\
    )\n    for paren_group in paren_groups {\n        var nesting_level = 0\n    \
    \    var max_nesting_level = 0\n        for paren in paren_group {\n         \
    \   if paren == \"(\" {\n                nesting_level += 1\n            } else\
    \ if paren == \")\" {\n                nesting_level -= 1\n            }\n   \
    \         if nesting_level > max_nesting_level {\n                max_nesting_level\
    \ = nesting_level\n            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels", "    var result: [Int] = []\n    var current_level\
    \ = 0\n    var max_level = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            current_level += 1\n            max_level = max(max_level,\
    \ current_level)\n        } else if char == \")\" {\n            current_level\
    \ -= 1\n        } else if char == \" \" {\n            result.append(max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result.append(max_level)\n    return result", "    var paren_stack = Stack<Character>()\n\
    \    var max_depth = 0\n    var depth = 0\n    var max_depths = [Int]()\n    \n\
    \    for paren in paren_string {\n        if paren == \"(\" {\n            paren_stack.push(paren)\n\
    \            depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if paren == \")\" {\n            paren_stack.pop()\n\
    \            depth -= 1\n            if paren_stack.isEmpty() {\n            \
    \    max_depths.append(max_depth)\n                max_depth = 0\n           \
    \     depth = 0\n            }\n        }\n    }\n    \n    return max_depths",
  "    var max_depth = 0\n    var current_depth = 0\n    var result = [Int]()\n  \
    \  for char in paren_string {\n        if char == \"(\" {\n            current_depth\
    \ += 1\n            max_depth = max(max_depth, current_depth)\n        } else\
    \ if char == \")\" {\n            current_depth -= 1\n        } else if char ==\
    \ \" \" {\n            result.append(max_depth)\n            max_depth = 0\n \
    \           current_depth = 0\n        }\n    }\n    result.append(max_depth)\n\
    \    return result", "    var result = [Int]()\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in paren_groups {\n        var max_depth = 0\n       \
    \ var depth = 0\n        for char in group {\n            if char == \"(\" {\n\
    \                depth += 1\n            } else if char == \")\" {\n         \
    \       depth -= 1\n            }\n            if depth > max_depth {\n      \
    \          max_depth = depth\n            }\n        }\n        result.append(max_depth)\n\
    \    }\n    return result", "    var result = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var stack = [Character]()\n     \
    \   var max_depth = 0\n        var current_depth = 0\n        for char in group\
    \ {\n            if char == \"(\" {\n                stack.append(char)\n    \
    \            current_depth += 1\n                if current_depth > max_depth\
    \ {\n                    max_depth = current_depth\n                }\n      \
    \      } else if char == \")\" {\n                stack.popLast()\n          \
    \      current_depth -= 1\n            }\n        }\n        result.append(max_depth)\n\
    \    }\n    return result", "    var result = [Int]()\n    var max_level = 0\n\
    \    var current_level = 0\n    for char in paren_string {\n        if char ==\
    \ \"(\" {\n            current_level += 1\n            max_level = max(max_level,\
    \ current_level)\n        } else if char == \")\" {\n            current_level\
    \ -= 1\n        } else if char == \" \" {\n            result.append(max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result.append(max_level)\n    return result", "    var max_levels = [Int]()\n\
    \    let groups = paren_string.components(separatedBy: \" \")\n    for group in\
    \ groups {\n        var current_level = 0\n        var max_level = 0\n       \
    \ for char in group {\n            if char == \"(\" {\n                current_level\
    \ += 1\n            } else if char == \")\" {\n                current_level -=\
    \ 1\n            }\n            if current_level > max_level {\n             \
    \   max_level = current_level\n            }\n        }\n        max_levels.append(max_level)\n\
    \    }\n    return max_levels", "    var max_depth = 0\n    var depth = 0\n  \
    \  var result = [Int]()\n    for paren in paren_string {\n        if paren ==\
    \ \"(\" {\n            depth += 1\n            max_depth = max(max_depth, depth)\n\
    \        } else if paren == \")\" {\n            depth -= 1\n        } else if\
    \ paren == \" \" {\n            result.append(max_depth)\n            max_depth\
    \ = 0\n            depth = 0\n        }\n    }\n    result.append(max_depth)\n\
    \    return result", "    var result = [Int]()\n    var current_level = 0\n  \
    \  var max_level = 0\n    for char in paren_string {\n        if char == \"(\"\
    \ {\n            current_level += 1\n            max_level = max(max_level, current_level)\n\
    \        } else if char == \")\" {\n            current_level -= 1\n        }\
    \ else if char == \" \" {\n            result.append(max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result.append(max_level)\n\
    \    return result", "    var result = [Int]()\n    var current_level = 0\n  \
    \  var max_level = 0\n    for char in paren_string {\n        if char == \"(\"\
    \ {\n            current_level += 1\n            max_level = max(max_level, current_level)\n\
    \        } else if char == \")\" {\n            current_level -= 1\n        }\
    \ else if char == \" \" {\n            result.append(max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result.append(max_level)\n\
    \    return result", "    var result = [Int]()\n    var max_level = 0\n    var\
    \ current_level = 0\n    for char in paren_string {\n        if char == \"(\"\
    \ {\n            current_level += 1\n            max_level = max(max_level, current_level)\n\
    \        } else if char == \")\" {\n            current_level -= 1\n        }\
    \ else if char == \" \" {\n            result.append(max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result.append(max_level)\n\
    \    return result", "    var paren_stack = Stack<Character>()\n    var max_depth\
    \ = 0\n    var depth = 0\n    var max_depths = [Int]()\n    \n    for char in\
    \ paren_string {\n        if char == \"(\" {\n            paren_stack.push(char)\n\
    \            depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == \")\" {\n            paren_stack.pop()\n\
    \            depth -= 1\n            if paren_stack.isEmpty() {\n            \
    \    max_depths.append(max_depth)\n                max_depth = 0\n           \
    \     depth = 0\n            }\n        }\n    }\n    \n    return max_depths",
  "    var max_nesting_levels = [Int]()\n    var current_nesting_level = 0\n    var\
    \ max_nesting_level = 0\n    for char in paren_string {\n        if char == \"\
    (\" {\n            current_nesting_level += 1\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        } else if char == \")\" {\n            if current_nesting_level\
    \ > 0 {\n                current_nesting_level -= 1\n            } else {\n  \
    \              max_nesting_levels.append(max_nesting_level)\n                max_nesting_level\
    \ = 0\n                current_nesting_level = 0\n            }\n        }\n \
    \   }\n    max_nesting_levels.append(max_nesting_level)\n    return max_nesting_levels",
  "    var paren_stack = Stack<Character>()\n    var max_depth = 0\n    var depth\
    \ = 0\n    var result = [Int]()\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            paren_stack.push(char)\n            depth += 1\n   \
    \         if depth > max_depth {\n                max_depth = depth\n        \
    \    }\n        } else if char == \")\" {\n            paren_stack.pop()\n   \
    \         depth -= 1\n        } else if char == \" \" {\n            result.append(max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result.append(max_depth)\n\
    \    return result", "    var max_depth = 0\n    var depth = 0\n    var result\
    \ = [Int]()\n    for char in paren_string {\n        if char == \"(\" {\n    \
    \        depth += 1\n            max_depth = max(max_depth, depth)\n        }\
    \ else if char == \")\" {\n            depth -= 1\n        } else if char == \"\
    \ \" {\n            result.append(max_depth)\n            max_depth = 0\n    \
    \        depth = 0\n        }\n    }\n    result.append(max_depth)\n    return\
    \ result", "    var paren_counts = [Int]()\n    var paren_count = 0\n    var max_paren_count\
    \ = 0\n    for char in paren_string {\n        if char == \"(\" {\n          \
    \  paren_count += 1\n            max_paren_count = max(max_paren_count, paren_count)\n\
    \        } else if char == \")\" {\n            paren_count -= 1\n        } else\
    \ if char == \" \" {\n            paren_counts.append(max_paren_count)\n     \
    \       max_paren_count = 0\n            paren_count = 0\n        }\n    }\n \
    \   paren_counts.append(max_paren_count)\n    return paren_counts", "    var result\
    \ = [Int]()\n    let paren_groups = paren_string.split(separator: \" \")\n   \
    \ for group in paren_groups {\n        var max_depth = 0\n        var current_depth\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       current_depth += 1\n                if current_depth > max_depth {\n \
    \                   max_depth = current_depth\n                }\n           \
    \ } else if char == \")\" {\n                current_depth -= 1\n            }\n\
    \        }\n        result.append(max_depth)\n    }\n    return result", "   \
    \ var result: [Int] = []\n    var paren_stack: [Character] = []\n    var max_depth\
    \ = 0\n    var depth = 0\n    for char in paren_string {\n        if char == \"\
    (\" {\n            paren_stack.append(char)\n            depth += 1\n        \
    \    if depth > max_depth {\n                max_depth = depth\n            }\n\
    \        } else if char == \")\" {\n            paren_stack.popLast()\n      \
    \      depth -= 1\n        } else if char == \" \" {\n            result.append(max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result.append(max_depth)\n\
    \    return result", "    var result = [Int]()\n    var curr_max = 0\n    var\
    \ curr_count = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            curr_count += 1\n            curr_max = max(curr_max, curr_count)\n\
    \        } else if char == \")\" {\n            curr_count -= 1\n        } else\
    \ if char == \" \" {\n            result.append(curr_max)\n            curr_max\
    \ = 0\n            curr_count = 0\n        }\n    }\n    result.append(curr_max)\n\
    \    return result", "    var max_depth = 0\n    var current_depth = 0\n    var\
    \ result = [Int]()\n    var paren_array = Array(paren_string)\n    for paren in\
    \ paren_array {\n        if paren == \"(\" {\n            current_depth += 1\n\
    \            if current_depth > max_depth {\n                max_depth = current_depth\n\
    \            }\n        } else if paren == \")\" {\n            current_depth\
    \ -= 1\n        } else if paren == \" \" {\n            result.append(max_depth)\n\
    \            max_depth = 0\n            current_depth = 0\n        }\n    }\n\
    \    result.append(max_depth)\n    return result", "    var max_nesting = 0\n\
    \    var nesting_levels = [Int]()\n    var current_nesting = 0\n    for char in\
    \ paren_string {\n        if char == \"(\" {\n            current_nesting += 1\n\
    \            if current_nesting > max_nesting {\n                max_nesting =\
    \ current_nesting\n            }\n        } else if char == \")\" {\n        \
    \    current_nesting -= 1\n            if current_nesting == 0 {\n           \
    \     nesting_levels.append(max_nesting)\n                max_nesting = 0\n  \
    \          }\n        }\n    }\n    return nesting_levels", "    var result =\
    \ [Int]()\n    let paren_groups = paren_string.components(separatedBy: \" \")\n\
    \    for paren_group in paren_groups {\n        var max_level = 0\n        var\
    \ level = 0\n        for paren in paren_group {\n            if paren == \"(\"\
    \ {\n                level += 1\n            } else if paren == \")\" {\n    \
    \            level -= 1\n            }\n            if level > max_level {\n \
    \               max_level = level\n            }\n        }\n        result.append(max_level)\n\
    \    }\n    return result", "    var max_nesting_levels = [Int]()\n    var current_nesting_level\
    \ = 0\n    var max_nesting_level = 0\n    for char in paren_string {\n       \
    \ if char == \"(\" {\n            current_nesting_level += 1\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        } else if char == \")\" {\n            current_nesting_level\
    \ -= 1\n        } else if char == \" \" {\n            max_nesting_levels.append(max_nesting_level)\n\
    \            max_nesting_level = 0\n            current_nesting_level = 0\n  \
    \      }\n    }\n    max_nesting_levels.append(max_nesting_level)\n    return\
    \ max_nesting_levels", "    var paren_stack = Stack<Character>()\n    var max_depth\
    \ = 0\n    var depth = 0\n    var depths = [Int]()\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            paren_stack.push(char)\n        \
    \    depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == \")\" {\n            paren_stack.pop()\n\
    \            depths.append(max_depth)\n            depth -= 1\n            max_depth\
    \ = 0\n        }\n    }\n    return depths", "    var max_depth = 0\n    var depth\
    \ = 0\n    var depths = [Int]()\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            depth += 1\n            if depth > max_depth {\n   \
    \             max_depth = depth\n            }\n        } else if char == \")\"\
    \ {\n            depth -= 1\n            if depth == 0 {\n                depths.append(max_depth)\n\
    \                max_depth = 0\n            }\n        }\n    }\n    return depths",
  "    var max_nesting_levels = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var current_level = 0\n        var\
    \ max_level = 0\n        for char in group {\n            if char == \"(\" {\n\
    \                current_level += 1\n            } else if char == \")\" {\n \
    \               current_level -= 1\n            }\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      }\n        max_nesting_levels.append(max_level)\n    }\n    return max_nesting_levels",
  "    var paren_groups = paren_string.components(separatedBy: \" \")\n    var max_nesting\
    \ = [Int]()\n    for paren_group in paren_groups {\n        var current_nesting\
    \ = 0\n        var max_nesting_level = 0\n        for paren in paren_group {\n\
    \            if paren == \"(\" {\n                current_nesting += 1\n     \
    \       } else if paren == \")\" {\n                current_nesting -= 1\n   \
    \         }\n            if current_nesting > max_nesting_level {\n          \
    \      max_nesting_level = current_nesting\n            }\n        }\n       \
    \ max_nesting.append(max_nesting_level)\n    }\n    return max_nesting", "   \
    \ var result = [Int]()\n    var current_level = 0\n    var max_level = 0\n   \
    \ for char in paren_string {\n        if char == \"(\" {\n            current_level\
    \ += 1\n            max_level = max(max_level, current_level)\n        } else\
    \ if char == \")\" {\n            current_level -= 1\n        } else if char ==\
    \ \" \" {\n            result.append(max_level)\n            max_level = 0\n \
    \           current_level = 0\n        }\n    }\n    result.append(max_level)\n\
    \    return result", "    var paren_stack = Stack<Character>()\n    var max_nesting\
    \ = 0\n    var nesting_levels = [Int]()\n    for char in paren_string {\n    \
    \    if char == \"(\" {\n            paren_stack.push(char)\n            max_nesting\
    \ += 1\n        } else if char == \")\" {\n            paren_stack.pop()\n   \
    \         if paren_stack.isEmpty() {\n                nesting_levels.append(max_nesting)\n\
    \                max_nesting = 0\n            }\n        }\n    }\n    return\
    \ nesting_levels", "    var max_levels = [Int]()\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        var level = 0\n     \
    \   var max_level = 0\n        for char in paren_group {\n            if char\
    \ == \"(\" {\n                level += 1\n            } else if char == \")\"\
    \ {\n                level -= 1\n            }\n            if level > max_level\
    \ {\n                max_level = level\n            }\n        }\n        max_levels.append(max_level)\n\
    \    }\n    return max_levels", "    var paren_stack = Stack<Character>()\n  \
    \  var max_depth = 0\n    var depth = 0\n    var max_depths = [Int]()\n    \n\
    \    for char in paren_string {\n        if char == \"(\" {\n            paren_stack.push(char)\n\
    \            depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == \")\" {\n            paren_stack.pop()\n\
    \            depth -= 1\n            if paren_stack.isEmpty() {\n            \
    \    max_depths.append(max_depth)\n                max_depth = 0\n           \
    \     depth = 0\n            }\n        }\n    }\n    \n    return max_depths",
  "    var result = [Int]()\n    var current_level = 0\n    var max_level = 0\n  \
    \  for char in paren_string {\n        if char == \"(\" {\n            current_level\
    \ += 1\n            max_level = max(max_level, current_level)\n        } else\
    \ if char == \")\" {\n            current_level -= 1\n        } else if char ==\
    \ \" \" {\n            result.append(max_level)\n            max_level = 0\n \
    \           current_level = 0\n        }\n    }\n    result.append(max_level)\n\
    \    return result", "    var result: [Int] = []\n    var current_level = 0\n\
    \    var max_level = 0\n    for char in paren_string {\n        if char == \"\
    (\" {\n            current_level += 1\n            max_level = max(max_level,\
    \ current_level)\n        } else if char == \")\" {\n            current_level\
    \ -= 1\n        } else if char == \" \" {\n            result.append(max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result.append(max_level)\n    return result", "    var max_nesting = 0\n\
    \    var nesting_levels = [Int]()\n    var current_nesting = 0\n    for char in\
    \ paren_string {\n        if char == \"(\" {\n            current_nesting += 1\n\
    \            if current_nesting > max_nesting {\n                max_nesting =\
    \ current_nesting\n            }\n        } else if char == \")\" {\n        \
    \    current_nesting -= 1\n            if current_nesting == 0 {\n           \
    \     nesting_levels.append(max_nesting)\n                max_nesting = 0\n  \
    \          }\n        }\n    }\n    return nesting_levels", "    var result =\
    \ [Int]()\n    var current_level = 0\n    var max_level = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            current_level += 1\n            max_level\
    \ = max(max_level, current_level)\n        } else if char == \")\" {\n       \
    \     current_level -= 1\n        } else if char == \" \" {\n            result.append(max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result.append(max_level)\n    return result", "    var max_nesting_levels\
    \ = [Int]()\n    var current_nesting_level = 0\n    var max_nesting_level = 0\n\
    \    var paren_string_array = Array(paren_string)\n    for paren in paren_string_array\
    \ {\n        if paren == \"(\" {\n            current_nesting_level += 1\n   \
    \         if current_nesting_level > max_nesting_level {\n                max_nesting_level\
    \ = current_nesting_level\n            }\n        } else if paren == \")\" {\n\
    \            current_nesting_level -= 1\n        } else if paren == \" \" {\n\
    \            max_nesting_levels.append(max_nesting_level)\n            max_nesting_level\
    \ = 0\n            current_nesting_level = 0\n        }\n    }\n    max_nesting_levels.append(max_nesting_level)\n\
    \    return max_nesting_levels", "    var paren_stack = Stack<Character>()\n \
    \   var max_depth = 0\n    var depth = 0\n    var result = [Int]()\n    for char\
    \ in paren_string {\n        if char == \"(\" {\n            paren_stack.push(char)\n\
    \            depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == \")\" {\n            paren_stack.pop()\n\
    \            depth -= 1\n        } else if char == \" \" {\n            result.append(max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result.append(max_depth)\n\
    \    return result", "    var max_nesting = 0\n    var current_nesting = 0\n \
    \   var result = [Int]()\n    for char in paren_string {\n        if char == \"\
    (\" {\n            current_nesting += 1\n            if current_nesting > max_nesting\
    \ {\n                max_nesting = current_nesting\n            }\n        } else\
    \ if char == \")\" {\n            current_nesting -= 1\n        } else if char\
    \ == \" \" {\n            result.append(max_nesting)\n            max_nesting\
    \ = 0\n            current_nesting = 0\n        }\n    }\n    result.append(max_nesting)\n\
    \    return result", "    var max_levels = [Int]()\n    var level = 0\n    var\
    \ max_level = 0\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            level += 1\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        } else if char == \")\" {\n            level\
    \ -= 1\n        } else if char == \" \" {\n            max_levels.append(max_level)\n\
    \            max_level = 0\n            level = 0\n        }\n    }\n    max_levels.append(max_level)\n\
    \    return max_levels", "    var max_nesting_levels = [Int]()\n    var current_nesting_level\
    \ = 0\n    var max_nesting_level = 0\n    for char in paren_string {\n       \
    \ if char == \"(\" {\n            current_nesting_level += 1\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        } else if char == \")\" {\n            current_nesting_level\
    \ -= 1\n        } else if char == \" \" {\n            max_nesting_levels.append(max_nesting_level)\n\
    \            max_nesting_level = 0\n            current_nesting_level = 0\n  \
    \      }\n    }\n    max_nesting_levels.append(max_nesting_level)\n    return\
    \ max_nesting_levels", "    var result = [Int]()\n    var current_level = 0\n\
    \    var max_level = 0\n    for char in paren_string {\n        if char == \"\
    (\" {\n            current_level += 1\n            max_level = max(max_level,\
    \ current_level)\n        } else if char == \")\" {\n            current_level\
    \ -= 1\n        } else if char == \" \" {\n            result.append(max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result.append(max_level)\n    return result", "    var result = [Int]()\n\
    \    let groups = paren_string.components(separatedBy: \" \")\n    for group in\
    \ groups {\n        var stack = [Character]()\n        var max_depth = 0\n   \
    \     var current_depth = 0\n        for char in group {\n            if char\
    \ == \"(\" {\n                stack.append(char)\n                current_depth\
    \ += 1\n                if current_depth > max_depth {\n                    max_depth\
    \ = current_depth\n                }\n            } else if char == \")\" {\n\
    \                if stack.count > 0 {\n                    stack.removeLast()\n\
    \                    current_depth -= 1\n                }\n            }\n  \
    \      }\n        result.append(max_depth)\n    }\n    return result", "    var\
    \ result = [Int]()\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        var max_depth = 0\n \
    \       var depth = 0\n        for char in paren_group {\n            if char\
    \ == \"(\" {\n                depth += 1\n                if depth > max_depth\
    \ {\n                    max_depth = depth\n                }\n            } else\
    \ if char == \")\" {\n                depth -= 1\n            }\n        }\n \
    \       result.append(max_depth)\n    }\n    return result", "    var result =\
    \ [Int]()\n    var current_level = 0\n    var max_level = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            current_level += 1\n            max_level\
    \ = max(max_level, current_level)\n        } else if char == \")\" {\n       \
    \     current_level -= 1\n        } else if char == \" \" {\n            result.append(max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result.append(max_level)\n    return result", "    var paren_stack = Stack<Character>()\n\
    \    var max_depth = 0\n    var depth = 0\n    var output = [Int]()\n    for char\
    \ in paren_string {\n        if char == \"(\" {\n            paren_stack.push(char)\n\
    \            depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == \")\" {\n            paren_stack.pop()\n\
    \            depth -= 1\n        } else if char == \" \" {\n            output.append(max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    output.append(max_depth)\n\
    \    return output", "    var max_nesting_levels = [Int]()\n    var current_nesting_level\
    \ = 0\n    var max_nesting_level = 0\n    for char in paren_string {\n       \
    \ if char == \"(\" {\n            current_nesting_level += 1\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        } else if char == \")\" {\n            current_nesting_level\
    \ -= 1\n        } else if char == \" \" {\n            max_nesting_levels.append(max_nesting_level)\n\
    \            max_nesting_level = 0\n            current_nesting_level = 0\n  \
    \      }\n    }\n    max_nesting_levels.append(max_nesting_level)\n    return\
    \ max_nesting_levels", "    var max_nesting_level = 0\n    var nesting_level =\
    \ 0\n    var max_nesting_levels = [Int]()\n    for char in paren_string {\n  \
    \      if char == \"(\" {\n            nesting_level += 1\n            if nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = nesting_level\n \
    \           }\n        } else if char == \")\" {\n            nesting_level -=\
    \ 1\n            if nesting_level == 0 {\n                max_nesting_levels.append(max_nesting_level)\n\
    \                max_nesting_level = 0\n            }\n        }\n    }\n    return\
    \ max_nesting_levels", "    var max_nesting_level = [Int]()\n    var current_nesting_level\
    \ = 0\n    var max_nesting_level_for_current_group = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            current_nesting_level += 1\n    \
    \        max_nesting_level_for_current_group = max(max_nesting_level_for_current_group,\
    \ current_nesting_level)\n        } else if char == \")\" {\n            current_nesting_level\
    \ -= 1\n        } else if char == \" \" {\n            max_nesting_level.append(max_nesting_level_for_current_group)\n\
    \            max_nesting_level_for_current_group = 0\n        }\n    }\n    max_nesting_level.append(max_nesting_level_for_current_group)\n\
    \    return max_nesting_level", "    var max_depth = 0\n    var depth = 0\n  \
    \  var result = [Int]()\n    for char in paren_string {\n        if char == \"\
    (\" {\n            depth += 1\n            max_depth = max(max_depth, depth)\n\
    \        } else if char == \")\" {\n            depth -= 1\n        } else if\
    \ char == \" \" {\n            result.append(max_depth)\n            max_depth\
    \ = 0\n            depth = 0\n        }\n    }\n    result.append(max_depth)\n\
    \    return result", "    var result = [Int]()\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        var max_depth = 0\n \
    \       var depth = 0\n        for char in paren_group {\n            if char\
    \ == \"(\" {\n                depth += 1\n            } else if char == \")\"\
    \ {\n                depth -= 1\n            }\n            if depth > max_depth\
    \ {\n                max_depth = depth\n            }\n        }\n        result.append(max_depth)\n\
    \    }\n    return result", "    var max_depth = 0\n    var current_depth = 0\n\
    \    var depths = [Int]()\n    for char in paren_string {\n        if char ==\
    \ \"(\" {\n            current_depth += 1\n            if current_depth > max_depth\
    \ {\n                max_depth = current_depth\n            }\n        } else\
    \ if char == \")\" {\n            current_depth -= 1\n        } else if char ==\
    \ \" \" {\n            depths.append(max_depth)\n            max_depth = 0\n \
    \           current_depth = 0\n        }\n    }\n    depths.append(max_depth)\n\
    \    return depths", "    var paren_stack = Stack<Character>()\n    var max_depth\
    \ = 0\n    var depth = 0\n    var max_depths = [Int]()\n    \n    for char in\
    \ paren_string {\n        if char == \"(\" {\n            paren_stack.push(char)\n\
    \            depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == \")\" {\n            paren_stack.pop()\n\
    \            depth -= 1\n            if paren_stack.isEmpty() {\n            \
    \    max_depths.append(max_depth)\n                max_depth = 0\n           \
    \     depth = 0\n            }\n        }\n    }\n    \n    return max_depths",
  "    var max_depth = 0\n    var depth = 0\n    var result = [Int]()\n    for char\
    \ in paren_string {\n        if char == \"(\" {\n            depth += 1\n    \
    \        max_depth = max(max_depth, depth)\n        } else if char == \")\" {\n\
    \            depth -= 1\n        } else if char == \" \" {\n            result.append(max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result.append(max_depth)\n\
    \    return result", "    var result = [Int]()\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in paren_groups {\n        var max_depth = 0\n       \
    \ var current_depth = 0\n        for char in group {\n            if char == \"\
    (\" {\n                current_depth += 1\n                if current_depth >\
    \ max_depth {\n                    max_depth = current_depth\n               \
    \ }\n            } else if char == \")\" {\n                current_depth -= 1\n\
    \            }\n        }\n        result.append(max_depth)\n    }\n    return\
    \ result", "    var paren_groups = paren_string.components(separatedBy: \" \"\
    )\n    var max_nesting = [Int]()\n    for group in paren_groups {\n        var\
    \ max_depth = 0\n        var current_depth = 0\n        for char in group {\n\
    \            if char == \"(\" {\n                current_depth += 1\n        \
    \    } else if char == \")\" {\n                current_depth -= 1\n         \
    \   }\n            if current_depth > max_depth {\n                max_depth =\
    \ current_depth\n            }\n        }\n        max_nesting.append(max_depth)\n\
    \    }\n    return max_nesting", "    var max_nesting = 0\n    var current_nesting\
    \ = 0\n    var results = [Int]()\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            current_nesting += 1\n            if current_nesting\
    \ > max_nesting {\n                max_nesting = current_nesting\n           \
    \ }\n        } else if char == \")\" {\n            current_nesting -= 1\n   \
    \     } else if char == \" \" {\n            results.append(max_nesting)\n   \
    \         max_nesting = 0\n            current_nesting = 0\n        }\n    }\n\
    \    results.append(max_nesting)\n    return results", "    var paren_stack =\
    \ Stack<Character>()\n    var max_depth = 0\n    var depth = 0\n    var result\
    \ = [Int]()\n    for char in paren_string {\n        if char == \"(\" {\n    \
    \        paren_stack.push(char)\n            depth += 1\n            if depth\
    \ > max_depth {\n                max_depth = depth\n            }\n        } else\
    \ if char == \")\" {\n            paren_stack.pop()\n            depth -= 1\n\
    \        } else if char == \" \" {\n            result.append(max_depth)\n   \
    \         max_depth = 0\n            depth = 0\n        }\n    }\n    result.append(max_depth)\n\
    \    return result", "    var result = [Int]()\n    var current_level = 0\n  \
    \  var max_level = 0\n    for char in paren_string {\n        if char == \"(\"\
    \ {\n            current_level += 1\n            max_level = max(max_level, current_level)\n\
    \        } else if char == \")\" {\n            current_level -= 1\n        }\
    \ else if char == \" \" {\n            result.append(max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result.append(max_level)\n\
    \    return result", "    var paren_stack = Stack<Character>()\n    var max_depth\
    \ = 0\n    var current_depth = 0\n    var max_depths = [Int]()\n    \n    for\
    \ paren in paren_string {\n        if paren == \"(\" {\n            paren_stack.push(paren)\n\
    \            current_depth += 1\n            if current_depth > max_depth {\n\
    \                max_depth = current_depth\n            }\n        } else if paren\
    \ == \")\" {\n            paren_stack.pop()\n            current_depth -= 1\n\
    \            if paren_stack.isEmpty() {\n                max_depths.append(max_depth)\n\
    \                max_depth = 0\n                current_depth = 0\n          \
    \  }\n        }\n    }\n    return max_depths", "    var paren_stack = Stack<Character>()\n\
    \    var max_depth = 0\n    var depths = [Int]()\n    var depth = 0\n    for char\
    \ in paren_string {\n        if char == \"(\" {\n            depth += 1\n    \
    \        max_depth = max(max_depth, depth)\n            paren_stack.push(char)\n\
    \        } else if char == \")\" {\n            depth -= 1\n            paren_stack.pop()\n\
    \        } else if char == \" \" {\n            depths.append(max_depth)\n   \
    \         max_depth = 0\n            depth = 0\n        }\n    }\n    depths.append(max_depth)\n\
    \    return depths", "    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var result = [Int]()\n    for group in paren_groups {\n        var\
    \ max_level = 0\n        var current_level = 0\n        for char in group.characters\
    \ {\n            if char == \"(\" {\n                current_level += 1\n    \
    \        } else if char == \")\" {\n                current_level -= 1\n     \
    \       }\n            if current_level > max_level {\n                max_level\
    \ = current_level\n            }\n        }\n        result.append(max_level)\n\
    \    }\n    return result", "    var result: [Int] = []\n    var current_level\
    \ = 0\n    var max_level = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            current_level += 1\n            max_level = max(max_level,\
    \ current_level)\n        } else if char == \")\" {\n            current_level\
    \ -= 1\n        } else if char == \" \" {\n            result.append(max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result.append(max_level)\n    return result", "    var stack = Stack<Character>()\n\
    \    var max_depth = 0\n    var depths = [Int]()\n    var depth = 0\n    for c\
    \ in paren_string {\n        if c == \"(\" {\n            stack.push(c)\n    \
    \        depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if c == \")\" {\n            if stack.peek()\
    \ == \"(\" {\n                stack.pop()\n                depths.append(depth)\n\
    \                depth -= 1\n            }\n        }\n    }\n    return depths",
  "    var paren_stack: [Character] = []\n    var max_depth: [Int] = []\n    var depth\
    \ = 0\n    for c in paren_string {\n        if c == \"(\" {\n            paren_stack.append(c)\n\
    \            depth += 1\n        } else if c == \")\" {\n            paren_stack.removeLast()\n\
    \            depth -= 1\n        } else if c == \" \" {\n            max_depth.append(depth)\n\
    \            depth = 0\n        }\n    }\n    max_depth.append(depth)\n    return\
    \ max_depth", "    var max_levels = [Int]()\n    var paren_stack = Stack<Character>()\n\
    \    var current_level = 0\n    var max_level = 0\n    for paren in paren_string\
    \ {\n        if paren == \"(\" {\n            paren_stack.push(paren)\n      \
    \      current_level += 1\n            if current_level > max_level {\n      \
    \          max_level = current_level\n            }\n        } else if paren ==\
    \ \")\" {\n            paren_stack.pop()\n            current_level -= 1\n   \
    \     }\n    }\n    max_levels.append(max_level)\n    return max_levels", "  \
    \  var result = [Int]()\n    var current_level = 0\n    var max_level = 0\n  \
    \  for char in paren_string {\n        if char == \"(\" {\n            current_level\
    \ += 1\n            max_level = max(max_level, current_level)\n        } else\
    \ if char == \")\" {\n            current_level -= 1\n        } else if char ==\
    \ \" \" {\n            result.append(max_level)\n            max_level = 0\n \
    \           current_level = 0\n        }\n    }\n    result.append(max_level)\n\
    \    return result", "    var max_nesting_levels = [Int]()\n    let paren_groups\
    \ = paren_string.components(separatedBy: \" \")\n    for group in paren_groups\
    \ {\n        var max_nesting_level = 0\n        var current_nesting_level = 0\n\
    \        for char in group {\n            if char == \"(\" {\n               \
    \ current_nesting_level += 1\n            } else if char == \")\" {\n        \
    \        current_nesting_level -= 1\n            }\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels", "    var result = [Int]()\n    let paren_groups\
    \ = paren_string.components(separatedBy: \" \")\n    for group in paren_groups\
    \ {\n        var max_level = 0\n        var level = 0\n        for char in group\
    \ {\n            if char == \"(\" {\n                level += 1\n            }\
    \ else if char == \")\" {\n                level -= 1\n            }\n       \
    \     if level > max_level {\n                max_level = level\n            }\n\
    \        }\n        result.append(max_level)\n    }\n    return result", "   \
    \ var result = [Int]()\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        var max_depth = 0\n \
    \       var current_depth = 0\n        for paren in paren_group {\n          \
    \  if paren == \"(\" {\n                current_depth += 1\n            } else\
    \ if paren == \")\" {\n                current_depth -= 1\n            }\n   \
    \         if current_depth > max_depth {\n                max_depth = current_depth\n\
    \            }\n        }\n        result.append(max_depth)\n    }\n    return\
    \ result", "    var max_nesting_levels = [Int]()\n    var current_nesting_level\
    \ = 0\n    var max_nesting_level = 0\n    for char in paren_string {\n       \
    \ if char == \"(\" {\n            current_nesting_level += 1\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        } else if char == \")\" {\n            current_nesting_level\
    \ -= 1\n        } else if char == \" \" {\n            max_nesting_levels.append(max_nesting_level)\n\
    \            max_nesting_level = 0\n            current_nesting_level = 0\n  \
    \      }\n    }\n    max_nesting_levels.append(max_nesting_level)\n    return\
    \ max_nesting_levels", "    var result = [Int]()\n    var current_level = 0\n\
    \    var max_level = 0\n    for char in paren_string {\n        if char == \"\
    (\" {\n            current_level += 1\n            max_level = max(max_level,\
    \ current_level)\n        } else if char == \")\" {\n            current_level\
    \ -= 1\n        } else if char == \" \" {\n            result.append(max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result.append(max_level)\n    return result", "    var max_depth = 0\n  \
    \  var depth = 0\n    var result = [Int]()\n    for char in paren_string {\n \
    \       if char == \"(\" {\n            depth += 1\n            max_depth = max(max_depth,\
    \ depth)\n        } else if char == \")\" {\n            depth -= 1\n        }\
    \ else if char == \" \" {\n            result.append(max_depth)\n            max_depth\
    \ = 0\n            depth = 0\n        }\n    }\n    result.append(max_depth)\n\
    \    return result", "    var max_nesting = 0\n    var current_nesting = 0\n \
    \   var max_nesting_list = [Int]()\n    for char in paren_string {\n        if\
    \ char == \"(\" {\n            current_nesting += 1\n            if current_nesting\
    \ > max_nesting {\n                max_nesting = current_nesting\n           \
    \ }\n        } else if char == \")\" {\n            current_nesting -= 1\n   \
    \         if current_nesting == 0 {\n                max_nesting_list.append(max_nesting)\n\
    \                max_nesting = 0\n            }\n        }\n    }\n    return\
    \ max_nesting_list", "    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var nesting_level = 0\n        var max_nesting_level = 0\n      \
    \  for char in paren_group {\n            if char == \"(\" {\n               \
    \ nesting_level += 1\n            } else if char == \")\" {\n                nesting_level\
    \ -= 1\n            }\n            if nesting_level > max_nesting_level {\n  \
    \              max_nesting_level = nesting_level\n            }\n        }\n \
    \       max_nesting_levels.append(max_nesting_level)\n    }\n    return max_nesting_levels",
  "    var result = [Int]()\n    var max_depth = 0\n    var current_depth = 0\n  \
    \  for char in paren_string {\n        if char == \"(\" {\n            current_depth\
    \ += 1\n            max_depth = max(max_depth, current_depth)\n        } else\
    \ if char == \")\" {\n            current_depth -= 1\n        } else if char ==\
    \ \" \" {\n            result.append(max_depth)\n            max_depth = 0\n \
    \           current_depth = 0\n        }\n    }\n    result.append(max_depth)\n\
    \    return result", "    var result: [Int] = []\n    var current_level = 0\n\
    \    var max_level = 0\n    for char in paren_string {\n        if char == \"\
    (\" {\n            current_level += 1\n            max_level = max(max_level,\
    \ current_level)\n        } else if char == \")\" {\n            current_level\
    \ -= 1\n        } else if char == \" \" {\n            result.append(max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result.append(max_level)\n    return result", "    var result = [Int]()\n\
    \    let paren_groups = paren_string.components(separatedBy: \" \")\n    for paren_group\
    \ in paren_groups {\n        var level = 0\n        var max_level = 0\n      \
    \  for paren in paren_group {\n            if paren == \"(\" {\n             \
    \   level += 1\n            } else if paren == \")\" {\n                level\
    \ -= 1\n            }\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        }\n        result.append(max_level)\n    }\n\
    \    return result", "    var result = [Int]()\n    var paren_stack = Stack<Character>()\n\
    \    var max_nesting = 0\n    var current_nesting = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            paren_stack.push(char)\n        \
    \    current_nesting += 1\n            if current_nesting > max_nesting {\n  \
    \              max_nesting = current_nesting\n            }\n        } else if\
    \ char == \")\" {\n            paren_stack.pop()\n            current_nesting\
    \ -= 1\n        }\n    }\n    result.append(max_nesting)\n    return result",
  "    var paren_stack: [Character] = []\n    var max_depth: [Int] = []\n    var current_depth\
    \ = 0\n    var current_max = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            paren_stack.append(char)\n            current_depth\
    \ += 1\n            if current_depth > current_max {\n                current_max\
    \ = current_depth\n            }\n        } else if char == \")\" {\n        \
    \    paren_stack.popLast()\n            current_depth -= 1\n        } else if\
    \ char == \" \" {\n            max_depth.append(current_max)\n            current_max\
    \ = 0\n            current_depth = 0\n        }\n    }\n    max_depth.append(current_max)\n\
    \    return max_depth", "    var result = [Int]()\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        var max_depth = 0\n \
    \       var depth = 0\n        for char in paren_group {\n            if char\
    \ == \"(\" {\n                depth += 1\n            } else if char == \")\"\
    \ {\n                depth -= 1\n            }\n            if depth > max_depth\
    \ {\n                max_depth = depth\n            }\n        }\n        result.append(max_depth)\n\
    \    }\n    return result", "    var result = [Int]()\n    var stack = [Character]()\n\
    \    var max_depth = 0\n    var depth = 0\n    for char in paren_string {\n  \
    \      if char == \"(\" {\n            stack.append(char)\n            depth +=\
    \ 1\n            max_depth = max(max_depth, depth)\n        } else if char ==\
    \ \")\" {\n            stack.removeLast()\n            depth -= 1\n        } else\
    \ if char == \" \" {\n            result.append(max_depth)\n            max_depth\
    \ = 0\n            depth = 0\n        }\n    }\n    result.append(max_depth)\n\
    \    return result", "    var max_nesting_levels = [Int]()\n    let paren_groups\
    \ = paren_string.components(separatedBy: \" \")\n    for paren_group in paren_groups\
    \ {\n        var nesting_level = 0\n        var max_nesting_level = 0\n      \
    \  for paren in paren_group {\n            if paren == \"(\" {\n             \
    \   nesting_level += 1\n            } else if paren == \")\" {\n             \
    \   nesting_level -= 1\n            }\n            if nesting_level > max_nesting_level\
    \ {\n                max_nesting_level = nesting_level\n            }\n      \
    \  }\n        max_nesting_levels.append(max_nesting_level)\n    }\n    return\
    \ max_nesting_levels", "    var max_nesting_levels = [Int]()\n    var current_nesting_level\
    \ = 0\n    var max_nesting_level = 0\n    for char in paren_string {\n       \
    \ if char == \"(\" {\n            current_nesting_level += 1\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        } else if char == \")\" {\n            current_nesting_level\
    \ -= 1\n        } else if char == \" \" {\n            max_nesting_levels.append(max_nesting_level)\n\
    \            max_nesting_level = 0\n            current_nesting_level = 0\n  \
    \      }\n    }\n    max_nesting_levels.append(max_nesting_level)\n    return\
    \ max_nesting_levels", "    var max_depth = 0\n    var current_depth = 0\n   \
    \ var max_depth_list = [Int]()\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            current_depth += 1\n            if current_depth > max_depth\
    \ {\n                max_depth = current_depth\n            }\n        } else\
    \ if char == \")\" {\n            current_depth -= 1\n        } else if char ==\
    \ \" \" {\n            max_depth_list.append(max_depth)\n            max_depth\
    \ = 0\n            current_depth = 0\n        }\n    }\n    max_depth_list.append(max_depth)\n\
    \    return max_depth_list", "    var max_depth = [Int]()\n    var depth = 0\n\
    \    var max_depth_so_far = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            depth += 1\n            if depth > max_depth_so_far\
    \ {\n                max_depth_so_far = depth\n            }\n        } else if\
    \ char == \")\" {\n            depth -= 1\n        } else if char == \" \" {\n\
    \            max_depth.append(max_depth_so_far)\n            max_depth_so_far\
    \ = 0\n            depth = 0\n        }\n    }\n    max_depth.append(max_depth_so_far)\n\
    \    return max_depth", "    var max_nesting_levels = [Int]()\n    var current_nesting_level\
    \ = 0\n    var max_nesting_level = 0\n    var is_open_paren = false\n    for char\
    \ in paren_string {\n        if char == \"(\" {\n            is_open_paren = true\n\
    \            current_nesting_level += 1\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        } else if char == \")\" {\n            is_open_paren =\
    \ false\n            current_nesting_level -= 1\n        } else if char == \"\
    \ \" && !is_open_paren {\n            max_nesting_levels.append(max_nesting_level)\n\
    \            max_nesting_level = 0\n            current_nesting_level = 0\n  \
    \      }\n    }\n    max_nesting_levels.append(max_nesting_level)\n    return\
    \ max_nesting_levels", "    var result = [Int]()\n    var current_level = 0\n\
    \    var max_level = 0\n    for char in paren_string {\n        if char == \"\
    (\" {\n            current_level += 1\n            max_level = max(max_level,\
    \ current_level)\n        } else if char == \")\" {\n            current_level\
    \ -= 1\n        } else if char == \" \" {\n            result.append(max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result.append(max_level)\n    return result", "    var result = [Int]()\n\
    \    var current_level = 0\n    var max_level = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            current_level += 1\n            max_level\
    \ = max(max_level, current_level)\n        } else if char == \")\" {\n       \
    \     current_level -= 1\n        } else if char == \" \" {\n            result.append(max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result.append(max_level)\n    return result", "    var max_nesting_levels\
    \ = [Int]()\n    var current_nesting_level = 0\n    var max_nesting_level = 0\n\
    \    var paren_string_array = Array(paren_string)\n    for i in 0..<paren_string_array.count\
    \ {\n        if paren_string_array[i] == \"(\" {\n            current_nesting_level\
    \ += 1\n            if current_nesting_level > max_nesting_level {\n         \
    \       max_nesting_level = current_nesting_level\n            }\n        } else\
    \ if paren_string_array[i] == \")\" {\n            current_nesting_level -= 1\n\
    \        } else if paren_string_array[i] == \" \" {\n            max_nesting_levels.append(max_nesting_level)\n\
    \            max_nesting_level = 0\n            current_nesting_level = 0\n  \
    \      }\n    }\n    max_nesting_levels.append(max_nesting_level)\n    return\
    \ max_nesting_levels", "    var max_depth = 0\n    var depth = 0\n    var result\
    \ = [Int]()\n    for char in paren_string {\n        if char == \"(\" {\n    \
    \        depth += 1\n            max_depth = max(max_depth, depth)\n        }\
    \ else if char == \")\" {\n            depth -= 1\n        } else if char == \"\
    \ \" {\n            result.append(max_depth)\n            max_depth = 0\n    \
    \        depth = 0\n        }\n    }\n    result.append(max_depth)\n    return\
    \ result", "    var max_levels = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var level = 0\n        var max_level\
    \ = 0\n        for char in group {\n            if char == \"(\" {\n         \
    \       level += 1\n            } else if char == \")\" {\n                level\
    \ -= 1\n            }\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        }\n        max_levels.append(max_level)\n  \
    \  }\n    return max_levels", "    var max_depth = 0\n    var current_depth =\
    \ 0\n    var max_depth_array = [Int]()\n    for char in paren_string {\n     \
    \   if char == \"(\" {\n            current_depth += 1\n            if current_depth\
    \ > max_depth {\n                max_depth = current_depth\n            }\n  \
    \      } else if char == \")\" {\n            current_depth -= 1\n        } else\
    \ if char == \" \" {\n            max_depth_array.append(max_depth)\n        \
    \    max_depth = 0\n            current_depth = 0\n        }\n    }\n    max_depth_array.append(max_depth)\n\
    \    return max_depth_array", "    var max_nesting_levels = [Int]()\n    var current_nesting_level\
    \ = 0\n    var max_nesting_level = 0\n    for char in paren_string {\n       \
    \ if char == \"(\" {\n            current_nesting_level += 1\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        } else if char == \")\" {\n            current_nesting_level\
    \ -= 1\n        } else if char == \" \" {\n            max_nesting_levels.append(max_nesting_level)\n\
    \            max_nesting_level = 0\n            current_nesting_level = 0\n  \
    \      }\n    }\n    max_nesting_levels.append(max_nesting_level)\n    return\
    \ max_nesting_levels", "    var result: [Int] = []\n    var current_level = 0\n\
    \    var max_level = 0\n    for char in paren_string {\n        if char == \"\
    (\" {\n            current_level += 1\n            max_level = max(max_level,\
    \ current_level)\n        } else if char == \")\" {\n            current_level\
    \ -= 1\n        } else if char == \" \" {\n            result.append(max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result.append(max_level)\n    return result", "    var paren_stack = Stack<Character>()\n\
    \    var max_nesting = 0\n    var curr_nesting = 0\n    var result = [Int]()\n\
    \    for char in paren_string {\n        if char == \"(\" {\n            paren_stack.push(char)\n\
    \            curr_nesting += 1\n            if curr_nesting > max_nesting {\n\
    \                max_nesting = curr_nesting\n            }\n        } else if\
    \ char == \")\" {\n            paren_stack.pop()\n            curr_nesting -=\
    \ 1\n        } else if char == \" \" {\n            result.append(max_nesting)\n\
    \            max_nesting = 0\n            curr_nesting = 0\n        }\n    }\n\
    \    result.append(max_nesting)\n    return result", "    var result = [Int]()\n\
    \    var current_level = 0\n    var max_level = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            current_level += 1\n            max_level\
    \ = max(max_level, current_level)\n        } else if char == \")\" {\n       \
    \     current_level -= 1\n        } else if char == \" \" {\n            result.append(max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result.append(max_level)\n    return result", "    var max_nesting = 0\n\
    \    var nesting_levels = [Int]()\n    var current_nesting = 0\n    for char in\
    \ paren_string {\n        if char == \"(\" {\n            current_nesting += 1\n\
    \            if current_nesting > max_nesting {\n                max_nesting =\
    \ current_nesting\n            }\n        } else if char == \")\" {\n        \
    \    current_nesting -= 1\n        } else if char == \" \" {\n            nesting_levels.append(max_nesting)\n\
    \            max_nesting = 0\n            current_nesting = 0\n        }\n   \
    \ }\n    nesting_levels.append(max_nesting)\n    return nesting_levels", "   \
    \ var paren_array = [Int]()\n    var paren_stack = [Character]()\n    var max_depth\
    \ = 0\n    var current_depth = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            paren_stack.append(char)\n            current_depth\
    \ += 1\n            if current_depth > max_depth {\n                max_depth\
    \ = current_depth\n            }\n        } else if char == \")\" {\n        \
    \    if paren_stack.last == \"(\" {\n                paren_stack.removeLast()\n\
    \                current_depth -= 1\n            }\n        }\n    }\n    paren_array.append(max_depth)\n\
    \    return paren_array", "    var paren_stack = Stack<Character>()\n    var max_depth\
    \ = 0\n    var depth = 0\n    var max_depths = [Int]()\n    \n    for paren in\
    \ paren_string {\n        if paren == \"(\" {\n            paren_stack.push(paren)\n\
    \            depth += 1\n        } else if paren == \")\" {\n            paren_stack.pop()\n\
    \            depth -= 1\n        }\n        \n        if depth > max_depth {\n\
    \            max_depth = depth\n        }\n        \n        if paren == \" \"\
    \ {\n            max_depths.append(max_depth)\n            max_depth = 0\n   \
    \         depth = 0\n        }\n    }\n    \n    return max_depths", "    var\
    \ paren_groups = paren_string.components(separatedBy: \" \")\n    var max_nesting_levels\
    \ = [Int]()\n    for paren_group in paren_groups {\n        var nesting_level\
    \ = 0\n        var max_nesting_level = 0\n        for paren in paren_group {\n\
    \            if paren == \"(\" {\n                nesting_level += 1\n       \
    \     } else if paren == \")\" {\n                nesting_level -= 1\n       \
    \     }\n            if nesting_level > max_nesting_level {\n                max_nesting_level\
    \ = nesting_level\n            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels", "    var stack = Stack<Character>()\n\
    \    var max_depth = 0\n    var current_depth = 0\n    var result = [Int]()\n\
    \    for char in paren_string {\n        if char == \"(\" {\n            stack.push(char)\n\
    \            current_depth += 1\n            if current_depth > max_depth {\n\
    \                max_depth = current_depth\n            }\n        } else if char\
    \ == \")\" {\n            if stack.isEmpty() {\n                result.append(0)\n\
    \                current_depth = 0\n                max_depth = 0\n          \
    \  } else {\n                stack.pop()\n                current_depth -= 1\n\
    \            }\n        } else if char == \" \" {\n            result.append(max_depth)\n\
    \            current_depth = 0\n            max_depth = 0\n        }\n    }\n\
    \    result.append(max_depth)\n    return result", "    var result = [Int]()\n\
    \    let paren_groups = paren_string.components(separatedBy: \" \")\n    for paren_group\
    \ in paren_groups {\n        var max_level = 0\n        var current_level = 0\n\
    \        for char in paren_group {\n            if char == \"(\" {\n         \
    \       current_level += 1\n                if current_level > max_level {\n \
    \                   max_level = current_level\n                }\n           \
    \ } else if char == \")\" {\n                current_level -= 1\n            }\n\
    \        }\n        result.append(max_level)\n    }\n    return result", "   \
    \ var result = [Int]()\n    var current_level = 0\n    var max_level = 0\n   \
    \ for char in paren_string {\n        if char == \"(\" {\n            current_level\
    \ += 1\n            max_level = max(max_level, current_level)\n        } else\
    \ if char == \")\" {\n            current_level -= 1\n        } else if char ==\
    \ \" \" {\n            result.append(max_level)\n            max_level = 0\n \
    \           current_level = 0\n        }\n    }\n    result.append(max_level)\n\
    \    return result", "    var result = [Int]()\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for paren_group in paren_groups {\n        var max_level = 0\n \
    \       var current_level = 0\n        for char in paren_group {\n           \
    \ if char == \"(\" {\n                current_level += 1\n                if current_level\
    \ > max_level {\n                    max_level = current_level\n             \
    \   }\n            } else if char == \")\" {\n                current_level -=\
    \ 1\n            }\n        }\n        result.append(max_level)\n    }\n    return\
    \ result", "    var paren_stack = Stack<Character>()\n    var max_depth = 0\n\
    \    var depth = 0\n    var max_depths = [Int]()\n    \n    for paren in paren_string\
    \ {\n        if paren == \"(\" {\n            paren_stack.push(paren)\n      \
    \      depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if paren == \")\" {\n            paren_stack.pop()\n\
    \            depth -= 1\n            if paren_stack.isEmpty() {\n            \
    \    max_depths.append(max_depth)\n                max_depth = 0\n           \
    \     depth = 0\n            }\n        }\n    }\n    \n    return max_depths",
  "    var max_nesting_levels = [Int]()\n    var current_nesting_level = 0\n    var\
    \ max_nesting_level = 0\n    for char in paren_string {\n        if char == \"\
    (\" {\n            current_nesting_level += 1\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        } else if char == \")\" {\n            current_nesting_level\
    \ -= 1\n        } else if char == \" \" {\n            max_nesting_levels.append(max_nesting_level)\n\
    \            max_nesting_level = 0\n            current_nesting_level = 0\n  \
    \      }\n    }\n    max_nesting_levels.append(max_nesting_level)\n    return\
    \ max_nesting_levels", "    var max_nesting_levels = [Int]()\n    var current_nesting_level\
    \ = 0\n    var max_nesting_level = 0\n    for char in paren_string {\n       \
    \ if char == \"(\" {\n            current_nesting_level += 1\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        } else if char == \")\" {\n            current_nesting_level\
    \ -= 1\n        } else if char == \" \" {\n            max_nesting_levels.append(max_nesting_level)\n\
    \            max_nesting_level = 0\n            current_nesting_level = 0\n  \
    \      }\n    }\n    max_nesting_levels.append(max_nesting_level)\n    return\
    \ max_nesting_levels", "    var paren_stack: [Character] = []\n    var max_depth:\
    \ [Int] = []\n    var current_depth = 0\n    var current_group = 0\n    for char\
    \ in paren_string {\n        if char == \"(\" {\n            paren_stack.append(char)\n\
    \            current_depth += 1\n        } else if char == \")\" {\n         \
    \   paren_stack.popLast()\n            current_depth -= 1\n        } else if char\
    \ == \" \" {\n            max_depth.append(current_depth)\n            current_depth\
    \ = 0\n            current_group += 1\n        }\n    }\n    max_depth.append(current_depth)\n\
    \    return max_depth", "    var paren_stack = Stack<Character>()\n    var max_depth\
    \ = 0\n    var depths = [Int]()\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            paren_stack.push(char)\n            max_depth += 1\n\
    \        } else if char == \")\" {\n            paren_stack.pop()\n          \
    \  max_depth -= 1\n        } else if char == \" \" {\n            depths.append(max_depth)\n\
    \            max_depth = 0\n        }\n    }\n    depths.append(max_depth)\n \
    \   return depths", "    var max_depth = 0\n    var current_depth = 0\n    var\
    \ result = [Int]()\n    for char in paren_string {\n        if char == \"(\" {\n\
    \            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n\
    \        } else if char == \")\" {\n            current_depth -= 1\n        }\
    \ else if char == \" \" {\n            result.append(max_depth)\n            max_depth\
    \ = 0\n            current_depth = 0\n        }\n    }\n    result.append(max_depth)\n\
    \    return result", "    var paren_stack = Stack<Character>()\n    var max_depth\
    \ = 0\n    var depths = [Int]()\n    var current_depth = 0\n    \n    for char\
    \ in paren_string {\n        if char == \"(\" {\n            paren_stack.push(char)\n\
    \            current_depth += 1\n            if current_depth > max_depth {\n\
    \                max_depth = current_depth\n            }\n        } else if char\
    \ == \")\" {\n            paren_stack.pop()\n            current_depth -= 1\n\
    \            if paren_stack.isEmpty() {\n                depths.append(max_depth)\n\
    \                max_depth = 0\n                current_depth = 0\n          \
    \  }\n        }\n    }\n    \n    return depths", "    var max_nesting = 0\n \
    \   var nesting_levels = [Int]()\n    var current_nesting = 0\n    for char in\
    \ paren_string {\n        if char == \"(\" {\n            current_nesting += 1\n\
    \            if current_nesting > max_nesting {\n                max_nesting =\
    \ current_nesting\n            }\n        } else if char == \")\" {\n        \
    \    current_nesting -= 1\n            if current_nesting == 0 {\n           \
    \     nesting_levels.append(max_nesting)\n                max_nesting = 0\n  \
    \          }\n        }\n    }\n    return nesting_levels", "    var paren_stack\
    \ = Stack<Character>()\n    var max_depth = 0\n    var depth = 0\n    var max_depths\
    \ = [Int]()\n    \n    for char in paren_string {\n        if char == \"(\" {\n\
    \            paren_stack.push(char)\n            depth += 1\n            if depth\
    \ > max_depth {\n                max_depth = depth\n            }\n        } else\
    \ if char == \")\" {\n            paren_stack.pop()\n            depth -= 1\n\
    \            if paren_stack.isEmpty() {\n                max_depths.append(max_depth)\n\
    \                max_depth = 0\n                depth = 0\n            }\n   \
    \     }\n    }\n    \n    return max_depths", "    var max_nesting = 0\n    var\
    \ nesting_levels = [Int]()\n    var current_nesting = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            current_nesting += 1\n          \
    \  if current_nesting > max_nesting {\n                max_nesting = current_nesting\n\
    \            }\n        } else if char == \")\" {\n            nesting_levels.append(current_nesting)\n\
    \            current_nesting -= 1\n        }\n    }\n    return nesting_levels",
  "    var max_levels = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var current_level = 0\n        var\
    \ max_level = 0\n        for char in group {\n            if char == \"(\" {\n\
    \                current_level += 1\n            } else if char == \")\" {\n \
    \               current_level -= 1\n            }\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      }\n        max_levels.append(max_level)\n    }\n    return max_levels",
  "    var paren_stack = Stack<Character>()\n    var max_depth = 0\n    var depth\
    \ = 0\n    var result = [Int]()\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            paren_stack.push(char)\n            depth += 1\n   \
    \         if depth > max_depth {\n                max_depth = depth\n        \
    \    }\n        } else if char == \")\" {\n            paren_stack.pop()\n   \
    \         depth -= 1\n        } else if char == \" \" {\n            result.append(max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result.append(max_depth)\n\
    \    return result", "    var result: [Int] = []\n    var current_level: Int =\
    \ 0\n    var max_level: Int = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == \")\" {\n            current_level -= 1\n        } else if char ==\
    \ \" \" {\n            result.append(max_level)\n            max_level = 0\n \
    \           current_level = 0\n        }\n    }\n    result.append(max_level)\n\
    \    return result", "    var result = [Int]()\n    var current_level = 0\n  \
    \  var max_level = 0\n    for char in paren_string {\n        if char == \"(\"\
    \ {\n            current_level += 1\n            max_level = max(max_level, current_level)\n\
    \        } else if char == \")\" {\n            current_level -= 1\n        }\
    \ else if char == \" \" {\n            result.append(max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result.append(max_level)\n\
    \    return result", "    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var result = [Int]()\n    for group in paren_groups {\n        var\
    \ max_depth = 0\n        var depth = 0\n        for char in group.characters {\n\
    \            if char == \"(\" {\n                depth += 1\n            } else\
    \ if char == \")\" {\n                depth -= 1\n            }\n            if\
    \ depth > max_depth {\n                max_depth = depth\n            }\n    \
    \    }\n        result.append(max_depth)\n    }\n    return result", "    var\
    \ paren_groups = paren_string.components(separatedBy: \" \")\n    var max_levels\
    \ = [Int]()\n    for paren_group in paren_groups {\n        var level = 0\n  \
    \      var max_level = 0\n        for paren in paren_group {\n            if paren\
    \ == \"(\" {\n                level += 1\n            } else if paren == \")\"\
    \ {\n                level -= 1\n            }\n            if level > max_level\
    \ {\n                max_level = level\n            }\n        }\n        max_levels.append(max_level)\n\
    \    }\n    return max_levels", "    var result = [Int]()\n    let paren_groups\
    \ = paren_string.components(separatedBy: \" \")\n    for paren_group in paren_groups\
    \ {\n        var max_depth = 0\n        var depth = 0\n        for char in paren_group\
    \ {\n            if char == \"(\" {\n                depth += 1\n            \
    \    if depth > max_depth {\n                    max_depth = depth\n         \
    \       }\n            } else if char == \")\" {\n                depth -= 1\n\
    \            }\n        }\n        result.append(max_depth)\n    }\n    return\
    \ result", "    var max_nesting_levels = [Int]()\n    let groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in groups {\n        var nesting_level = 0\n        var\
    \ max_nesting_level = 0\n        for char in group {\n            if char == \"\
    (\" {\n                nesting_level += 1\n            } else if char == \")\"\
    \ {\n                nesting_level -= 1\n            }\n            if nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = nesting_level\n \
    \           }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels", "    var max_levels = [Int]()\n    var\
    \ current_level = 0\n    var max_level = 0\n    for char in paren_string {\n \
    \       if char == \"(\" {\n            current_level += 1\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == \")\" {\n            current_level -= 1\n        } else\
    \ if char == \" \" {\n            max_levels.append(max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    max_levels.append(max_level)\n\
    \    return max_levels", "    var max_nesting_levels = [Int]()\n    var current_nesting_level\
    \ = 0\n    var max_nesting_level = 0\n    var paren_string_array = Array(paren_string)\n\
    \    for char in paren_string_array {\n        if char == \"(\" {\n          \
    \  current_nesting_level += 1\n            if current_nesting_level > max_nesting_level\
    \ {\n                max_nesting_level = current_nesting_level\n            }\n\
    \        } else if char == \")\" {\n            current_nesting_level -= 1\n \
    \       } else if char == \" \" {\n            max_nesting_levels.append(max_nesting_level)\n\
    \            max_nesting_level = 0\n            current_nesting_level = 0\n  \
    \      }\n    }\n    max_nesting_levels.append(max_nesting_level)\n    return\
    \ max_nesting_levels", "    var max_nesting = 0\n    var current_nesting = 0\n\
    \    var result = [Int]()\n    for char in paren_string {\n        if char ==\
    \ \"(\" {\n            current_nesting += 1\n            if current_nesting >\
    \ max_nesting {\n                max_nesting = current_nesting\n            }\n\
    \        } else if char == \")\" {\n            current_nesting -= 1\n       \
    \ } else if char == \" \" {\n            result.append(max_nesting)\n        \
    \    max_nesting = 0\n            current_nesting = 0\n        }\n    }\n    result.append(max_nesting)\n\
    \    return result", "    var result = [Int]()\n    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in paren_groups {\n        var count = 0\n        var\
    \ max_count = 0\n        for char in group {\n            if char == \"(\" {\n\
    \                count += 1\n            } else if char == \")\" {\n         \
    \       count -= 1\n            }\n            if count > max_count {\n      \
    \          max_count = count\n            }\n        }\n        result.append(max_count)\n\
    \    }\n    return result", "    var paren_stack = Stack<Character>()\n    var\
    \ max_depth = 0\n    var depth = 0\n    var max_depths = [Int]()\n    \n    for\
    \ char in paren_string {\n        if char == \"(\" {\n            paren_stack.push(char)\n\
    \            depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == \")\" {\n            paren_stack.pop()\n\
    \            depth -= 1\n            if paren_stack.isEmpty() {\n            \
    \    max_depths.append(max_depth)\n                max_depth = 0\n           \
    \     depth = 0\n            }\n        }\n    }\n    \n    return max_depths",
  "    var result = [Int]()\n    var paren_stack = Stack<Character>()\n    var max_depth\
    \ = 0\n    var current_depth = 0\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            paren_stack.push(char)\n            current_depth +=\
    \ 1\n            if current_depth > max_depth {\n                max_depth = current_depth\n\
    \            }\n        } else if char == \")\" {\n            paren_stack.pop()\n\
    \            current_depth -= 1\n        } else if char == \" \" {\n         \
    \   result.append(max_depth)\n            max_depth = 0\n            current_depth\
    \ = 0\n        }\n    }\n    result.append(max_depth)\n    return result", " \
    \   var result = [Int]()\n    var current_level = 0\n    var max_level = 0\n \
    \   for char in paren_string {\n        if char == \"(\" {\n            current_level\
    \ += 1\n            max_level = max(max_level, current_level)\n        } else\
    \ if char == \")\" {\n            current_level -= 1\n        } else if char ==\
    \ \" \" {\n            result.append(max_level)\n            max_level = 0\n \
    \           current_level = 0\n        }\n    }\n    result.append(max_level)\n\
    \    return result", "    var max_depth = 0\n    var current_depth = 0\n    var\
    \ max_depths = [Int]()\n    for char in paren_string {\n        if char == \"\
    (\" {\n            current_depth += 1\n            if current_depth > max_depth\
    \ {\n                max_depth = current_depth\n            }\n        } else\
    \ if char == \")\" {\n            current_depth -= 1\n        } else if char ==\
    \ \" \" {\n            max_depths.append(max_depth)\n            max_depth = 0\n\
    \            current_depth = 0\n        }\n    }\n    max_depths.append(max_depth)\n\
    \    return max_depths", "    var paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups\
    \ {\n        var nesting_level = 0\n        var max_nesting_level = 0\n      \
    \  for paren in paren_group {\n            if paren == \"(\" {\n             \
    \   nesting_level += 1\n            } else if paren == \")\" {\n             \
    \   nesting_level -= 1\n            }\n            if nesting_level > max_nesting_level\
    \ {\n                max_nesting_level = nesting_level\n            }\n      \
    \  }\n        max_nesting_levels.append(max_nesting_level)\n    }\n    return\
    \ max_nesting_levels", "    var result = [Int]()\n    var current_level = 0\n\
    \    var max_level = 0\n    for c in paren_string {\n        if c == \"(\" {\n\
    \            current_level += 1\n            max_level = max(max_level, current_level)\n\
    \        } else if c == \")\" {\n            current_level -= 1\n        } else\
    \ if c == \" \" {\n            result.append(max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result.append(max_level)\n\
    \    return result", "    var paren_stack = Stack<Character>()\n    var max_nesting\
    \ = 0\n    var curr_nesting = 0\n    var max_nesting_list = [Int]()\n    for char\
    \ in paren_string {\n        if char == \"(\" {\n            paren_stack.push(char)\n\
    \            curr_nesting += 1\n            if curr_nesting > max_nesting {\n\
    \                max_nesting = curr_nesting\n            }\n        } else if\
    \ char == \")\" {\n            paren_stack.pop()\n            curr_nesting -=\
    \ 1\n            if paren_stack.isEmpty() {\n                max_nesting_list.append(max_nesting)\n\
    \                max_nesting = 0\n                curr_nesting = 0\n         \
    \   }\n        }\n    }\n    return max_nesting_list"]
stop_tokens:
- "\n}"
