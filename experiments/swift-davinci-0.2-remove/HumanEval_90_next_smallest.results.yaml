language: swift
name: HumanEval_90_next_smallest
results:
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var next_min = lst[0]\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            next_min = min\n            min = lst[i]\n     \
    \   } else if lst[i] < next_min {\n            next_min = lst[i]\n        }\n\
    \    }\n    return next_min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpqcfot8qp/tmpqcfot8qp.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba68cd76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba68ca6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba68ca6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba68ca6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcfot8qp                        0x000055e610399621 <unavailable> + 5665

    5    libc.so.6                          0x00002ba68cf62460 __libc_start_main +
    245

    6    tmpqcfot8qp                        0x000055e6103991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n  \
    \  for i in lst {\n        if i < min {\n            nextMin = min\n         \
    \   min = i\n        } else if i < nextMin {\n            nextMin = i\n      \
    \  }\n    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpf_7us1dr/tmpf_7us1dr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7dd49f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7dd46ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7dd46ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7dd46eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf_7us1dr                        0x000055d1abb5b601 <unavailable> + 5633

    5    libc.so.6                          0x00002b7dd4be1460 __libc_start_main +
    245

    6    tmpf_7us1dr                        0x000055d1abb5b189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var sorted\
    \ = lst.sorted()\n    if sorted.count < 2 {\n        return nil\n    }\n    return\
    \ sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp99a9xim3/tmp99a9xim3.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1ce65bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1ce352b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1ce352988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1ce3517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp99a9xim3                        0x000055e8594cb8ba <unavailable> + 6330

    5    libc.so.6                          0x00002af1ce847460 __libc_start_main +
    245

    6    tmp99a9xim3                        0x000055e8594cb0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var smallest\
    \ = Int.max\n    var secondSmallest = Int.max\n    for i in lst {\n        if\
    \ i < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = i\n        } else if i < secondSmallest {\n            secondSmallest = i\n\
    \        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpn24lhj8n/tmpn24lhj8n.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7038130c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7037e27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7037e27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7037e267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn24lhj8n                        0x00005563f27878da <unavailable> + 6362

    5    libc.so.6                          0x00002b703831c460 __libc_start_main +
    245

    6    tmpn24lhj8n                        0x00005563f27870d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var lst =\
    \ lst\n    lst.sort()\n    if lst.count < 2 {\n        return nil\n    }\n   \
    \ return lst[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpktmyftxl/tmpktmyftxl.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17576c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17573bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17573bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17573bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpktmyftxl                        0x000055ca60d1693a <unavailable> + 6458

    5    libc.so.6                          0x00002b17578b1460 __libc_start_main +
    245

    6    tmpktmyftxl                        0x000055ca60d16139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var nextMin = Int.max\n    for i in lst {\n        if i < min {\n\
    \            nextMin = min\n            min = i\n        } else if i < nextMin\
    \ {\n            nextMin = i\n        }\n    }\n    return nextMin == Int.max\
    \ ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpyzu_z76s/tmpyzu_z76s.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6edb517c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6edb20eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6edb20e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6edb20d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyzu_z76s                        0x000055f9cb9495a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b6edb703460 __libc_start_main +
    245

    6    tmpyzu_z76s                        0x000055f9cb949129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp3jrmmuu9/tmp3jrmmuu9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b260a045c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2609d3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2609d3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2609d3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3jrmmuu9                        0x000055a58d6635a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b260a231460 __libc_start_main +
    245

    6    tmp3jrmmuu9                        0x000055a58d663129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var smallest\
    \ = Int.max\n    var secondSmallest = Int.max\n    for i in lst {\n        if\
    \ i < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = i\n        } else if i < secondSmallest {\n            secondSmallest = i\n\
    \        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpn24lhj8n/tmpn24lhj8n.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7038130c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7037e27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7037e27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7037e267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn24lhj8n                        0x00005563f27878da <unavailable> + 6362

    5    libc.so.6                          0x00002b703831c460 __libc_start_main +
    245

    6    tmpn24lhj8n                        0x00005563f27870d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var min2 = Int.max\n    for i in lst {\n        if i < min {\n \
    \           min2 = min\n            min = i\n        } else if i < min2 {\n  \
    \          min2 = i\n        }\n    }\n    return min2 == Int.max ? nil : min2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpskg5k99n/tmpskg5k99n.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6f976cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6f9463b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6f9463988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6f94627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpskg5k99n                        0x000055d2295bd5a1 <unavailable> + 5537

    5    libc.so.6                          0x00002ad6f9958460 __libc_start_main +
    245

    6    tmpskg5k99n                        0x000055d2295bd129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var next = Int.max\n    for i in lst {\n        if i < min {\n \
    \           next = min\n            min = i\n        } else if i < next {\n  \
    \          next = i\n        }\n    }\n    return next == Int.max ? nil : next\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp5i0rry8a/tmp5i0rry8a.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12057a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12054a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12054a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b120549f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5i0rry8a                        0x000055a5ce5d05a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b1205995460 __libc_start_main +
    245

    6    tmp5i0rry8a                        0x000055a5ce5d0129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n  \
    \  for i in 1..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp69gtr6sf/tmp69gtr6sf.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff925acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff922a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff922a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff922a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp69gtr6sf                        0x000055c602b2b9aa <unavailable> + 6570

    5    libc.so.6                          0x00002aff92798460 __libc_start_main +
    245

    6    tmp69gtr6sf                        0x000055c602b2b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n  \
    \  for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9dqyn33z/tmp9dqyn33z.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4f8ac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4f87b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4f87b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4f87b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9dqyn33z                        0x000055c25598f7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ac4f8cac460 __libc_start_main +
    245

    6    tmp9dqyn33z                        0x000055c25598f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var smallest = lst[0]\n    var nextSmallest = Int.max\n\
    \    for i in 1..<lst.count {\n        if lst[i] < smallest {\n            nextSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < nextSmallest\
    \ {\n            nextSmallest = lst[i]\n        }\n    }\n    return nextSmallest\
    \ == Int.max ? nil : nextSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpv9rc69he/tmpv9rc69he.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af13aa16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af13a70db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af13a70d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af13a70c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9rc69he                        0x00005563109569aa <unavailable> + 6570

    5    libc.so.6                          0x00002af13ac02460 __libc_start_main +
    245

    6    tmpv9rc69he                        0x00005563109561a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var second = Int.max\n    for i in lst {\n        if i < min {\n\
    \            second = min\n            min = i\n        } else if i < second {\n\
    \            second = i\n        }\n    }\n    return second == Int.max ? nil\
    \ : second\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpvxo1tf1b/tmpvxo1tf1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59ec643c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59ec33ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59ec33a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59ec3397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxo1tf1b                        0x0000557b0c0f98da <unavailable> + 6362

    5    libc.so.6                          0x00002b59ec82f460 __libc_start_main +
    245

    6    tmpvxo1tf1b                        0x0000557b0c0f90d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n  \
    \  for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9dqyn33z/tmp9dqyn33z.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4f8ac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4f87b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4f87b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4f87b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9dqyn33z                        0x000055c25598f7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ac4f8cac460 __libc_start_main +
    245

    6    tmp9dqyn33z                        0x000055c25598f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    if smallest > secondSmallest {\n        (smallest, secondSmallest)\
    \ = (secondSmallest, smallest)\n    }\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = lst[i]\n        } else if lst[i] < secondSmallest {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpz72tx1s9/tmpz72tx1s9.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2915df8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2915aefb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2915aef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2915aee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz72tx1s9                        0x000055cdccefb9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b2915fe4460 __libc_start_main +
    245

    6    tmpz72tx1s9                        0x000055cdccefb1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var smallest\
    \ = Int.max\n    var secondSmallest = Int.max\n    for i in lst {\n        if\
    \ i < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = i\n        } else if i < secondSmallest {\n            secondSmallest = i\n\
    \        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpn24lhj8n/tmpn24lhj8n.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7038130c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7037e27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7037e27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7037e267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn24lhj8n                        0x00005563f27878da <unavailable> + 6362

    5    libc.so.6                          0x00002b703831c460 __libc_start_main +
    245

    6    tmpn24lhj8n                        0x00005563f27870d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var smallest = lst[0]\n    var secondSmallest =\
    \ lst[1]\n    if smallest > secondSmallest {\n        swap(&smallest, &secondSmallest)\n\
    \    }\n    for i in 2..<lst.count {\n        if lst[i] < smallest {\n       \
    \     secondSmallest = smallest\n            smallest = lst[i]\n        } else\
    \ if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n        }\n\
    \    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpg6923j3v/tmpg6923j3v.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b239e54ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b239e245b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b239e245988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b239e2447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg6923j3v                        0x000055a0f49709fa <unavailable> + 6650

    5    libc.so.6                          0x00002b239e73a460 __libc_start_main +
    245

    6    tmpg6923j3v                        0x000055a0f49701f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var nextMin = Int.max\n    for i in lst {\n        if i < min {\n\
    \            nextMin = min\n            min = i\n        } else if i < nextMin\
    \ {\n            nextMin = i\n        }\n    }\n    return nextMin == Int.max\
    \ ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp320wzm2j/tmp320wzm2j.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb0709ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb06d95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb06d95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb06d947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp320wzm2j                        0x000055b5f23ed8da <unavailable> + 6362

    5    libc.so.6                          0x00002afb0728a460 __libc_start_main +
    245

    6    tmp320wzm2j                        0x000055b5f23ed0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpglw9jrxh/tmpglw9jrxh.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaeef4c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaeef1bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaeef1bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaeef1bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpglw9jrxh                        0x00005563f75817c5 <unavailable> + 6085

    5    libc.so.6                          0x00002aaeef6b1460 __libc_start_main +
    245

    6    tmpglw9jrxh                        0x00005563f75811a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var nextMin = Int.max\n    for i in lst {\n        if i < min {\n\
    \            nextMin = min\n            min = i\n        } else if i < nextMin\
    \ {\n            nextMin = i\n        }\n    }\n    return nextMin == Int.max\
    \ ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp320wzm2j/tmp320wzm2j.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb0709ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb06d95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb06d95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb06d947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp320wzm2j                        0x000055b5f23ed8da <unavailable> + 6362

    5    libc.so.6                          0x00002afb0728a460 __libc_start_main +
    245

    6    tmp320wzm2j                        0x000055b5f23ed0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var lst =\
    \ lst\n    lst.sort()\n    if lst.count < 2 {\n        return nil\n    }\n   \
    \ return lst[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpktmyftxl/tmpktmyftxl.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17576c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17573bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17573bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17573bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpktmyftxl                        0x000055ca60d1693a <unavailable> + 6458

    5    libc.so.6                          0x00002b17578b1460 __libc_start_main +
    245

    6    tmpktmyftxl                        0x000055ca60d16139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for item in lst {\n        if item\
    \ < min {\n            secondMin = min\n            min = item\n        } else\
    \ if item < secondMin {\n            secondMin = item\n        }\n    }\n    return\
    \ secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpoqhdg510/tmpoqhdg510.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedd0dd2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedd0ac9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedd0ac9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedd0ac87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoqhdg510                        0x0000565330c738da <unavailable> + 6362

    5    libc.so.6                          0x00002aedd0fbe460 __libc_start_main +
    245

    6    tmpoqhdg510                        0x0000565330c730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var sorted\
    \ = lst.sorted()\n    if sorted.count > 1 {\n        return sorted[1]\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_jrpcw7k/tmp_jrpcw7k.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf98e10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf98b07b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf98b07988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf98b067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jrpcw7k                        0x0000556301dc58ba <unavailable> + 6330

    5    libc.so.6                          0x00002acf98ffc460 __libc_start_main +
    245

    6    tmp_jrpcw7k                        0x0000556301dc50b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var next = lst[1]\n    for\
    \ i in 1..<lst.count {\n        if lst[i] < min {\n            next = min\n  \
    \          min = lst[i]\n        } else if lst[i] < next {\n            next =\
    \ lst[i]\n        }\n    }\n    return next\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpyxbx0mul/tmpyxbx0mul.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9cb3f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9cb0eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba9cb0ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9cb0ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxbx0mul                        0x0000564657cd39aa <unavailable> + 6570

    5    libc.so.6                          0x00002ba9cb5e3460 __libc_start_main +
    245

    6    tmpyxbx0mul                        0x0000564657cd31a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var smallest\
    \ = Int.max\n    var secondSmallest = Int.max\n    for i in lst {\n        if\
    \ i < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = i\n        } else if i < secondSmallest {\n            secondSmallest = i\n\
    \        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpn24lhj8n/tmpn24lhj8n.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7038130c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7037e27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7037e27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7037e267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn24lhj8n                        0x00005563f27878da <unavailable> + 6362

    5    libc.so.6                          0x00002b703831c460 __libc_start_main +
    245

    6    tmpn24lhj8n                        0x00005563f27870d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var smallest\
    \ = Int.max\n    var secondSmallest = Int.max\n    for i in lst {\n        if\
    \ i < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = i\n        } else if i < secondSmallest {\n            secondSmallest = i\n\
    \        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpn24lhj8n/tmpn24lhj8n.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7038130c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7037e27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7037e27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7037e267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn24lhj8n                        0x00005563f27878da <unavailable> + 6362

    5    libc.so.6                          0x00002b703831c460 __libc_start_main +
    245

    6    tmpn24lhj8n                        0x00005563f27870d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var smallest\
    \ = Int.max\n    var secondSmallest = Int.max\n    for i in lst {\n        if\
    \ i < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = i\n        } else if i < secondSmallest {\n            secondSmallest = i\n\
    \        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpn24lhj8n/tmpn24lhj8n.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7038130c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7037e27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7037e27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7037e267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn24lhj8n                        0x00005563f27878da <unavailable> + 6362

    5    libc.so.6                          0x00002b703831c460 __libc_start_main +
    245

    6    tmpn24lhj8n                        0x00005563f27870d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var min2 = Int.max\n    for i in lst {\n        if i < min {\n \
    \           min2 = min\n            min = i\n        } else if i < min2 {\n  \
    \          min2 = i\n        }\n    }\n    return min2 == Int.max ? nil : min2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpskg5k99n/tmpskg5k99n.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6f976cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6f9463b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6f9463988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6f94627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpskg5k99n                        0x000055d2295bd5a1 <unavailable> + 5537

    5    libc.so.6                          0x00002ad6f9958460 __libc_start_main +
    245

    6    tmpskg5k99n                        0x000055d2295bd129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var smallest\
    \ = Int.max\n    var secondSmallest = Int.max\n    for i in lst {\n        if\
    \ i < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = i\n        } else if i < secondSmallest {\n            secondSmallest = i\n\
    \        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpn24lhj8n/tmpn24lhj8n.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7038130c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7037e27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7037e27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7037e267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn24lhj8n                        0x00005563f27878da <unavailable> + 6362

    5    libc.so.6                          0x00002b703831c460 __libc_start_main +
    245

    6    tmpn24lhj8n                        0x00005563f27870d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var nextMin = lst[0]\n    for i in lst {\n        if i < min {\n\
    \            nextMin = min\n            min = i\n        } else if i < nextMin\
    \ {\n            nextMin = i\n        }\n    }\n    return nextMin\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpjk9ivqu5/tmpjk9ivqu5.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab61bc45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab61b93cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab61b93c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab61b93b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjk9ivqu5                        0x0000555e82f4b5a1 <unavailable> + 5537

    5    libc.so.6                          0x00002ab61be31460 __libc_start_main +
    245

    6    tmpjk9ivqu5                        0x0000555e82f4b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var nextMin = lst[0]\n    for i in lst {\n        if i < min {\n\
    \            nextMin = min\n            min = i\n        } else if i < nextMin\
    \ {\n            nextMin = i\n        }\n    }\n    return nextMin\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpjk9ivqu5/tmpjk9ivqu5.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab61bc45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab61b93cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab61b93c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab61b93b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjk9ivqu5                        0x0000555e82f4b5a1 <unavailable> + 5537

    5    libc.so.6                          0x00002ab61be31460 __libc_start_main +
    245

    6    tmpjk9ivqu5                        0x0000555e82f4b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var smallest\
    \ = Int.max\n    var secondSmallest = Int.max\n    for i in lst {\n        if\
    \ i < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = i\n        } else if i < secondSmallest {\n            secondSmallest = i\n\
    \        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpn24lhj8n/tmpn24lhj8n.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7038130c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7037e27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7037e27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7037e267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn24lhj8n                        0x00005563f27878da <unavailable> + 6362

    5    libc.so.6                          0x00002b703831c460 __libc_start_main +
    245

    6    tmpn24lhj8n                        0x00005563f27870d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var nextMin = Int.max\n \
    \   for i in 1..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin == Int.max ? nil\
    \ : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpijq5r8pc/tmpijq5r8pc.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86b59fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86b56f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86b56f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86b56f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijq5r8pc                        0x000055e98076a9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b86b5be7460 __libc_start_main +
    245

    6    tmpijq5r8pc                        0x000055e98076a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var nextMin = Int.max\n    for i in lst {\n        if i < min {\n\
    \            nextMin = min\n            min = i\n        } else if i < nextMin\
    \ {\n            nextMin = i\n        }\n    }\n    return nextMin == Int.max\
    \ ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpyzu_z76s/tmpyzu_z76s.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6edb517c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6edb20eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6edb20e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6edb20d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyzu_z76s                        0x000055f9cb9495a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b6edb703460 __libc_start_main +
    245

    6    tmpyzu_z76s                        0x000055f9cb949129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var nextMin = Int.max\n    for i in lst {\n        if i < min {\n\
    \            nextMin = min\n            min = i\n        } else if i < nextMin\
    \ {\n            nextMin = i\n        }\n    }\n    return nextMin == Int.max\
    \ ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpyzu_z76s/tmpyzu_z76s.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6edb517c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6edb20eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6edb20e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6edb20d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyzu_z76s                        0x000055f9cb9495a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b6edb703460 __libc_start_main +
    245

    6    tmpyzu_z76s                        0x000055f9cb949129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var nextMin = Int.max\n    for i in lst {\n        if i < min {\n\
    \            nextMin = min\n            min = i\n        } else if i < nextMin\
    \ {\n            nextMin = i\n        }\n    }\n    return nextMin == Int.max\
    \ ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp320wzm2j/tmp320wzm2j.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb0709ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb06d95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb06d95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb06d947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp320wzm2j                        0x000055b5f23ed8da <unavailable> + 6362

    5    libc.so.6                          0x00002afb0728a460 __libc_start_main +
    245

    6    tmp320wzm2j                        0x000055b5f23ed0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var nextMin = Int.max\n    for i in lst {\n        if i < min {\n\
    \            nextMin = min\n            min = i\n        } else if i < nextMin\
    \ {\n            nextMin = i\n        }\n    }\n    return nextMin == Int.max\
    \ ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpyzu_z76s/tmpyzu_z76s.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6edb517c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6edb20eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6edb20e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6edb20d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyzu_z76s                        0x000055f9cb9495a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b6edb703460 __libc_start_main +
    245

    6    tmpyzu_z76s                        0x000055f9cb949129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpglw9jrxh/tmpglw9jrxh.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaeef4c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaeef1bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaeef1bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaeef1bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpglw9jrxh                        0x00005563f75817c5 <unavailable> + 6085

    5    libc.so.6                          0x00002aaeef6b1460 __libc_start_main +
    245

    6    tmpglw9jrxh                        0x00005563f75811a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var nextMin = Int.max\n    for i in lst {\n        if i < min {\n\
    \            nextMin = min\n            min = i\n        } else if i < nextMin\
    \ {\n            nextMin = i\n        }\n    }\n    return nextMin == Int.max\
    \ ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpyzu_z76s/tmpyzu_z76s.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6edb517c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6edb20eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6edb20e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6edb20d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyzu_z76s                        0x000055f9cb9495a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b6edb703460 __libc_start_main +
    245

    6    tmpyzu_z76s                        0x000055f9cb949129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var sorted\
    \ = lst.sorted()\n    if sorted.count < 2 {\n        return nil\n    }\n    return\
    \ sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp99a9xim3/tmp99a9xim3.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1ce65bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1ce352b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1ce352988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1ce3517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp99a9xim3                        0x000055e8594cb8ba <unavailable> + 6330

    5    libc.so.6                          0x00002af1ce847460 __libc_start_main +
    245

    6    tmp99a9xim3                        0x000055e8594cb0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var nextMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            nextMin = min\n            min = lst[i]\n      \
    \  } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n   \
    \ }\n    return nextMin == Int.max ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f2662dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f26324561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1f26324286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1f2632413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1f26323bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1f26123e83 <unavailable> + 188035

    6    tmpnufuegmu                        0x000055c5d6ac4e98 <unavailable> + 7832

    7    tmpnufuegmu                        0x000055c5d6ac47e8 <unavailable> + 6120

    8    libc.so.6                          0x00002b1f26819460 __libc_start_main +
    245

    9    tmpnufuegmu                        0x000055c5d6ac41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var min2 = Int.max\n    for i in lst {\n        if i < min {\n\
    \            min2 = min\n            min = i\n        } else if i < min2 {\n \
    \           min2 = i\n        }\n    }\n    return min2 == Int.max ? nil : min2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpq6zz1pbk/tmpq6zz1pbk.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d1a1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0d1716b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0d1716988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0d17157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq6zz1pbk                        0x0000559e22e648da <unavailable> + 6362

    5    libc.so.6                          0x00002ab0d1c0b460 __libc_start_main +
    245

    6    tmpq6zz1pbk                        0x0000559e22e640d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var next = lst[1]\n    for\
    \ i in 1..<lst.count {\n        if lst[i] < min {\n            next = min\n  \
    \          min = lst[i]\n        } else if lst[i] < next {\n            next =\
    \ lst[i]\n        }\n    }\n    return next\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpyxbx0mul/tmpyxbx0mul.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9cb3f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9cb0eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba9cb0ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9cb0ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxbx0mul                        0x0000564657cd39aa <unavailable> + 6570

    5    libc.so.6                          0x00002ba9cb5e3460 __libc_start_main +
    245

    6    tmpyxbx0mul                        0x0000564657cd31a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var smallest\
    \ = Int.max\n    var secondSmallest = Int.max\n    for i in lst {\n        if\
    \ i < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = i\n        } else if i < secondSmallest {\n            secondSmallest = i\n\
    \        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpn24lhj8n/tmpn24lhj8n.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7038130c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7037e27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7037e27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7037e267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn24lhj8n                        0x00005563f27878da <unavailable> + 6362

    5    libc.so.6                          0x00002b703831c460 __libc_start_main +
    245

    6    tmpn24lhj8n                        0x00005563f27870d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var smallest\
    \ = Int.max\n    var secondSmallest = Int.max\n    for i in lst {\n        if\
    \ i < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = i\n        } else if i < secondSmallest {\n            secondSmallest = i\n\
    \        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpn24lhj8n/tmpn24lhj8n.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7038130c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7037e27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7037e27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7037e267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn24lhj8n                        0x00005563f27878da <unavailable> + 6362

    5    libc.so.6                          0x00002b703831c460 __libc_start_main +
    245

    6    tmpn24lhj8n                        0x00005563f27870d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var second = Int.max\n    for i in lst {\n        if i < min {\n\
    \            second = min\n            min = i\n        } else if i < second {\n\
    \            second = i\n        }\n    }\n    return second == Int.max ? nil\
    \ : second\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_uhtt6mb/tmp_uhtt6mb.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44c1117c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44c0e0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44c0e0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44c0e0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_uhtt6mb                        0x000055fabb88c5a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b44c1303460 __libc_start_main +
    245

    6    tmp_uhtt6mb                        0x000055fabb88c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    if min > secondMin {\n        min = lst[1]\n        secondMin = lst[0]\n\
    \    }\n    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzweh54k_/tmpzweh54k_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82fb372c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82fb069b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82fb069988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82fb0687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzweh54k_                        0x0000560a096419aa <unavailable> + 6570

    5    libc.so.6                          0x00002b82fb55e460 __libc_start_main +
    245

    6    tmpzweh54k_                        0x0000560a096411a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n    \
    \        nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpjbkdw0nx/tmpjbkdw0nx.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4bf718c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4bf40fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4bf40f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4bf40e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjbkdw0nx                        0x000055fe497b37c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ab4bf904460 __libc_start_main +
    245

    6    tmpjbkdw0nx                        0x000055fe497b31a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var sorted\
    \ = lst.sorted()\n    if sorted.count > 1 {\n        return sorted[1]\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_jrpcw7k/tmp_jrpcw7k.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf98e10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf98b07b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf98b07988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf98b067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jrpcw7k                        0x0000556301dc58ba <unavailable> + 6330

    5    libc.so.6                          0x00002acf98ffc460 __libc_start_main +
    245

    6    tmp_jrpcw7k                        0x0000556301dc50b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var smallest = lst[0]\n    var nextSmallest = lst[1]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < smallest {\n            nextSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < nextSmallest\
    \ {\n            nextSmallest = lst[i]\n        }\n    }\n    return nextSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmphk1twn4i/tmphk1twn4i.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c099b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c096acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c096ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c096ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphk1twn4i                        0x000055c2c3c7f9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b4c09ba1460 __libc_start_main +
    245

    6    tmphk1twn4i                        0x000055c2c3c7f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    let sorted\
    \ = lst.sorted()\n    if sorted.count < 2 {\n        return nil\n    }\n    return\
    \ sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpm8clfs8y/tmpm8clfs8y.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88e006ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88dfd65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88dfd65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88dfd647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm8clfs8y                        0x00005632eb7028ba <unavailable> + 6330

    5    libc.so.6                          0x00002b88e025a460 __libc_start_main +
    245

    6    tmpm8clfs8y                        0x00005632eb7020b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    let sorted\
    \ = lst.sorted()\n    guard sorted.count > 1 else { return nil }\n    return sorted[1]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpbqyvhn1t/tmpbqyvhn1t.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51c9707c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51c93feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51c93fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51c93fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbqyvhn1t                        0x00005652a13ec8ba <unavailable> + 6330

    5    libc.so.6                          0x00002b51c98f3460 __libc_start_main +
    245

    6    tmpbqyvhn1t                        0x00005652a13ec0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var smallest\
    \ = Int.max\n    var secondSmallest = Int.max\n    for i in lst {\n        if\
    \ i < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = i\n        } else if i < secondSmallest {\n            secondSmallest = i\n\
    \        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpn24lhj8n/tmpn24lhj8n.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7038130c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7037e27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7037e27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7037e267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn24lhj8n                        0x00005563f27878da <unavailable> + 6362

    5    libc.so.6                          0x00002b703831c460 __libc_start_main +
    245

    6    tmpn24lhj8n                        0x00005563f27870d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var next_min = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            next_min\
    \ = min\n            min = lst[i]\n        } else if lst[i] < next_min {\n   \
    \         next_min = lst[i]\n        }\n    }\n    return next_min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpa7ri7ox5/tmpa7ri7ox5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0efd18fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0efce86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0efce86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0efce857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa7ri7ox5                        0x000055f940b317c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b0efd37b460 __libc_start_main +
    245

    6    tmpa7ri7ox5                        0x000055f940b311a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    if smallest > secondSmallest {\n        swap(&smallest, &secondSmallest)\n\
    \    }\n    for i in 2..<lst.count {\n        if lst[i] < smallest {\n       \
    \     secondSmallest = smallest\n            smallest = lst[i]\n        } else\
    \ if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n        }\n\
    \    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmptb8srdcu/tmptb8srdcu.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3cfad4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3cfaa41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3cfaa41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3cfaa407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptb8srdcu                        0x00005625ce4b59fa <unavailable> + 6650

    5    libc.so.6                          0x00002b3cfaf36460 __libc_start_main +
    245

    6    tmptb8srdcu                        0x00005625ce4b51f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var sorted\
    \ = lst.sorted()\n    if sorted.count < 2 {\n        return nil\n    }\n    return\
    \ sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp99a9xim3/tmp99a9xim3.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1ce65bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1ce352b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1ce352988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1ce3517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp99a9xim3                        0x000055e8594cb8ba <unavailable> + 6330

    5    libc.so.6                          0x00002af1ce847460 __libc_start_main +
    245

    6    tmp99a9xim3                        0x000055e8594cb0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var min2 = Int.max\n    for i in lst {\n        if i < min {\n\
    \            min2 = min\n            min = i\n        } else if i < min2 {\n \
    \           min2 = i\n        }\n    }\n    return min2 == Int.max ? nil : min2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpq6zz1pbk/tmpq6zz1pbk.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d1a1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0d1716b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0d1716988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0d17157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq6zz1pbk                        0x0000559e22e648da <unavailable> + 6362

    5    libc.so.6                          0x00002ab0d1c0b460 __libc_start_main +
    245

    6    tmpq6zz1pbk                        0x0000559e22e640d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var nextMin = Int.max\n    for i in lst {\n        if i < min {\n\
    \            nextMin = min\n            min = i\n        } else if i < nextMin\
    \ {\n            nextMin = i\n        }\n    }\n    return nextMin == Int.max\
    \ ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp320wzm2j/tmp320wzm2j.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb0709ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb06d95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb06d95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb06d947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp320wzm2j                        0x000055b5f23ed8da <unavailable> + 6362

    5    libc.so.6                          0x00002afb0728a460 __libc_start_main +
    245

    6    tmp320wzm2j                        0x000055b5f23ed0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var next = Int.max\n    for i in lst {\n        if i < min {\n \
    \           next = min\n            min = i\n        } else if i < next {\n  \
    \          next = i\n        }\n    }\n    return next == Int.max ? nil : next\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp5i0rry8a/tmp5i0rry8a.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12057a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12054a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12054a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b120549f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5i0rry8a                        0x000055a5ce5d05a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b1205995460 __libc_start_main +
    245

    6    tmp5i0rry8a                        0x000055a5ce5d0129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var min2 = Int.max\n    for i in lst {\n        if i < min {\n\
    \            min2 = min\n            min = i\n        } else if i < min2 {\n \
    \           min2 = i\n        }\n    }\n    return min2 == Int.max ? nil : min2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpq6zz1pbk/tmpq6zz1pbk.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d1a1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0d1716b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0d1716988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0d17157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq6zz1pbk                        0x0000559e22e648da <unavailable> + 6362

    5    libc.so.6                          0x00002ab0d1c0b460 __libc_start_main +
    245

    6    tmpq6zz1pbk                        0x0000559e22e640d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var smallest = lst[0]\n    var secondSmallest =\
    \ Int.max\n    for i in 1..<lst.count {\n        if lst[i] < smallest {\n    \
    \        secondSmallest = smallest\n            smallest = lst[i]\n        } else\
    \ if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n        }\n\
    \    }\n    return secondSmallest == Int.max ? nil : secondSmallest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp2h3m49eb/tmp2h3m49eb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef243adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef240a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef240a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef240a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2h3m49eb                        0x00005563818969aa <unavailable> + 6570

    5    libc.so.6                          0x00002aef24599460 __libc_start_main +
    245

    6    tmp2h3m49eb                        0x00005563818961a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var smallest\
    \ = Int.max\n    var secondSmallest = Int.max\n    for i in lst {\n        if\
    \ i < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = i\n        } else if i < secondSmallest {\n            secondSmallest = i\n\
    \        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpn24lhj8n/tmpn24lhj8n.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7038130c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7037e27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7037e27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7037e267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn24lhj8n                        0x00005563f27878da <unavailable> + 6362

    5    libc.so.6                          0x00002b703831c460 __libc_start_main +
    245

    6    tmpn24lhj8n                        0x00005563f27870d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var nextMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            nextMin = min\n            min = lst[i]\n      \
    \  } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n   \
    \ }\n    return nextMin == Int.max ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f2662dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f26324561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1f26324286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1f2632413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1f26323bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1f26123e83 <unavailable> + 188035

    6    tmpnufuegmu                        0x000055c5d6ac4e98 <unavailable> + 7832

    7    tmpnufuegmu                        0x000055c5d6ac47e8 <unavailable> + 6120

    8    libc.so.6                          0x00002b1f26819460 __libc_start_main +
    245

    9    tmpnufuegmu                        0x000055c5d6ac41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var smallest\
    \ = lst[0]\n    var secondSmallest = Int.max\n    for i in lst {\n        if i\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ i\n        } else if i < secondSmallest {\n            secondSmallest = i\n\
    \        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpx55gbp_1/tmpx55gbp_1.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acfebcf1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acfeb9e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acfeb9e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acfeb9e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx55gbp_1                        0x000055a196e665a1 <unavailable> + 5537

    5    libc.so.6                          0x00002acfebedd460 __libc_start_main +
    245

    6    tmpx55gbp_1                        0x000055a196e66129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var smallest\
    \ = lst[0]\n    var secondSmallest = Int.max\n    for i in lst {\n        if i\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ i\n        } else if i < secondSmallest {\n            secondSmallest = i\n\
    \        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpx55gbp_1/tmpx55gbp_1.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acfebcf1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acfeb9e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acfeb9e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acfeb9e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx55gbp_1                        0x000055a196e665a1 <unavailable> + 5537

    5    libc.so.6                          0x00002acfebedd460 __libc_start_main +
    245

    6    tmpx55gbp_1                        0x000055a196e66129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var nextMin = Int.max\n    for num in lst {\n        if num < min\
    \ {\n            nextMin = min\n            min = num\n        } else if num <\
    \ nextMin {\n            nextMin = num\n        }\n    }\n    return nextMin ==\
    \ Int.max ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpwo3jn5dt/tmpwo3jn5dt.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50d819ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50d7e91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50d7e91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50d7e907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwo3jn5dt                        0x0000564f75fb28da <unavailable> + 6362

    5    libc.so.6                          0x00002b50d8386460 __libc_start_main +
    245

    6    tmpwo3jn5dt                        0x0000564f75fb20d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp3jrmmuu9/tmp3jrmmuu9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b260a045c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2609d3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2609d3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2609d3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3jrmmuu9                        0x000055a58d6635a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b260a231460 __libc_start_main +
    245

    6    tmp3jrmmuu9                        0x000055a58d663129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var min2 = lst[0]\n    for i in lst {\n        if i < min {\n  \
    \          min2 = min\n            min = i\n        } else if i < min2 {\n   \
    \         min2 = i\n        }\n    }\n    return min2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpi0o6i43i/tmpi0o6i43i.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b437a534c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b437a22bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b437a22b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b437a22a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi0o6i43i                        0x00005613d63575a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b437a720460 __libc_start_main +
    245

    6    tmpi0o6i43i                        0x00005613d6357129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var sorted\
    \ = lst.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba08cd4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba08ca43561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba08ca43286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba08ca4313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba08ca42bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba08c844e83 <unavailable> + 188035

    6    tmpy3uvoxpo                        0x00005586a0c2ad4c <unavailable> + 7500

    7    tmpy3uvoxpo                        0x00005586a0c2a6a8 <unavailable> + 5800

    8    libc.so.6                          0x00002ba08cf38460 __libc_start_main +
    245

    9    tmpy3uvoxpo                        0x00005586a0c2a069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for num in lst {\n        if num <\
    \ min {\n            secondMin = min\n            min = num\n        } else if\
    \ num < secondMin {\n            secondMin = num\n        }\n    }\n    return\
    \ secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpvyl5epr1/tmpvyl5epr1.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f1a8cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f1a5c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f1a5c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f1a5c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvyl5epr1                        0x0000560e331568da <unavailable> + 6362

    5    libc.so.6                          0x00002b6f1aab6460 __libc_start_main +
    245

    6    tmpvyl5epr1                        0x0000560e331560d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var min2 = lst[0]\n    for i in lst {\n        if i < min {\n  \
    \          min2 = min\n            min = i\n        } else if i < min2 {\n   \
    \         min2 = i\n        }\n    }\n    return min2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpi0o6i43i/tmpi0o6i43i.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b437a534c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b437a22bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b437a22b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b437a22a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi0o6i43i                        0x00005613d63575a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b437a720460 __libc_start_main +
    245

    6    tmpi0o6i43i                        0x00005613d6357129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    // your code\
    \ here\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpvskris88/tmpvskris88.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5258f21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5258c18b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5258c18988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5258c177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvskris88                        0x000055d0162fb3e1 <unavailable> + 5089

    5    libc.so.6                          0x00002b525910d460 __libc_start_main +
    245

    6    tmpvskris88                        0x000055d0162faf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var min2 = Int.max\n    for i in lst {\n        if i < min {\n\
    \            min2 = min\n            min = i\n        } else if i < min2 {\n \
    \           min2 = i\n        }\n    }\n    return min2 == Int.max ? nil : min2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpq6zz1pbk/tmpq6zz1pbk.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d1a1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0d1716b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0d1716988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0d17157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq6zz1pbk                        0x0000559e22e648da <unavailable> + 6362

    5    libc.so.6                          0x00002ab0d1c0b460 __libc_start_main +
    245

    6    tmpq6zz1pbk                        0x0000559e22e640d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var sorted\
    \ = lst.sorted()\n    if sorted.count < 2 {\n        return nil\n    }\n    return\
    \ sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp99a9xim3/tmp99a9xim3.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1ce65bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1ce352b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1ce352988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1ce3517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp99a9xim3                        0x000055e8594cb8ba <unavailable> + 6330

    5    libc.so.6                          0x00002af1ce847460 __libc_start_main +
    245

    6    tmp99a9xim3                        0x000055e8594cb0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var min2 = lst[0]\n    for i in lst {\n        if i < min {\n  \
    \          min2 = min\n            min = i\n        } else if i < min2 {\n   \
    \         min2 = i\n        }\n    }\n    return min2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpi0o6i43i/tmpi0o6i43i.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b437a534c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b437a22bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b437a22b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b437a22a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi0o6i43i                        0x00005613d63575a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b437a720460 __libc_start_main +
    245

    6    tmpi0o6i43i                        0x00005613d6357129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp3jrmmuu9/tmp3jrmmuu9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b260a045c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2609d3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2609d3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2609d3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3jrmmuu9                        0x000055a58d6635a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b260a231460 __libc_start_main +
    245

    6    tmp3jrmmuu9                        0x000055a58d663129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var smallest\
    \ = Int.max\n    var secondSmallest = Int.max\n    for i in lst {\n        if\
    \ i < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = i\n        } else if i < secondSmallest {\n            secondSmallest = i\n\
    \        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpn24lhj8n/tmpn24lhj8n.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7038130c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7037e27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7037e27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7037e267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn24lhj8n                        0x00005563f27878da <unavailable> + 6362

    5    libc.so.6                          0x00002b703831c460 __libc_start_main +
    245

    6    tmpn24lhj8n                        0x00005563f27870d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n  \
    \  for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9dqyn33z/tmp9dqyn33z.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4f8ac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4f87b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4f87b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4f87b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9dqyn33z                        0x000055c25598f7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ac4f8cac460 __libc_start_main +
    245

    6    tmp9dqyn33z                        0x000055c25598f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var next = Int.max\n    for i in lst {\n        if i < min {\n \
    \           next = min\n            min = i\n        } else if i < next {\n  \
    \          next = i\n        }\n    }\n    return next == Int.max ? nil : next\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp5i0rry8a/tmp5i0rry8a.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12057a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12054a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12054a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b120549f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5i0rry8a                        0x000055a5ce5d05a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b1205995460 __libc_start_main +
    245

    6    tmp5i0rry8a                        0x000055a5ce5d0129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var nextMin = Int.max\n \
    \   for i in 1..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin == Int.max ? nil\
    \ : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpijq5r8pc/tmpijq5r8pc.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86b59fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86b56f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86b56f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86b56f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijq5r8pc                        0x000055e98076a9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b86b5be7460 __libc_start_main +
    245

    6    tmpijq5r8pc                        0x000055e98076a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var smallest\
    \ = Int.max\n    var secondSmallest = Int.max\n    for i in lst {\n        if\
    \ i < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = i\n        } else if i < secondSmallest {\n            secondSmallest = i\n\
    \        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpn24lhj8n/tmpn24lhj8n.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7038130c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7037e27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7037e27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7037e267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn24lhj8n                        0x00005563f27878da <unavailable> + 6362

    5    libc.so.6                          0x00002b703831c460 __libc_start_main +
    245

    6    tmpn24lhj8n                        0x00005563f27870d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for i in lst {\n        if i < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = i\n        } else if i < secondSmallest {\n\
    \            secondSmallest = i\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp0srn90xi/tmp0srn90xi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add5bc6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add5b964b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add5b964988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add5b9637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0srn90xi                        0x000055c4e3c1b601 <unavailable> + 5633

    5    libc.so.6                          0x00002add5be59460 __libc_start_main +
    245

    6    tmp0srn90xi                        0x000055c4e3c1b189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n  \
    \  for i in lst {\n        if i < min {\n            nextMin = min\n         \
    \   min = i\n        } else if i < nextMin {\n            nextMin = i\n      \
    \  }\n    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpf_7us1dr/tmpf_7us1dr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7dd49f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7dd46ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7dd46ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7dd46eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf_7us1dr                        0x000055d1abb5b601 <unavailable> + 5633

    5    libc.so.6                          0x00002b7dd4be1460 __libc_start_main +
    245

    6    tmpf_7us1dr                        0x000055d1abb5b189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var next_min = lst[0]\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            next_min = min\n            min = lst[i]\n     \
    \   } else if lst[i] < next_min {\n            next_min = lst[i]\n        }\n\
    \    }\n    return next_min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpqcfot8qp/tmpqcfot8qp.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba68cd76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba68ca6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba68ca6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba68ca6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcfot8qp                        0x000055e610399621 <unavailable> + 5665

    5    libc.so.6                          0x00002ba68cf62460 __libc_start_main +
    245

    6    tmpqcfot8qp                        0x000055e6103991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var smallest = lst[0]\n    var nextSmallest = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < smallest {\n            nextSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < nextSmallest\
    \ {\n            nextSmallest = lst[i]\n        }\n    }\n    return nextSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpbcabsv9y/tmpbcabsv9y.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b111d146c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b111ce3db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b111ce3d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b111ce3c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbcabsv9y                        0x000056274ff557c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b111d332460 __libc_start_main +
    245

    6    tmpbcabsv9y                        0x000056274ff551a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n    \
    \        nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpjbkdw0nx/tmpjbkdw0nx.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4bf718c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4bf40fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4bf40f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4bf40e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjbkdw0nx                        0x000055fe497b37c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ab4bf904460 __libc_start_main +
    245

    6    tmpjbkdw0nx                        0x000055fe497b31a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var min2 = Int.max\n    for i in lst {\n        if i < min {\n \
    \           min2 = min\n            min = i\n        } else if i < min2 {\n  \
    \          min2 = i\n        }\n    }\n    return min2 == Int.max ? nil : min2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpskg5k99n/tmpskg5k99n.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6f976cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6f9463b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6f9463988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6f94627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpskg5k99n                        0x000055d2295bd5a1 <unavailable> + 5537

    5    libc.so.6                          0x00002ad6f9958460 __libc_start_main +
    245

    6    tmpskg5k99n                        0x000055d2295bd129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var smallest\
    \ = Int.max\n    var secondSmallest = Int.max\n    for num in lst {\n        if\
    \ num < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = num\n        } else if num < secondSmallest {\n            secondSmallest\
    \ = num\n        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpg_kqmbp8/tmpg_kqmbp8.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0807c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0807944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0807944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08079437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_kqmbp8                        0x000056317582d8da <unavailable> + 6362

    5    libc.so.6                          0x00002b0807e39460 __libc_start_main +
    245

    6    tmpg_kqmbp8                        0x000056317582d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n  \
    \  for i in 1..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp69gtr6sf/tmp69gtr6sf.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff925acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff922a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff922a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff922a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp69gtr6sf                        0x000055c602b2b9aa <unavailable> + 6570

    5    libc.so.6                          0x00002aff92798460 __libc_start_main +
    245

    6    tmp69gtr6sf                        0x000055c602b2b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    // TODO:\
    \ Write some code to solve this coding challenge\n    return nil\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpazgv_fwl/tmpazgv_fwl.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac39b77fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac39b476b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac39b476988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac39b4757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpazgv_fwl                        0x000055af0000e3e1 <unavailable> + 5089

    5    libc.so.6                          0x00002ac39b96b460 __libc_start_main +
    245

    6    tmpazgv_fwl                        0x000055af0000df69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var smallest = lst[0]\n    var secondSmallest =\
    \ lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest {\n     \
    \       secondSmallest = smallest\n            smallest = lst[i]\n        } else\
    \ if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n        }\n\
    \    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp3h2dmvem/tmp3h2dmvem.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba39f244c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba39ef3bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba39ef3b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba39ef3a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3h2dmvem                        0x00005562996037c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ba39f430460 __libc_start_main +
    245

    6    tmp3h2dmvem                        0x00005562996031a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var nextMin = Int.max\n    for i in lst {\n        if i < min {\n\
    \            nextMin = min\n            min = i\n        } else if i < nextMin\
    \ {\n            nextMin = i\n        }\n    }\n    return nextMin == Int.max\
    \ ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpyzu_z76s/tmpyzu_z76s.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6edb517c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6edb20eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6edb20e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6edb20d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyzu_z76s                        0x000055f9cb9495a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b6edb703460 __libc_start_main +
    245

    6    tmpyzu_z76s                        0x000055f9cb949129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var nextMin = Int.max\n    for i in lst {\n        if i < min {\n\
    \            nextMin = min\n            min = i\n        } else if i < nextMin\
    \ {\n            nextMin = i\n        }\n    }\n    return nextMin == Int.max\
    \ ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpyzu_z76s/tmpyzu_z76s.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6edb517c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6edb20eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6edb20e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6edb20d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyzu_z76s                        0x000055f9cb9495a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b6edb703460 __libc_start_main +
    245

    6    tmpyzu_z76s                        0x000055f9cb949129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var min2 = Int.max\n    for i in lst {\n        if i < min {\n\
    \            min2 = min\n            min = i\n        } else if i < min2 {\n \
    \           min2 = i\n        }\n    }\n    return min2 == Int.max ? nil : min2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpq6zz1pbk/tmpq6zz1pbk.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d1a1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0d1716b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0d1716988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0d17157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq6zz1pbk                        0x0000559e22e648da <unavailable> + 6362

    5    libc.so.6                          0x00002ab0d1c0b460 __libc_start_main +
    245

    6    tmpq6zz1pbk                        0x0000559e22e640d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var nextMin = Int.max\n    for i in lst {\n        if i < min {\n\
    \            nextMin = min\n            min = i\n        } else if i < nextMin\
    \ {\n            nextMin = i\n        }\n    }\n    return nextMin == Int.max\
    \ ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpyzu_z76s/tmpyzu_z76s.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6edb517c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6edb20eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6edb20e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6edb20d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyzu_z76s                        0x000055f9cb9495a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b6edb703460 __libc_start_main +
    245

    6    tmpyzu_z76s                        0x000055f9cb949129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var smallest = lst[0]\n    var secondSmallest =\
    \ Int.max\n    for i in 1..<lst.count {\n        if lst[i] < smallest {\n    \
    \        secondSmallest = smallest\n            smallest = lst[i]\n        } else\
    \ if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n        }\n\
    \    }\n    return secondSmallest == Int.max ? nil : secondSmallest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp2h3m49eb/tmp2h3m49eb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef243adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef240a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef240a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef240a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2h3m49eb                        0x00005563818969aa <unavailable> + 6570

    5    libc.so.6                          0x00002aef24599460 __libc_start_main +
    245

    6    tmp2h3m49eb                        0x00005563818961a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min1\
    \ = Int.max\n    var min2 = Int.max\n    for i in lst {\n        if i < min1 {\n\
    \            min2 = min1\n            min1 = i\n        } else if i < min2 {\n\
    \            min2 = i\n        }\n    }\n    return min2 == Int.max ? nil : min2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzo0rktpl/tmpzo0rktpl.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f5fb40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f5f837b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f5f837988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f5f8367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzo0rktpl                        0x00005569549d78da <unavailable> + 6362

    5    libc.so.6                          0x00002b5f5fd2c460 __libc_start_main +
    245

    6    tmpzo0rktpl                        0x00005569549d70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var nextMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            nextMin = min\n            min = lst[i]\n      \
    \  } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n   \
    \ }\n    return nextMin == Int.max ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f2662dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f26324561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1f26324286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1f2632413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1f26323bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1f26123e83 <unavailable> + 188035

    6    tmpnufuegmu                        0x000055c5d6ac4e98 <unavailable> + 7832

    7    tmpnufuegmu                        0x000055c5d6ac47e8 <unavailable> + 6120

    8    libc.so.6                          0x00002b1f26819460 __libc_start_main +
    245

    9    tmpnufuegmu                        0x000055c5d6ac41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var min2 = lst[0]\n    for i in lst {\n        if i < min {\n  \
    \          min2 = min\n            min = i\n        } else if i < min2 {\n   \
    \         min2 = i\n        }\n    }\n    return min2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpi0o6i43i/tmpi0o6i43i.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b437a534c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b437a22bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b437a22b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b437a22a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi0o6i43i                        0x00005613d63575a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b437a720460 __libc_start_main +
    245

    6    tmpi0o6i43i                        0x00005613d6357129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var min2 = Int.max\n    for i in lst {\n        if i < min {\n\
    \            min2 = min\n            min = i\n        } else if i < min2 {\n \
    \           min2 = i\n        }\n    }\n    return min2 == Int.max ? nil : min2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpq6zz1pbk/tmpq6zz1pbk.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d1a1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0d1716b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0d1716988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0d17157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq6zz1pbk                        0x0000559e22e648da <unavailable> + 6362

    5    libc.so.6                          0x00002ab0d1c0b460 __libc_start_main +
    245

    6    tmpq6zz1pbk                        0x0000559e22e640d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var min2 = min\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < min {\n            min2 = min\n            min = lst[i]\n        } else if\
    \ lst[i] < min2 {\n            min2 = lst[i]\n        }\n    }\n    return min2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp55owbi97/tmp55owbi97.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2066faec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2066ca5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2066ca5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2066ca47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp55owbi97                        0x000055e233b75621 <unavailable> + 5665

    5    libc.so.6                          0x00002b206719a460 __libc_start_main +
    245

    6    tmp55owbi97                        0x000055e233b751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    let sorted\
    \ = lst.sorted()\n    return sorted.count > 1 ? sorted[1] : nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpwvt4pmrk/tmpwvt4pmrk.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af383a89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af383780b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af383780988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af38377f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwvt4pmrk                        0x000055e20b13b8ba <unavailable> + 6330

    5    libc.so.6                          0x00002af383c75460 __libc_start_main +
    245

    6    tmpwvt4pmrk                        0x000055e20b13b0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpglw9jrxh/tmpglw9jrxh.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaeef4c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaeef1bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaeef1bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaeef1bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpglw9jrxh                        0x00005563f75817c5 <unavailable> + 6085

    5    libc.so.6                          0x00002aaeef6b1460 __libc_start_main +
    245

    6    tmpglw9jrxh                        0x00005563f75811a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var smallest\
    \ = Int.max\n    var secondSmallest = Int.max\n    for i in lst {\n        if\
    \ i < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = i\n        } else if i < secondSmallest {\n            secondSmallest = i\n\
    \        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpn24lhj8n/tmpn24lhj8n.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7038130c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7037e27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7037e27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7037e267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn24lhj8n                        0x00005563f27878da <unavailable> + 6362

    5    libc.so.6                          0x00002b703831c460 __libc_start_main +
    245

    6    tmpn24lhj8n                        0x00005563f27870d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var min2 = Int.max\n    for i in lst {\n        if i < min {\n \
    \           min2 = min\n            min = i\n        } else if i < min2 {\n  \
    \          min2 = i\n        }\n    }\n    return min2 == Int.max ? nil : min2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpskg5k99n/tmpskg5k99n.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6f976cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6f9463b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6f9463988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6f94627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpskg5k99n                        0x000055d2295bd5a1 <unavailable> + 5537

    5    libc.so.6                          0x00002ad6f9958460 __libc_start_main +
    245

    6    tmpskg5k99n                        0x000055d2295bd129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n  \
    \  for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9dqyn33z/tmp9dqyn33z.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4f8ac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4f87b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4f87b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4f87b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9dqyn33z                        0x000055c25598f7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ac4f8cac460 __libc_start_main +
    245

    6    tmp9dqyn33z                        0x000055c25598f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var nextMin = Int.max\n    for i in lst {\n        if i < min {\n\
    \            nextMin = min\n            min = i\n        } else if i < nextMin\
    \ {\n            nextMin = i\n        }\n    }\n    return nextMin == Int.max\
    \ ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpyzu_z76s/tmpyzu_z76s.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6edb517c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6edb20eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6edb20e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6edb20d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyzu_z76s                        0x000055f9cb9495a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b6edb703460 __libc_start_main +
    245

    6    tmpyzu_z76s                        0x000055f9cb949129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var smallest = lst[0]\n    var secondSmallest =\
    \ lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest {\n     \
    \       secondSmallest = smallest\n            smallest = lst[i]\n        } else\
    \ if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n        }\n\
    \    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp3h2dmvem/tmp3h2dmvem.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba39f244c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba39ef3bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba39ef3b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba39ef3a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3h2dmvem                        0x00005562996037c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ba39f430460 __libc_start_main +
    245

    6    tmp3h2dmvem                        0x00005562996031a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n\
    \    for i in lst {\n        if i < min {\n            nextMin = min\n       \
    \     min = i\n        } else if i < nextMin {\n            nextMin = i\n    \
    \    }\n    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpud609_x_/tmpud609_x_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c2828ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c27f81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c27f81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c27f807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpud609_x_                        0x000055a9c65a7601 <unavailable> + 5633

    5    libc.so.6                          0x00002b2c28476460 __libc_start_main +
    245

    6    tmpud609_x_                        0x000055a9c65a7189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var next_min = lst[0]\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            next_min = min\n            min = lst[i]\n     \
    \   } else if lst[i] < next_min {\n            next_min = lst[i]\n        }\n\
    \    }\n    return next_min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpqcfot8qp/tmpqcfot8qp.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba68cd76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba68ca6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba68ca6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba68ca6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcfot8qp                        0x000055e610399621 <unavailable> + 5665

    5    libc.so.6                          0x00002ba68cf62460 __libc_start_main +
    245

    6    tmpqcfot8qp                        0x000055e6103991a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var sorted\
    \ = lst.sorted()\n    if sorted.count < 2 {\n        return nil\n    }\n    return\
    \ sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp99a9xim3/tmp99a9xim3.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1ce65bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1ce352b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1ce352988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1ce3517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp99a9xim3                        0x000055e8594cb8ba <unavailable> + 6330

    5    libc.so.6                          0x00002af1ce847460 __libc_start_main +
    245

    6    tmp99a9xim3                        0x000055e8594cb0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var next_min = lst[0]\n    for i in lst {\n        if i < min {\n\
    \            next_min = min\n            min = i\n        } else if i < next_min\
    \ {\n            next_min = i\n        }\n    }\n    return next_min\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpnzd0ki6s/tmpnzd0ki6s.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3cb7ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3cb4f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3cb4f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3cb4f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnzd0ki6s                        0x0000564f41d455a1 <unavailable> + 5537

    5    libc.so.6                          0x00002ab3cb9eb460 __libc_start_main +
    245

    6    tmpnzd0ki6s                        0x0000564f41d45129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var nextMin = Int.max\n    for i in lst {\n        if i < min {\n\
    \            nextMin = min\n            min = i\n        } else if i < nextMin\
    \ {\n            nextMin = i\n        }\n    }\n    return nextMin == Int.max\
    \ ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp320wzm2j/tmp320wzm2j.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb0709ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb06d95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb06d95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb06d947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp320wzm2j                        0x000055b5f23ed8da <unavailable> + 6362

    5    libc.so.6                          0x00002afb0728a460 __libc_start_main +
    245

    6    tmp320wzm2j                        0x000055b5f23ed0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in lst {\n        if i\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ i\n        } else if i < secondSmallest {\n            secondSmallest = i\n\
    \        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpqf79mvqu/tmpqf79mvqu.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b500e5ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b500e2e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b500e2e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b500e2e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqf79mvqu                        0x000055f7092e65a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b500e7d8460 __libc_start_main +
    245

    6    tmpqf79mvqu                        0x000055f7092e6129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n  \
    \  for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp9dqyn33z/tmp9dqyn33z.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4f8ac0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4f87b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4f87b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4f87b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9dqyn33z                        0x000055c25598f7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ac4f8cac460 __libc_start_main +
    245

    6    tmp9dqyn33z                        0x000055c25598f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var secondMin =\
    \ lst[1]\n    for i in lst {\n        if i < min {\n            secondMin = min\n\
    \            min = i\n        } else if i < secondMin {\n            secondMin\
    \ = i\n        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpic2ilfbd/tmpic2ilfbd.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8b39f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8b36e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8b36e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8b36e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpic2ilfbd                        0x0000563208e0b601 <unavailable> + 5633

    5    libc.so.6                          0x00002ba8b3bdd460 __libc_start_main +
    245

    6    tmpic2ilfbd                        0x0000563208e0b189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    let sorted\
    \ = lst.sorted()\n    return sorted.count > 1 ? sorted[1] : nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpwvt4pmrk/tmpwvt4pmrk.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af383a89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af383780b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af383780988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af38377f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwvt4pmrk                        0x000055e20b13b8ba <unavailable> + 6330

    5    libc.so.6                          0x00002af383c75460 __libc_start_main +
    245

    6    tmpwvt4pmrk                        0x000055e20b13b0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var next_min = lst[0]\n    for i in lst {\n        if i < min {\n\
    \            next_min = min\n            min = i\n        } else if i < next_min\
    \ {\n            next_min = i\n        }\n    }\n    return next_min\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpnzd0ki6s/tmpnzd0ki6s.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3cb7ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3cb4f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3cb4f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3cb4f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnzd0ki6s                        0x0000564f41d455a1 <unavailable> + 5537

    5    libc.so.6                          0x00002ab3cb9eb460 __libc_start_main +
    245

    6    tmpnzd0ki6s                        0x0000564f41d45129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var nextSmallest = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            nextSmallest = min\n            min = i\n        } else if i\
    \ < nextSmallest {\n            nextSmallest = i\n        }\n    }\n    return\
    \ nextSmallest == Int.max ? nil : nextSmallest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmporigmj3l/tmporigmj3l.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8639b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8639819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8639819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86398187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmporigmj3l                        0x000056536004c5a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b8639d0e460 __libc_start_main +
    245

    6    tmporigmj3l                        0x000056536004c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n  \
    \  if min > nextMin {\n        min = nextMin\n        nextMin = lst[0]\n    }\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n    \
    \        nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpkxdjb9bp/tmpkxdjb9bp.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c3f4a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c3f19eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c3f19e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c3f19d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxdjb9bp                        0x000055c9c520f9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b4c3f693460 __libc_start_main +
    245

    6    tmpkxdjb9bp                        0x000055c9c520f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp3jrmmuu9/tmp3jrmmuu9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b260a045c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2609d3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2609d3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2609d3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3jrmmuu9                        0x000055a58d6635a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b260a231460 __libc_start_main +
    245

    6    tmp3jrmmuu9                        0x000055a58d663129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    let sorted\
    \ = lst.sorted()\n    return sorted.count > 1 ? sorted[1] : nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpwvt4pmrk/tmpwvt4pmrk.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af383a89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af383780b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af383780988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af38377f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwvt4pmrk                        0x000055e20b13b8ba <unavailable> + 6330

    5    libc.so.6                          0x00002af383c75460 __libc_start_main +
    245

    6    tmpwvt4pmrk                        0x000055e20b13b0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var next = lst[0]\n    for i in lst {\n        if i < min {\n  \
    \          next = min\n            min = i\n        } else if i < next {\n   \
    \         next = i\n        }\n    }\n    return next\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp64ljfo2w/tmp64ljfo2w.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6dd19fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6dce96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6dce96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6dce957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64ljfo2w                        0x0000564d1737b5a1 <unavailable> + 5537

    5    libc.so.6                          0x00002ad6dd38b460 __libc_start_main +
    245

    6    tmp64ljfo2w                        0x0000564d1737b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var min2 = lst[1]\n    for\
    \ i in 2..<lst.count {\n        if lst[i] < min {\n            min2 = min\n  \
    \          min = lst[i]\n        } else if lst[i] < min2 {\n            min2 =\
    \ lst[i]\n        }\n    }\n    return min2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpn90a7h4p/tmpn90a7h4p.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cc6184c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cc5e7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cc5e7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cc5e7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn90a7h4p                        0x000055def48847c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b6cc6370460 __libc_start_main +
    245

    6    tmpn90a7h4p                        0x000055def48841a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var nextMin = lst[0]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < min {\n            nextMin = min\n            min = lst[i]\n        } else\
    \ if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return\
    \ nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpdkvsqtpi/tmpdkvsqtpi.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e9a53bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9a232b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9a232988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9a2317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdkvsqtpi                        0x000055adf40a7621 <unavailable> + 5665

    5    libc.so.6                          0x00002b5e9a727460 __libc_start_main +
    245

    6    tmpdkvsqtpi                        0x000055adf40a71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var smallest\
    \ = Int.max\n    var secondSmallest = Int.max\n    for i in lst {\n        if\
    \ i < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = i\n        } else if i < secondSmallest {\n            secondSmallest = i\n\
    \        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpn24lhj8n/tmpn24lhj8n.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7038130c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7037e27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7037e27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7037e267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn24lhj8n                        0x00005563f27878da <unavailable> + 6362

    5    libc.so.6                          0x00002b703831c460 __libc_start_main +
    245

    6    tmpn24lhj8n                        0x00005563f27870d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var nextMin = Int.max\n    for i in lst {\n        if i < min {\n\
    \            nextMin = min\n            min = i\n        } else if i < nextMin\
    \ {\n            nextMin = i\n        }\n    }\n    return nextMin == Int.max\
    \ ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp320wzm2j/tmp320wzm2j.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb0709ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb06d95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb06d95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb06d947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp320wzm2j                        0x000055b5f23ed8da <unavailable> + 6362

    5    libc.so.6                          0x00002afb0728a460 __libc_start_main +
    245

    6    tmp320wzm2j                        0x000055b5f23ed0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n  \
    \  for i in 1..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp69gtr6sf/tmp69gtr6sf.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff925acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff922a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff922a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff922a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp69gtr6sf                        0x000055c602b2b9aa <unavailable> + 6570

    5    libc.so.6                          0x00002aff92798460 __libc_start_main +
    245

    6    tmp69gtr6sf                        0x000055c602b2b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var next_min = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            next_min = min\n            min = lst[i]\n     \
    \   } else if lst[i] < next_min {\n            next_min = lst[i]\n        }\n\
    \    }\n    return next_min == Int.max ? nil : next_min\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c5ef39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c5ec30561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3c5ec30286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3c5ec3013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3c5ec2fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3c5ea2fe83 <unavailable> + 188035

    6    tmpluwa6tyw                        0x000055aa4da0de98 <unavailable> + 7832

    7    tmpluwa6tyw                        0x000055aa4da0d7e8 <unavailable> + 6120

    8    libc.so.6                          0x00002b3c5f125460 __libc_start_main +
    245

    9    tmpluwa6tyw                        0x000055aa4da0d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013341
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var smallest\
    \ = lst[0]\n    var second_smallest = Int.max\n    for i in lst {\n        if\
    \ i < smallest {\n            second_smallest = smallest\n            smallest\
    \ = i\n        } else if i < second_smallest {\n            second_smallest =\
    \ i\n        }\n    }\n    return second_smallest == Int.max ? nil : second_smallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpr_ivd6vo/tmpr_ivd6vo.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76b3b71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76b3868b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76b3868988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76b38677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr_ivd6vo                        0x00005646ec48b5a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b76b3d5d460 __libc_start_main +
    245

    6    tmpr_ivd6vo                        0x00005646ec48b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013341
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var smallest = lst[0]\n    var nextSmallest = lst[1]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < smallest {\n            nextSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < nextSmallest\
    \ {\n            nextSmallest = lst[i]\n        }\n    }\n    return nextSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmphk1twn4i/tmphk1twn4i.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c099b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c096acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c096ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c096ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphk1twn4i                        0x000055c2c3c7f9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b4c09ba1460 __libc_start_main +
    245

    6    tmphk1twn4i                        0x000055c2c3c7f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var smallest\
    \ = lst[0]\n    var second_smallest = lst[0]\n    for i in lst {\n        if i\
    \ < smallest {\n            second_smallest = smallest\n            smallest =\
    \ i\n        } else if i < second_smallest {\n            second_smallest = i\n\
    \        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpx_4vxcxf/tmpx_4vxcxf.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf98230c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf97f27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf97f27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf97f267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx_4vxcxf                        0x00005638e346d5a1 <unavailable> + 5537

    5    libc.so.6                          0x00002aaf9841c460 __libc_start_main +
    245

    6    tmpx_4vxcxf                        0x00005638e346d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var next_min = lst[1]\n\
    \    for i in lst {\n        if i < min {\n            next_min = min\n      \
    \      min = i\n        } else if i < next_min {\n            next_min = i\n \
    \       }\n    }\n    return next_min\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmprckznrag/tmprckznrag.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1778c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1775beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1775be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1775bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprckznrag                        0x00005594eaa09601 <unavailable> + 5633

    5    libc.so.6                          0x00002ae177ab3460 __libc_start_main +
    245

    6    tmprckznrag                        0x00005594eaa09189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var second = Int.max\n    for i in lst {\n        if i < min {\n\
    \            second = min\n            min = i\n        } else if i < second {\n\
    \            second = i\n        }\n    }\n    return second == Int.max ? nil\
    \ : second\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpvxo1tf1b/tmpvxo1tf1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59ec643c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59ec33ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59ec33a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59ec3397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxo1tf1b                        0x0000557b0c0f98da <unavailable> + 6362

    5    libc.so.6                          0x00002b59ec82f460 __libc_start_main +
    245

    6    tmpvxo1tf1b                        0x0000557b0c0f90d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    let sorted\
    \ = lst.sorted()\n    return sorted.count > 1 ? sorted[1] : nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpwvt4pmrk/tmpwvt4pmrk.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af383a89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af383780b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af383780988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af38377f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwvt4pmrk                        0x000055e20b13b8ba <unavailable> + 6330

    5    libc.so.6                          0x00002af383c75460 __libc_start_main +
    245

    6    tmpwvt4pmrk                        0x000055e20b13b0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var nextMin = Int.max\n    for i in lst {\n        if i < min {\n\
    \            nextMin = min\n            min = i\n        } else if i < nextMin\
    \ {\n            nextMin = i\n        }\n    }\n    return nextMin == Int.max\
    \ ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpyzu_z76s/tmpyzu_z76s.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6edb517c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6edb20eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6edb20e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6edb20d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyzu_z76s                        0x000055f9cb9495a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b6edb703460 __libc_start_main +
    245

    6    tmpyzu_z76s                        0x000055f9cb949129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var smallest = lst[0]\n    var nextSmallest = lst[1]\n\
    \    for i in lst {\n        if i < smallest {\n            nextSmallest = smallest\n\
    \            smallest = i\n        } else if i < nextSmallest {\n            nextSmallest\
    \ = i\n        }\n    }\n    return nextSmallest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpbmbykkgp/tmpbmbykkgp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a8d497c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a8d18eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a8d18e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a8d18d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbmbykkgp                        0x000055ff71106601 <unavailable> + 5633

    5    libc.so.6                          0x00002b2a8d683460 __libc_start_main +
    245

    6    tmpbmbykkgp                        0x000055ff71106189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    let sorted\
    \ = lst.sorted()\n    return sorted.count > 1 ? sorted[1] : nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpwvt4pmrk/tmpwvt4pmrk.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af383a89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af383780b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af383780988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af38377f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwvt4pmrk                        0x000055e20b13b8ba <unavailable> + 6330

    5    libc.so.6                          0x00002af383c75460 __libc_start_main +
    245

    6    tmpwvt4pmrk                        0x000055e20b13b0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in lst {\n        if i\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ i\n        } else if i < secondSmallest {\n            secondSmallest = i\n\
    \        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpqf79mvqu/tmpqf79mvqu.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b500e5ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b500e2e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b500e2e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b500e2e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqf79mvqu                        0x000055f7092e65a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b500e7d8460 __libc_start_main +
    245

    6    tmpqf79mvqu                        0x000055f7092e6129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var nextMin = lst[0]\n    for i in lst {\n        if i < min {\n\
    \            nextMin = min\n            min = i\n        } else if i < nextMin\
    \ {\n            nextMin = i\n        }\n    }\n    return nextMin\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpjk9ivqu5/tmpjk9ivqu5.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab61bc45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab61b93cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab61b93c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab61b93b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjk9ivqu5                        0x0000555e82f4b5a1 <unavailable> + 5537

    5    libc.so.6                          0x00002ab61be31460 __libc_start_main +
    245

    6    tmpjk9ivqu5                        0x0000555e82f4b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var nextMin = Int.max\n    for i in lst {\n        if i < min {\n\
    \            nextMin = min\n            min = i\n        } else if i < nextMin\
    \ {\n            nextMin = i\n        }\n    }\n    return nextMin == Int.max\
    \ ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpyzu_z76s/tmpyzu_z76s.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6edb517c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6edb20eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6edb20e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6edb20d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyzu_z76s                        0x000055f9cb9495a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b6edb703460 __libc_start_main +
    245

    6    tmpyzu_z76s                        0x000055f9cb949129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var smallest\
    \ = Int.max\n    var secondSmallest = Int.max\n    for i in lst {\n        if\
    \ i < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = i\n        } else if i < secondSmallest {\n            secondSmallest = i\n\
    \        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpn24lhj8n/tmpn24lhj8n.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7038130c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7037e27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7037e27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7037e267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn24lhj8n                        0x00005563f27878da <unavailable> + 6362

    5    libc.so.6                          0x00002b703831c460 __libc_start_main +
    245

    6    tmpn24lhj8n                        0x00005563f27870d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var next = lst[0]\n    for i in lst {\n        if i < min {\n  \
    \          next = min\n            min = i\n        } else if i < next {\n   \
    \         next = i\n        }\n    }\n    return next\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp64ljfo2w/tmp64ljfo2w.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6dd19fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6dce96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6dce96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6dce957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64ljfo2w                        0x0000564d1737b5a1 <unavailable> + 5537

    5    libc.so.6                          0x00002ad6dd38b460 __libc_start_main +
    245

    6    tmp64ljfo2w                        0x0000564d1737b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in lst {\n        if i\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ i\n        } else if i < secondSmallest {\n            secondSmallest = i\n\
    \        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpqf79mvqu/tmpqf79mvqu.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b500e5ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b500e2e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b500e2e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b500e2e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqf79mvqu                        0x000055f7092e65a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b500e7d8460 __libc_start_main +
    245

    6    tmpqf79mvqu                        0x000055f7092e6129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var min2 = Int.max\n    for i in lst {\n        if i < min {\n \
    \           min2 = min\n            min = i\n        } else if i < min2 {\n  \
    \          min2 = i\n        }\n    }\n    return min2 == Int.max ? nil : min2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpskg5k99n/tmpskg5k99n.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6f976cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6f9463b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6f9463988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6f94627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpskg5k99n                        0x000055d2295bd5a1 <unavailable> + 5537

    5    libc.so.6                          0x00002ad6f9958460 __libc_start_main +
    245

    6    tmpskg5k99n                        0x000055d2295bd129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n    var nextSmallest\
    \ = lst[1]\n    for i in 1..<lst.count {\n        if lst[i] < smallest {\n   \
    \         nextSmallest = smallest\n            smallest = lst[i]\n        } else\
    \ if lst[i] < nextSmallest {\n            nextSmallest = lst[i]\n        }\n \
    \   }\n    return nextSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp3cuxc7qo/tmp3cuxc7qo.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b303d84dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b303d544b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b303d544988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b303d5437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3cuxc7qo                        0x0000562caaf649aa <unavailable> + 6570

    5    libc.so.6                          0x00002b303da39460 __libc_start_main +
    245

    6    tmp3cuxc7qo                        0x0000562caaf641a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n  \
    \  for i in 1..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp69gtr6sf/tmp69gtr6sf.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff925acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff922a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff922a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff922a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp69gtr6sf                        0x000055c602b2b9aa <unavailable> + 6570

    5    libc.so.6                          0x00002aff92798460 __libc_start_main +
    245

    6    tmp69gtr6sf                        0x000055c602b2b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var min2 = Int.max\n    for i in lst {\n        if i < min {\n\
    \            min2 = min\n            min = i\n        } else if i < min2 {\n \
    \           min2 = i\n        }\n    }\n    return min2 == Int.max ? nil : min2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpq6zz1pbk/tmpq6zz1pbk.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d1a1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0d1716b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0d1716988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0d17157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq6zz1pbk                        0x0000559e22e648da <unavailable> + 6362

    5    libc.so.6                          0x00002ab0d1c0b460 __libc_start_main +
    245

    6    tmpq6zz1pbk                        0x0000559e22e640d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    if smallest > secondSmallest {\n        (smallest, secondSmallest)\
    \ = (secondSmallest, smallest)\n    }\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = lst[i]\n        } else if lst[i] < secondSmallest {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpz72tx1s9/tmpz72tx1s9.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2915df8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2915aefb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2915aef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2915aee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz72tx1s9                        0x000055cdccefb9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b2915fe4460 __libc_start_main +
    245

    6    tmpz72tx1s9                        0x000055cdccefb1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var sorted\
    \ = lst.sorted()\n    if sorted.count > 1 {\n        return sorted[1]\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_jrpcw7k/tmp_jrpcw7k.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf98e10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf98b07b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf98b07988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf98b067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jrpcw7k                        0x0000556301dc58ba <unavailable> + 6330

    5    libc.so.6                          0x00002acf98ffc460 __libc_start_main +
    245

    6    tmp_jrpcw7k                        0x0000556301dc50b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var nextMin = Int.max\n    for i in lst {\n        if i < min {\n\
    \            nextMin = min\n            min = i\n        } else if i < nextMin\
    \ {\n            nextMin = i\n        }\n    }\n    return nextMin == Int.max\
    \ ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp320wzm2j/tmp320wzm2j.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb0709ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb06d95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb06d95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb06d947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp320wzm2j                        0x000055b5f23ed8da <unavailable> + 6362

    5    libc.so.6                          0x00002afb0728a460 __libc_start_main +
    245

    6    tmp320wzm2j                        0x000055b5f23ed0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var next_min = lst[1]\n\
    \    if min > next_min {\n        min = next_min\n        next_min = lst[0]\n\
    \    }\n    for i in 2..<lst.count {\n        if lst[i] < min {\n            next_min\
    \ = min\n            min = lst[i]\n        } else if lst[i] < next_min {\n   \
    \         next_min = lst[i]\n        }\n    }\n    return next_min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpk117v4wk/tmpk117v4wk.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b356a0f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3569dedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3569ded988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3569dec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk117v4wk                        0x0000559a65cd89aa <unavailable> + 6570

    5    libc.so.6                          0x00002b356a2e2460 __libc_start_main +
    245

    6    tmpk117v4wk                        0x0000559a65cd81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var sorted\
    \ = lst.sorted()\n    if sorted.count > 1 {\n        return sorted[1]\n    }\n\
    \    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_jrpcw7k/tmp_jrpcw7k.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf98e10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf98b07b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf98b07988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf98b067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jrpcw7k                        0x0000556301dc58ba <unavailable> + 6330

    5    libc.so.6                          0x00002acf98ffc460 __libc_start_main +
    245

    6    tmp_jrpcw7k                        0x0000556301dc50b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var next_min = Int.max\n    for i in lst {\n        if i < min {\n\
    \            next_min = min\n            min = i\n        } else if i < next_min\
    \ {\n            next_min = i\n        }\n    }\n    return next_min == Int.max\
    \ ? nil : next_min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcc31r4e_/tmpcc31r4e_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7bef23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7bec1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7bec1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7bec197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcc31r4e_                        0x0000556880d285a1 <unavailable> + 5537

    5    libc.so.6                          0x00002ba7bf10f460 __libc_start_main +
    245

    6    tmpcc31r4e_                        0x0000556880d28129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013341
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    let sorted\
    \ = lst.sorted()\n    return sorted.count > 1 ? sorted[1] : nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpwvt4pmrk/tmpwvt4pmrk.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af383a89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af383780b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af383780988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af38377f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwvt4pmrk                        0x000055e20b13b8ba <unavailable> + 6330

    5    libc.so.6                          0x00002af383c75460 __libc_start_main +
    245

    6    tmpwvt4pmrk                        0x000055e20b13b0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var nextMin = Int.max\n    for i in lst {\n        if i < min {\n\
    \            nextMin = min\n            min = i\n        } else if i < nextMin\
    \ {\n            nextMin = i\n        }\n    }\n    return nextMin == Int.max\
    \ ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp320wzm2j/tmp320wzm2j.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb0709ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb06d95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb06d95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb06d947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp320wzm2j                        0x000055b5f23ed8da <unavailable> + 6362

    5    libc.so.6                          0x00002afb0728a460 __libc_start_main +
    245

    6    tmp320wzm2j                        0x000055b5f23ed0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    let sorted\
    \ = lst.sorted()\n    return sorted.count > 1 ? sorted[1] : nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpwvt4pmrk/tmpwvt4pmrk.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af383a89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af383780b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af383780988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af38377f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwvt4pmrk                        0x000055e20b13b8ba <unavailable> + 6330

    5    libc.so.6                          0x00002af383c75460 __libc_start_main +
    245

    6    tmpwvt4pmrk                        0x000055e20b13b0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var next = Int.max\n    for i in lst {\n        if i < min {\n \
    \           next = min\n            min = i\n        } else if i < next {\n  \
    \          next = i\n        }\n    }\n    return next == Int.max ? nil : next\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp5i0rry8a/tmp5i0rry8a.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12057a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12054a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12054a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b120549f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5i0rry8a                        0x000055a5ce5d05a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b1205995460 __libc_start_main +
    245

    6    tmp5i0rry8a                        0x000055a5ce5d0129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var min2 = Int.max\n    for i in lst {\n        if i < min {\n \
    \           min2 = min\n            min = i\n        } else if i < min2 {\n  \
    \          min2 = i\n        }\n    }\n    return min2 == Int.max ? nil : min2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpskg5k99n/tmpskg5k99n.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6f976cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6f9463b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6f9463988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6f94627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpskg5k99n                        0x000055d2295bd5a1 <unavailable> + 5537

    5    libc.so.6                          0x00002ad6f9958460 __libc_start_main +
    245

    6    tmpskg5k99n                        0x000055d2295bd129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var next_min = lst[0]\n    for i in lst {\n        if i < min {\n\
    \            next_min = min\n            min = i\n        } else if i < next_min\
    \ {\n            next_min = i\n        }\n    }\n    return next_min\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpnzd0ki6s/tmpnzd0ki6s.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3cb7ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3cb4f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3cb4f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3cb4f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnzd0ki6s                        0x0000564f41d455a1 <unavailable> + 5537

    5    libc.so.6                          0x00002ab3cb9eb460 __libc_start_main +
    245

    6    tmpnzd0ki6s                        0x0000564f41d45129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var nextMin = Int.max\n    for i in lst {\n        if i < min {\n\
    \            nextMin = min\n            min = i\n        } else if i < nextMin\
    \ {\n            nextMin = i\n        }\n    }\n    return nextMin == Int.max\
    \ ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpyzu_z76s/tmpyzu_z76s.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6edb517c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6edb20eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6edb20e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6edb20d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyzu_z76s                        0x000055f9cb9495a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b6edb703460 __libc_start_main +
    245

    6    tmpyzu_z76s                        0x000055f9cb949129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var next_min = lst[1]\n \
    \   for i in 2..<lst.count {\n        if lst[i] < min {\n            next_min\
    \ = min\n            min = lst[i]\n        } else if lst[i] < next_min {\n   \
    \         next_min = lst[i]\n        }\n    }\n    return next_min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp85saf2x1/tmp85saf2x1.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69ef24cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69eef43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69eef43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69eef427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp85saf2x1                        0x0000557d520c77c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b69ef438460 __libc_start_main +
    245

    6    tmp85saf2x1                        0x0000557d520c71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ lst[0]\n    var next_min = Int.max\n    for i in lst {\n        if i < min {\n\
    \            next_min = min\n            min = i\n        } else if i < next_min\
    \ {\n            next_min = i\n        }\n    }\n    return next_min == Int.max\
    \ ? nil : next_min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpcc31r4e_/tmpcc31r4e_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7bef23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7bec1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7bec1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7bec197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcc31r4e_                        0x0000556880d285a1 <unavailable> + 5537

    5    libc.so.6                          0x00002ba7bf10f460 __libc_start_main +
    245

    6    tmpcc31r4e_                        0x0000556880d28129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013341
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n  \
    \  for i in lst {\n        if i < min {\n            nextMin = min\n         \
    \   min = i\n        } else if i < nextMin {\n            nextMin = i\n      \
    \  }\n    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpf_7us1dr/tmpf_7us1dr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7dd49f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7dd46ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7dd46ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7dd46eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf_7us1dr                        0x000055d1abb5b601 <unavailable> + 5633

    5    libc.so.6                          0x00002b7dd4be1460 __libc_start_main +
    245

    6    tmpf_7us1dr                        0x000055d1abb5b189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n  \
    \  for i in 1..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp69gtr6sf/tmp69gtr6sf.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff925acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff922a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff922a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff922a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp69gtr6sf                        0x000055c602b2b9aa <unavailable> + 6570

    5    libc.so.6                          0x00002aff92798460 __libc_start_main +
    245

    6    tmp69gtr6sf                        0x000055c602b2b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var min2 = Int.max\n    for i in lst {\n        if i < min {\n\
    \            min2 = min\n            min = i\n        } else if i < min2 {\n \
    \           min2 = i\n        }\n    }\n    return min2 == Int.max ? nil : min2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpq6zz1pbk/tmpq6zz1pbk.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d1a1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0d1716b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0d1716988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0d17157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq6zz1pbk                        0x0000559e22e648da <unavailable> + 6362

    5    libc.so.6                          0x00002ab0d1c0b460 __libc_start_main +
    245

    6    tmpq6zz1pbk                        0x0000559e22e640d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplsidep1b/tmplsidep1b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45ab21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45a818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45a818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45a8177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsidep1b                        0x000055fbd910b8da <unavailable> + 6362

    5    libc.so.6                          0x00002ab45ad0d460 __libc_start_main +
    245

    6    tmplsidep1b                        0x000055fbd910b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013340
