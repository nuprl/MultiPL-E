language: swift
name: HumanEval_139_special_factorial
results:
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for i in 1...n {\n        factorial *= i\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpt_vwhmwk/tmpt_vwhmwk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b225d0aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b225cda5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b225cda5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b225cda47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt_vwhmwk                        0x00005585e4f20337 <unavailable> + 4919

    5    libc.so.6                          0x00002b225d29a460 __libc_start_main +
    245

    6    tmpt_vwhmwk                        0x00005585e4f1ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i * factorial(i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpv9zo2jd2.swift:11:23: error: cannot find 'factorial' in scope\n\
    \        result *= i * factorial(i)\n                      ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if\
    \ n == 0 {\n        return 1\n    }\n    return n * special_factorial(n: n - 1)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpegada7gj/tmpegada7gj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5034fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5031f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5031f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5031f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegada7gj                        0x000055a921ce81b7 <unavailable> + 4535

    5    libc.so.6                          0x00002ad5036e7460 __libc_start_main +
    245

    6    tmpegada7gj                        0x000055a921ce7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\n\
    assert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\n\
    assert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp8z6xm3cc/tmp8z6xm3cc.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41e085fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41e0556b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41e0556988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41e05557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8z6xm3cc                        0x000055ba377a51b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b41e0a4b460 __libc_start_main +
    245

    6    tmp8z6xm3cc                        0x000055ba377a4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for i in 1...n {\n        factorial *= i\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpt_vwhmwk/tmpt_vwhmwk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b225d0aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b225cda5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b225cda5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b225cda47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt_vwhmwk                        0x00005585e4f20337 <unavailable> + 4919

    5    libc.so.6                          0x00002b225d29a460 __libc_start_main +
    245

    6    tmpt_vwhmwk                        0x00005585e4f1ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if\
    \ n == 0 {\n        return 1\n    }\n    return n * special_factorial(n: n - 1)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpegada7gj/tmpegada7gj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5034fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5031f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5031f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5031f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegada7gj                        0x000055a921ce81b7 <unavailable> + 4535

    5    libc.so.6                          0x00002ad5036e7460 __libc_start_main +
    245

    6    tmpegada7gj                        0x000055a921ce7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for i in 1...n {\n        factorial *= i\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpt_vwhmwk/tmpt_vwhmwk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b225d0aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b225cda5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b225cda5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b225cda47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt_vwhmwk                        0x00005585e4f20337 <unavailable> + 4919

    5    libc.so.6                          0x00002b225d29a460 __libc_start_main +
    245

    6    tmpt_vwhmwk                        0x00005585e4f1ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    for i in 1..<n\
    \ {\n        result *= i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmppqrykxm6/tmppqrykxm6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba44b55ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba44b255b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba44b255988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba44b2547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppqrykxm6                        0x0000560184cf0427 <unavailable> + 5159

    5    libc.so.6                          0x00002ba44b74a460 __libc_start_main +
    245

    6    tmppqrykxm6                        0x0000560184cf00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\n\
    assert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\n\
    assert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp8z6xm3cc/tmp8z6xm3cc.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41e085fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41e0556b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41e0556988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41e05557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8z6xm3cc                        0x000055ba377a51b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b41e0a4b460 __libc_start_main +
    245

    6    tmp8z6xm3cc                        0x000055ba377a4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    for i in 1..<n\
    \ {\n        result *= i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmppqrykxm6/tmppqrykxm6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba44b55ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba44b255b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba44b255988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba44b2547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppqrykxm6                        0x0000560184cf0427 <unavailable> + 5159

    5    libc.so.6                          0x00002ba44b74a460 __libc_start_main +
    245

    6    tmppqrykxm6                        0x0000560184cf00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\n\
    assert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\n\
    assert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp8z6xm3cc/tmp8z6xm3cc.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41e085fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41e0556b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41e0556988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41e05557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8z6xm3cc                        0x000055ba377a51b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b41e0a4b460 __libc_start_main +
    245

    6    tmp8z6xm3cc                        0x000055ba377a4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if\
    \ n == 0 {\n        return 1\n    }\n    return n * special_factorial(n: n - 1)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpegada7gj/tmpegada7gj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5034fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5031f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5031f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5031f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegada7gj                        0x000055a921ce81b7 <unavailable> + 4535

    5    libc.so.6                          0x00002ad5036e7460 __libc_start_main +
    245

    6    tmpegada7gj                        0x000055a921ce7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\n\
    assert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\n\
    assert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp8z6xm3cc/tmp8z6xm3cc.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41e085fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41e0556b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41e0556988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41e05557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8z6xm3cc                        0x000055ba377a51b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b41e0a4b460 __libc_start_main +
    245

    6    tmp8z6xm3cc                        0x000055ba377a4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    for i in 1..<n\
    \ {\n        result *= i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmppqrykxm6/tmppqrykxm6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba44b55ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba44b255b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba44b255988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba44b2547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppqrykxm6                        0x0000560184cf0427 <unavailable> + 5159

    5    libc.so.6                          0x00002ba44b74a460 __libc_start_main +
    245

    6    tmppqrykxm6                        0x0000560184cf00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for i in 1...n {\n        factorial *= i\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpt_vwhmwk/tmpt_vwhmwk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b225d0aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b225cda5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b225cda5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b225cda47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt_vwhmwk                        0x00005585e4f20337 <unavailable> + 4919

    5    libc.so.6                          0x00002b225d29a460 __libc_start_main +
    245

    6    tmpt_vwhmwk                        0x00005585e4f1ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for i in 1...n {\n        factorial *= i\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpt_vwhmwk/tmpt_vwhmwk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b225d0aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b225cda5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b225cda5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b225cda47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt_vwhmwk                        0x00005585e4f20337 <unavailable> + 4919

    5    libc.so.6                          0x00002b225d29a460 __libc_start_main +
    245

    6    tmpt_vwhmwk                        0x00005585e4f1ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\n\
    assert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\n\
    assert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp8z6xm3cc/tmp8z6xm3cc.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41e085fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41e0556b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41e0556988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41e05557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8z6xm3cc                        0x000055ba377a51b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b41e0a4b460 __libc_start_main +
    245

    6    tmp8z6xm3cc                        0x000055ba377a4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if\
    \ n == 0 {\n        return 1\n    }\n    return n * special_factorial(n: n - 1)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpegada7gj/tmpegada7gj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5034fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5031f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5031f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5031f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegada7gj                        0x000055a921ce81b7 <unavailable> + 4535

    5    libc.so.6                          0x00002ad5036e7460 __libc_start_main +
    245

    6    tmpegada7gj                        0x000055a921ce7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\n\
    assert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\n\
    assert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp8z6xm3cc/tmp8z6xm3cc.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41e085fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41e0556b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41e0556988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41e05557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8z6xm3cc                        0x000055ba377a51b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b41e0a4b460 __libc_start_main +
    245

    6    tmp8z6xm3cc                        0x000055ba377a4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    for i in 1..<n\
    \ {\n        result *= i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmppqrykxm6/tmppqrykxm6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba44b55ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba44b255b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba44b255988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba44b2547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppqrykxm6                        0x0000560184cf0427 <unavailable> + 5159

    5    libc.so.6                          0x00002ba44b74a460 __libc_start_main +
    245

    6    tmppqrykxm6                        0x0000560184cf00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\n\
    assert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\n\
    assert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp8z6xm3cc/tmp8z6xm3cc.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41e085fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41e0556b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41e0556988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41e05557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8z6xm3cc                        0x000055ba377a51b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b41e0a4b460 __libc_start_main +
    245

    6    tmp8z6xm3cc                        0x000055ba377a4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\n\
    assert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\n\
    assert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp8z6xm3cc/tmp8z6xm3cc.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41e085fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41e0556b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41e0556988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41e05557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8z6xm3cc                        0x000055ba377a51b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b41e0a4b460 __libc_start_main +
    245

    6    tmp8z6xm3cc                        0x000055ba377a4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    var i = n\n    while i > 0 {\n        factorial *= i\n  \
    \      i -= 1\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5)\
    \ == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpxmw7i2uv/tmpxmw7i2uv.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2f0f48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2f0c3fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad2f0c3f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2f0c3e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxmw7i2uv                        0x000055e50af511b7 <unavailable> + 4535

    5    libc.so.6                          0x00002ad2f1134460 __libc_start_main +
    245

    6    tmpxmw7i2uv                        0x000055e50af50e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    for i in 1..<n\
    \ {\n        result *= i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmppqrykxm6/tmppqrykxm6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba44b55ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba44b255b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba44b255988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba44b2547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppqrykxm6                        0x0000560184cf0427 <unavailable> + 5159

    5    libc.so.6                          0x00002ba44b74a460 __libc_start_main +
    245

    6    tmppqrykxm6                        0x0000560184cf00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\n\
    assert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\n\
    assert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp8z6xm3cc/tmp8z6xm3cc.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41e085fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41e0556b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41e0556988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41e05557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8z6xm3cc                        0x000055ba377a51b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b41e0a4b460 __libc_start_main +
    245

    6    tmp8z6xm3cc                        0x000055ba377a4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for i in 1...n {\n        factorial *= i\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpt_vwhmwk/tmpt_vwhmwk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b225d0aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b225cda5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b225cda5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b225cda47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt_vwhmwk                        0x00005585e4f20337 <unavailable> + 4919

    5    libc.so.6                          0x00002b225d29a460 __libc_start_main +
    245

    6    tmpt_vwhmwk                        0x00005585e4f1ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if\
    \ n == 0 {\n        return 1\n    }\n    return n * special_factorial(n: n - 1)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpegada7gj/tmpegada7gj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5034fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5031f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5031f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5031f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegada7gj                        0x000055a921ce81b7 <unavailable> + 4535

    5    libc.so.6                          0x00002ad5036e7460 __libc_start_main +
    245

    6    tmpegada7gj                        0x000055a921ce7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    for i in 1..<n\
    \ {\n        result *= i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmppqrykxm6/tmppqrykxm6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba44b55ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba44b255b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba44b255988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba44b2547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppqrykxm6                        0x0000560184cf0427 <unavailable> + 5159

    5    libc.so.6                          0x00002ba44b74a460 __libc_start_main +
    245

    6    tmppqrykxm6                        0x0000560184cf00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\n\
    assert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\n\
    assert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp8z6xm3cc/tmp8z6xm3cc.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41e085fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41e0556b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41e0556988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41e05557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8z6xm3cc                        0x000055ba377a51b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b41e0a4b460 __libc_start_main +
    245

    6    tmp8z6xm3cc                        0x000055ba377a4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if\
    \ n == 0 {\n        return 1\n    }\n    return n * special_factorial(n: n - 1)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpegada7gj/tmpegada7gj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5034fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5031f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5031f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5031f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegada7gj                        0x000055a921ce81b7 <unavailable> + 4535

    5    libc.so.6                          0x00002ad5036e7460 __libc_start_main +
    245

    6    tmpegada7gj                        0x000055a921ce7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpctaqb9ne/tmpctaqb9ne.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbe83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbe534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbe534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbe5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctaqb9ne                        0x00005593c6ea7337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7cbea29460 __libc_start_main +
    245

    6    tmpctaqb9ne                        0x00005593c6ea6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for i in 1...n {\n        factorial *= i\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpt_vwhmwk/tmpt_vwhmwk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b225d0aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b225cda5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b225cda5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b225cda47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt_vwhmwk                        0x00005585e4f20337 <unavailable> + 4919

    5    libc.so.6                          0x00002b225d29a460 __libc_start_main +
    245

    6    tmpt_vwhmwk                        0x00005585e4f1ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4_66bnob.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\n\
    assert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\n\
    assert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp8z6xm3cc/tmp8z6xm3cc.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41e085fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41e0556b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41e0556988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41e05557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8z6xm3cc                        0x000055ba377a51b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b41e0a4b460 __libc_start_main +
    245

    6    tmp8z6xm3cc                        0x000055ba377a4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    return\
    \ n == 0 ? 1 : n * special_factorial(n: n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5)\
    \ == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpzbz5r61s/tmpzbz5r61s.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8ae6a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8ae3a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8ae3a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8ae39f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzbz5r61s                        0x000055ac7efc61b7 <unavailable> + 4535

    5    libc.so.6                          0x00002af8ae895460 __libc_start_main +
    245

    6    tmpzbz5r61s                        0x000055ac7efc5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(i)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi52dy07j.swift:11:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
