name: HumanEval_145_order_by_points
language: swift
prompt: "\n/// Write a function which sorts the given list of integers\n/// in ascending\
  \ order according to the sum of their digits.\n/// Note: if there are several items\
  \ with similar sum of their digits,\n/// order them based on their index in original\
  \ list.\n/// For example:\nfunc order_by_points(nums: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12])\
  \ == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145,\
  \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
  \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
  \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3])\
  \ == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3,\
  \ 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
  \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
completions: ["    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum ||\
    \ (aSum == bSum && a < b)\n    }", "    return nums.sorted {\n        let sum1\
    \ = $0.digits.reduce(0, +)\n        let sum2 = $1.digits.reduce(0, +)\n      \
    \  return sum1 == sum2 ? $0 < $1 : sum1 < sum2\n    }", "    var nums = nums\n\
    \    for i in 0..<nums.count {\n        for j in i..<nums.count {\n          \
    \  if sum_of_digits(nums[i]) > sum_of_digits(nums[j]) {\n                nums.swapAt(i,\
    \ j)\n            }\n        }\n    }\n    return nums", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = sumDigits(a)\n        let bSum = sumDigits(b)\n\
    \        return aSum < bSum\n    }", "    return nums.sorted(by: {\n        let\
    \ a = $0.digits.reduce(0, +)\n        let b = $1.digits.reduce(0, +)\n       \
    \ return a == b ? $0 < $1 : a < b\n    })", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum || (aSum == bSum && a < b)\n    }", "    return\
    \ nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n\
    \        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b\
    \ : aSum < bSum\n    }", "    var result: [Int] = []\n    var dict: [Int: Int]\
    \ = [:]\n    for (index, num) in nums.enumerated() {\n        var sum = 0\n  \
    \      var num = num\n        while num > 0 {\n            sum += num % 10\n \
    \           num /= 10\n        }\n        dict[sum] = index\n    }\n    let sortedDict\
    \ = dict.sorted { $0.key < $1.key }\n    for (sum, index) in sortedDict {\n  \
    \      result.append(nums[index])\n    }\n    return result", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        return sum_of_digits(a) < sum_of_digits(b)\n  \
    \  }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum ||\
    \ (aSum == bSum && a < b)\n    }", "    var nums = nums\n    nums.sort { (a, b)\
    \ -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }\n    return nums", "    return nums.sorted(by:\
    \ { (a, b) -> Bool in\n        let a_sum = a.digits.reduce(0, +)\n        let\
    \ b_sum = b.digits.reduce(0, +)\n        return a_sum == b_sum ? a < b : a_sum\
    \ < b_sum\n    })", "    return nums.sorted { (a, b) -> Bool in\n        let aSum\
    \ = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n        return\
    \ aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted { (a, b)\
    \ -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    var nums = nums\n    nums.sort { (a, b) -> Bool in\n        let\
    \ aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n   \
    \     return aSum < bSum\n    }\n    return nums", "    return nums.sorted { (a,\
    \ b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum =\
    \ b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n \
    \   }", "    var nums = nums\n    nums.sort { (a, b) -> Bool in\n        let aSum\
    \ = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n        return\
    \ aSum < bSum\n    }\n    return nums", "    return nums.sorted(by: {\n      \
    \  let sum1 = String($0).reduce(0, { $0 + Int(String($1))! })\n        let sum2\
    \ = String($1).reduce(0, { $0 + Int(String($1))! })\n        return sum1 < sum2\n\
    \    })", "    var nums = nums\n    var sum = [Int]()\n    for i in 0..<nums.count\
    \ {\n        var count = 0\n        for j in String(nums[i]) {\n            count\
    \ += Int(String(j))!\n        }\n        sum.append(count)\n    }\n    for i in\
    \ 0..<nums.count {\n        for j in 0..<nums.count - 1 {\n            if sum[j]\
    \ > sum[j + 1] {\n                let temp = sum[j]\n                sum[j] =\
    \ sum[j + 1]\n                sum[j + 1] = temp\n                let temp2 = nums[j]\n\
    \                nums[j] = nums[j + 1]\n                nums[j + 1] = temp2\n\
    \            }\n        }\n    }\n    return nums", "    return nums.sorted {\
    \ (lhs, rhs) -> Bool in\n        let lhsSum = lhs.digits.reduce(0, +)\n      \
    \  let rhsSum = rhs.digits.reduce(0, +)\n        return lhsSum < rhsSum\n    }",
  "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n \
    \       let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    var nums\
    \ = nums\n    nums.sort { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n    return nums", "    return nums.sorted { (a, b) -> Bool in\n       \
    \ let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n\
    \        return aSum == bSum ? a < b : aSum < bSum\n    }", "    var result =\
    \ [Int]()\n    var dict = [Int: Int]()\n    for i in 0..<nums.count {\n      \
    \  let sum = nums[i].digits.reduce(0, +)\n        dict[sum] = nums[i]\n    }\n\
    \    let sortedKeys = dict.keys.sorted()\n    for key in sortedKeys {\n      \
    \  result.append(dict[key]!)\n    }\n    return result", "    var result = [Int]()\n\
    \    var dict = [Int: Int]()\n    for i in 0..<nums.count {\n        var sum =\
    \ 0\n        var num = nums[i]\n        while num > 0 {\n            sum += num\
    \ % 10\n            num /= 10\n        }\n        dict[i] = sum\n    }\n    let\
    \ sortedDict = dict.sorted { $0.value < $1.value }\n    for (key, _) in sortedDict\
    \ {\n        result.append(nums[key])\n    }\n    return result", "    return\
    \ nums.sorted(by: { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n\
    \        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n    })",
  "    var nums = nums\n    var sum = 0\n    for i in 0..<nums.count {\n        sum\
    \ = 0\n        for j in 0..<String(nums[i]).count {\n            sum += Int(String(String(nums[i])[j]))!\n\
    \        }\n        nums[i] = sum\n    }\n    return nums", "    var nums = nums\n\
    \    nums.sort { (a, b) -> Bool in\n        let a_sum = a.digits().reduce(0, +)\n\
    \        let b_sum = b.digits().reduce(0, +)\n        return a_sum < b_sum\n \
    \   }\n    return nums", "    return nums.sorted { (a, b) -> Bool in\n       \
    \ let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n\
    \        return aSum < bSum || (aSum == bSum && a < b)\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum || (aSum == bSum && a <\
    \ b)\n    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum =\
    \ a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n        return\
    \ aSum == bSum ? a < b : aSum < bSum\n    }", "    var nums = nums\n    var sum\
    \ = 0\n    var sum_arr = [Int]()\n    for i in 0..<nums.count {\n        sum =\
    \ 0\n        for j in 0..<String(nums[i]).count {\n            sum += Int(String(nums[i])[j])!\n\
    \        }\n        sum_arr.append(sum)\n    }\n    for i in 0..<nums.count {\n\
    \        for j in 0..<nums.count - 1 {\n            if sum_arr[j] > sum_arr[j\
    \ + 1] {\n                let temp = sum_arr[j]\n                sum_arr[j] =\
    \ sum_arr[j + 1]\n                sum_arr[j + 1] = temp\n                let temp2\
    \ = nums[j]\n                nums[j] = nums[j + 1]\n                nums[j + 1]\
    \ = temp2\n            }\n        }\n    }\n    return nums", "    let sorted\
    \ = nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n\
    \        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b\
    \ : aSum < bSum\n    }\n    return sorted", "    var result = [Int]()\n    var\
    \ dict = [Int: [Int]]()\n    for i in 0..<nums.count {\n        let digitSum =\
    \ sum_of_digits(nums[i])\n        if dict[digitSum] == nil {\n            dict[digitSum]\
    \ = [Int]()\n        }\n        dict[digitSum]?.append(nums[i])\n    }\n    let\
    \ sortedKeys = dict.keys.sorted()\n    for key in sortedKeys {\n        result.append(contentsOf:\
    \ dict[key]!)\n    }\n    return result", "    var nums = nums\n    var sum =\
    \ 0\n    var sumArray = [Int]()\n    for i in 0..<nums.count {\n        sum =\
    \ 0\n        for j in 0..<String(nums[i]).count {\n            sum += Int(String(String(nums[i])[j]))!\n\
    \        }\n        sumArray.append(sum)\n    }\n    for i in 0..<nums.count {\n\
    \        for j in 0..<nums.count {\n            if sumArray[i] < sumArray[j] {\n\
    \                let temp = sumArray[i]\n                sumArray[i] = sumArray[j]\n\
    \                sumArray[j] = temp\n                let temp2 = nums[i]\n   \
    \             nums[i] = nums[j]\n                nums[j] = temp2\n           \
    \ }\n        }\n    }\n    return nums", "    return nums.sorted { (a, b) -> Bool\
    \ in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    var result\
    \ = [Int]()\n    var dict = [Int: Int]()\n    for (index, num) in nums.enumerated()\
    \ {\n        let sum = sum_of_digits(num: num)\n        dict[index] = sum\n  \
    \  }\n    let sortedDict = dict.sorted { $0.value < $1.value }\n    for (index,\
    \ _) in sortedDict {\n        result.append(nums[index])\n    }\n    return result",
  "    var nums = nums\n    nums.sort { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n    return nums", "    return nums.sorted { (a,\
    \ b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum =\
    \ b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n \
    \   }", "    var nums = nums\n    nums.sort { (a, b) -> Bool in\n        let aSum\
    \ = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n        return\
    \ aSum < bSum\n    }\n    return nums", "    var nums = nums\n    for i in 0..<nums.count\
    \ {\n        for j in 0..<nums.count - 1 {\n            if sum_of_digits(nums[j])\
    \ > sum_of_digits(nums[j + 1]) {\n                let temp = nums[j]\n       \
    \         nums[j] = nums[j + 1]\n                nums[j + 1] = temp\n        \
    \    }\n        }\n    }\n    return nums", "    var nums = nums\n    nums.sort\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }\n    return nums",
  "    return nums.sorted(by: {\n        let a = $0.digits.reduce(0, +)\n        let\
    \ b = $1.digits.reduce(0, +)\n        return a < b || (a == b && $0 < $1)\n  \
    \  })", "    var result = [Int]()\n    var dict = [Int: Int]()\n    for (index,\
    \ num) in nums.enumerated() {\n        let sum = num.digits.reduce(0, +)\n   \
    \     dict[sum] = num\n    }\n    let sortedDict = dict.sorted { $0.key < $1.key\
    \ }\n    for (_, value) in sortedDict {\n        result.append(value)\n    }\n\
    \    return result", "    var nums = nums\n    nums.sort { (a, b) -> Bool in\n\
    \        let aSum = String(a).reduce(0) { $0 + Int(String($1))! }\n        let\
    \ bSum = String(b).reduce(0) { $0 + Int(String($1))! }\n        return aSum <\
    \ bSum\n    }\n    return nums", "    var nums = nums\n    nums.sort { (a, b)\
    \ -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }\n    return nums",
  "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    var nums = nums\n    nums.sort { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }\n    return nums", "    return nums.sorted(by:\
    \ {\n        let a = String($0).map { Int(String($0))! }.reduce(0, +)\n      \
    \  let b = String($1).map { Int(String($0))! }.reduce(0, +)\n        return a\
    \ < b\n    })", "    var result = [Int]()\n    var nums = nums\n    var sum =\
    \ 0\n    var index = 0\n    var min = 0\n    var minIndex = 0\n    var i = 0\n\
    \    while nums.count > 0 {\n        min = nums[0]\n        minIndex = 0\n   \
    \     for i in 0..<nums.count {\n            sum = 0\n            for c in String(nums[i]).characters\
    \ {\n                sum += Int(String(c))!\n            }\n            if sum\
    \ < min {\n                min = sum\n                minIndex = i\n         \
    \   }\n        }\n        result.append(nums[minIndex])\n        nums.remove(at:\
    \ minIndex)\n    }\n    return result", "    return nums.sorted { (a, b) -> Bool\
    \ in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum || (aSum == bSum && a < b)\n    }", "    return\
    \ nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n\
    \        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b\
    \ : aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n       \
    \ let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n\
    \        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted(by:\
    \ { (a, b) -> Bool in\n        let aSum = String(a).map { Int(String($0))! }.reduce(0,\
    \ +)\n        let bSum = String(b).map { Int(String($0))! }.reduce(0, +)\n   \
    \     return aSum < bSum\n    })", "    return nums.sorted { (a, b) -> Bool in\n\
    \        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted {\n        var\
    \ sum1 = 0\n        var sum2 = 0\n        for d in String(describing: $0).characters\
    \ {\n            sum1 += Int(String(d))!\n        }\n        for d in String(describing:\
    \ $1).characters {\n            sum2 += Int(String(d))!\n        }\n        return\
    \ sum1 < sum2\n    }", "    var nums = nums\n    nums.sort { (a, b) -> Bool in\n\
    \        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }\n    return nums", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    var dict = [Int: Int]()\n    for (index, num) in nums.enumerated()\
    \ {\n        let sum = num.digits.reduce(0, +)\n        dict[sum] = index\n  \
    \  }\n    return dict.sorted { $0.key < $1.key }.map { nums[$0.value] }", "  \
    \  return nums.sorted(by: {\n        let a = String($0).map { Int(String($0))!\
    \ }.reduce(0, +)\n        let b = String($1).map { Int(String($0))! }.reduce(0,\
    \ +)\n        return a < b\n    })", "    var nums = nums\n    var sum = [Int]()\n\
    \    for i in 0..<nums.count {\n        var sum_digit = 0\n        var num = nums[i]\n\
    \        while num > 0 {\n            sum_digit += num % 10\n            num /=\
    \ 10\n        }\n        sum.append(sum_digit)\n    }\n    for i in 0..<nums.count\
    \ {\n        for j in i+1..<nums.count {\n            if sum[i] > sum[j] {\n \
    \               let temp = sum[i]\n                sum[i] = sum[j]\n         \
    \       sum[j] = temp\n                let temp2 = nums[i]\n                nums[i]\
    \ = nums[j]\n                nums[j] = temp2\n            }\n        }\n    }\n\
    \    return nums", "    return nums.sorted { (a, b) -> Bool in\n        let aSum\
    \ = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n        return\
    \ aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted { (a, b)\
    \ -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted(by:\
    \ { (num1, num2) -> Bool in\n        let sum1 = num1.digits.reduce(0, +)\n   \
    \     let sum2 = num2.digits.reduce(0, +)\n        return sum1 < sum2\n    })",
  "    var nums = nums\n    nums.sort { (a, b) -> Bool in\n        var a = a\n   \
    \     var b = b\n        var sumA = 0\n        var sumB = 0\n        while a >\
    \ 0 {\n            sumA += a % 10\n            a /= 10\n        }\n        while\
    \ b > 0 {\n            sumB += b % 10\n            b /= 10\n        }\n      \
    \  return sumA < sumB\n    }\n    return nums", "    return nums.sorted { (a,\
    \ b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum =\
    \ b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n \
    \   }", "    var nums = nums\n    for i in 0..<nums.count {\n        for j in\
    \ 0..<nums.count - 1 {\n            if sum_digits(nums[j]) > sum_digits(nums[j\
    \ + 1]) {\n                nums.swapAt(j, j + 1)\n            }\n        }\n \
    \   }\n    return nums", "    return nums.sorted { (a, b) -> Bool in\n       \
    \ let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n\
    \        return aSum < bSum || (aSum == bSum && a < b)\n    }", "    return nums.sorted(by:\
    \ {\n        let a = String($0).map { Int(String($0))! }.reduce(0, +)\n      \
    \  let b = String($1).map { Int(String($0))! }.reduce(0, +)\n        return a\
    \ < b\n    })", "    return nums.sorted(by: { (a, b) -> Bool in\n        let a_sum\
    \ = a.digits.reduce(0, +)\n        let b_sum = b.digits.reduce(0, +)\n       \
    \ return a_sum < b_sum\n    })", "    return nums.sorted(by: {\n        let sum1\
    \ = $0.digits.reduce(0, +)\n        let sum2 = $1.digits.reduce(0, +)\n      \
    \  return sum1 < sum2 || (sum1 == sum2 && nums.firstIndex(of: $0)! < nums.firstIndex(of:\
    \ $1)!)\n    })", "    return nums.sorted { (a, b) -> Bool in\n        let aSum\
    \ = String(a).reduce(0) { $0 + Int(String($1))! }\n        let bSum = String(b).reduce(0)\
    \ { $0 + Int(String($1))! }\n        return aSum < bSum\n    }", "    var nums\
    \ = nums\n    nums.sort { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n    return nums", "    var nums = nums\n    nums.sort { (a, b) -> Bool\
    \ in\n        let aSum = String(a).reduce(0) { $0 + Int(String($1))! }\n     \
    \   let bSum = String(b).reduce(0) { $0 + Int(String($1))! }\n        return aSum\
    \ < bSum\n    }\n    return nums", "    return nums.sorted { (a, b) -> Bool in\n\
    \        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n \
    \       let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum || (aSum == bSum && a < b)\n    }", "    return\
    \ nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n\
    \        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b\
    \ : aSum < bSum\n    }", "    return nums.sorted {\n        let a = $0.digits.reduce(0,\
    \ +)\n        let b = $1.digits.reduce(0, +)\n        return a == b ? $0 < $1\
    \ : a < b\n    }", "    var nums = nums\n    var sum = 0\n    var sum_array =\
    \ [Int]()\n    for i in 0..<nums.count {\n        sum = 0\n        for j in 0..<String(nums[i]).count\
    \ {\n            sum += Int(String(String(nums[i])[j]))!\n        }\n        sum_array.append(sum)\n\
    \    }\n    for i in 0..<nums.count {\n        for j in 0..<nums.count - 1 {\n\
    \            if sum_array[j] > sum_array[j + 1] {\n                let temp =\
    \ sum_array[j]\n                sum_array[j] = sum_array[j + 1]\n            \
    \    sum_array[j + 1] = temp\n                let temp2 = nums[j]\n          \
    \      nums[j] = nums[j + 1]\n                nums[j + 1] = temp2\n          \
    \  }\n        }\n    }\n    return nums", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    var nums\
    \ = nums\n    var sum = [Int]()\n    var index = [Int]()\n    for i in 0..<nums.count\
    \ {\n        sum.append(sum_of_digits(nums[i]))\n        index.append(i)\n   \
    \ }\n    for i in 0..<nums.count {\n        for j in 0..<nums.count - 1 {\n  \
    \          if sum[j] > sum[j + 1] {\n                let temp = sum[j]\n     \
    \           sum[j] = sum[j + 1]\n                sum[j + 1] = temp\n         \
    \       let temp2 = nums[j]\n                nums[j] = nums[j + 1]\n         \
    \       nums[j + 1] = temp2\n                let temp3 = index[j]\n          \
    \      index[j] = index[j + 1]\n                index[j + 1] = temp3\n       \
    \     }\n        }\n    }\n    for i in 0..<nums.count {\n        for j in 0..<nums.count\
    \ - 1 {\n            if sum[j] == sum[j + 1] && index[j] > index[j + 1] {\n  \
    \              let temp = sum[j]\n                sum[j] = sum[j + 1]\n      \
    \          sum[j + 1] = temp\n                let temp2 = nums[j]\n          \
    \      nums[j] = nums[j + 1]\n                nums[j + 1] = temp2\n          \
    \      let temp3 = index[j]\n                index[j] = index[j + 1]\n       \
    \         index[j + 1] = temp3\n            }\n        }\n    }\n    return nums",
  "    var result = [Int]()\n    var dict = [Int: Int]()\n    for (index, num) in\
    \ nums.enumerated() {\n        var sum = 0\n        for char in String(num) {\n\
    \            sum += Int(String(char))!\n        }\n        dict[index] = sum\n\
    \    }\n    let sortedDict = dict.sorted { $0.value < $1.value }\n    for (index,\
    \ _) in sortedDict {\n        result.append(nums[index])\n    }\n    return result",
  "    return nums.sorted(by: {\n        let a = String($0).map { Int(String($0))!\
    \ }.reduce(0, +)\n        let b = String($1).map { Int(String($0))! }.reduce(0,\
    \ +)\n        return a < b\n    })", "    return nums.sorted { (a, b) -> Bool\
    \ in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let a_sum = a.digits.reduce(0,\
    \ +)\n        let b_sum = b.digits.reduce(0, +)\n        return a_sum == b_sum\
    \ ? a < b : a_sum < b_sum\n    }", "    return nums.sorted(by: {\n        let\
    \ a = String($0).map { Int(String($0))! }.reduce(0, +)\n        let b = String($1).map\
    \ { Int(String($0))! }.reduce(0, +)\n        return a < b\n    })", "    var result\
    \ = [Int]()\n    var dict = [Int: Int]()\n    for num in nums {\n        var sum\
    \ = 0\n        var num = num\n        while num > 0 {\n            sum += num\
    \ % 10\n            num /= 10\n        }\n        dict[num] = sum\n    }\n   \
    \ let sorted = dict.sorted { $0.value < $1.value }\n    for (key, _) in sorted\
    \ {\n        result.append(key)\n    }\n    return result", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    var result: [Int] = []\n    var dict: [Int: Int] = [:]\n    for\
    \ (index, num) in nums.enumerated() {\n        let sum = num.digits.reduce(0,\
    \ +)\n        dict[sum] = num\n    }\n    let sortedKeys = dict.keys.sorted()\n\
    \    for key in sortedKeys {\n        result.append(dict[key]!)\n    }\n    return\
    \ result", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum ||\
    \ (aSum == bSum && a < b)\n    }", "    var result = [Int]()\n    var dict = [Int:\
    \ Int]()\n    var index = 0\n    for num in nums {\n        var sum = 0\n    \
    \    var num = num\n        while num > 0 {\n            sum += num % 10\n   \
    \         num /= 10\n        }\n        dict[sum] = nums[index]\n        index\
    \ += 1\n    }\n    let sortedDict = dict.sorted(by: { $0.key < $1.key })\n   \
    \ for (_, value) in sortedDict {\n        result.append(value)\n    }\n    return\
    \ result", "    return nums.sorted(by: {\n        let a = String($0).map { Int(String($0))!\
    \ }.reduce(0, +)\n        let b = String($1).map { Int(String($0))! }.reduce(0,\
    \ +)\n        return a < b\n    })", "    return nums.sorted { (a, b) -> Bool\
    \ in\n        let aDigits = a.digits\n        let bDigits = b.digits\n       \
    \ let aSum = aDigits.reduce(0, +)\n        let bSum = bDigits.reduce(0, +)\n \
    \       if aSum == bSum {\n            return a < b\n        }\n        return\
    \ aSum < bSum\n    }", "    var result = [Int]()\n    var dict = [Int: Int]()\n\
    \    for (index, num) in nums.enumerated() {\n        let sum = num.digits.reduce(0,\
    \ +)\n        dict[sum] = num\n    }\n    let sortedKeys = dict.keys.sorted()\n\
    \    for key in sortedKeys {\n        result.append(dict[key]!)\n    }\n    return\
    \ result", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = String(a).reduce(0)\
    \ { $0 + Int(String($1))! }\n        let bSum = String(b).reduce(0) { $0 + Int(String($1))!\
    \ }\n        return aSum < bSum\n    }", "    return nums.sorted(by: {\n     \
    \   let sum1 = sum_of_digits(n: $0)\n        let sum2 = sum_of_digits(n: $1)\n\
    \        if sum1 == sum2 {\n            return nums.firstIndex(of: $0)! < nums.firstIndex(of:\
    \ $1)!\n        }\n        return sum1 < sum2\n    })", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let a_sum = a.digits.reduce(0,\
    \ +)\n        let b_sum = b.digits.reduce(0, +)\n        return a_sum < b_sum\n\
    \    }", "    var result: [Int] = []\n    var sum: [Int] = []\n    for i in nums\
    \ {\n        var temp = i\n        var sum_temp = 0\n        while temp > 0 {\n\
    \            sum_temp += temp % 10\n            temp /= 10\n        }\n      \
    \  sum.append(sum_temp)\n    }\n    for i in 0..<nums.count {\n        var min\
    \ = sum[i]\n        var min_index = i\n        for j in i..<nums.count {\n   \
    \         if sum[j] < min {\n                min = sum[j]\n                min_index\
    \ = j\n            }\n        }\n        sum.swapAt(i, min_index)\n        result.append(nums[min_index])\n\
    \    }\n    return result", "    return nums.sorted { (a, b) -> Bool in\n    \
    \    let aSum = sumOfDigits(num: a)\n        let bSum = sumOfDigits(num: b)\n\
    \        if aSum == bSum {\n            return a < b\n        }\n        return\
    \ aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n        let\
    \ aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n   \
    \     return aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n\
    \        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted(by: { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    })", "    var result = [Int]()\n    var dict = [Int:\
    \ Int]()\n    for (index, num) in nums.enumerated() {\n        dict[num] = sum_of_digits(num:\
    \ num)\n    }\n    let sortedDict = dict.sorted { $0.value < $1.value }\n    for\
    \ (key, _) in sortedDict {\n        result.append(key)\n    }\n    return result",
  "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    var result = [Int]()\n    var dict = [Int:\
    \ Int]()\n    for (index, num) in nums.enumerated() {\n        var sum = 0\n \
    \       var num = num\n        while num > 0 {\n            sum += num % 10\n\
    \            num /= 10\n        }\n        dict[index] = sum\n    }\n    let sortedDict\
    \ = dict.sorted { $0.value < $1.value }\n    for (index, _) in sortedDict {\n\
    \        result.append(nums[index])\n    }\n    return result", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    var nums = nums\n    var sum = [Int]()\n \
    \   var index = [Int]()\n    for i in 0..<nums.count {\n        var temp = nums[i]\n\
    \        var sum_temp = 0\n        while temp > 0 {\n            sum_temp += temp\
    \ % 10\n            temp /= 10\n        }\n        sum.append(sum_temp)\n    \
    \    index.append(i)\n    }\n    for i in 0..<sum.count {\n        for j in 0..<sum.count\
    \ - 1 - i {\n            if sum[j] > sum[j + 1] {\n                sum.swapAt(j,\
    \ j + 1)\n                index.swapAt(j, j + 1)\n            }\n        }\n \
    \   }\n    for i in 0..<sum.count {\n        for j in 0..<sum.count - 1 - i {\n\
    \            if sum[j] == sum[j + 1] && index[j] > index[j + 1] {\n          \
    \      sum.swapAt(j, j + 1)\n                index.swapAt(j, j + 1)\n        \
    \    }\n        }\n    }\n    for i in 0..<sum.count {\n        nums[i] = nums[index[i]]\n\
    \    }\n    return nums", "    return nums.sorted { (a, b) -> Bool in\n      \
    \  let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n\
    \        return aSum < bSum || (aSum == bSum && a < b)\n    }", "    var nums\
    \ = nums\n    var sum = 0\n    var nums_sum = [Int]()\n    for i in 0..<nums.count\
    \ {\n        sum = 0\n        for j in 0..<String(nums[i]).count {\n         \
    \   sum += Int(String(String(nums[i])[j]))!\n        }\n        nums_sum.append(sum)\n\
    \    }\n    for i in 0..<nums.count {\n        for j in 0..<nums.count - 1 {\n\
    \            if nums_sum[j] > nums_sum[j + 1] {\n                nums_sum.swapAt(j,\
    \ j + 1)\n                nums.swapAt(j, j + 1)\n            }\n        }\n  \
    \  }\n    return nums", "    return nums.sorted { (a, b) -> Bool in\n        let\
    \ aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n   \
    \     return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted(by:\
    \ {\n        let sum1 = sum_of_digits(n: $0)\n        let sum2 = sum_of_digits(n:\
    \ $1)\n        if sum1 == sum2 {\n            return nums.firstIndex(of: $0)!\
    \ < nums.firstIndex(of: $1)!\n        }\n        return sum1 < sum2\n    })",
  "    return nums.sorted(by: {\n        let sum1 = sum_digits(n: $0)\n        let\
    \ sum2 = sum_digits(n: $1)\n        if sum1 == sum2 {\n            return nums.firstIndex(of:\
    \ $0)! < nums.firstIndex(of: $1)!\n        }\n        return sum1 < sum2\n   \
    \ })", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n \
    \       let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted(by: {\n        let a = String($0).map { Int(String($0))!\
    \ }.reduce(0, +)\n        let b = String($1).map { Int(String($0))! }.reduce(0,\
    \ +)\n        return a < b\n    })", "    var nums = nums\n    nums.sort { (a,\
    \ b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum =\
    \ b.digits.reduce(0, +)\n        return aSum < bSum\n    }\n    return nums",
  "    var nums = nums\n    nums.sort { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n    return nums", "    var sorted = nums.sorted { (a, b) -> Bool in\n \
    \       let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }\n    return sorted", "    var result:\
    \ [Int] = []\n    var dict: [Int: Int] = [:]\n    for num in nums {\n        var\
    \ sum = 0\n        for char in String(num) {\n            sum += Int(String(char))!\n\
    \        }\n        dict[num] = sum\n    }\n    let sortedDict = dict.sorted {\
    \ $0.value < $1.value }\n    for (key, _) in sortedDict {\n        result.append(key)\n\
    \    }\n    return result", "    return nums.sorted { (a, b) -> Bool in\n    \
    \    let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n\
    \        return aSum == bSum ? a < b : aSum < bSum\n    }", "    var nums = nums\n\
    \    var sum = 0\n    var sumArray = [Int]()\n    for i in 0..<nums.count {\n\
    \        sum = 0\n        for j in 0..<String(nums[i]).count {\n            sum\
    \ += Int(String(nums[i])[j])!\n        }\n        sumArray.append(sum)\n    }\n\
    \    for i in 0..<nums.count {\n        for j in 0..<nums.count {\n          \
    \  if sumArray[i] < sumArray[j] {\n                let temp = sumArray[i]\n  \
    \              sumArray[i] = sumArray[j]\n                sumArray[j] = temp\n\
    \                let temp2 = nums[i]\n                nums[i] = nums[j]\n    \
    \            nums[j] = temp2\n            }\n        }\n    }\n    return nums",
  "    var nums = nums\n    nums.sort { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n    return nums", "    return nums.sorted { (a,\
    \ b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum =\
    \ b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n \
    \   }", "    var nums = nums\n    nums.sort { (a, b) -> Bool in\n        let aSum\
    \ = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n        return\
    \ aSum < bSum || (aSum == bSum && a < b)\n    }\n    return nums", "    var nums\
    \ = nums\n    var sum = [Int]()\n    for i in 0..<nums.count {\n        var num\
    \ = nums[i]\n        var s = 0\n        while num > 0 {\n            s += num\
    \ % 10\n            num /= 10\n        }\n        sum.append(s)\n    }\n    for\
    \ i in 0..<nums.count {\n        for j in 0..<nums.count - 1 {\n            if\
    \ sum[j] > sum[j + 1] {\n                let temp = sum[j]\n                sum[j]\
    \ = sum[j + 1]\n                sum[j + 1] = temp\n                let temp2 =\
    \ nums[j]\n                nums[j] = nums[j + 1]\n                nums[j + 1]\
    \ = temp2\n            }\n        }\n    }\n    return nums", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = String(a).map { Int(String($0))! }.reduce(0,\
    \ +)\n        let bSum = String(b).map { Int(String($0))! }.reduce(0, +)\n   \
    \     return aSum < bSum\n    }", "    var nums = nums\n    for i in 0..<nums.count\
    \ {\n        for j in i+1..<nums.count {\n            if sum_of_digits(nums[i])\
    \ > sum_of_digits(nums[j]) {\n                let temp = nums[i]\n           \
    \     nums[i] = nums[j]\n                nums[j] = temp\n            }\n     \
    \   }\n    }\n    return nums", "    return nums.sorted(by: {\n        let a =\
    \ String($0).map { Int(String($0))! }.reduce(0, +)\n        let b = String($1).map\
    \ { Int(String($0))! }.reduce(0, +)\n        return a < b\n    })", "    return\
    \ nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n\
    \        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n    }",
  "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    var nums = nums\n    for i in 0..<nums.count\
    \ {\n        for j in 0..<nums.count - 1 {\n            if sum_of_digits(nums[j])\
    \ > sum_of_digits(nums[j + 1]) {\n                nums.swapAt(j, j + 1)\n    \
    \        }\n        }\n    }\n    return nums", "    return nums.sorted { (a,\
    \ b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum =\
    \ b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n \
    \       let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum || (aSum == bSum && a < b)\n    }", "    return\
    \ nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n\
    \        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum || (aSum\
    \ == bSum && a < b)\n    }", "    return nums.sorted { (a, b) -> Bool in\n   \
    \     let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum || (aSum == bSum && a <\
    \ b)\n    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum =\
    \ a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n        return\
    \ aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted { (a, b)\
    \ -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    var nums =\
    \ nums\n    nums.sort { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }\n    return nums", "    return nums.sorted(by: {\n        let a = String($0).map\
    \ { Int(String($0))! }.reduce(0, +)\n        let b = String($1).map { Int(String($0))!\
    \ }.reduce(0, +)\n        return a < b\n    })", "    return nums.sorted { (a,\
    \ b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum =\
    \ b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    var result = [Int]()\n    var nums_with_points\
    \ = [(Int, Int)]()\n    for num in nums {\n        let points = get_points(num:\
    \ num)\n        nums_with_points.append((num, points))\n    }\n    nums_with_points.sort(by:\
    \ { $0.1 < $1.1 })\n    for num_with_points in nums_with_points {\n        result.append(num_with_points.0)\n\
    \    }\n    return result", "    var nums = nums\n    for i in 0..<nums.count\
    \ {\n        for j in i+1..<nums.count {\n            if sum_of_digits(nums[i])\
    \ > sum_of_digits(nums[j]) {\n                nums.swapAt(i, j)\n            }\n\
    \        }\n    }\n    return nums", "    return nums.sorted { (a, b) -> Bool\
    \ in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    var nums\
    \ = nums\n    nums.sort { (a, b) -> Bool in\n        let aSum = String(a).map\
    \ { Int(String($0))! }.reduce(0, +)\n        let bSum = String(b).map { Int(String($0))!\
    \ }.reduce(0, +)\n        return aSum < bSum\n    }\n    return nums", "    var\
    \ nums = nums\n    for i in 0..<nums.count {\n        for j in i+1..<nums.count\
    \ {\n            if sum_of_digits(nums[i]) > sum_of_digits(nums[j]) {\n      \
    \          let temp = nums[i]\n                nums[i] = nums[j]\n           \
    \     nums[j] = temp\n            }\n        }\n    }\n    return nums", "   \
    \ return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    var nums = nums\n    for i in 0..<nums.count\
    \ {\n        for j in i+1..<nums.count {\n            if sum_of_digits(nums[i])\
    \ > sum_of_digits(nums[j]) {\n                let temp = nums[i]\n           \
    \     nums[i] = nums[j]\n                nums[j] = temp\n            }\n     \
    \   }\n    }\n    return nums", "    return nums.sorted { (a, b) -> Bool in\n\
    \        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    var nums\
    \ = nums\n    nums.sort { (num1, num2) -> Bool in\n        let sum1 = String(num1).reduce(0)\
    \ { $0 + Int(String($1))! }\n        let sum2 = String(num2).reduce(0) { $0 +\
    \ Int(String($1))! }\n        return sum1 < sum2\n    }\n    return nums", " \
    \   return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum ||\
    \ (aSum == bSum && a < b)\n    }", "    return nums.sorted { (a, b) -> Bool in\n\
    \        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (lhs, rhs) -> Bool in\n        let lhsSum = lhs.digits.reduce(0, +)\n    \
    \    let rhsSum = rhs.digits.reduce(0, +)\n        return lhsSum < rhsSum\n  \
    \  }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n \
    \       let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    var nums\
    \ = nums\n    nums.sort { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }\n    return nums", "    return nums.sorted { (a,\
    \ b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum =\
    \ b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    var result = [Int]()\n    var dict = [Int: [Int]]()\n    for (index,\
    \ num) in nums.enumerated() {\n        let sum = sum_of_digits(num: num)\n   \
    \     if dict[sum] == nil {\n            dict[sum] = [Int]()\n        }\n    \
    \    dict[sum]?.append(index)\n    }\n    let sortedKeys = dict.keys.sorted()\n\
    \    for key in sortedKeys {\n        let indexes = dict[key]!\n        for index\
    \ in indexes {\n            result.append(nums[index])\n        }\n    }\n   \
    \ return result", "    var nums = nums\n    nums.sort { (a, b) -> Bool in\n  \
    \      let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }\n    return nums",
  "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n \
    \       let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    var nums = nums\n    var sum =\
    \ 0\n    var sum_array = [Int]()\n    for i in 0..<nums.count {\n        sum =\
    \ 0\n        for j in 0..<String(nums[i]).count {\n            sum += Int(String(String(nums[i])[j]))!\n\
    \        }\n        sum_array.append(sum)\n    }\n    for i in 0..<nums.count\
    \ {\n        for j in 0..<nums.count - 1 {\n            if sum_array[j] > sum_array[j\
    \ + 1] {\n                let temp = sum_array[j]\n                sum_array[j]\
    \ = sum_array[j + 1]\n                sum_array[j + 1] = temp\n              \
    \  let temp2 = nums[j]\n                nums[j] = nums[j + 1]\n              \
    \  nums[j + 1] = temp2\n            }\n        }\n    }\n    return nums", " \
    \   return nums.sorted { (a, b) -> Bool in\n        let aDigits = a.digits\n \
    \       let bDigits = b.digits\n        let aSum = aDigits.reduce(0, +)\n    \
    \    let bSum = bDigits.reduce(0, +)\n        return aSum < bSum\n    }", "  \
    \  return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n \
    \       return sum_of_digits(a) < sum_of_digits(b)\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = String(a).reduce(0) { $0 + Int(String($1))!\
    \ }\n        let bSum = String(b).reduce(0) { $0 + Int(String($1))! }\n      \
    \  return aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n \
    \       let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum || (aSum == bSum && a < b)\n    }", "    return\
    \ nums.sorted(by: {\n        let a = $0.digits().reduce(0, +)\n        let b =\
    \ $1.digits().reduce(0, +)\n        return a == b ? $0 < $1 : a < b\n    })",
  "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted { (lhs, rhs) -> Bool in\n\
    \        let lhsSum = lhs.digits.reduce(0, +)\n        let rhsSum = rhs.digits.reduce(0,\
    \ +)\n        return lhsSum < rhsSum\n    }", "    var nums = nums\n    nums.sort\
    \ { (n1, n2) -> Bool in\n        let sum1 = sum_of_digits(n1)\n        let sum2\
    \ = sum_of_digits(n2)\n        if sum1 == sum2 {\n            return n1 < n2\n\
    \        }\n        return sum1 < sum2\n    }\n    return nums", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    var nums = nums\n    for i in 0..<nums.count\
    \ {\n        for j in 0..<nums.count - 1 {\n            if sum_of_digits(nums[j])\
    \ > sum_of_digits(nums[j + 1]) {\n                let temp = nums[j]\n       \
    \         nums[j] = nums[j + 1]\n                nums[j + 1] = temp\n        \
    \    }\n        }\n    }\n    return nums", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    var nums\
    \ = nums\n    nums.sort(by: {\n        let sum1 = String($0).map({ Int(String($0))!\
    \ }).reduce(0, +)\n        let sum2 = String($1).map({ Int(String($0))! }).reduce(0,\
    \ +)\n        return sum1 < sum2\n    })\n    return nums", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum || (aSum == bSum && a <\
    \ b)\n    }", "    var nums = nums\n    nums.sort { (a, b) -> Bool in\n      \
    \  let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n\
    \        return aSum < bSum\n    }\n    return nums", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    var sorted = nums.sorted { (a, b) -> Bool in\n        let aSum =\
    \ a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n        return\
    \ aSum < bSum\n    }\n    return sorted", "    var result = [Int]()\n    var nums_dict\
    \ = [Int: Int]()\n    for num in nums {\n        var sum = 0\n        var num_copy\
    \ = num\n        while num_copy > 0 {\n            sum += num_copy % 10\n    \
    \        num_copy /= 10\n        }\n        nums_dict[num] = sum\n    }\n    let\
    \ sorted_nums_dict = nums_dict.sorted { $0.value < $1.value }\n    for (num, _)\
    \ in sorted_nums_dict {\n        result.append(num)\n    }\n    return result",
  "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    var result = [Int]()\n    var nums = nums\n    var index = 0\n  \
    \  while nums.count > 0 {\n        var min = nums[0]\n        var minIndex = 0\n\
    \        for i in 0..<nums.count {\n            if sum_of_digits(nums[i]) < sum_of_digits(min)\
    \ {\n                min = nums[i]\n                minIndex = i\n           \
    \ }\n        }\n        result.append(min)\n        nums.remove(at: minIndex)\n\
    \    }\n    return result", "    var nums = nums\n    for i in 0..<nums.count\
    \ {\n        for j in 0..<nums.count {\n            if sum_of_digits(nums[i])\
    \ < sum_of_digits(nums[j]) {\n                let temp = nums[i]\n           \
    \     nums[i] = nums[j]\n                nums[j] = temp\n            }\n     \
    \   }\n    }\n    return nums", "    return nums.sorted { (a, b) -> Bool in\n\
    \        let aSum = sum_of_digits(num: a)\n        let bSum = sum_of_digits(num:\
    \ b)\n        return aSum < bSum\n    }", "    var nums = nums\n    nums.sort\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }\n    return nums"]
stop_tokens:
- "\n}"
