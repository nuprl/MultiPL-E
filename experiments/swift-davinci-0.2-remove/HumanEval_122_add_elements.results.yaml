language: swift
name: HumanEval_122_add_elements
results:
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            result\
    \ += arr[i]\n        } else if arr[i] < 100 {\n            result += arr[i] %\
    \ 10 + arr[i] / 10\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpyrfqxrva/tmpyrfqxrva.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af64f9fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af64f6f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af64f6f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af64f6f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyrfqxrva                        0x00005634335176fb <unavailable> + 5883

    5    libc.so.6                          0x00002af64fbe7460 __libc_start_main +
    245

    6    tmpyrfqxrva                        0x0000563433517149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    var i = 0\n    while i < k && i < arr.count {\n        if arr[i]\
    \ < 100 {\n            sum += arr[i]\n        }\n        i += 1\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    var count = 0\n    for i in 0..<arr.count {\n        if arr[i]\
    \ < 10 {\n            sum += arr[i]\n            count += 1\n        } else if\
    \ arr[i] < 100 {\n            sum += arr[i]\n            count += 1\n        }\n\
    \        if count == k {\n            break\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmprpvdavcf/tmprpvdavcf.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2749f59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2749c50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2749c50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2749c4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprpvdavcf                        0x000055b7b5a6065d <unavailable> + 5725

    5    libc.so.6                          0x00002b274a145460 __libc_start_main +
    245

    6    tmprpvdavcf                        0x000055b7b5a601a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    var i = 0\n    while i < k {\n        if arr[i] < 10 {\n      \
    \      sum += arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i]\
    \ % 10 + arr[i] / 10\n        } else {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10 % 10 + arr[i] / 100\n        }\n        i += 1\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp_nifu54r/tmp_nifu54r.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b724cfd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b724ccccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b724cccc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b724cccb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_nifu54r                        0x00005616685e450d <unavailable> + 5389

    5    libc.so.6                          0x00002b724d1c1460 __libc_start_main +
    245

    6    tmp_nifu54r                        0x00005616685e4059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            result\
    \ += arr[i]\n        } else if arr[i] < 100 {\n            result += arr[i] %\
    \ 10 + arr[i] / 10\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpyrfqxrva/tmpyrfqxrva.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af64f9fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af64f6f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af64f6f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af64f6f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyrfqxrva                        0x00005634335176fb <unavailable> + 5883

    5    libc.so.6                          0x00002af64fbe7460 __libc_start_main +
    245

    6    tmpyrfqxrva                        0x0000563433517149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            result\
    \ += arr[i]\n        } else if arr[i] < 100 {\n            result += arr[i] %\
    \ 10 + arr[i] / 10\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpyrfqxrva/tmpyrfqxrva.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af64f9fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af64f6f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af64f6f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af64f6f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyrfqxrva                        0x00005634335176fb <unavailable> + 5883

    5    libc.so.6                          0x00002af64fbe7460 __libc_start_main +
    245

    6    tmpyrfqxrva                        0x0000563433517149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] > 9 {\n            sum += arr[i]\
    \ / 10 + arr[i] % 10\n        } else {\n            sum += arr[i]\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpwwwjdas7/tmpwwwjdas7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af76bd24c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af76ba1bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af76ba1b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af76ba1a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwwwjdas7                        0x000055d4578e15fd <unavailable> + 5629

    5    libc.so.6                          0x00002af76bf10460 __libc_start_main +
    245

    6    tmpwwwjdas7                        0x000055d4578e1149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] / 10 + arr[i]\
    \ % 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpggpl4a9f/tmpggpl4a9f.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7180e59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7180b50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7180b50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7180b4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpggpl4a9f                        0x000055fed75df6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b7181045460 __libc_start_main +
    245

    6    tmpggpl4a9f                        0x000055fed75df149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] > 9 {\n            sum += arr[i]\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp4kjj7j8y/tmp4kjj7j8y.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79c9cc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79c99beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79c99be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79c99bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4kjj7j8y                        0x0000564db5f6451b <unavailable> + 5403

    5    libc.so.6                          0x00002b79c9eb3460 __libc_start_main +
    245

    6    tmp4kjj7j8y                        0x0000564db5f64149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            result\
    \ += arr[i]\n        } else if arr[i] < 100 {\n            result += arr[i] %\
    \ 10 + arr[i] / 10\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpyrfqxrva/tmpyrfqxrva.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af64f9fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af64f6f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af64f6f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af64f6f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyrfqxrva                        0x00005634335176fb <unavailable> + 5883

    5    libc.so.6                          0x00002af64fbe7460 __libc_start_main +
    245

    6    tmpyrfqxrva                        0x0000563433517149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] / 10 + arr[i]\
    \ % 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpggpl4a9f/tmpggpl4a9f.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7180e59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7180b50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7180b50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7180b4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpggpl4a9f                        0x000055fed75df6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b7181045460 __libc_start_main +
    245

    6    tmpggpl4a9f                        0x000055fed75df149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for i in 0..<k {\n        if arr[i] > 9 {\n            result\
    \ += arr[i] / 10 + arr[i] % 10\n        } else {\n            result += arr[i]\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpw93ck_ao/tmpw93ck_ao.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b616d730c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b616d427b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b616d427988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b616d4267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw93ck_ao                        0x0000557ec704a5fd <unavailable> + 5629

    5    libc.so.6                          0x00002b616d91c460 __libc_start_main +
    245

    6    tmpw93ck_ao                        0x0000557ec704a149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            result\
    \ += arr[i]\n        } else if arr[i] < 100 {\n            result += arr[i] %\
    \ 10 + arr[i] / 10\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpyrfqxrva/tmpyrfqxrva.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af64f9fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af64f6f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af64f6f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af64f6f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyrfqxrva                        0x00005634335176fb <unavailable> + 5883

    5    libc.so.6                          0x00002af64fbe7460 __libc_start_main +
    245

    6    tmpyrfqxrva                        0x0000563433517149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for i in 0..<k {\n        if arr[i] > 9 {\n            result\
    \ += arr[i] % 10 + arr[i] / 10\n        } else {\n            result += arr[i]\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp1ck0ysaj/tmp1ck0ysaj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ae1746c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ae143db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ae143d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ae143c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ck0ysaj                        0x0000557ccfa3c5fd <unavailable> + 5629

    5    libc.so.6                          0x00002b5ae1932460 __libc_start_main +
    245

    6    tmp1ck0ysaj                        0x0000557ccfa3c149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ sorted = arr.sorted()\n    var sum = 0\n    var count = 0\n    for i in 0..<sorted.count\
    \ {\n        if sorted[i] < 100 {\n            sum += sorted[i]\n            count\
    \ += 1\n        }\n        if count == k {\n            break\n        }\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp817jtzqd/tmp817jtzqd.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a13018c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a12d0fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a12d0f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a12d0e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp817jtzqd                        0x000055e713f2c6fd <unavailable> + 5885

    5    libc.so.6                          0x00002b1a13204460 __libc_start_main +
    245

    6    tmp817jtzqd                        0x000055e713f2c249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] / 10 + arr[i]\
    \ % 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpggpl4a9f/tmpggpl4a9f.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7180e59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7180b50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7180b50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7180b4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpggpl4a9f                        0x000055fed75df6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b7181045460 __libc_start_main +
    245

    6    tmpggpl4a9f                        0x000055fed75df149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            result\
    \ += arr[i]\n        } else if arr[i] < 100 {\n            result += arr[i] %\
    \ 10 + arr[i] / 10\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpyrfqxrva/tmpyrfqxrva.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af64f9fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af64f6f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af64f6f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af64f6f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyrfqxrva                        0x00005634335176fb <unavailable> + 5883

    5    libc.so.6                          0x00002af64fbe7460 __libc_start_main +
    245

    6    tmpyrfqxrva                        0x0000563433517149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            result\
    \ += arr[i]\n        } else if arr[i] < 100 {\n            result += arr[i] %\
    \ 10 + arr[i] / 10\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpyrfqxrva/tmpyrfqxrva.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af64f9fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af64f6f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af64f6f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af64f6f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyrfqxrva                        0x00005634335176fb <unavailable> + 5883

    5    libc.so.6                          0x00002af64fbe7460 __libc_start_main +
    245

    6    tmpyrfqxrva                        0x0000563433517149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        let num = arr[i]\n        if num < 10\
    \ {\n            sum += num\n        } else if num < 100 {\n            sum +=\
    \ num / 10 + num % 10\n        } else {\n            sum += num / 100 + (num %\
    \ 100) / 10 + num % 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpra3lua4_/tmpra3lua4_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b579c756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b579c44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b579c44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b579c44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpra3lua4_                        0x00005585fd8f15fd <unavailable> + 5629

    5    libc.so.6                          0x00002b579c942460 __libc_start_main +
    245

    6    tmpra3lua4_                        0x00005585fd8f1149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] / 10 + arr[i]\
    \ % 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpggpl4a9f/tmpggpl4a9f.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7180e59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7180b50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7180b50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7180b4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpggpl4a9f                        0x000055fed75df6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b7181045460 __libc_start_main +
    245

    6    tmpggpl4a9f                        0x000055fed75df149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] / 10 + arr[i]\
    \ % 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpggpl4a9f/tmpggpl4a9f.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7180e59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7180b50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7180b50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7180b4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpggpl4a9f                        0x000055fed75df6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b7181045460 __libc_start_main +
    245

    6    tmpggpl4a9f                        0x000055fed75df149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            result\
    \ += arr[i]\n        } else if arr[i] < 100 {\n            result += arr[i] %\
    \ 10 + arr[i] / 10\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpyrfqxrva/tmpyrfqxrva.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af64f9fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af64f6f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af64f6f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af64f6f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyrfqxrva                        0x00005634335176fb <unavailable> + 5883

    5    libc.so.6                          0x00002af64fbe7460 __libc_start_main +
    245

    6    tmpyrfqxrva                        0x0000563433517149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            result\
    \ += arr[i]\n        } else if arr[i] < 100 {\n            result += arr[i] %\
    \ 10 + arr[i] / 10\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpyrfqxrva/tmpyrfqxrva.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af64f9fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af64f6f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af64f6f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af64f6f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyrfqxrva                        0x00005634335176fb <unavailable> + 5883

    5    libc.so.6                          0x00002af64fbe7460 __libc_start_main +
    245

    6    tmpyrfqxrva                        0x0000563433517149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        let num = arr[i]\n        if num < 10\
    \ {\n            sum += num\n        } else if num < 100 {\n            sum +=\
    \ num / 10 + num % 10\n        } else {\n            sum += 1\n        }\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpurh12fy1/tmpurh12fy1.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9d2453c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9d214ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9d214a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9d21497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurh12fy1                        0x000055a9d6f795fd <unavailable> + 5629

    5    libc.so.6                          0x00002ad9d263f460 __libc_start_main +
    245

    6    tmpurh12fy1                        0x000055a9d6f79149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            result\
    \ += arr[i]\n        } else if arr[i] < 100 {\n            result += arr[i] %\
    \ 10 + arr[i] / 10\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpyrfqxrva/tmpyrfqxrva.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af64f9fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af64f6f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af64f6f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af64f6f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyrfqxrva                        0x00005634335176fb <unavailable> + 5883

    5    libc.so.6                          0x00002af64fbe7460 __libc_start_main +
    245

    6    tmpyrfqxrva                        0x0000563433517149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            result\
    \ += arr[i]\n        } else if arr[i] < 100 {\n            result += arr[i] %\
    \ 10 + arr[i] / 10\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpyrfqxrva/tmpyrfqxrva.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af64f9fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af64f6f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af64f6f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af64f6f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyrfqxrva                        0x00005634335176fb <unavailable> + 5883

    5    libc.so.6                          0x00002af64fbe7460 __libc_start_main +
    245

    6    tmpyrfqxrva                        0x0000563433517149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 10 {\n            sum +=\
    \ arr[i]\n        } else if arr[i] < 100 {\n            sum += arr[i] % 10 + arr[i]\
    \ / 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkxoclb5h/tmpkxoclb5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17229d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17226ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17226cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17226cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxoclb5h                        0x0000561f9f16b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1722bc1460 __libc_start_main +
    245

    6    tmpkxoclb5h                        0x0000561f9f16b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979499
