language: swift
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 0
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let absolute_deviations = numbers.map { abs($0 - mean) }\n    return absolute_deviations.reduce(0,\
    \ combine: +) / Double(absolute_deviations.count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5j6ywjdr.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    var sum_of_absolute_differences:\
    \ Double = 0.0\n    for number in numbers {\n        sum_of_absolute_differences\
    \ += abs(number - mean)\n    }\n    return sum_of_absolute_differences / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp1s43cnn_.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 0
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    var sum_of_absolute_differences:\
    \ Double = 0\n    for number in numbers {\n        sum_of_absolute_differences\
    \ += abs(number - mean)\n    }\n    return sum_of_absolute_differences / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpzeprf8y2.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 0
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpge5a67wp.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpge5a67wp.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_differences)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 0
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpge5a67wp.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpge5a67wp.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_differences)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    var sum_of_absolute_differences\
    \ = 0.0\n    for number in numbers {\n        sum_of_absolute_differences += abs(number\
    \ - mean)\n    }\n    return sum_of_absolute_differences / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpv5mu5pqj.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 0
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 0
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    var sum\
    \ = 0.0\n    for number in numbers {\n        sum += abs(number - mean)\n    }\n\
    \    return sum / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp714vqfvg.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    return numbers.map { abs($0 - mean) }.reduce(0, combine: +) / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2l28vwn1.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n/tmp/tmp2l28vwn1.swift:9:49: error: extraneous argument label 'combine:' in\
    \ call\n    return numbers.map { abs($0 - mean) }.reduce(0, combine: +) / Double(numbers.count)\n\
    \                                                ^   ~~~~~~~~~\n             \
    \                                       \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return average(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpa1b40t9b.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmpa1b40t9b.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpge5a67wp.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpge5a67wp.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_differences)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 0
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_arithmetic(numbers: numbers)\n  \
    \  let deviations = numbers.map { abs($0 - mean) }\n    return mean_arithmetic(numbers:\
    \ deviations)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpcztard2l.swift:8:16: error: cannot find 'mean_arithmetic' in scope\n\
    \    let mean = mean_arithmetic(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpcztard2l.swift:10:12: error: cannot find 'mean_arithmetic' in scope\n\
    \    return mean_arithmetic(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 0
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let abs_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(abs_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpvhs34scj.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpvhs34scj.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(abs_differences)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_list(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_list(deviations)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp0hakcgxa.swift:8:16: error: cannot find 'mean_of_list' in scope\n\
    \    let mean = mean_of_list(numbers)\n               ^~~~~~~~~~~~\n/tmp/tmp0hakcgxa.swift:10:12:\
    \ error: cannot find 'mean_of_list' in scope\n    return mean_of_list(deviations)\n\
    \           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let abs_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(abs_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpvhs34scj.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpvhs34scj.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(abs_differences)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.mean()\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return absolute_differences.mean()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp228e5gdv.swift:8:24: error: value of type '[Double]' has no member\
    \ 'mean'\n    let mean = numbers.mean()\n               ~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 0
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_list(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_list(deviations)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp0hakcgxa.swift:8:16: error: cannot find 'mean_of_list' in scope\n\
    \    let mean = mean_of_list(numbers)\n               ^~~~~~~~~~~~\n/tmp/tmp0hakcgxa.swift:10:12:\
    \ error: cannot find 'mean_of_list' in scope\n    return mean_of_list(deviations)\n\
    \           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let diffs = numbers.map\
    \ { abs($0 - mean) }\n    return average(diffs)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmplcy_raie.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmplcy_raie.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(diffs)\n         \
    \  ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let abs_diff\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(abs_diff)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpob6h_oll.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpob6h_oll.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(abs_diff)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    var sum = 0.0\n\
    \    for number in numbers {\n        sum += abs(number - mean)\n    }\n    return\
    \ sum / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpctidpu5v.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_arithmetic(numbers: numbers)\n  \
    \  let deviations = numbers.map { abs($0 - mean) }\n    return mean_arithmetic(numbers:\
    \ deviations)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpcztard2l.swift:8:16: error: cannot find 'mean_arithmetic' in scope\n\
    \    let mean = mean_arithmetic(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpcztard2l.swift:10:12: error: cannot find 'mean_arithmetic' in scope\n\
    \    return mean_arithmetic(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpge5a67wp.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpge5a67wp.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_differences)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpge5a67wp.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpge5a67wp.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_differences)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ combine: +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptx8o50pf.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_list(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_list(deviations)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp0hakcgxa.swift:8:16: error: cannot find 'mean_of_list' in scope\n\
    \    let mean = mean_of_list(numbers)\n               ^~~~~~~~~~~~\n/tmp/tmp0hakcgxa.swift:10:12:\
    \ error: cannot find 'mean_of_list' in scope\n    return mean_of_list(deviations)\n\
    \           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    var sum\
    \ = 0.0\n    for number in numbers {\n        sum += abs(number - mean)\n    }\n\
    \    return sum / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp714vqfvg.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    var sum = 0.0\n\
    \    for number in numbers {\n        sum += abs(number - mean)\n    }\n    return\
    \ sum / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpctidpu5v.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi62wlcz3.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpi62wlcz3.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpge5a67wp.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpge5a67wp.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_differences)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_list(numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_list(absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpicubxrx7.swift:8:16: error: cannot find 'mean_of_list' in scope\n\
    \    let mean = mean_of_list(numbers)\n               ^~~~~~~~~~~~\n/tmp/tmpicubxrx7.swift:10:12:\
    \ error: cannot find 'mean_of_list' in scope\n    return mean_of_list(absolute_differences)\n\
    \           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = average(numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k83y5bl.swift:8:16: error: cannot find 'average' in scope\n  \
    \  let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp2k83y5bl.swift:10:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9di9rh2w.swift:8:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp9di9rh2w.swift:10:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009050
