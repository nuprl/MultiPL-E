name: HumanEval_90_next_smallest
language: swift
prompt: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n/// Return None if there is\
  \ no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\n\
  assert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as\
  \ [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
  \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
  \ [-35, 34, 12, -45]) == -35)"
completions: ["    var min = Int.max\n    var secondMin = Int.max\n    for i in lst\
    \ {\n        if i < min {\n            secondMin = min\n            min = i\n\
    \        } else if i < secondMin {\n            secondMin = i\n        }\n   \
    \ }\n    return secondMin == Int.max ? nil : secondMin", "    var min = lst[0]\n\
    \    var next_min = lst[0]\n    for i in 1..<lst.count {\n        if lst[i] <\
    \ min {\n            next_min = min\n            min = lst[i]\n        } else\
    \ if lst[i] < next_min {\n            next_min = lst[i]\n        }\n    }\n  \
    \  return next_min", "    guard lst.count > 1 else { return nil }\n    var min\
    \ = lst[0]\n    var nextMin = lst[1]\n    for i in lst {\n        if i < min {\n\
    \            nextMin = min\n            min = i\n        } else if i < nextMin\
    \ {\n            nextMin = i\n        }\n    }\n    return nextMin", "    var\
    \ sorted = lst.sorted()\n    if sorted.count < 2 {\n        return nil\n    }\n\
    \    return sorted[1]", "    var min = Int.max\n    var secondMin = Int.max\n\
    \    for i in lst {\n        if i < min {\n            secondMin = min\n     \
    \       min = i\n        } else if i < secondMin {\n            secondMin = i\n\
    \        }\n    }\n    return secondMin == Int.max ? nil : secondMin", "    var\
    \ smallest = Int.max\n    var secondSmallest = Int.max\n    for i in lst {\n \
    \       if i < smallest {\n            secondSmallest = smallest\n           \
    \ smallest = i\n        } else if i < secondSmallest {\n            secondSmallest\
    \ = i\n        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest",
  "    var lst = lst\n    lst.sort()\n    if lst.count < 2 {\n        return nil\n\
    \    }\n    return lst[1]", "    var min = lst[0]\n    var nextMin = Int.max\n\
    \    for i in lst {\n        if i < min {\n            nextMin = min\n       \
    \     min = i\n        } else if i < nextMin {\n            nextMin = i\n    \
    \    }\n    }\n    return nextMin == Int.max ? nil : nextMin", "    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin", "    var min = Int.max\n    var secondMin = Int.max\n  \
    \  for i in lst {\n        if i < min {\n            secondMin = min\n       \
    \     min = i\n        } else if i < secondMin {\n            secondMin = i\n\
    \        }\n    }\n    return secondMin == Int.max ? nil : secondMin", "    var\
    \ smallest = Int.max\n    var secondSmallest = Int.max\n    for i in lst {\n \
    \       if i < smallest {\n            secondSmallest = smallest\n           \
    \ smallest = i\n        } else if i < secondSmallest {\n            secondSmallest\
    \ = i\n        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest",
  "    var min = lst[0]\n    var min2 = Int.max\n    for i in lst {\n        if i\
    \ < min {\n            min2 = min\n            min = i\n        } else if i <\
    \ min2 {\n            min2 = i\n        }\n    }\n    return min2 == Int.max ?\
    \ nil : min2", "    var min = lst[0]\n    var next = Int.max\n    for i in lst\
    \ {\n        if i < min {\n            next = min\n            min = i\n     \
    \   } else if i < next {\n            next = i\n        }\n    }\n    return next\
    \ == Int.max ? nil : next", "    guard lst.count > 1 else { return nil }\n   \
    \ var min = lst[0]\n    var nextMin = lst[1]\n    for i in 1..<lst.count {\n \
    \       if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    guard lst.count > 1 else { return nil }\n  \
    \  var min = lst[0]\n    var nextMin = lst[1]\n    for i in 2..<lst.count {\n\
    \        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    guard lst.count > 1 else { return nil }\n  \
    \  var smallest = lst[0]\n    var nextSmallest = Int.max\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < smallest {\n            nextSmallest = smallest\n   \
    \         smallest = lst[i]\n        } else if lst[i] < nextSmallest {\n     \
    \       nextSmallest = lst[i]\n        }\n    }\n    return nextSmallest == Int.max\
    \ ? nil : nextSmallest", "    var min = Int.max\n    var second = Int.max\n  \
    \  for i in lst {\n        if i < min {\n            second = min\n          \
    \  min = i\n        } else if i < second {\n            second = i\n        }\n\
    \    }\n    return second == Int.max ? nil : second", "    guard lst.count > 1\
    \ else { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for\
    \ i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin = min\n\
    \            min = lst[i]\n        } else if lst[i] < nextMin {\n            nextMin\
    \ = lst[i]\n        }\n    }\n    return nextMin", "    if lst.count < 2 {\n \
    \       return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest =\
    \ lst[1]\n    if smallest > secondSmallest {\n        (smallest, secondSmallest)\
    \ = (secondSmallest, smallest)\n    }\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = lst[i]\n        } else if lst[i] < secondSmallest {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest", "    var smallest =\
    \ Int.max\n    var secondSmallest = Int.max\n    for i in lst {\n        if i\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ i\n        } else if i < secondSmallest {\n            secondSmallest = i\n\
    \        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest",
  "    guard lst.count > 1 else { return nil }\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[1]\n    if smallest > secondSmallest {\n        swap(&smallest,\
    \ &secondSmallest)\n    }\n    for i in 2..<lst.count {\n        if lst[i] < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      } else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n\
    \        }\n    }\n    return secondSmallest", "    var min = Int.max\n    var\
    \ nextMin = Int.max\n    for i in lst {\n        if i < min {\n            nextMin\
    \ = min\n            min = i\n        } else if i < nextMin {\n            nextMin\
    \ = i\n        }\n    }\n    return nextMin == Int.max ? nil : nextMin", "   \
    \ guard lst.count > 1 else { return nil }\n    var min = lst[0]\n    var secondMin\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < min {\n        \
    \    secondMin = min\n            min = lst[i]\n        } else if lst[i] < secondMin\
    \ {\n            secondMin = lst[i]\n        }\n    }\n    return secondMin",
  "    var min = Int.max\n    var secondMin = Int.max\n    for i in lst {\n      \
    \  if i < min {\n            secondMin = min\n            min = i\n        } else\
    \ if i < secondMin {\n            secondMin = i\n        }\n    }\n    return\
    \ secondMin == Int.max ? nil : secondMin", "    var min = Int.max\n    var nextMin\
    \ = Int.max\n    for i in lst {\n        if i < min {\n            nextMin = min\n\
    \            min = i\n        } else if i < nextMin {\n            nextMin = i\n\
    \        }\n    }\n    return nextMin == Int.max ? nil : nextMin", "    var lst\
    \ = lst\n    lst.sort()\n    if lst.count < 2 {\n        return nil\n    }\n \
    \   return lst[1]", "    var min = Int.max\n    var secondMin = Int.max\n    for\
    \ item in lst {\n        if item < min {\n            secondMin = min\n      \
    \      min = item\n        } else if item < secondMin {\n            secondMin\
    \ = item\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin",
  "    var sorted = lst.sorted()\n    if sorted.count > 1 {\n        return sorted[1]\n\
    \    }\n    return nil", "    var min = Int.max\n    var secondMin = Int.max\n\
    \    for i in lst {\n        if i < min {\n            secondMin = min\n     \
    \       min = i\n        } else if i < secondMin {\n            secondMin = i\n\
    \        }\n    }\n    return secondMin == Int.max ? nil : secondMin", "    guard\
    \ lst.count > 1 else { return nil }\n    var min = lst[0]\n    var next = lst[1]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < min {\n            next = min\n\
    \            min = lst[i]\n        } else if lst[i] < next {\n            next\
    \ = lst[i]\n        }\n    }\n    return next", "    var smallest = Int.max\n\
    \    var secondSmallest = Int.max\n    for i in lst {\n        if i < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = i\n       \
    \ } else if i < secondSmallest {\n            secondSmallest = i\n        }\n\
    \    }\n    return secondSmallest == Int.max ? nil : secondSmallest", "    var\
    \ smallest = Int.max\n    var secondSmallest = Int.max\n    for i in lst {\n \
    \       if i < smallest {\n            secondSmallest = smallest\n           \
    \ smallest = i\n        } else if i < secondSmallest {\n            secondSmallest\
    \ = i\n        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest",
  "    var smallest = Int.max\n    var secondSmallest = Int.max\n    for i in lst\
    \ {\n        if i < smallest {\n            secondSmallest = smallest\n      \
    \      smallest = i\n        } else if i < secondSmallest {\n            secondSmallest\
    \ = i\n        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest",
  "    var min = lst[0]\n    var min2 = Int.max\n    for i in lst {\n        if i\
    \ < min {\n            min2 = min\n            min = i\n        } else if i <\
    \ min2 {\n            min2 = i\n        }\n    }\n    return min2 == Int.max ?\
    \ nil : min2", "    var smallest = Int.max\n    var secondSmallest = Int.max\n\
    \    for i in lst {\n        if i < smallest {\n            secondSmallest = smallest\n\
    \            smallest = i\n        } else if i < secondSmallest {\n          \
    \  secondSmallest = i\n        }\n    }\n    return secondSmallest == Int.max\
    \ ? nil : secondSmallest", "    var min = lst[0]\n    var nextMin = lst[0]\n \
    \   for i in lst {\n        if i < min {\n            nextMin = min\n        \
    \    min = i\n        } else if i < nextMin {\n            nextMin = i\n     \
    \   }\n    }\n    return nextMin", "    var min = lst[0]\n    var nextMin = lst[0]\n\
    \    for i in lst {\n        if i < min {\n            nextMin = min\n       \
    \     min = i\n        } else if i < nextMin {\n            nextMin = i\n    \
    \    }\n    }\n    return nextMin", "    var smallest = Int.max\n    var secondSmallest\
    \ = Int.max\n    for i in lst {\n        if i < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = i\n        } else if i < secondSmallest {\n\
    \            secondSmallest = i\n        }\n    }\n    return secondSmallest ==\
    \ Int.max ? nil : secondSmallest", "    guard lst.count > 1 else { return nil\
    \ }\n    var min = lst[0]\n    var nextMin = Int.max\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin == Int.max ? nil : nextMin", "    var min = Int.max\n\
    \    var secondMin = Int.max\n    for i in lst {\n        if i < min {\n     \
    \       secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin", "    var min = Int.max\n    var secondMin = Int.max\n  \
    \  for i in lst {\n        if i < min {\n            secondMin = min\n       \
    \     min = i\n        } else if i < secondMin {\n            secondMin = i\n\
    \        }\n    }\n    return secondMin == Int.max ? nil : secondMin", "    var\
    \ min = lst[0]\n    var nextMin = Int.max\n    for i in lst {\n        if i <\
    \ min {\n            nextMin = min\n            min = i\n        } else if i <\
    \ nextMin {\n            nextMin = i\n        }\n    }\n    return nextMin ==\
    \ Int.max ? nil : nextMin", "    var min = Int.max\n    var secondMin = Int.max\n\
    \    for i in lst {\n        if i < min {\n            secondMin = min\n     \
    \       min = i\n        } else if i < secondMin {\n            secondMin = i\n\
    \        }\n    }\n    return secondMin == Int.max ? nil : secondMin", "    var\
    \ min = Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i\
    \ < min {\n            secondMin = min\n            min = i\n        } else if\
    \ i < secondMin {\n            secondMin = i\n        }\n    }\n    return secondMin\
    \ == Int.max ? nil : secondMin", "    var min = lst[0]\n    var nextMin = Int.max\n\
    \    for i in lst {\n        if i < min {\n            nextMin = min\n       \
    \     min = i\n        } else if i < nextMin {\n            nextMin = i\n    \
    \    }\n    }\n    return nextMin == Int.max ? nil : nextMin", "    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin", "    var min = Int.max\n    var nextMin = Int.max\n    for\
    \ i in lst {\n        if i < min {\n            nextMin = min\n            min\
    \ = i\n        } else if i < nextMin {\n            nextMin = i\n        }\n \
    \   }\n    return nextMin == Int.max ? nil : nextMin", "    var min = lst[0]\n\
    \    var nextMin = Int.max\n    for i in lst {\n        if i < min {\n       \
    \     nextMin = min\n            min = i\n        } else if i < nextMin {\n  \
    \          nextMin = i\n        }\n    }\n    return nextMin == Int.max ? nil\
    \ : nextMin", "    guard lst.count > 1 else { return nil }\n    var min = lst[0]\n\
    \    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] <\
    \ min {\n            secondMin = min\n            min = lst[i]\n        } else\
    \ if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n    }\n\
    \    return secondMin", "    var min = Int.max\n    var secondMin = Int.max\n\
    \    for i in lst {\n        if i < min {\n            secondMin = min\n     \
    \       min = i\n        } else if i < secondMin {\n            secondMin = i\n\
    \        }\n    }\n    return secondMin == Int.max ? nil : secondMin", "    var\
    \ min = lst[0]\n    var nextMin = Int.max\n    for i in lst {\n        if i <\
    \ min {\n            nextMin = min\n            min = i\n        } else if i <\
    \ nextMin {\n            nextMin = i\n        }\n    }\n    return nextMin ==\
    \ Int.max ? nil : nextMin", "    var sorted = lst.sorted()\n    if sorted.count\
    \ < 2 {\n        return nil\n    }\n    return sorted[1]", "    var min = lst[0]\n\
    \    var nextMin = Int.max\n    for i in 1..<lst.count {\n        if lst[i] <\
    \ min {\n            nextMin = min\n            min = lst[i]\n        } else if\
    \ lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return\
    \ nextMin == Int.max ? nil : nextMin", "    var min = Int.max\n    var min2 =\
    \ Int.max\n    for i in lst {\n        if i < min {\n            min2 = min\n\
    \            min = i\n        } else if i < min2 {\n            min2 = i\n   \
    \     }\n    }\n    return min2 == Int.max ? nil : min2", "    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var next = lst[1]\n    for\
    \ i in 1..<lst.count {\n        if lst[i] < min {\n            next = min\n  \
    \          min = lst[i]\n        } else if lst[i] < next {\n            next =\
    \ lst[i]\n        }\n    }\n    return next", "    var smallest = Int.max\n  \
    \  var secondSmallest = Int.max\n    for i in lst {\n        if i < smallest {\n\
    \            secondSmallest = smallest\n            smallest = i\n        } else\
    \ if i < secondSmallest {\n            secondSmallest = i\n        }\n    }\n\
    \    return secondSmallest == Int.max ? nil : secondSmallest", "    var smallest\
    \ = Int.max\n    var secondSmallest = Int.max\n    for i in lst {\n        if\
    \ i < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = i\n        } else if i < secondSmallest {\n            secondSmallest = i\n\
    \        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest",
  "    var min = lst[0]\n    var second = Int.max\n    for i in lst {\n        if\
    \ i < min {\n            second = min\n            min = i\n        } else if\
    \ i < second {\n            second = i\n        }\n    }\n    return second ==\
    \ Int.max ? nil : second", "    guard lst.count > 1 else { return nil }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    if min > secondMin {\n       \
    \ min = lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    var min = Int.max\n    var secondMin = Int.max\n\
    \    for i in lst {\n        if i < min {\n            secondMin = min\n     \
    \       min = i\n        } else if i < secondMin {\n            secondMin = i\n\
    \        }\n    }\n    return secondMin == Int.max ? nil : secondMin", "    var\
    \ sorted = lst.sorted()\n    if sorted.count > 1 {\n        return sorted[1]\n\
    \    }\n    return nil", "    guard lst.count > 1 else { return nil }\n    var\
    \ smallest = lst[0]\n    var nextSmallest = lst[1]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < smallest {\n            nextSmallest = smallest\n   \
    \         smallest = lst[i]\n        } else if lst[i] < nextSmallest {\n     \
    \       nextSmallest = lst[i]\n        }\n    }\n    return nextSmallest", " \
    \   let sorted = lst.sorted()\n    if sorted.count < 2 {\n        return nil\n\
    \    }\n    return sorted[1]", "    let sorted = lst.sorted()\n    guard sorted.count\
    \ > 1 else { return nil }\n    return sorted[1]", "    var smallest = Int.max\n\
    \    var secondSmallest = Int.max\n    for i in lst {\n        if i < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = i\n       \
    \ } else if i < secondSmallest {\n            secondSmallest = i\n        }\n\
    \    }\n    return secondSmallest == Int.max ? nil : secondSmallest", "    var\
    \ min = Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i\
    \ < min {\n            secondMin = min\n            min = i\n        } else if\
    \ i < secondMin {\n            secondMin = i\n        }\n    }\n    return secondMin\
    \ == Int.max ? nil : secondMin", "    var min = Int.max\n    var secondMin = Int.max\n\
    \    for i in lst {\n        if i < min {\n            secondMin = min\n     \
    \       min = i\n        } else if i < secondMin {\n            secondMin = i\n\
    \        }\n    }\n    return secondMin == Int.max ? nil : secondMin", "    if\
    \ lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var next_min\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < min {\n        \
    \    next_min = min\n            min = lst[i]\n        } else if lst[i] < next_min\
    \ {\n            next_min = lst[i]\n        }\n    }\n    return next_min", " \
    \   if lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[1]\n    if smallest > secondSmallest {\n       \
    \ swap(&smallest, &secondSmallest)\n    }\n    for i in 2..<lst.count {\n    \
    \    if lst[i] < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n         \
    \   secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest", " \
    \   var min = Int.max\n    var secondMin = Int.max\n    for i in lst {\n     \
    \   if i < min {\n            secondMin = min\n            min = i\n        }\
    \ else if i < secondMin {\n            secondMin = i\n        }\n    }\n    return\
    \ secondMin == Int.max ? nil : secondMin", "    var sorted = lst.sorted()\n  \
    \  if sorted.count < 2 {\n        return nil\n    }\n    return sorted[1]", " \
    \   var min = Int.max\n    var min2 = Int.max\n    for i in lst {\n        if\
    \ i < min {\n            min2 = min\n            min = i\n        } else if i\
    \ < min2 {\n            min2 = i\n        }\n    }\n    return min2 == Int.max\
    \ ? nil : min2", "    var min = Int.max\n    var nextMin = Int.max\n    for i\
    \ in lst {\n        if i < min {\n            nextMin = min\n            min =\
    \ i\n        } else if i < nextMin {\n            nextMin = i\n        }\n   \
    \ }\n    return nextMin == Int.max ? nil : nextMin", "    var min = lst[0]\n \
    \   var next = Int.max\n    for i in lst {\n        if i < min {\n           \
    \ next = min\n            min = i\n        } else if i < next {\n            next\
    \ = i\n        }\n    }\n    return next == Int.max ? nil : next", "    var min\
    \ = Int.max\n    var min2 = Int.max\n    for i in lst {\n        if i < min {\n\
    \            min2 = min\n            min = i\n        } else if i < min2 {\n \
    \           min2 = i\n        }\n    }\n    return min2 == Int.max ? nil : min2",
  "    guard lst.count > 1 else { return nil }\n    var smallest = lst[0]\n    var\
    \ secondSmallest = Int.max\n    for i in 1..<lst.count {\n        if lst[i] <\
    \ smallest {\n            secondSmallest = smallest\n            smallest = lst[i]\n\
    \        } else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n\
    \        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest",
  "    var smallest = Int.max\n    var secondSmallest = Int.max\n    for i in lst\
    \ {\n        if i < smallest {\n            secondSmallest = smallest\n      \
    \      smallest = i\n        } else if i < secondSmallest {\n            secondSmallest\
    \ = i\n        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest",
  "    var min = lst[0]\n    var nextMin = Int.max\n    for i in 1..<lst.count {\n\
    \        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin == Int.max ? nil : nextMin", "    var smallest = lst[0]\n\
    \    var secondSmallest = Int.max\n    for i in lst {\n        if i < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = i\n       \
    \ } else if i < secondSmallest {\n            secondSmallest = i\n        }\n\
    \    }\n    return secondSmallest == Int.max ? nil : secondSmallest", "    var\
    \ smallest = lst[0]\n    var secondSmallest = Int.max\n    for i in lst {\n  \
    \      if i < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = i\n        } else if i < secondSmallest {\n            secondSmallest = i\n\
    \        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest",
  "    var min = Int.max\n    var nextMin = Int.max\n    for num in lst {\n      \
    \  if num < min {\n            nextMin = min\n            min = num\n        }\
    \ else if num < nextMin {\n            nextMin = num\n        }\n    }\n    return\
    \ nextMin == Int.max ? nil : nextMin", "    var min = Int.max\n    var secondMin\
    \ = Int.max\n    for i in lst {\n        if i < min {\n            secondMin =\
    \ min\n            min = i\n        } else if i < secondMin {\n            secondMin\
    \ = i\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin", " \
    \   var min = lst[0]\n    var secondMin = Int.max\n    for i in lst {\n      \
    \  if i < min {\n            secondMin = min\n            min = i\n        } else\
    \ if i < secondMin {\n            secondMin = i\n        }\n    }\n    return\
    \ secondMin == Int.max ? nil : secondMin", "    var min = lst[0]\n    var min2\
    \ = lst[0]\n    for i in lst {\n        if i < min {\n            min2 = min\n\
    \            min = i\n        } else if i < min2 {\n            min2 = i\n   \
    \     }\n    }\n    return min2", "    var sorted = lst.sorted()\n    return sorted[1]",
  "    var min = Int.max\n    var secondMin = Int.max\n    for num in lst {\n    \
    \    if num < min {\n            secondMin = min\n            min = num\n    \
    \    } else if num < secondMin {\n            secondMin = num\n        }\n   \
    \ }\n    return secondMin == Int.max ? nil : secondMin", "    var min = lst[0]\n\
    \    var min2 = lst[0]\n    for i in lst {\n        if i < min {\n           \
    \ min2 = min\n            min = i\n        } else if i < min2 {\n            min2\
    \ = i\n        }\n    }\n    return min2", "    // your code here\n    return\
    \ nil", "    var min = Int.max\n    var min2 = Int.max\n    for i in lst {\n \
    \       if i < min {\n            min2 = min\n            min = i\n        } else\
    \ if i < min2 {\n            min2 = i\n        }\n    }\n    return min2 == Int.max\
    \ ? nil : min2", "    var min = Int.max\n    var secondMin = Int.max\n    for\
    \ i in lst {\n        if i < min {\n            secondMin = min\n            min\
    \ = i\n        } else if i < secondMin {\n            secondMin = i\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin", "    var sorted =\
    \ lst.sorted()\n    if sorted.count < 2 {\n        return nil\n    }\n    return\
    \ sorted[1]", "    var min = lst[0]\n    var min2 = lst[0]\n    for i in lst {\n\
    \        if i < min {\n            min2 = min\n            min = i\n        }\
    \ else if i < min2 {\n            min2 = i\n        }\n    }\n    return min2",
  "    var min = lst[0]\n    var secondMin = Int.max\n    for i in lst {\n       \
    \ if i < min {\n            secondMin = min\n            min = i\n        } else\
    \ if i < secondMin {\n            secondMin = i\n        }\n    }\n    return\
    \ secondMin == Int.max ? nil : secondMin", "    var smallest = Int.max\n    var\
    \ secondSmallest = Int.max\n    for i in lst {\n        if i < smallest {\n  \
    \          secondSmallest = smallest\n            smallest = i\n        } else\
    \ if i < secondSmallest {\n            secondSmallest = i\n        }\n    }\n\
    \    return secondSmallest == Int.max ? nil : secondSmallest", "    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n  \
    \  for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin", "    var min =\
    \ lst[0]\n    var next = Int.max\n    for i in lst {\n        if i < min {\n \
    \           next = min\n            min = i\n        } else if i < next {\n  \
    \          next = i\n        }\n    }\n    return next == Int.max ? nil : next",
  "    var min = Int.max\n    var secondMin = Int.max\n    for i in lst {\n      \
    \  if i < min {\n            secondMin = min\n            min = i\n        } else\
    \ if i < secondMin {\n            secondMin = i\n        }\n    }\n    return\
    \ secondMin == Int.max ? nil : secondMin", "    guard lst.count > 1 else { return\
    \ nil }\n    var min = lst[0]\n    var nextMin = Int.max\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin == Int.max ? nil : nextMin", "    var smallest = Int.max\n\
    \    var secondSmallest = Int.max\n    for i in lst {\n        if i < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = i\n       \
    \ } else if i < secondSmallest {\n            secondSmallest = i\n        }\n\
    \    }\n    return secondSmallest == Int.max ? nil : secondSmallest", "    if\
    \ lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[1]\n    for i in lst {\n        if i < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = i\n        } else\
    \ if i < secondSmallest {\n            secondSmallest = i\n        }\n    }\n\
    \    return secondSmallest", "    guard lst.count > 1 else { return nil }\n  \
    \  var min = lst[0]\n    var nextMin = lst[1]\n    for i in lst {\n        if\
    \ i < min {\n            nextMin = min\n            min = i\n        } else if\
    \ i < nextMin {\n            nextMin = i\n        }\n    }\n    return nextMin",
  "    var min = lst[0]\n    var next_min = lst[0]\n    for i in 1..<lst.count {\n\
    \        if lst[i] < min {\n            next_min = min\n            min = lst[i]\n\
    \        } else if lst[i] < next_min {\n            next_min = lst[i]\n      \
    \  }\n    }\n    return next_min", "    guard lst.count > 1 else { return nil\
    \ }\n    var smallest = lst[0]\n    var nextSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            nextSmallest = smallest\n   \
    \         smallest = lst[i]\n        } else if lst[i] < nextSmallest {\n     \
    \       nextSmallest = lst[i]\n        }\n    }\n    return nextSmallest", " \
    \   if lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var\
    \ nextMin = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < min {\n\
    \            nextMin = min\n            min = lst[i]\n        } else if lst[i]\
    \ < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return nextMin",
  "    var min = lst[0]\n    var min2 = Int.max\n    for i in lst {\n        if i\
    \ < min {\n            min2 = min\n            min = i\n        } else if i <\
    \ min2 {\n            min2 = i\n        }\n    }\n    return min2 == Int.max ?\
    \ nil : min2", "    var smallest = Int.max\n    var secondSmallest = Int.max\n\
    \    for num in lst {\n        if num < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = num\n        } else if num < secondSmallest\
    \ {\n            secondSmallest = num\n        }\n    }\n    return secondSmallest\
    \ == Int.max ? nil : secondSmallest", "    var min = Int.max\n    var secondMin\
    \ = Int.max\n    for i in lst {\n        if i < min {\n            secondMin =\
    \ min\n            min = i\n        } else if i < secondMin {\n            secondMin\
    \ = i\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin", " \
    \   guard lst.count > 1 else { return nil }\n    var min = lst[0]\n    var nextMin\
    \ = lst[1]\n    for i in 1..<lst.count {\n        if lst[i] < min {\n        \
    \    nextMin = min\n            min = lst[i]\n        } else if lst[i] < nextMin\
    \ {\n            nextMin = lst[i]\n        }\n    }\n    return nextMin", "  \
    \  // TODO: Write some code to solve this coding challenge\n    return nil", " \
    \   guard lst.count > 1 else { return nil }\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      } else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n\
    \        }\n    }\n    return secondSmallest", "    var min = lst[0]\n    var\
    \ nextMin = Int.max\n    for i in lst {\n        if i < min {\n            nextMin\
    \ = min\n            min = i\n        } else if i < nextMin {\n            nextMin\
    \ = i\n        }\n    }\n    return nextMin == Int.max ? nil : nextMin", "   \
    \ var min = lst[0]\n    var nextMin = Int.max\n    for i in lst {\n        if\
    \ i < min {\n            nextMin = min\n            min = i\n        } else if\
    \ i < nextMin {\n            nextMin = i\n        }\n    }\n    return nextMin\
    \ == Int.max ? nil : nextMin", "    var min = Int.max\n    var secondMin = Int.max\n\
    \    for i in lst {\n        if i < min {\n            secondMin = min\n     \
    \       min = i\n        } else if i < secondMin {\n            secondMin = i\n\
    \        }\n    }\n    return secondMin == Int.max ? nil : secondMin", "    var\
    \ min = Int.max\n    var min2 = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            min2 = min\n            min = i\n        } else if i < min2 {\n\
    \            min2 = i\n        }\n    }\n    return min2 == Int.max ? nil : min2",
  "    var min = lst[0]\n    var nextMin = Int.max\n    for i in lst {\n        if\
    \ i < min {\n            nextMin = min\n            min = i\n        } else if\
    \ i < nextMin {\n            nextMin = i\n        }\n    }\n    return nextMin\
    \ == Int.max ? nil : nextMin", "    guard lst.count > 1 else { return nil }\n\
    \    var smallest = lst[0]\n    var secondSmallest = Int.max\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\
    \ == Int.max ? nil : secondSmallest", "    var min1 = Int.max\n    var min2 =\
    \ Int.max\n    for i in lst {\n        if i < min1 {\n            min2 = min1\n\
    \            min1 = i\n        } else if i < min2 {\n            min2 = i\n  \
    \      }\n    }\n    return min2 == Int.max ? nil : min2", "    var min = lst[0]\n\
    \    var nextMin = Int.max\n    for i in 1..<lst.count {\n        if lst[i] <\
    \ min {\n            nextMin = min\n            min = lst[i]\n        } else if\
    \ lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return\
    \ nextMin == Int.max ? nil : nextMin", "    var min = lst[0]\n    var min2 = lst[0]\n\
    \    for i in lst {\n        if i < min {\n            min2 = min\n          \
    \  min = i\n        } else if i < min2 {\n            min2 = i\n        }\n  \
    \  }\n    return min2", "    var min = Int.max\n    var secondMin = Int.max\n\
    \    for i in lst {\n        if i < min {\n            secondMin = min\n     \
    \       min = i\n        } else if i < secondMin {\n            secondMin = i\n\
    \        }\n    }\n    return secondMin == Int.max ? nil : secondMin", "    var\
    \ min = Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i\
    \ < min {\n            secondMin = min\n            min = i\n        } else if\
    \ i < secondMin {\n            secondMin = i\n        }\n    }\n    return secondMin\
    \ == Int.max ? nil : secondMin", "    var min = Int.max\n    var min2 = Int.max\n\
    \    for i in lst {\n        if i < min {\n            min2 = min\n          \
    \  min = i\n        } else if i < min2 {\n            min2 = i\n        }\n  \
    \  }\n    return min2 == Int.max ? nil : min2", "    var min = lst[0]\n    var\
    \ min2 = min\n    for i in 1..<lst.count {\n        if lst[i] < min {\n      \
    \      min2 = min\n            min = lst[i]\n        } else if lst[i] < min2 {\n\
    \            min2 = lst[i]\n        }\n    }\n    return min2", "    let sorted\
    \ = lst.sorted()\n    return sorted.count > 1 ? sorted[1] : nil", "    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin", "    var\
    \ smallest = Int.max\n    var secondSmallest = Int.max\n    for i in lst {\n \
    \       if i < smallest {\n            secondSmallest = smallest\n           \
    \ smallest = i\n        } else if i < secondSmallest {\n            secondSmallest\
    \ = i\n        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest",
  "    var min = lst[0]\n    var min2 = Int.max\n    for i in lst {\n        if i\
    \ < min {\n            min2 = min\n            min = i\n        } else if i <\
    \ min2 {\n            min2 = i\n        }\n    }\n    return min2 == Int.max ?\
    \ nil : min2", "    guard lst.count > 1 else { return nil }\n    var min = lst[0]\n\
    \    var nextMin = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < min\
    \ {\n            nextMin = min\n            min = lst[i]\n        } else if lst[i]\
    \ < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return nextMin",
  "    var min = lst[0]\n    var nextMin = Int.max\n    for i in lst {\n        if\
    \ i < min {\n            nextMin = min\n            min = i\n        } else if\
    \ i < nextMin {\n            nextMin = i\n        }\n    }\n    return nextMin\
    \ == Int.max ? nil : nextMin", "    var min = Int.max\n    var secondMin = Int.max\n\
    \    for i in lst {\n        if i < min {\n            secondMin = min\n     \
    \       min = i\n        } else if i < secondMin {\n            secondMin = i\n\
    \        }\n    }\n    return secondMin == Int.max ? nil : secondMin", "    guard\
    \ lst.count > 1 else { return nil }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n   \
    \     }\n    }\n    return secondSmallest", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in lst\
    \ {\n        if i < min {\n            nextMin = min\n            min = i\n  \
    \      } else if i < nextMin {\n            nextMin = i\n        }\n    }\n  \
    \  return nextMin", "    var min = lst[0]\n    var next_min = lst[0]\n    for\
    \ i in 1..<lst.count {\n        if lst[i] < min {\n            next_min = min\n\
    \            min = lst[i]\n        } else if lst[i] < next_min {\n           \
    \ next_min = lst[i]\n        }\n    }\n    return next_min", "    var sorted =\
    \ lst.sorted()\n    if sorted.count < 2 {\n        return nil\n    }\n    return\
    \ sorted[1]", "    var min = lst[0]\n    var next_min = lst[0]\n    for i in lst\
    \ {\n        if i < min {\n            next_min = min\n            min = i\n \
    \       } else if i < next_min {\n            next_min = i\n        }\n    }\n\
    \    return next_min", "    var min = Int.max\n    var nextMin = Int.max\n   \
    \ for i in lst {\n        if i < min {\n            nextMin = min\n          \
    \  min = i\n        } else if i < nextMin {\n            nextMin = i\n       \
    \ }\n    }\n    return nextMin == Int.max ? nil : nextMin", "    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in lst {\n        if i\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ i\n        } else if i < secondSmallest {\n            secondSmallest = i\n\
    \        }\n    }\n    return secondSmallest", "    guard lst.count > 1 else {\
    \ return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    var min = Int.max\n    var secondMin = Int.max\n\
    \    for i in lst {\n        if i < min {\n            secondMin = min\n     \
    \       min = i\n        } else if i < secondMin {\n            secondMin = i\n\
    \        }\n    }\n    return secondMin == Int.max ? nil : secondMin", "    if\
    \ lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var secondMin\
    \ = lst[1]\n    for i in lst {\n        if i < min {\n            secondMin =\
    \ min\n            min = i\n        } else if i < secondMin {\n            secondMin\
    \ = i\n        }\n    }\n    return secondMin", "    let sorted = lst.sorted()\n\
    \    return sorted.count > 1 ? sorted[1] : nil", "    var min = lst[0]\n    var\
    \ next_min = lst[0]\n    for i in lst {\n        if i < min {\n            next_min\
    \ = min\n            min = i\n        } else if i < next_min {\n            next_min\
    \ = i\n        }\n    }\n    return next_min", "    var min = lst[0]\n    var\
    \ nextSmallest = Int.max\n    for i in lst {\n        if i < min {\n         \
    \   nextSmallest = min\n            min = i\n        } else if i < nextSmallest\
    \ {\n            nextSmallest = i\n        }\n    }\n    return nextSmallest ==\
    \ Int.max ? nil : nextSmallest", "    guard lst.count > 1 else { return nil }\n\
    \    var min = lst[0]\n    var nextMin = lst[1]\n    if min > nextMin {\n    \
    \    min = nextMin\n        nextMin = lst[0]\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    var min = Int.max\n    var secondMin = Int.max\n\
    \    for i in lst {\n        if i < min {\n            secondMin = min\n     \
    \       min = i\n        } else if i < secondMin {\n            secondMin = i\n\
    \        }\n    }\n    return secondMin == Int.max ? nil : secondMin", "    var\
    \ min = lst[0]\n    var secondMin = Int.max\n    for i in lst {\n        if i\
    \ < min {\n            secondMin = min\n            min = i\n        } else if\
    \ i < secondMin {\n            secondMin = i\n        }\n    }\n    return secondMin\
    \ == Int.max ? nil : secondMin", "    let sorted = lst.sorted()\n    return sorted.count\
    \ > 1 ? sorted[1] : nil", "    var min = lst[0]\n    var next = lst[0]\n    for\
    \ i in lst {\n        if i < min {\n            next = min\n            min =\
    \ i\n        } else if i < next {\n            next = i\n        }\n    }\n  \
    \  return next", "    var min = Int.max\n    var secondMin = Int.max\n    for\
    \ i in lst {\n        if i < min {\n            secondMin = min\n            min\
    \ = i\n        } else if i < secondMin {\n            secondMin = i\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin", "    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var min2 = lst[1]\n    for\
    \ i in 2..<lst.count {\n        if lst[i] < min {\n            min2 = min\n  \
    \          min = lst[i]\n        } else if lst[i] < min2 {\n            min2 =\
    \ lst[i]\n        }\n    }\n    return min2", "    var min = lst[0]\n    var nextMin\
    \ = lst[0]\n    for i in 1..<lst.count {\n        if lst[i] < min {\n        \
    \    nextMin = min\n            min = lst[i]\n        } else if lst[i] < nextMin\
    \ {\n            nextMin = lst[i]\n        }\n    }\n    return nextMin", "  \
    \  var smallest = Int.max\n    var secondSmallest = Int.max\n    for i in lst\
    \ {\n        if i < smallest {\n            secondSmallest = smallest\n      \
    \      smallest = i\n        } else if i < secondSmallest {\n            secondSmallest\
    \ = i\n        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest",
  "    var min = Int.max\n    var nextMin = Int.max\n    for i in lst {\n        if\
    \ i < min {\n            nextMin = min\n            min = i\n        } else if\
    \ i < nextMin {\n            nextMin = i\n        }\n    }\n    return nextMin\
    \ == Int.max ? nil : nextMin", "    guard lst.count > 1 else { return nil }\n\
    \    var min = lst[0]\n    var nextMin = lst[1]\n    for i in 1..<lst.count {\n\
    \        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    var min = lst[0]\n    var next_min = Int.max\n\
    \    for i in 1..<lst.count {\n        if lst[i] < min {\n            next_min\
    \ = min\n            min = lst[i]\n        } else if lst[i] < next_min {\n   \
    \         next_min = lst[i]\n        }\n    }\n    return next_min == Int.max\
    \ ? nil : next_min", "    var smallest = lst[0]\n    var second_smallest = Int.max\n\
    \    for i in lst {\n        if i < smallest {\n            second_smallest =\
    \ smallest\n            smallest = i\n        } else if i < second_smallest {\n\
    \            second_smallest = i\n        }\n    }\n    return second_smallest\
    \ == Int.max ? nil : second_smallest", "    var min = Int.max\n    var secondMin\
    \ = Int.max\n    for i in lst {\n        if i < min {\n            secondMin =\
    \ min\n            min = i\n        } else if i < secondMin {\n            secondMin\
    \ = i\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin", " \
    \   guard lst.count > 1 else { return nil }\n    var smallest = lst[0]\n    var\
    \ nextSmallest = lst[1]\n    for i in 1..<lst.count {\n        if lst[i] < smallest\
    \ {\n            nextSmallest = smallest\n            smallest = lst[i]\n    \
    \    } else if lst[i] < nextSmallest {\n            nextSmallest = lst[i]\n  \
    \      }\n    }\n    return nextSmallest", "    var smallest = lst[0]\n    var\
    \ second_smallest = lst[0]\n    for i in lst {\n        if i < smallest {\n  \
    \          second_smallest = smallest\n            smallest = i\n        } else\
    \ if i < second_smallest {\n            second_smallest = i\n        }\n    }\n\
    \    return second_smallest", "    var min = Int.max\n    var secondMin = Int.max\n\
    \    for i in lst {\n        if i < min {\n            secondMin = min\n     \
    \       min = i\n        } else if i < secondMin {\n            secondMin = i\n\
    \        }\n    }\n    return secondMin == Int.max ? nil : secondMin", "    if\
    \ lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var next_min\
    \ = lst[1]\n    for i in lst {\n        if i < min {\n            next_min = min\n\
    \            min = i\n        } else if i < next_min {\n            next_min =\
    \ i\n        }\n    }\n    return next_min", "    var min = Int.max\n    var second\
    \ = Int.max\n    for i in lst {\n        if i < min {\n            second = min\n\
    \            min = i\n        } else if i < second {\n            second = i\n\
    \        }\n    }\n    return second == Int.max ? nil : second", "    let sorted\
    \ = lst.sorted()\n    return sorted.count > 1 ? sorted[1] : nil", "    var min\
    \ = lst[0]\n    var nextMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            nextMin = min\n            min = i\n        } else if i < nextMin\
    \ {\n            nextMin = i\n        }\n    }\n    return nextMin == Int.max\
    \ ? nil : nextMin", "    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var nextSmallest = lst[1]\n    for i in lst {\n        if i <\
    \ smallest {\n            nextSmallest = smallest\n            smallest = i\n\
    \        } else if i < nextSmallest {\n            nextSmallest = i\n        }\n\
    \    }\n    return nextSmallest", "    let sorted = lst.sorted()\n    return sorted.count\
    \ > 1 ? sorted[1] : nil", "    var smallest = lst[0]\n    var secondSmallest =\
    \ lst[0]\n    for i in lst {\n        if i < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = i\n        } else if i < secondSmallest {\n\
    \            secondSmallest = i\n        }\n    }\n    return secondSmallest",
  "    var min = lst[0]\n    var nextMin = lst[0]\n    for i in lst {\n        if\
    \ i < min {\n            nextMin = min\n            min = i\n        } else if\
    \ i < nextMin {\n            nextMin = i\n        }\n    }\n    return nextMin",
  "    var min = Int.max\n    var secondMin = Int.max\n    for i in lst {\n      \
    \  if i < min {\n            secondMin = min\n            min = i\n        } else\
    \ if i < secondMin {\n            secondMin = i\n        }\n    }\n    return\
    \ secondMin == Int.max ? nil : secondMin", "    var min = Int.max\n    var secondMin\
    \ = Int.max\n    for i in lst {\n        if i < min {\n            secondMin =\
    \ min\n            min = i\n        } else if i < secondMin {\n            secondMin\
    \ = i\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin", " \
    \   var min = lst[0]\n    var nextMin = Int.max\n    for i in lst {\n        if\
    \ i < min {\n            nextMin = min\n            min = i\n        } else if\
    \ i < nextMin {\n            nextMin = i\n        }\n    }\n    return nextMin\
    \ == Int.max ? nil : nextMin", "    var smallest = Int.max\n    var secondSmallest\
    \ = Int.max\n    for i in lst {\n        if i < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = i\n        } else if i < secondSmallest {\n\
    \            secondSmallest = i\n        }\n    }\n    return secondSmallest ==\
    \ Int.max ? nil : secondSmallest", "    var min = lst[0]\n    var next = lst[0]\n\
    \    for i in lst {\n        if i < min {\n            next = min\n          \
    \  min = i\n        } else if i < next {\n            next = i\n        }\n  \
    \  }\n    return next", "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for i in lst {\n        if i < smallest {\n            secondSmallest = smallest\n\
    \            smallest = i\n        } else if i < secondSmallest {\n          \
    \  secondSmallest = i\n        }\n    }\n    return secondSmallest", "    var\
    \ min = lst[0]\n    var min2 = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            min2 = min\n            min = i\n        } else if i < min2 {\n\
    \            min2 = i\n        }\n    }\n    return min2 == Int.max ? nil : min2",
  "    if lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var nextSmallest = lst[1]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < smallest {\n            nextSmallest = smallest\n            smallest = lst[i]\n\
    \        } else if lst[i] < nextSmallest {\n            nextSmallest = lst[i]\n\
    \        }\n    }\n    return nextSmallest", "    guard lst.count > 1 else { return\
    \ nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    var min = Int.max\n    var min2 = Int.max\n\
    \    for i in lst {\n        if i < min {\n            min2 = min\n          \
    \  min = i\n        } else if i < min2 {\n            min2 = i\n        }\n  \
    \  }\n    return min2 == Int.max ? nil : min2", "    if lst.count < 2 {\n    \
    \    return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n\
    \    if smallest > secondSmallest {\n        (smallest, secondSmallest) = (secondSmallest,\
    \ smallest)\n    }\n    for i in 2..<lst.count {\n        if lst[i] < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      } else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n\
    \        }\n    }\n    return secondSmallest", "    var sorted = lst.sorted()\n\
    \    if sorted.count > 1 {\n        return sorted[1]\n    }\n    return nil",
  "    var min = Int.max\n    var secondMin = Int.max\n    for i in lst {\n      \
    \  if i < min {\n            secondMin = min\n            min = i\n        } else\
    \ if i < secondMin {\n            secondMin = i\n        }\n    }\n    return\
    \ secondMin == Int.max ? nil : secondMin", "    var min = Int.max\n    var nextMin\
    \ = Int.max\n    for i in lst {\n        if i < min {\n            nextMin = min\n\
    \            min = i\n        } else if i < nextMin {\n            nextMin = i\n\
    \        }\n    }\n    return nextMin == Int.max ? nil : nextMin", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var next_min = lst[1]\n\
    \    if min > next_min {\n        min = next_min\n        next_min = lst[0]\n\
    \    }\n    for i in 2..<lst.count {\n        if lst[i] < min {\n            next_min\
    \ = min\n            min = lst[i]\n        } else if lst[i] < next_min {\n   \
    \         next_min = lst[i]\n        }\n    }\n    return next_min", "    var\
    \ sorted = lst.sorted()\n    if sorted.count > 1 {\n        return sorted[1]\n\
    \    }\n    return nil", "    var min = lst[0]\n    var next_min = Int.max\n \
    \   for i in lst {\n        if i < min {\n            next_min = min\n       \
    \     min = i\n        } else if i < next_min {\n            next_min = i\n  \
    \      }\n    }\n    return next_min == Int.max ? nil : next_min", "    let sorted\
    \ = lst.sorted()\n    return sorted.count > 1 ? sorted[1] : nil", "    var min\
    \ = Int.max\n    var nextMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            nextMin = min\n            min = i\n        } else if i < nextMin\
    \ {\n            nextMin = i\n        }\n    }\n    return nextMin == Int.max\
    \ ? nil : nextMin", "    let sorted = lst.sorted()\n    return sorted.count >\
    \ 1 ? sorted[1] : nil", "    var min = lst[0]\n    var next = Int.max\n    for\
    \ i in lst {\n        if i < min {\n            next = min\n            min =\
    \ i\n        } else if i < next {\n            next = i\n        }\n    }\n  \
    \  return next == Int.max ? nil : next", "    var min = lst[0]\n    var min2 =\
    \ Int.max\n    for i in lst {\n        if i < min {\n            min2 = min\n\
    \            min = i\n        } else if i < min2 {\n            min2 = i\n   \
    \     }\n    }\n    return min2 == Int.max ? nil : min2", "    var min = lst[0]\n\
    \    var next_min = lst[0]\n    for i in lst {\n        if i < min {\n       \
    \     next_min = min\n            min = i\n        } else if i < next_min {\n\
    \            next_min = i\n        }\n    }\n    return next_min", "    var min\
    \ = Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin", "    var min = lst[0]\n    var nextMin = Int.max\n    for\
    \ i in lst {\n        if i < min {\n            nextMin = min\n            min\
    \ = i\n        } else if i < nextMin {\n            nextMin = i\n        }\n \
    \   }\n    return nextMin == Int.max ? nil : nextMin", "    guard lst.count >\
    \ 1 else { return nil }\n    var min = lst[0]\n    var next_min = lst[1]\n   \
    \ for i in 2..<lst.count {\n        if lst[i] < min {\n            next_min =\
    \ min\n            min = lst[i]\n        } else if lst[i] < next_min {\n     \
    \       next_min = lst[i]\n        }\n    }\n    return next_min", "    var min\
    \ = lst[0]\n    var next_min = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            next_min = min\n            min = i\n        } else if i < next_min\
    \ {\n            next_min = i\n        }\n    }\n    return next_min == Int.max\
    \ ? nil : next_min", "    guard lst.count > 1 else { return nil }\n    var min\
    \ = lst[0]\n    var nextMin = lst[1]\n    for i in lst {\n        if i < min {\n\
    \            nextMin = min\n            min = i\n        } else if i < nextMin\
    \ {\n            nextMin = i\n        }\n    }\n    return nextMin", "    guard\
    \ lst.count > 1 else { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < min {\n            nextMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n    \
    \        nextMin = lst[i]\n        }\n    }\n    return nextMin", "    var min\
    \ = Int.max\n    var min2 = Int.max\n    for i in lst {\n        if i < min {\n\
    \            min2 = min\n            min = i\n        } else if i < min2 {\n \
    \           min2 = i\n        }\n    }\n    return min2 == Int.max ? nil : min2",
  "    var min = Int.max\n    var secondMin = Int.max\n    for i in lst {\n      \
    \  if i < min {\n            secondMin = min\n            min = i\n        } else\
    \ if i < secondMin {\n            secondMin = i\n        }\n    }\n    return\
    \ secondMin == Int.max ? nil : secondMin"]
stop_tokens:
- "\n}"
